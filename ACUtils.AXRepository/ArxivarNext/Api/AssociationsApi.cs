/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAssociationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns></returns>
        void AssociationsDelete (int? id);

        /// <summary>
        /// This call deletes an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociationsDeleteWithHttpInfo (int? id);
        /// <summary>
        /// This calls returns all ARXivar associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        List<AssociationDTO> AssociationsGet ();

        /// <summary>
        /// This calls returns all ARXivar associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        ApiResponse<List<AssociationDTO>> AssociationsGetWithHttpInfo ();
        /// <summary>
        /// This call returns all associations by a document identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        List<AssociationDTO> AssociationsGetByDocNumber (int? docnumber);

        /// <summary>
        /// This call returns all associations by a document identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        ApiResponse<List<AssociationDTO>> AssociationsGetByDocNumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the profile data contained in the association
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/v2/Associations/items/{id}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Columns settings for the result</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> AssociationsGetById (SelectDTO body, int? id);

        /// <summary>
        /// This call returns the profile data contained in the association
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/v2/Associations/items/{id}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Columns settings for the result</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> AssociationsGetByIdWithHttpInfo (SelectDTO body, int? id);
        /// <summary>
        /// This call returns the profile data contained in the association
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/v2/Associations/items/{id}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="maxItems"></param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        List<RowSearchResult> AssociationsGetById (List<FieldBaseForSelectDTO> fields, int? maxItems, int? id);

        /// <summary>
        /// This call returns the profile data contained in the association
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/v2/Associations/items/{id}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="maxItems"></param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        ApiResponse<List<RowSearchResult>> AssociationsGetByIdWithHttpInfo (List<FieldBaseForSelectDTO> fields, int? maxItems, int? id);
        /// <summary>
        /// This call adds profiles in a new association with auto generated name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        List<AssociationDTO> AssociationsInsertNew (List<int?> body);

        /// <summary>
        /// This call adds profiles in a new association with auto generated name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        ApiResponse<List<AssociationDTO>> AssociationsInsertNewWithHttpInfo (List<int?> body);
        /// <summary>
        /// This call adds profiles in an association by association Identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        List<AssociationDTO> AssociationsInsertWithId (List<int?> body, int? id);

        /// <summary>
        /// This call adds profiles in an association by association Identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        ApiResponse<List<AssociationDTO>> AssociationsInsertWithIdWithHttpInfo (List<int?> body, int? id);
        /// <summary>
        /// This call adds profiles to an existing association by association name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        List<AssociationDTO> AssociationsInsertWithName (Object body);

        /// <summary>
        /// This call adds profiles to an existing association by association name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        ApiResponse<List<AssociationDTO>> AssociationsInsertWithNameWithHttpInfo (Object body);
        /// <summary>
        /// This call removes a profile from association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns></returns>
        void AssociationsRemove (int? id, int? docnumber);

        /// <summary>
        /// This call removes a profile from association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociationsRemoveWithHttpInfo (int? id, int? docnumber);
        /// <summary>
        /// This call renames an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 1 property: associationName (new association name)</param>
        /// <param name="id">Identifier of the association to rename</param>
        /// <returns></returns>
        void AssociationsRename (Object body, int? id);

        /// <summary>
        /// This call renames an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 1 property: associationName (new association name)</param>
        /// <param name="id">Identifier of the association to rename</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociationsRenameWithHttpInfo (Object body, int? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociationsDeleteAsync (int? id);

        /// <summary>
        /// This call deletes an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This calls returns all ARXivar associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsGetAsync ();

        /// <summary>
        /// This calls returns all ARXivar associations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all associations by a document identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsGetByDocNumberAsync (int? docnumber);

        /// <summary>
        /// This call returns all associations by a document identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsGetByDocNumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the profile data contained in the association
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/v2/Associations/items/{id}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Columns settings for the result</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> AssociationsGetByIdAsync (SelectDTO body, int? id);

        /// <summary>
        /// This call returns the profile data contained in the association
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/v2/Associations/items/{id}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Columns settings for the result</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> AssociationsGetByIdAsyncWithHttpInfo (SelectDTO body, int? id);
        /// <summary>
        /// This call returns the profile data contained in the association
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/v2/Associations/items/{id}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="maxItems"></param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<RowSearchResult>> AssociationsGetByIdAsync (List<FieldBaseForSelectDTO> fields, int? maxItems, int? id);

        /// <summary>
        /// This call returns the profile data contained in the association
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/v2/Associations/items/{id}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="maxItems"></param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> AssociationsGetByIdAsyncWithHttpInfo (List<FieldBaseForSelectDTO> fields, int? maxItems, int? id);
        /// <summary>
        /// This call adds profiles in a new association with auto generated name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsInsertNewAsync (List<int?> body);

        /// <summary>
        /// This call adds profiles in a new association with auto generated name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsInsertNewAsyncWithHttpInfo (List<int?> body);
        /// <summary>
        /// This call adds profiles in an association by association Identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsInsertWithIdAsync (List<int?> body, int? id);

        /// <summary>
        /// This call adds profiles in an association by association Identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsInsertWithIdAsyncWithHttpInfo (List<int?> body, int? id);
        /// <summary>
        /// This call adds profiles to an existing association by association name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsInsertWithNameAsync (Object body);

        /// <summary>
        /// This call adds profiles to an existing association by association name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsInsertWithNameAsyncWithHttpInfo (Object body);
        /// <summary>
        /// This call removes a profile from association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociationsRemoveAsync (int? id, int? docnumber);

        /// <summary>
        /// This call removes a profile from association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsRemoveAsyncWithHttpInfo (int? id, int? docnumber);
        /// <summary>
        /// This call renames an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 1 property: associationName (new association name)</param>
        /// <param name="id">Identifier of the association to rename</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociationsRenameAsync (Object body, int? id);

        /// <summary>
        /// This call renames an existing association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 1 property: associationName (new association name)</param>
        /// <param name="id">Identifier of the association to rename</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsRenameAsyncWithHttpInfo (Object body, int? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AssociationsApi : IAssociationsApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssociationsApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssociationsApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssociationsApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes an existing association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns></returns>
        public void AssociationsDelete (int? id)
        {
             AssociationsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes an existing association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociationsDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsDelete");

            var localVarPath = "/api/Associations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes an existing association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociationsDeleteAsync (int? id)
        {
             await AssociationsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes an existing association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsDelete");

            var localVarPath = "/api/Associations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This calls returns all ARXivar associations 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        public List<AssociationDTO> AssociationsGet ()
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = AssociationsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This calls returns all ARXivar associations 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        public ApiResponse< List<AssociationDTO> > AssociationsGetWithHttpInfo ()
        {

            var localVarPath = "/api/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This calls returns all ARXivar associations 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsGetAsync ()
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = await AssociationsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This calls returns all ARXivar associations 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call returns all associations by a document identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        public List<AssociationDTO> AssociationsGetByDocNumber (int? docnumber)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = AssociationsGetByDocNumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all associations by a document identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        public ApiResponse< List<AssociationDTO> > AssociationsGetByDocNumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AssociationsApi->AssociationsGetByDocNumber");

            var localVarPath = "/api/Associations/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsGetByDocNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call returns all associations by a document identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsGetByDocNumberAsync (int? docnumber)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = await AssociationsGetByDocNumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all associations by a document identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsGetByDocNumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AssociationsApi->AssociationsGetByDocNumber");

            var localVarPath = "/api/Associations/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsGetByDocNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call returns the profile data contained in the association This method is deprecated. Use api/v2/Associations/items/{id}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Columns settings for the result</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> AssociationsGetById (SelectDTO body, int? id)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = AssociationsGetByIdWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the profile data contained in the association This method is deprecated. Use api/v2/Associations/items/{id}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Columns settings for the result</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > AssociationsGetByIdWithHttpInfo (SelectDTO body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssociationsApi->AssociationsGetById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsGetById");

            var localVarPath = "/api/Associations/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RowSearchResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call returns the profile data contained in the association This method is deprecated. Use api/v2/Associations/items/{id}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Columns settings for the result</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> AssociationsGetByIdAsync (SelectDTO body, int? id)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await AssociationsGetByIdAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the profile data contained in the association This method is deprecated. Use api/v2/Associations/items/{id}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Columns settings for the result</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> AssociationsGetByIdAsyncWithHttpInfo (SelectDTO body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssociationsApi->AssociationsGetById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsGetById");

            var localVarPath = "/api/Associations/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RowSearchResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call returns the profile data contained in the association This method is deprecated. Use api/v2/Associations/items/{id}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="maxItems"></param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>List&lt;RowSearchResult&gt;</returns>
        public List<RowSearchResult> AssociationsGetById (List<FieldBaseForSelectDTO> fields, int? maxItems, int? id)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = AssociationsGetByIdWithHttpInfo(fields, maxItems, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the profile data contained in the association This method is deprecated. Use api/v2/Associations/items/{id}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="maxItems"></param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>ApiResponse of List&lt;RowSearchResult&gt;</returns>
        public ApiResponse< List<RowSearchResult> > AssociationsGetByIdWithHttpInfo (List<FieldBaseForSelectDTO> fields, int? maxItems, int? id)
        {
            // verify the required parameter 'fields' is set
            if (fields == null)
                throw new ApiException(400, "Missing required parameter 'fields' when calling AssociationsApi->AssociationsGetById");
            // verify the required parameter 'maxItems' is set
            if (maxItems == null)
                throw new ApiException(400, "Missing required parameter 'maxItems' when calling AssociationsApi->AssociationsGetById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsGetById");

            var localVarPath = "/api/Associations/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarFormParams.Add("fields", this.Configuration.ApiClient.ParameterToString(fields)); // form parameter
            if (maxItems != null) localVarFormParams.Add("maxItems", this.Configuration.ApiClient.ParameterToString(maxItems)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RowSearchResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call returns the profile data contained in the association This method is deprecated. Use api/v2/Associations/items/{id}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="maxItems"></param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of List&lt;RowSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<RowSearchResult>> AssociationsGetByIdAsync (List<FieldBaseForSelectDTO> fields, int? maxItems, int? id)
        {
             ApiResponse<List<RowSearchResult>> localVarResponse = await AssociationsGetByIdAsyncWithHttpInfo(fields, maxItems, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the profile data contained in the association This method is deprecated. Use api/v2/Associations/items/{id}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="maxItems"></param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of ApiResponse (List&lt;RowSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RowSearchResult>>> AssociationsGetByIdAsyncWithHttpInfo (List<FieldBaseForSelectDTO> fields, int? maxItems, int? id)
        {
            // verify the required parameter 'fields' is set
            if (fields == null)
                throw new ApiException(400, "Missing required parameter 'fields' when calling AssociationsApi->AssociationsGetById");
            // verify the required parameter 'maxItems' is set
            if (maxItems == null)
                throw new ApiException(400, "Missing required parameter 'maxItems' when calling AssociationsApi->AssociationsGetById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsGetById");

            var localVarPath = "/api/Associations/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarFormParams.Add("fields", this.Configuration.ApiClient.ParameterToString(fields)); // form parameter
            if (maxItems != null) localVarFormParams.Add("maxItems", this.Configuration.ApiClient.ParameterToString(maxItems)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RowSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RowSearchResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RowSearchResult>)));
        }

        /// <summary>
        /// This call adds profiles in a new association with auto generated name 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        public List<AssociationDTO> AssociationsInsertNew (List<int?> body)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = AssociationsInsertNewWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds profiles in a new association with auto generated name 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        public ApiResponse< List<AssociationDTO> > AssociationsInsertNewWithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssociationsApi->AssociationsInsertNew");

            var localVarPath = "/api/Associations/insert/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsInsertNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call adds profiles in a new association with auto generated name 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsInsertNewAsync (List<int?> body)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = await AssociationsInsertNewAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds profiles in a new association with auto generated name 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsInsertNewAsyncWithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssociationsApi->AssociationsInsertNew");

            var localVarPath = "/api/Associations/insert/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsInsertNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call adds profiles in an association by association Identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        public List<AssociationDTO> AssociationsInsertWithId (List<int?> body, int? id)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = AssociationsInsertWithIdWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds profiles in an association by association Identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        public ApiResponse< List<AssociationDTO> > AssociationsInsertWithIdWithHttpInfo (List<int?> body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssociationsApi->AssociationsInsertWithId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsInsertWithId");

            var localVarPath = "/api/Associations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsInsertWithId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call adds profiles in an association by association Identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsInsertWithIdAsync (List<int?> body, int? id)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = await AssociationsInsertWithIdAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds profiles in an association by association Identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifiers of the profiles to add</param>
        /// <param name="id">Identifier of the association</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsInsertWithIdAsyncWithHttpInfo (List<int?> body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssociationsApi->AssociationsInsertWithId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsInsertWithId");

            var localVarPath = "/api/Associations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsInsertWithId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call adds profiles to an existing association by association name 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>List&lt;AssociationDTO&gt;</returns>
        public List<AssociationDTO> AssociationsInsertWithName (Object body)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = AssociationsInsertWithNameWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds profiles to an existing association by association name 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>ApiResponse of List&lt;AssociationDTO&gt;</returns>
        public ApiResponse< List<AssociationDTO> > AssociationsInsertWithNameWithHttpInfo (Object body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssociationsApi->AssociationsInsertWithName");

            var localVarPath = "/api/Associations/insertWithName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsInsertWithName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call adds profiles to an existing association by association name 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>Task of List&lt;AssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssociationDTO>> AssociationsInsertWithNameAsync (Object body)
        {
             ApiResponse<List<AssociationDTO>> localVarResponse = await AssociationsInsertWithNameAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds profiles to an existing association by association name 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 2 properties: docnumbers (array of ints) and associationName (new association name)</param>
        /// <returns>Task of ApiResponse (List&lt;AssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssociationDTO>>> AssociationsInsertWithNameAsyncWithHttpInfo (Object body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssociationsApi->AssociationsInsertWithName");

            var localVarPath = "/api/Associations/insertWithName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsInsertWithName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssociationDTO>)));
        }

        /// <summary>
        /// This call removes a profile from association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns></returns>
        public void AssociationsRemove (int? id, int? docnumber)
        {
             AssociationsRemoveWithHttpInfo(id, docnumber);
        }

        /// <summary>
        /// This call removes a profile from association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociationsRemoveWithHttpInfo (int? id, int? docnumber)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsRemove");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AssociationsApi->AssociationsRemove");

            var localVarPath = "/api/Associations/{id}/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsRemove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call removes a profile from association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociationsRemoveAsync (int? id, int? docnumber)
        {
             await AssociationsRemoveAsyncWithHttpInfo(id, docnumber);

        }

        /// <summary>
        /// This call removes a profile from association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the association</param>
        /// <param name="docnumber">Identifier of the profile to remove</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsRemoveAsyncWithHttpInfo (int? id, int? docnumber)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsRemove");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AssociationsApi->AssociationsRemove");

            var localVarPath = "/api/Associations/{id}/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsRemove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call renames an existing association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 1 property: associationName (new association name)</param>
        /// <param name="id">Identifier of the association to rename</param>
        /// <returns></returns>
        public void AssociationsRename (Object body, int? id)
        {
             AssociationsRenameWithHttpInfo(body, id);
        }

        /// <summary>
        /// This call renames an existing association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 1 property: associationName (new association name)</param>
        /// <param name="id">Identifier of the association to rename</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociationsRenameWithHttpInfo (Object body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssociationsApi->AssociationsRename");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsRename");

            var localVarPath = "/api/Associations/rename/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsRename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call renames an existing association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 1 property: associationName (new association name)</param>
        /// <param name="id">Identifier of the association to rename</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociationsRenameAsync (Object body, int? id)
        {
             await AssociationsRenameAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// This call renames an existing association 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON object with 1 property: associationName (new association name)</param>
        /// <param name="id">Identifier of the association to rename</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociationsRenameAsyncWithHttpInfo (Object body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssociationsApi->AssociationsRename");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationsApi->AssociationsRename");

            var localVarPath = "/api/Associations/rename/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociationsRename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
