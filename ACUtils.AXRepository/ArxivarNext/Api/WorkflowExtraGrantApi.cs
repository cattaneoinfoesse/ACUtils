/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IWorkflowExtraGrantApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes extragrants by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Extra event identifier</param>
        /// <returns></returns>
        void WorkflowExtraGrantDeleteById (int? id);

        /// <summary>
        /// This call deletes extragrants by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Extra event identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkflowExtraGrantDeleteByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call returns all workflow configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId"></param>
        /// <returns>List&lt;WorkflowExtraGrantDTO&gt;</returns>
        List<WorkflowExtraGrantDTO> WorkflowExtraGrantGetByDiagramId (Guid? diagramId);

        /// <summary>
        /// This call returns all workflow configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId"></param>
        /// <returns>ApiResponse of List&lt;WorkflowExtraGrantDTO&gt;</returns>
        ApiResponse<List<WorkflowExtraGrantDTO>> WorkflowExtraGrantGetByDiagramIdWithHttpInfo (Guid? diagramId);
        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>WorkflowExtraGrantDTO</returns>
        WorkflowExtraGrantDTO WorkflowExtraGrantInsert (WorkflowExtraGrantDTO body);

        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>ApiResponse of WorkflowExtraGrantDTO</returns>
        ApiResponse<WorkflowExtraGrantDTO> WorkflowExtraGrantInsertWithHttpInfo (WorkflowExtraGrantDTO body);
        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>WorkflowExtraGrantDTO</returns>
        WorkflowExtraGrantDTO WorkflowExtraGrantInsert (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId);

        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>ApiResponse of WorkflowExtraGrantDTO</returns>
        ApiResponse<WorkflowExtraGrantDTO> WorkflowExtraGrantInsertWithHttpInfo (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId);
        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>WorkflowExtraGrantDTO</returns>
        WorkflowExtraGrantDTO WorkflowExtraGrantUpdate (WorkflowExtraGrantDTO body);

        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>ApiResponse of WorkflowExtraGrantDTO</returns>
        ApiResponse<WorkflowExtraGrantDTO> WorkflowExtraGrantUpdateWithHttpInfo (WorkflowExtraGrantDTO body);
        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>WorkflowExtraGrantDTO</returns>
        WorkflowExtraGrantDTO WorkflowExtraGrantUpdate (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId);

        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>ApiResponse of WorkflowExtraGrantDTO</returns>
        ApiResponse<WorkflowExtraGrantDTO> WorkflowExtraGrantUpdateWithHttpInfo (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes extragrants by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Extra event identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkflowExtraGrantDeleteByIdAsync (int? id);

        /// <summary>
        /// This call deletes extragrants by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Extra event identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowExtraGrantDeleteByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns all workflow configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId"></param>
        /// <returns>Task of List&lt;WorkflowExtraGrantDTO&gt;</returns>
        System.Threading.Tasks.Task<List<WorkflowExtraGrantDTO>> WorkflowExtraGrantGetByDiagramIdAsync (Guid? diagramId);

        /// <summary>
        /// This call returns all workflow configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId"></param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowExtraGrantDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkflowExtraGrantDTO>>> WorkflowExtraGrantGetByDiagramIdAsyncWithHttpInfo (Guid? diagramId);
        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>Task of WorkflowExtraGrantDTO</returns>
        System.Threading.Tasks.Task<WorkflowExtraGrantDTO> WorkflowExtraGrantInsertAsync (WorkflowExtraGrantDTO body);

        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>Task of ApiResponse (WorkflowExtraGrantDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowExtraGrantDTO>> WorkflowExtraGrantInsertAsyncWithHttpInfo (WorkflowExtraGrantDTO body);
        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>Task of WorkflowExtraGrantDTO</returns>
        System.Threading.Tasks.Task<WorkflowExtraGrantDTO> WorkflowExtraGrantInsertAsync (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId);

        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>Task of ApiResponse (WorkflowExtraGrantDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowExtraGrantDTO>> WorkflowExtraGrantInsertAsyncWithHttpInfo (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId);
        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>Task of WorkflowExtraGrantDTO</returns>
        System.Threading.Tasks.Task<WorkflowExtraGrantDTO> WorkflowExtraGrantUpdateAsync (WorkflowExtraGrantDTO body);

        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>Task of ApiResponse (WorkflowExtraGrantDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowExtraGrantDTO>> WorkflowExtraGrantUpdateAsyncWithHttpInfo (WorkflowExtraGrantDTO body);
        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>Task of WorkflowExtraGrantDTO</returns>
        System.Threading.Tasks.Task<WorkflowExtraGrantDTO> WorkflowExtraGrantUpdateAsync (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId);

        /// <summary>
        /// This call updates extra grant model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>Task of ApiResponse (WorkflowExtraGrantDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowExtraGrantDTO>> WorkflowExtraGrantUpdateAsyncWithHttpInfo (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class WorkflowExtraGrantApi : IWorkflowExtraGrantApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowExtraGrantApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowExtraGrantApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowExtraGrantApi"/> class
        /// </summary>
        /// <returns></returns>
        public WorkflowExtraGrantApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowExtraGrantApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowExtraGrantApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes extragrants by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Extra event identifier</param>
        /// <returns></returns>
        public void WorkflowExtraGrantDeleteById (int? id)
        {
             WorkflowExtraGrantDeleteByIdWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes extragrants by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Extra event identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkflowExtraGrantDeleteByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkflowExtraGrantApi->WorkflowExtraGrantDeleteById");

            var localVarPath = "/api/WorkflowExtraGrant/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes extragrants by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Extra event identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkflowExtraGrantDeleteByIdAsync (int? id)
        {
             await WorkflowExtraGrantDeleteByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes extragrants by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Extra event identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowExtraGrantDeleteByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkflowExtraGrantApi->WorkflowExtraGrantDeleteById");

            var localVarPath = "/api/WorkflowExtraGrant/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns all workflow configured 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId"></param>
        /// <returns>List&lt;WorkflowExtraGrantDTO&gt;</returns>
        public List<WorkflowExtraGrantDTO> WorkflowExtraGrantGetByDiagramId (Guid? diagramId)
        {
             ApiResponse<List<WorkflowExtraGrantDTO>> localVarResponse = WorkflowExtraGrantGetByDiagramIdWithHttpInfo(diagramId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all workflow configured 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId"></param>
        /// <returns>ApiResponse of List&lt;WorkflowExtraGrantDTO&gt;</returns>
        public ApiResponse< List<WorkflowExtraGrantDTO> > WorkflowExtraGrantGetByDiagramIdWithHttpInfo (Guid? diagramId)
        {
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantGetByDiagramId");

            var localVarPath = "/api/WorkflowExtraGrant/diagram/{diagramId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (diagramId != null) localVarPathParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantGetByDiagramId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowExtraGrantDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<WorkflowExtraGrantDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowExtraGrantDTO>)));
        }

        /// <summary>
        /// This call returns all workflow configured 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId"></param>
        /// <returns>Task of List&lt;WorkflowExtraGrantDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkflowExtraGrantDTO>> WorkflowExtraGrantGetByDiagramIdAsync (Guid? diagramId)
        {
             ApiResponse<List<WorkflowExtraGrantDTO>> localVarResponse = await WorkflowExtraGrantGetByDiagramIdAsyncWithHttpInfo(diagramId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all workflow configured 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diagramId"></param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowExtraGrantDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkflowExtraGrantDTO>>> WorkflowExtraGrantGetByDiagramIdAsyncWithHttpInfo (Guid? diagramId)
        {
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantGetByDiagramId");

            var localVarPath = "/api/WorkflowExtraGrant/diagram/{diagramId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (diagramId != null) localVarPathParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantGetByDiagramId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowExtraGrantDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<WorkflowExtraGrantDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowExtraGrantDTO>)));
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>WorkflowExtraGrantDTO</returns>
        public WorkflowExtraGrantDTO WorkflowExtraGrantInsert (WorkflowExtraGrantDTO body)
        {
             ApiResponse<WorkflowExtraGrantDTO> localVarResponse = WorkflowExtraGrantInsertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>ApiResponse of WorkflowExtraGrantDTO</returns>
        public ApiResponse< WorkflowExtraGrantDTO > WorkflowExtraGrantInsertWithHttpInfo (WorkflowExtraGrantDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");

            var localVarPath = "/api/WorkflowExtraGrant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowExtraGrantDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowExtraGrantDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowExtraGrantDTO)));
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>Task of WorkflowExtraGrantDTO</returns>
        public async System.Threading.Tasks.Task<WorkflowExtraGrantDTO> WorkflowExtraGrantInsertAsync (WorkflowExtraGrantDTO body)
        {
             ApiResponse<WorkflowExtraGrantDTO> localVarResponse = await WorkflowExtraGrantInsertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>Task of ApiResponse (WorkflowExtraGrantDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowExtraGrantDTO>> WorkflowExtraGrantInsertAsyncWithHttpInfo (WorkflowExtraGrantDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");

            var localVarPath = "/api/WorkflowExtraGrant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowExtraGrantDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowExtraGrantDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowExtraGrantDTO)));
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>WorkflowExtraGrantDTO</returns>
        public WorkflowExtraGrantDTO WorkflowExtraGrantInsert (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId)
        {
             ApiResponse<WorkflowExtraGrantDTO> localVarResponse = WorkflowExtraGrantInsertWithHttpInfo(id, workflowVersion, workflowId, diagramId, userId, softwareName, licenseModuleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>ApiResponse of WorkflowExtraGrantDTO</returns>
        public ApiResponse< WorkflowExtraGrantDTO > WorkflowExtraGrantInsertWithHttpInfo (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'workflowVersion' is set
            if (workflowVersion == null)
                throw new ApiException(400, "Missing required parameter 'workflowVersion' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'softwareName' is set
            if (softwareName == null)
                throw new ApiException(400, "Missing required parameter 'softwareName' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'licenseModuleId' is set
            if (licenseModuleId == null)
                throw new ApiException(400, "Missing required parameter 'licenseModuleId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");

            var localVarPath = "/api/WorkflowExtraGrant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (workflowVersion != null) localVarFormParams.Add("workflowVersion", this.Configuration.ApiClient.ParameterToString(workflowVersion)); // form parameter
            if (workflowId != null) localVarFormParams.Add("workflowId", this.Configuration.ApiClient.ParameterToString(workflowId)); // form parameter
            if (diagramId != null) localVarFormParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (softwareName != null) localVarFormParams.Add("softwareName", this.Configuration.ApiClient.ParameterToString(softwareName)); // form parameter
            if (licenseModuleId != null) localVarFormParams.Add("licenseModuleId", this.Configuration.ApiClient.ParameterToString(licenseModuleId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowExtraGrantDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowExtraGrantDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowExtraGrantDTO)));
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>Task of WorkflowExtraGrantDTO</returns>
        public async System.Threading.Tasks.Task<WorkflowExtraGrantDTO> WorkflowExtraGrantInsertAsync (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId)
        {
             ApiResponse<WorkflowExtraGrantDTO> localVarResponse = await WorkflowExtraGrantInsertAsyncWithHttpInfo(id, workflowVersion, workflowId, diagramId, userId, softwareName, licenseModuleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>Task of ApiResponse (WorkflowExtraGrantDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowExtraGrantDTO>> WorkflowExtraGrantInsertAsyncWithHttpInfo (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'workflowVersion' is set
            if (workflowVersion == null)
                throw new ApiException(400, "Missing required parameter 'workflowVersion' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'softwareName' is set
            if (softwareName == null)
                throw new ApiException(400, "Missing required parameter 'softwareName' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");
            // verify the required parameter 'licenseModuleId' is set
            if (licenseModuleId == null)
                throw new ApiException(400, "Missing required parameter 'licenseModuleId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantInsert");

            var localVarPath = "/api/WorkflowExtraGrant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (workflowVersion != null) localVarFormParams.Add("workflowVersion", this.Configuration.ApiClient.ParameterToString(workflowVersion)); // form parameter
            if (workflowId != null) localVarFormParams.Add("workflowId", this.Configuration.ApiClient.ParameterToString(workflowId)); // form parameter
            if (diagramId != null) localVarFormParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (softwareName != null) localVarFormParams.Add("softwareName", this.Configuration.ApiClient.ParameterToString(softwareName)); // form parameter
            if (licenseModuleId != null) localVarFormParams.Add("licenseModuleId", this.Configuration.ApiClient.ParameterToString(licenseModuleId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowExtraGrantDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowExtraGrantDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowExtraGrantDTO)));
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>WorkflowExtraGrantDTO</returns>
        public WorkflowExtraGrantDTO WorkflowExtraGrantUpdate (WorkflowExtraGrantDTO body)
        {
             ApiResponse<WorkflowExtraGrantDTO> localVarResponse = WorkflowExtraGrantUpdateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>ApiResponse of WorkflowExtraGrantDTO</returns>
        public ApiResponse< WorkflowExtraGrantDTO > WorkflowExtraGrantUpdateWithHttpInfo (WorkflowExtraGrantDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");

            var localVarPath = "/api/WorkflowExtraGrant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowExtraGrantDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowExtraGrantDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowExtraGrantDTO)));
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>Task of WorkflowExtraGrantDTO</returns>
        public async System.Threading.Tasks.Task<WorkflowExtraGrantDTO> WorkflowExtraGrantUpdateAsync (WorkflowExtraGrantDTO body)
        {
             ApiResponse<WorkflowExtraGrantDTO> localVarResponse = await WorkflowExtraGrantUpdateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Extra grant model</param>
        /// <returns>Task of ApiResponse (WorkflowExtraGrantDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowExtraGrantDTO>> WorkflowExtraGrantUpdateAsyncWithHttpInfo (WorkflowExtraGrantDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");

            var localVarPath = "/api/WorkflowExtraGrant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowExtraGrantDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowExtraGrantDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowExtraGrantDTO)));
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>WorkflowExtraGrantDTO</returns>
        public WorkflowExtraGrantDTO WorkflowExtraGrantUpdate (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId)
        {
             ApiResponse<WorkflowExtraGrantDTO> localVarResponse = WorkflowExtraGrantUpdateWithHttpInfo(id, workflowVersion, workflowId, diagramId, userId, softwareName, licenseModuleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>ApiResponse of WorkflowExtraGrantDTO</returns>
        public ApiResponse< WorkflowExtraGrantDTO > WorkflowExtraGrantUpdateWithHttpInfo (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'workflowVersion' is set
            if (workflowVersion == null)
                throw new ApiException(400, "Missing required parameter 'workflowVersion' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'softwareName' is set
            if (softwareName == null)
                throw new ApiException(400, "Missing required parameter 'softwareName' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'licenseModuleId' is set
            if (licenseModuleId == null)
                throw new ApiException(400, "Missing required parameter 'licenseModuleId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");

            var localVarPath = "/api/WorkflowExtraGrant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (workflowVersion != null) localVarFormParams.Add("workflowVersion", this.Configuration.ApiClient.ParameterToString(workflowVersion)); // form parameter
            if (workflowId != null) localVarFormParams.Add("workflowId", this.Configuration.ApiClient.ParameterToString(workflowId)); // form parameter
            if (diagramId != null) localVarFormParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (softwareName != null) localVarFormParams.Add("softwareName", this.Configuration.ApiClient.ParameterToString(softwareName)); // form parameter
            if (licenseModuleId != null) localVarFormParams.Add("licenseModuleId", this.Configuration.ApiClient.ParameterToString(licenseModuleId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowExtraGrantDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowExtraGrantDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowExtraGrantDTO)));
        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>Task of WorkflowExtraGrantDTO</returns>
        public async System.Threading.Tasks.Task<WorkflowExtraGrantDTO> WorkflowExtraGrantUpdateAsync (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId)
        {
             ApiResponse<WorkflowExtraGrantDTO> localVarResponse = await WorkflowExtraGrantUpdateAsyncWithHttpInfo(id, workflowVersion, workflowId, diagramId, userId, softwareName, licenseModuleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates extra grant model 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="workflowVersion"></param>
        /// <param name="workflowId"></param>
        /// <param name="diagramId"></param>
        /// <param name="userId"></param>
        /// <param name="softwareName"></param>
        /// <param name="licenseModuleId"></param>
        /// <returns>Task of ApiResponse (WorkflowExtraGrantDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowExtraGrantDTO>> WorkflowExtraGrantUpdateAsyncWithHttpInfo (int? id, int? workflowVersion, int? workflowId, string diagramId, int? userId, string softwareName, int? licenseModuleId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'workflowVersion' is set
            if (workflowVersion == null)
                throw new ApiException(400, "Missing required parameter 'workflowVersion' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'diagramId' is set
            if (diagramId == null)
                throw new ApiException(400, "Missing required parameter 'diagramId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'softwareName' is set
            if (softwareName == null)
                throw new ApiException(400, "Missing required parameter 'softwareName' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");
            // verify the required parameter 'licenseModuleId' is set
            if (licenseModuleId == null)
                throw new ApiException(400, "Missing required parameter 'licenseModuleId' when calling WorkflowExtraGrantApi->WorkflowExtraGrantUpdate");

            var localVarPath = "/api/WorkflowExtraGrant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (workflowVersion != null) localVarFormParams.Add("workflowVersion", this.Configuration.ApiClient.ParameterToString(workflowVersion)); // form parameter
            if (workflowId != null) localVarFormParams.Add("workflowId", this.Configuration.ApiClient.ParameterToString(workflowId)); // form parameter
            if (diagramId != null) localVarFormParams.Add("diagramId", this.Configuration.ApiClient.ParameterToString(diagramId)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (softwareName != null) localVarFormParams.Add("softwareName", this.Configuration.ApiClient.ParameterToString(softwareName)); // form parameter
            if (licenseModuleId != null) localVarFormParams.Add("licenseModuleId", this.Configuration.ApiClient.ParameterToString(licenseModuleId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowExtraGrantUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowExtraGrantDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowExtraGrantDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowExtraGrantDTO)));
        }

    }
}
