/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITaskLayoutApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes a task layout by the id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <returns></returns>
        void TaskLayoutDeleteTaskLayout (int? tasklayoutid);

        /// <summary>
        /// This call deletes a task layout by the id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskLayoutDeleteTaskLayoutWithHttpInfo (int? tasklayoutid);
        /// <summary>
        /// This call returns the task layout by the task layout id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task Layout Identifier</param>
        /// <returns>TaskLayoutDTO</returns>
        TaskLayoutDTO TaskLayoutGetTaskLayoutById (int? tasklayoutid);

        /// <summary>
        /// This call returns the task layout by the task layout id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task Layout Identifier</param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        ApiResponse<TaskLayoutDTO> TaskLayoutGetTaskLayoutByIdWithHttpInfo (int? tasklayoutid);
        /// <summary>
        /// This call returns the task layout by the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork Identifier</param>
        /// <returns>TaskLayoutDTO</returns>
        TaskLayoutDTO TaskLayoutGetTaskLayoutByTaskWorkId (int? taskWorkId);

        /// <summary>
        /// This call returns the task layout by the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork Identifier</param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        ApiResponse<TaskLayoutDTO> TaskLayoutGetTaskLayoutByTaskWorkIdWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call returns the task layout for user default if exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaskLayoutDTO</returns>
        TaskLayoutDTO TaskLayoutGetTaskLayoutForUser ();

        /// <summary>
        /// This call returns the task layout for user default if exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        ApiResponse<TaskLayoutDTO> TaskLayoutGetTaskLayoutForUserWithHttpInfo ();
        /// <summary>
        /// This call returns all task layouts configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TaskLayoutDTO&gt;</returns>
        List<TaskLayoutDTO> TaskLayoutGetTaskLayouts ();

        /// <summary>
        /// This call returns all task layouts configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TaskLayoutDTO&gt;</returns>
        ApiResponse<List<TaskLayoutDTO>> TaskLayoutGetTaskLayoutsWithHttpInfo ();
        /// <summary>
        /// This call inserts a new task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to insert</param>
        /// <returns>TaskLayoutDTO</returns>
        TaskLayoutDTO TaskLayoutNewTaskLayout (TaskLayoutDTO body);

        /// <summary>
        /// This call inserts a new task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to insert</param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        ApiResponse<TaskLayoutDTO> TaskLayoutNewTaskLayoutWithHttpInfo (TaskLayoutDTO body);
        /// <summary>
        /// This call inserts a new task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>TaskLayoutDTO</returns>
        TaskLayoutDTO TaskLayoutNewTaskLayout (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);

        /// <summary>
        /// This call inserts a new task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        ApiResponse<TaskLayoutDTO> TaskLayoutNewTaskLayoutWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);
        /// <summary>
        /// This call updates a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to edit</param>
        /// <returns>TaskLayoutDTO</returns>
        TaskLayoutDTO TaskLayoutUpdateTaskLayout (TaskLayoutDTO body);

        /// <summary>
        /// This call updates a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to edit</param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        ApiResponse<TaskLayoutDTO> TaskLayoutUpdateTaskLayoutWithHttpInfo (TaskLayoutDTO body);
        /// <summary>
        /// This call updates a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>TaskLayoutDTO</returns>
        TaskLayoutDTO TaskLayoutUpdateTaskLayout (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);

        /// <summary>
        /// This call updates a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        ApiResponse<TaskLayoutDTO> TaskLayoutUpdateTaskLayoutWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);
        /// <summary>
        /// This call updates the priority of a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <param name="priority">Priority to set</param>
        /// <returns></returns>
        void TaskLayoutUpdateTaskLayoutPriority (int? tasklayoutid, int? priority);

        /// <summary>
        /// This call updates the priority of a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <param name="priority">Priority to set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskLayoutUpdateTaskLayoutPriorityWithHttpInfo (int? tasklayoutid, int? priority);
        /// <summary>
        /// This call inserts or updates personal task layout for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to write</param>
        /// <returns>TaskLayoutDTO</returns>
        TaskLayoutDTO TaskLayoutWriteTaskLayoutForUser (TaskLayoutDTO body);

        /// <summary>
        /// This call inserts or updates personal task layout for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to write</param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        ApiResponse<TaskLayoutDTO> TaskLayoutWriteTaskLayoutForUserWithHttpInfo (TaskLayoutDTO body);
        /// <summary>
        /// This call inserts or updates personal task layout for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>TaskLayoutDTO</returns>
        TaskLayoutDTO TaskLayoutWriteTaskLayoutForUser (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);

        /// <summary>
        /// This call inserts or updates personal task layout for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        ApiResponse<TaskLayoutDTO> TaskLayoutWriteTaskLayoutForUserWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes a task layout by the id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskLayoutDeleteTaskLayoutAsync (int? tasklayoutid);

        /// <summary>
        /// This call deletes a task layout by the id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskLayoutDeleteTaskLayoutAsyncWithHttpInfo (int? tasklayoutid);
        /// <summary>
        /// This call returns the task layout by the task layout id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task Layout Identifier</param>
        /// <returns>Task of TaskLayoutDTO</returns>
        System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutGetTaskLayoutByIdAsync (int? tasklayoutid);

        /// <summary>
        /// This call returns the task layout by the task layout id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task Layout Identifier</param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutGetTaskLayoutByIdAsyncWithHttpInfo (int? tasklayoutid);
        /// <summary>
        /// This call returns the task layout by the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork Identifier</param>
        /// <returns>Task of TaskLayoutDTO</returns>
        System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutGetTaskLayoutByTaskWorkIdAsync (int? taskWorkId);

        /// <summary>
        /// This call returns the task layout by the taskwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork Identifier</param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutGetTaskLayoutByTaskWorkIdAsyncWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// This call returns the task layout for user default if exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TaskLayoutDTO</returns>
        System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutGetTaskLayoutForUserAsync ();

        /// <summary>
        /// This call returns the task layout for user default if exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutGetTaskLayoutForUserAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all task layouts configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TaskLayoutDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TaskLayoutDTO>> TaskLayoutGetTaskLayoutsAsync ();

        /// <summary>
        /// This call returns all task layouts configured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TaskLayoutDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskLayoutDTO>>> TaskLayoutGetTaskLayoutsAsyncWithHttpInfo ();
        /// <summary>
        /// This call inserts a new task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to insert</param>
        /// <returns>Task of TaskLayoutDTO</returns>
        System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutNewTaskLayoutAsync (TaskLayoutDTO body);

        /// <summary>
        /// This call inserts a new task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to insert</param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutNewTaskLayoutAsyncWithHttpInfo (TaskLayoutDTO body);
        /// <summary>
        /// This call inserts a new task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of TaskLayoutDTO</returns>
        System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutNewTaskLayoutAsync (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);

        /// <summary>
        /// This call inserts a new task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutNewTaskLayoutAsyncWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);
        /// <summary>
        /// This call updates a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to edit</param>
        /// <returns>Task of TaskLayoutDTO</returns>
        System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutUpdateTaskLayoutAsync (TaskLayoutDTO body);

        /// <summary>
        /// This call updates a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to edit</param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutUpdateTaskLayoutAsyncWithHttpInfo (TaskLayoutDTO body);
        /// <summary>
        /// This call updates a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of TaskLayoutDTO</returns>
        System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutUpdateTaskLayoutAsync (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);

        /// <summary>
        /// This call updates a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutUpdateTaskLayoutAsyncWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);
        /// <summary>
        /// This call updates the priority of a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <param name="priority">Priority to set</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskLayoutUpdateTaskLayoutPriorityAsync (int? tasklayoutid, int? priority);

        /// <summary>
        /// This call updates the priority of a task layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <param name="priority">Priority to set</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskLayoutUpdateTaskLayoutPriorityAsyncWithHttpInfo (int? tasklayoutid, int? priority);
        /// <summary>
        /// This call inserts or updates personal task layout for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to write</param>
        /// <returns>Task of TaskLayoutDTO</returns>
        System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutWriteTaskLayoutForUserAsync (TaskLayoutDTO body);

        /// <summary>
        /// This call inserts or updates personal task layout for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to write</param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutWriteTaskLayoutForUserAsyncWithHttpInfo (TaskLayoutDTO body);
        /// <summary>
        /// This call inserts or updates personal task layout for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of TaskLayoutDTO</returns>
        System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutWriteTaskLayoutForUserAsync (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);

        /// <summary>
        /// This call inserts or updates personal task layout for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutWriteTaskLayoutForUserAsyncWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TaskLayoutApi : ITaskLayoutApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskLayoutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskLayoutApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskLayoutApi"/> class
        /// </summary>
        /// <returns></returns>
        public TaskLayoutApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskLayoutApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskLayoutApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes a task layout by the id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <returns></returns>
        public void TaskLayoutDeleteTaskLayout (int? tasklayoutid)
        {
             TaskLayoutDeleteTaskLayoutWithHttpInfo(tasklayoutid);
        }

        /// <summary>
        /// This call deletes a task layout by the id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskLayoutDeleteTaskLayoutWithHttpInfo (int? tasklayoutid)
        {
            // verify the required parameter 'tasklayoutid' is set
            if (tasklayoutid == null)
                throw new ApiException(400, "Missing required parameter 'tasklayoutid' when calling TaskLayoutApi->TaskLayoutDeleteTaskLayout");

            var localVarPath = "/api/TaskLayout/{tasklayoutid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tasklayoutid != null) localVarPathParams.Add("tasklayoutid", this.Configuration.ApiClient.ParameterToString(tasklayoutid)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutDeleteTaskLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a task layout by the id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskLayoutDeleteTaskLayoutAsync (int? tasklayoutid)
        {
             await TaskLayoutDeleteTaskLayoutAsyncWithHttpInfo(tasklayoutid);

        }

        /// <summary>
        /// This call deletes a task layout by the id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskLayoutDeleteTaskLayoutAsyncWithHttpInfo (int? tasklayoutid)
        {
            // verify the required parameter 'tasklayoutid' is set
            if (tasklayoutid == null)
                throw new ApiException(400, "Missing required parameter 'tasklayoutid' when calling TaskLayoutApi->TaskLayoutDeleteTaskLayout");

            var localVarPath = "/api/TaskLayout/{tasklayoutid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tasklayoutid != null) localVarPathParams.Add("tasklayoutid", this.Configuration.ApiClient.ParameterToString(tasklayoutid)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutDeleteTaskLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns the task layout by the task layout id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task Layout Identifier</param>
        /// <returns>TaskLayoutDTO</returns>
        public TaskLayoutDTO TaskLayoutGetTaskLayoutById (int? tasklayoutid)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = TaskLayoutGetTaskLayoutByIdWithHttpInfo(tasklayoutid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the task layout by the task layout id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task Layout Identifier</param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        public ApiResponse< TaskLayoutDTO > TaskLayoutGetTaskLayoutByIdWithHttpInfo (int? tasklayoutid)
        {
            // verify the required parameter 'tasklayoutid' is set
            if (tasklayoutid == null)
                throw new ApiException(400, "Missing required parameter 'tasklayoutid' when calling TaskLayoutApi->TaskLayoutGetTaskLayoutById");

            var localVarPath = "/api/TaskLayout/{tasklayoutid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tasklayoutid != null) localVarPathParams.Add("tasklayoutid", this.Configuration.ApiClient.ParameterToString(tasklayoutid)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutGetTaskLayoutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call returns the task layout by the task layout id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task Layout Identifier</param>
        /// <returns>Task of TaskLayoutDTO</returns>
        public async System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutGetTaskLayoutByIdAsync (int? tasklayoutid)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = await TaskLayoutGetTaskLayoutByIdAsyncWithHttpInfo(tasklayoutid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the task layout by the task layout id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task Layout Identifier</param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutGetTaskLayoutByIdAsyncWithHttpInfo (int? tasklayoutid)
        {
            // verify the required parameter 'tasklayoutid' is set
            if (tasklayoutid == null)
                throw new ApiException(400, "Missing required parameter 'tasklayoutid' when calling TaskLayoutApi->TaskLayoutGetTaskLayoutById");

            var localVarPath = "/api/TaskLayout/{tasklayoutid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tasklayoutid != null) localVarPathParams.Add("tasklayoutid", this.Configuration.ApiClient.ParameterToString(tasklayoutid)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutGetTaskLayoutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call returns the task layout by the taskwork 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork Identifier</param>
        /// <returns>TaskLayoutDTO</returns>
        public TaskLayoutDTO TaskLayoutGetTaskLayoutByTaskWorkId (int? taskWorkId)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = TaskLayoutGetTaskLayoutByTaskWorkIdWithHttpInfo(taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the task layout by the taskwork 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork Identifier</param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        public ApiResponse< TaskLayoutDTO > TaskLayoutGetTaskLayoutByTaskWorkIdWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskLayoutApi->TaskLayoutGetTaskLayoutByTaskWorkId");

            var localVarPath = "/api/TaskLayout/taskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutGetTaskLayoutByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call returns the task layout by the taskwork 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork Identifier</param>
        /// <returns>Task of TaskLayoutDTO</returns>
        public async System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutGetTaskLayoutByTaskWorkIdAsync (int? taskWorkId)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = await TaskLayoutGetTaskLayoutByTaskWorkIdAsyncWithHttpInfo(taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the task layout by the taskwork 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork Identifier</param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutGetTaskLayoutByTaskWorkIdAsyncWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskLayoutApi->TaskLayoutGetTaskLayoutByTaskWorkId");

            var localVarPath = "/api/TaskLayout/taskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutGetTaskLayoutByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call returns the task layout for user default if exist 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaskLayoutDTO</returns>
        public TaskLayoutDTO TaskLayoutGetTaskLayoutForUser ()
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = TaskLayoutGetTaskLayoutForUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the task layout for user default if exist 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        public ApiResponse< TaskLayoutDTO > TaskLayoutGetTaskLayoutForUserWithHttpInfo ()
        {

            var localVarPath = "/api/TaskLayout/foruser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutGetTaskLayoutForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call returns the task layout for user default if exist 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TaskLayoutDTO</returns>
        public async System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutGetTaskLayoutForUserAsync ()
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = await TaskLayoutGetTaskLayoutForUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the task layout for user default if exist 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutGetTaskLayoutForUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/TaskLayout/foruser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutGetTaskLayoutForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call returns all task layouts configured 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TaskLayoutDTO&gt;</returns>
        public List<TaskLayoutDTO> TaskLayoutGetTaskLayouts ()
        {
             ApiResponse<List<TaskLayoutDTO>> localVarResponse = TaskLayoutGetTaskLayoutsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all task layouts configured 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TaskLayoutDTO&gt;</returns>
        public ApiResponse< List<TaskLayoutDTO> > TaskLayoutGetTaskLayoutsWithHttpInfo ()
        {

            var localVarPath = "/api/TaskLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutGetTaskLayouts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskLayoutDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaskLayoutDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskLayoutDTO>)));
        }

        /// <summary>
        /// This call returns all task layouts configured 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TaskLayoutDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskLayoutDTO>> TaskLayoutGetTaskLayoutsAsync ()
        {
             ApiResponse<List<TaskLayoutDTO>> localVarResponse = await TaskLayoutGetTaskLayoutsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all task layouts configured 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TaskLayoutDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskLayoutDTO>>> TaskLayoutGetTaskLayoutsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/TaskLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutGetTaskLayouts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskLayoutDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaskLayoutDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskLayoutDTO>)));
        }

        /// <summary>
        /// This call inserts a new task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to insert</param>
        /// <returns>TaskLayoutDTO</returns>
        public TaskLayoutDTO TaskLayoutNewTaskLayout (TaskLayoutDTO body)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = TaskLayoutNewTaskLayoutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to insert</param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        public ApiResponse< TaskLayoutDTO > TaskLayoutNewTaskLayoutWithHttpInfo (TaskLayoutDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");

            var localVarPath = "/api/TaskLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutNewTaskLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call inserts a new task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to insert</param>
        /// <returns>Task of TaskLayoutDTO</returns>
        public async System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutNewTaskLayoutAsync (TaskLayoutDTO body)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = await TaskLayoutNewTaskLayoutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to insert</param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutNewTaskLayoutAsyncWithHttpInfo (TaskLayoutDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");

            var localVarPath = "/api/TaskLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutNewTaskLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call inserts a new task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>TaskLayoutDTO</returns>
        public TaskLayoutDTO TaskLayoutNewTaskLayout (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = TaskLayoutNewTaskLayoutWithHttpInfo(id, name, author, authorCompleteName, creationDate, details, associations, users, isSystem, priority, idLayout, isUser);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        public ApiResponse< TaskLayoutDTO > TaskLayoutNewTaskLayoutWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'author' is set
            if (author == null)
                throw new ApiException(400, "Missing required parameter 'author' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'authorCompleteName' is set
            if (authorCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'authorCompleteName' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'associations' is set
            if (associations == null)
                throw new ApiException(400, "Missing required parameter 'associations' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'isSystem' is set
            if (isSystem == null)
                throw new ApiException(400, "Missing required parameter 'isSystem' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'idLayout' is set
            if (idLayout == null)
                throw new ApiException(400, "Missing required parameter 'idLayout' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'isUser' is set
            if (isUser == null)
                throw new ApiException(400, "Missing required parameter 'isUser' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");

            var localVarPath = "/api/TaskLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (author != null) localVarFormParams.Add("author", this.Configuration.ApiClient.ParameterToString(author)); // form parameter
            if (authorCompleteName != null) localVarFormParams.Add("authorCompleteName", this.Configuration.ApiClient.ParameterToString(authorCompleteName)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter
            if (associations != null) localVarFormParams.Add("associations", this.Configuration.ApiClient.ParameterToString(associations)); // form parameter
            if (users != null) localVarFormParams.Add("users", this.Configuration.ApiClient.ParameterToString(users)); // form parameter
            if (isSystem != null) localVarFormParams.Add("isSystem", this.Configuration.ApiClient.ParameterToString(isSystem)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (idLayout != null) localVarFormParams.Add("idLayout", this.Configuration.ApiClient.ParameterToString(idLayout)); // form parameter
            if (isUser != null) localVarFormParams.Add("isUser", this.Configuration.ApiClient.ParameterToString(isUser)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutNewTaskLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call inserts a new task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of TaskLayoutDTO</returns>
        public async System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutNewTaskLayoutAsync (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = await TaskLayoutNewTaskLayoutAsyncWithHttpInfo(id, name, author, authorCompleteName, creationDate, details, associations, users, isSystem, priority, idLayout, isUser);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutNewTaskLayoutAsyncWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'author' is set
            if (author == null)
                throw new ApiException(400, "Missing required parameter 'author' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'authorCompleteName' is set
            if (authorCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'authorCompleteName' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'associations' is set
            if (associations == null)
                throw new ApiException(400, "Missing required parameter 'associations' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'isSystem' is set
            if (isSystem == null)
                throw new ApiException(400, "Missing required parameter 'isSystem' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'idLayout' is set
            if (idLayout == null)
                throw new ApiException(400, "Missing required parameter 'idLayout' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");
            // verify the required parameter 'isUser' is set
            if (isUser == null)
                throw new ApiException(400, "Missing required parameter 'isUser' when calling TaskLayoutApi->TaskLayoutNewTaskLayout");

            var localVarPath = "/api/TaskLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (author != null) localVarFormParams.Add("author", this.Configuration.ApiClient.ParameterToString(author)); // form parameter
            if (authorCompleteName != null) localVarFormParams.Add("authorCompleteName", this.Configuration.ApiClient.ParameterToString(authorCompleteName)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter
            if (associations != null) localVarFormParams.Add("associations", this.Configuration.ApiClient.ParameterToString(associations)); // form parameter
            if (users != null) localVarFormParams.Add("users", this.Configuration.ApiClient.ParameterToString(users)); // form parameter
            if (isSystem != null) localVarFormParams.Add("isSystem", this.Configuration.ApiClient.ParameterToString(isSystem)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (idLayout != null) localVarFormParams.Add("idLayout", this.Configuration.ApiClient.ParameterToString(idLayout)); // form parameter
            if (isUser != null) localVarFormParams.Add("isUser", this.Configuration.ApiClient.ParameterToString(isUser)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutNewTaskLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call updates a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to edit</param>
        /// <returns>TaskLayoutDTO</returns>
        public TaskLayoutDTO TaskLayoutUpdateTaskLayout (TaskLayoutDTO body)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = TaskLayoutUpdateTaskLayoutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to edit</param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        public ApiResponse< TaskLayoutDTO > TaskLayoutUpdateTaskLayoutWithHttpInfo (TaskLayoutDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");

            var localVarPath = "/api/TaskLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutUpdateTaskLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call updates a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to edit</param>
        /// <returns>Task of TaskLayoutDTO</returns>
        public async System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutUpdateTaskLayoutAsync (TaskLayoutDTO body)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = await TaskLayoutUpdateTaskLayoutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to edit</param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutUpdateTaskLayoutAsyncWithHttpInfo (TaskLayoutDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");

            var localVarPath = "/api/TaskLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutUpdateTaskLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call updates a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>TaskLayoutDTO</returns>
        public TaskLayoutDTO TaskLayoutUpdateTaskLayout (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = TaskLayoutUpdateTaskLayoutWithHttpInfo(id, name, author, authorCompleteName, creationDate, details, associations, users, isSystem, priority, idLayout, isUser);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        public ApiResponse< TaskLayoutDTO > TaskLayoutUpdateTaskLayoutWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'author' is set
            if (author == null)
                throw new ApiException(400, "Missing required parameter 'author' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'authorCompleteName' is set
            if (authorCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'authorCompleteName' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'associations' is set
            if (associations == null)
                throw new ApiException(400, "Missing required parameter 'associations' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'isSystem' is set
            if (isSystem == null)
                throw new ApiException(400, "Missing required parameter 'isSystem' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'idLayout' is set
            if (idLayout == null)
                throw new ApiException(400, "Missing required parameter 'idLayout' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'isUser' is set
            if (isUser == null)
                throw new ApiException(400, "Missing required parameter 'isUser' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");

            var localVarPath = "/api/TaskLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (author != null) localVarFormParams.Add("author", this.Configuration.ApiClient.ParameterToString(author)); // form parameter
            if (authorCompleteName != null) localVarFormParams.Add("authorCompleteName", this.Configuration.ApiClient.ParameterToString(authorCompleteName)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter
            if (associations != null) localVarFormParams.Add("associations", this.Configuration.ApiClient.ParameterToString(associations)); // form parameter
            if (users != null) localVarFormParams.Add("users", this.Configuration.ApiClient.ParameterToString(users)); // form parameter
            if (isSystem != null) localVarFormParams.Add("isSystem", this.Configuration.ApiClient.ParameterToString(isSystem)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (idLayout != null) localVarFormParams.Add("idLayout", this.Configuration.ApiClient.ParameterToString(idLayout)); // form parameter
            if (isUser != null) localVarFormParams.Add("isUser", this.Configuration.ApiClient.ParameterToString(isUser)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutUpdateTaskLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call updates a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of TaskLayoutDTO</returns>
        public async System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutUpdateTaskLayoutAsync (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = await TaskLayoutUpdateTaskLayoutAsyncWithHttpInfo(id, name, author, authorCompleteName, creationDate, details, associations, users, isSystem, priority, idLayout, isUser);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutUpdateTaskLayoutAsyncWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'author' is set
            if (author == null)
                throw new ApiException(400, "Missing required parameter 'author' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'authorCompleteName' is set
            if (authorCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'authorCompleteName' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'associations' is set
            if (associations == null)
                throw new ApiException(400, "Missing required parameter 'associations' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'isSystem' is set
            if (isSystem == null)
                throw new ApiException(400, "Missing required parameter 'isSystem' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'idLayout' is set
            if (idLayout == null)
                throw new ApiException(400, "Missing required parameter 'idLayout' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");
            // verify the required parameter 'isUser' is set
            if (isUser == null)
                throw new ApiException(400, "Missing required parameter 'isUser' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayout");

            var localVarPath = "/api/TaskLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (author != null) localVarFormParams.Add("author", this.Configuration.ApiClient.ParameterToString(author)); // form parameter
            if (authorCompleteName != null) localVarFormParams.Add("authorCompleteName", this.Configuration.ApiClient.ParameterToString(authorCompleteName)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter
            if (associations != null) localVarFormParams.Add("associations", this.Configuration.ApiClient.ParameterToString(associations)); // form parameter
            if (users != null) localVarFormParams.Add("users", this.Configuration.ApiClient.ParameterToString(users)); // form parameter
            if (isSystem != null) localVarFormParams.Add("isSystem", this.Configuration.ApiClient.ParameterToString(isSystem)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (idLayout != null) localVarFormParams.Add("idLayout", this.Configuration.ApiClient.ParameterToString(idLayout)); // form parameter
            if (isUser != null) localVarFormParams.Add("isUser", this.Configuration.ApiClient.ParameterToString(isUser)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutUpdateTaskLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call updates the priority of a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <param name="priority">Priority to set</param>
        /// <returns></returns>
        public void TaskLayoutUpdateTaskLayoutPriority (int? tasklayoutid, int? priority)
        {
             TaskLayoutUpdateTaskLayoutPriorityWithHttpInfo(tasklayoutid, priority);
        }

        /// <summary>
        /// This call updates the priority of a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <param name="priority">Priority to set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskLayoutUpdateTaskLayoutPriorityWithHttpInfo (int? tasklayoutid, int? priority)
        {
            // verify the required parameter 'tasklayoutid' is set
            if (tasklayoutid == null)
                throw new ApiException(400, "Missing required parameter 'tasklayoutid' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayoutPriority");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayoutPriority");

            var localVarPath = "/api/TaskLayout/changepriority/{tasklayoutid}/{priority}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tasklayoutid != null) localVarPathParams.Add("tasklayoutid", this.Configuration.ApiClient.ParameterToString(tasklayoutid)); // path parameter
            if (priority != null) localVarPathParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutUpdateTaskLayoutPriority", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the priority of a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <param name="priority">Priority to set</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskLayoutUpdateTaskLayoutPriorityAsync (int? tasklayoutid, int? priority)
        {
             await TaskLayoutUpdateTaskLayoutPriorityAsyncWithHttpInfo(tasklayoutid, priority);

        }

        /// <summary>
        /// This call updates the priority of a task layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasklayoutid">Task layout identifier</param>
        /// <param name="priority">Priority to set</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskLayoutUpdateTaskLayoutPriorityAsyncWithHttpInfo (int? tasklayoutid, int? priority)
        {
            // verify the required parameter 'tasklayoutid' is set
            if (tasklayoutid == null)
                throw new ApiException(400, "Missing required parameter 'tasklayoutid' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayoutPriority");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskLayoutApi->TaskLayoutUpdateTaskLayoutPriority");

            var localVarPath = "/api/TaskLayout/changepriority/{tasklayoutid}/{priority}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tasklayoutid != null) localVarPathParams.Add("tasklayoutid", this.Configuration.ApiClient.ParameterToString(tasklayoutid)); // path parameter
            if (priority != null) localVarPathParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutUpdateTaskLayoutPriority", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call inserts or updates personal task layout for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to write</param>
        /// <returns>TaskLayoutDTO</returns>
        public TaskLayoutDTO TaskLayoutWriteTaskLayoutForUser (TaskLayoutDTO body)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = TaskLayoutWriteTaskLayoutForUserWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts or updates personal task layout for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to write</param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        public ApiResponse< TaskLayoutDTO > TaskLayoutWriteTaskLayoutForUserWithHttpInfo (TaskLayoutDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");

            var localVarPath = "/api/TaskLayout/foruser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutWriteTaskLayoutForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call inserts or updates personal task layout for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to write</param>
        /// <returns>Task of TaskLayoutDTO</returns>
        public async System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutWriteTaskLayoutForUserAsync (TaskLayoutDTO body)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = await TaskLayoutWriteTaskLayoutForUserAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts or updates personal task layout for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task layout information to write</param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutWriteTaskLayoutForUserAsyncWithHttpInfo (TaskLayoutDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");

            var localVarPath = "/api/TaskLayout/foruser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutWriteTaskLayoutForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call inserts or updates personal task layout for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>TaskLayoutDTO</returns>
        public TaskLayoutDTO TaskLayoutWriteTaskLayoutForUser (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = TaskLayoutWriteTaskLayoutForUserWithHttpInfo(id, name, author, authorCompleteName, creationDate, details, associations, users, isSystem, priority, idLayout, isUser);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts or updates personal task layout for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>ApiResponse of TaskLayoutDTO</returns>
        public ApiResponse< TaskLayoutDTO > TaskLayoutWriteTaskLayoutForUserWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'author' is set
            if (author == null)
                throw new ApiException(400, "Missing required parameter 'author' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'authorCompleteName' is set
            if (authorCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'authorCompleteName' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'associations' is set
            if (associations == null)
                throw new ApiException(400, "Missing required parameter 'associations' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'isSystem' is set
            if (isSystem == null)
                throw new ApiException(400, "Missing required parameter 'isSystem' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'idLayout' is set
            if (idLayout == null)
                throw new ApiException(400, "Missing required parameter 'idLayout' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'isUser' is set
            if (isUser == null)
                throw new ApiException(400, "Missing required parameter 'isUser' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");

            var localVarPath = "/api/TaskLayout/foruser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (author != null) localVarFormParams.Add("author", this.Configuration.ApiClient.ParameterToString(author)); // form parameter
            if (authorCompleteName != null) localVarFormParams.Add("authorCompleteName", this.Configuration.ApiClient.ParameterToString(authorCompleteName)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter
            if (associations != null) localVarFormParams.Add("associations", this.Configuration.ApiClient.ParameterToString(associations)); // form parameter
            if (users != null) localVarFormParams.Add("users", this.Configuration.ApiClient.ParameterToString(users)); // form parameter
            if (isSystem != null) localVarFormParams.Add("isSystem", this.Configuration.ApiClient.ParameterToString(isSystem)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (idLayout != null) localVarFormParams.Add("idLayout", this.Configuration.ApiClient.ParameterToString(idLayout)); // form parameter
            if (isUser != null) localVarFormParams.Add("isUser", this.Configuration.ApiClient.ParameterToString(isUser)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutWriteTaskLayoutForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

        /// <summary>
        /// This call inserts or updates personal task layout for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of TaskLayoutDTO</returns>
        public async System.Threading.Tasks.Task<TaskLayoutDTO> TaskLayoutWriteTaskLayoutForUserAsync (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
             ApiResponse<TaskLayoutDTO> localVarResponse = await TaskLayoutWriteTaskLayoutForUserAsyncWithHttpInfo(id, name, author, authorCompleteName, creationDate, details, associations, users, isSystem, priority, idLayout, isUser);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts or updates personal task layout for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="associations"></param>
        /// <param name="users"></param>
        /// <param name="isSystem"></param>
        /// <param name="priority"></param>
        /// <param name="idLayout"></param>
        /// <param name="isUser"></param>
        /// <returns>Task of ApiResponse (TaskLayoutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskLayoutDTO>> TaskLayoutWriteTaskLayoutForUserAsyncWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<TaskLayoutDetailDTO> details, List<TaskLayoutAssociationDTO> associations, List<UserDTO> users, bool? isSystem, int? priority, int? idLayout, bool? isUser)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'author' is set
            if (author == null)
                throw new ApiException(400, "Missing required parameter 'author' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'authorCompleteName' is set
            if (authorCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'authorCompleteName' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'associations' is set
            if (associations == null)
                throw new ApiException(400, "Missing required parameter 'associations' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'isSystem' is set
            if (isSystem == null)
                throw new ApiException(400, "Missing required parameter 'isSystem' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'idLayout' is set
            if (idLayout == null)
                throw new ApiException(400, "Missing required parameter 'idLayout' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");
            // verify the required parameter 'isUser' is set
            if (isUser == null)
                throw new ApiException(400, "Missing required parameter 'isUser' when calling TaskLayoutApi->TaskLayoutWriteTaskLayoutForUser");

            var localVarPath = "/api/TaskLayout/foruser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (author != null) localVarFormParams.Add("author", this.Configuration.ApiClient.ParameterToString(author)); // form parameter
            if (authorCompleteName != null) localVarFormParams.Add("authorCompleteName", this.Configuration.ApiClient.ParameterToString(authorCompleteName)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter
            if (associations != null) localVarFormParams.Add("associations", this.Configuration.ApiClient.ParameterToString(associations)); // form parameter
            if (users != null) localVarFormParams.Add("users", this.Configuration.ApiClient.ParameterToString(users)); // form parameter
            if (isSystem != null) localVarFormParams.Add("isSystem", this.Configuration.ApiClient.ParameterToString(isSystem)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (idLayout != null) localVarFormParams.Add("idLayout", this.Configuration.ApiClient.ParameterToString(idLayout)); // form parameter
            if (isUser != null) localVarFormParams.Add("isUser", this.Configuration.ApiClient.ParameterToString(isUser)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskLayoutWriteTaskLayoutForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLayoutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLayoutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLayoutDTO)));
        }

    }
}
