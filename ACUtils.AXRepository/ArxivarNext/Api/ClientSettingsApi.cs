/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IClientSettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Object</returns>
        Object ClientSettingsGetPluginSettings (string pluginId);

        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetPluginSettingsWithHttpInfo (string pluginId);
        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>Object</returns>
        Object ClientSettingsGetPluginSettings_0 (string pluginId, string instanceId, string desktopId);

        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetPluginSettings_0WithHttpInfo (string pluginId, string instanceId, string desktopId);
        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>Object</returns>
        Object ClientSettingsGetPluginUserSettings (PluginSettingRequest body);

        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetPluginUserSettingsWithHttpInfo (PluginSettingRequest body);
        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>Object</returns>
        Object ClientSettingsGetPluginUserSettings (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings);

        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetPluginUserSettingsWithHttpInfo (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings);
        /// <summary>
        /// This call returns the settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object ClientSettingsGetSettings ();

        /// <summary>
        /// This call returns the settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetSettingsWithHttpInfo ();
        /// <summary>
        /// This call returns the settings of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object ClientSettingsGetSystemSettings ();

        /// <summary>
        /// This call returns the settings of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetSystemSettingsWithHttpInfo ();
        /// <summary>
        /// This call returns the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Object</returns>
        Object ClientSettingsGetWidgetSettings (string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call returns the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetWidgetSettingsWithHttpInfo (string id, string instanceId, int? desktopId);
        /// <summary>
        /// This call returns the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Object</returns>
        Object ClientSettingsGetWidgetUserSettings (string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call returns the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClientSettingsGetWidgetUserSettingsWithHttpInfo (string id, string instanceId, int? desktopId);
        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <returns></returns>
        void ClientSettingsUpdatePluginSetting (Dictionary<string, Object> body, string pluginId);

        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdatePluginSettingWithHttpInfo (Dictionary<string, Object> body, string pluginId);
        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns></returns>
        void ClientSettingsUpdatePluginSetting_0 (Dictionary<string, Object> body, string pluginId, string instanceId, string desktopId);

        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdatePluginSetting_0WithHttpInfo (Dictionary<string, Object> body, string pluginId, string instanceId, string desktopId);
        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns></returns>
        void ClientSettingsUpdatePluginUserSetting (PluginSettingRequest body);

        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdatePluginUserSettingWithHttpInfo (PluginSettingRequest body);
        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns></returns>
        void ClientSettingsUpdatePluginUserSetting (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings);

        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdatePluginUserSettingWithHttpInfo (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings);
        /// <summary>
        /// This call upade the setting of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <returns></returns>
        void ClientSettingsUpdateUserSetting (Dictionary<string, Object> body);

        /// <summary>
        /// This call upade the setting of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdateUserSettingWithHttpInfo (Dictionary<string, Object> body);
        /// <summary>
        /// This call upade the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns></returns>
        void ClientSettingsUpdateWidgetSetting (Dictionary<string, Object> body, string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call upade the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdateWidgetSettingWithHttpInfo (Dictionary<string, Object> body, string id, string instanceId, int? desktopId);
        /// <summary>
        /// This call upade the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns></returns>
        void ClientSettingsUpdateWidgetUserSetting (Dictionary<string, Object> body, string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call upade the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientSettingsUpdateWidgetUserSettingWithHttpInfo (Dictionary<string, Object> body, string id, string instanceId, int? desktopId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetPluginSettingsAsync (string pluginId);

        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginSettingsAsyncWithHttpInfo (string pluginId);
        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetPluginSettings_0Async (string pluginId, string instanceId, string desktopId);

        /// <summary>
        /// This call returns the settings of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginSettings_0AsyncWithHttpInfo (string pluginId, string instanceId, string desktopId);
        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetPluginUserSettingsAsync (PluginSettingRequest body);

        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginUserSettingsAsyncWithHttpInfo (PluginSettingRequest body);
        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetPluginUserSettingsAsync (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings);

        /// <summary>
        /// This call returns the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginUserSettingsAsyncWithHttpInfo (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings);
        /// <summary>
        /// This call returns the settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetSettingsAsync ();

        /// <summary>
        /// This call returns the settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the settings of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetSystemSettingsAsync ();

        /// <summary>
        /// This call returns the settings of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetSystemSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetWidgetSettingsAsync (string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call returns the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetWidgetSettingsAsyncWithHttpInfo (string id, string instanceId, int? desktopId);
        /// <summary>
        /// This call returns the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClientSettingsGetWidgetUserSettingsAsync (string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call returns the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetWidgetUserSettingsAsyncWithHttpInfo (string id, string instanceId, int? desktopId);
        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdatePluginSettingAsync (Dictionary<string, Object> body, string pluginId);

        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginSettingAsyncWithHttpInfo (Dictionary<string, Object> body, string pluginId);
        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdatePluginSetting_0Async (Dictionary<string, Object> body, string pluginId, string instanceId, string desktopId);

        /// <summary>
        /// This call upade the setting of plugin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginSetting_0AsyncWithHttpInfo (Dictionary<string, Object> body, string pluginId, string instanceId, string desktopId);
        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdatePluginUserSettingAsync (PluginSettingRequest body);

        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginUserSettingAsyncWithHttpInfo (PluginSettingRequest body);
        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdatePluginUserSettingAsync (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings);

        /// <summary>
        /// This call upade the plugin settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginUserSettingAsyncWithHttpInfo (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings);
        /// <summary>
        /// This call upade the setting of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdateUserSettingAsync (Dictionary<string, Object> body);

        /// <summary>
        /// This call upade the setting of system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateUserSettingAsyncWithHttpInfo (Dictionary<string, Object> body);
        /// <summary>
        /// This call upade the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdateWidgetSettingAsync (Dictionary<string, Object> body, string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call upade the widget settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateWidgetSettingAsyncWithHttpInfo (Dictionary<string, Object> body, string id, string instanceId, int? desktopId);
        /// <summary>
        /// This call upade the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientSettingsUpdateWidgetUserSettingAsync (Dictionary<string, Object> body, string id, string instanceId, int? desktopId);

        /// <summary>
        /// This call upade the widget settings of connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateWidgetUserSettingAsyncWithHttpInfo (Dictionary<string, Object> body, string id, string instanceId, int? desktopId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ClientSettingsApi : IClientSettingsApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientSettingsApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSettingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ClientSettingsApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientSettingsApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Object</returns>
        public Object ClientSettingsGetPluginSettings (string pluginId)
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetPluginSettingsWithHttpInfo(pluginId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetPluginSettingsWithHttpInfo (string pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsGetPluginSettings");

            var localVarPath = "/api/Settings/plugin/{pluginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetPluginSettingsAsync (string pluginId)
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetPluginSettingsAsyncWithHttpInfo(pluginId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginSettingsAsyncWithHttpInfo (string pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsGetPluginSettings");

            var localVarPath = "/api/Settings/plugin/{pluginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>Object</returns>
        public Object ClientSettingsGetPluginSettings_0 (string pluginId, string instanceId, string desktopId)
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetPluginSettings_0WithHttpInfo(pluginId, instanceId, desktopId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetPluginSettings_0WithHttpInfo (string pluginId, string instanceId, string desktopId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsGetPluginSettings_0");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetPluginSettings_0");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetPluginSettings_0");

            var localVarPath = "/api/Settings/plugin/{pluginId}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginSettings_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetPluginSettings_0Async (string pluginId, string instanceId, string desktopId)
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetPluginSettings_0AsyncWithHttpInfo(pluginId, instanceId, desktopId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the settings of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginSettings_0AsyncWithHttpInfo (string pluginId, string instanceId, string desktopId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsGetPluginSettings_0");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetPluginSettings_0");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetPluginSettings_0");

            var localVarPath = "/api/Settings/plugin/{pluginId}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginSettings_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>Object</returns>
        public Object ClientSettingsGetPluginUserSettings (PluginSettingRequest body)
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetPluginUserSettingsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetPluginUserSettingsWithHttpInfo (PluginSettingRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetPluginUserSettingsAsync (PluginSettingRequest body)
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetPluginUserSettingsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginUserSettingsAsyncWithHttpInfo (PluginSettingRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>Object</returns>
        public Object ClientSettingsGetPluginUserSettings (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings)
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetPluginUserSettingsWithHttpInfo(pluginId, desktopId, instanceId, settings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetPluginUserSettingsWithHttpInfo (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarFormParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // form parameter
            if (desktopId != null) localVarFormParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // form parameter
            if (instanceId != null) localVarFormParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // form parameter
            if (settings != null) localVarFormParams.Add("settings", this.Configuration.ApiClient.ParameterToString(settings)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetPluginUserSettingsAsync (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings)
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetPluginUserSettingsAsyncWithHttpInfo(pluginId, desktopId, instanceId, settings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetPluginUserSettingsAsyncWithHttpInfo (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling ClientSettingsApi->ClientSettingsGetPluginUserSettings");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarFormParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // form parameter
            if (desktopId != null) localVarFormParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // form parameter
            if (instanceId != null) localVarFormParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // form parameter
            if (settings != null) localVarFormParams.Add("settings", this.Configuration.ApiClient.ParameterToString(settings)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetPluginUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object ClientSettingsGetSettings ()
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/Settings/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetSettingsAsync ()
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Settings/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of system 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object ClientSettingsGetSystemSettings ()
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetSystemSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the settings of system 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetSystemSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/Settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetSystemSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the settings of system 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetSystemSettingsAsync ()
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetSystemSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the settings of system 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetSystemSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetSystemSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the widget settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Object</returns>
        public Object ClientSettingsGetWidgetSettings (string id, string instanceId, int? desktopId)
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetWidgetSettingsWithHttpInfo(id, instanceId, desktopId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the widget settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetWidgetSettingsWithHttpInfo (string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");

            var localVarPath = "/api/Settings/widget/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetWidgetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the widget settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetWidgetSettingsAsync (string id, string instanceId, int? desktopId)
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetWidgetSettingsAsyncWithHttpInfo(id, instanceId, desktopId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the widget settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetWidgetSettingsAsyncWithHttpInfo (string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetWidgetSettings");

            var localVarPath = "/api/Settings/widget/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetWidgetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the widget settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Object</returns>
        public Object ClientSettingsGetWidgetUserSettings (string id, string instanceId, int? desktopId)
        {
             ApiResponse<Object> localVarResponse = ClientSettingsGetWidgetUserSettingsWithHttpInfo(id, instanceId, desktopId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the widget settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClientSettingsGetWidgetUserSettingsWithHttpInfo (string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");

            var localVarPath = "/api/Settings/widgetForUser/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetWidgetUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns the widget settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClientSettingsGetWidgetUserSettingsAsync (string id, string instanceId, int? desktopId)
        {
             ApiResponse<Object> localVarResponse = await ClientSettingsGetWidgetUserSettingsAsyncWithHttpInfo(id, instanceId, desktopId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the widget settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsGetWidgetUserSettingsAsyncWithHttpInfo (string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsGetWidgetUserSettings");

            var localVarPath = "/api/Settings/widgetForUser/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsGetWidgetUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <returns></returns>
        public void ClientSettingsUpdatePluginSetting (Dictionary<string, Object> body, string pluginId)
        {
             ClientSettingsUpdatePluginSettingWithHttpInfo(body, pluginId);
        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdatePluginSettingWithHttpInfo (Dictionary<string, Object> body, string pluginId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting");
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting");

            var localVarPath = "/api/Settings/plugin/{pluginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdatePluginSettingAsync (Dictionary<string, Object> body, string pluginId)
        {
             await ClientSettingsUpdatePluginSettingAsyncWithHttpInfo(body, pluginId);

        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginSettingAsyncWithHttpInfo (Dictionary<string, Object> body, string pluginId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting");
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting");

            var localVarPath = "/api/Settings/plugin/{pluginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns></returns>
        public void ClientSettingsUpdatePluginSetting_0 (Dictionary<string, Object> body, string pluginId, string instanceId, string desktopId)
        {
             ClientSettingsUpdatePluginSetting_0WithHttpInfo(body, pluginId, instanceId, desktopId);
        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdatePluginSetting_0WithHttpInfo (Dictionary<string, Object> body, string pluginId, string instanceId, string desktopId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting_0");
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting_0");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting_0");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting_0");

            var localVarPath = "/api/Settings/plugin/{pluginId}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginSetting_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdatePluginSetting_0Async (Dictionary<string, Object> body, string pluginId, string instanceId, string desktopId)
        {
             await ClientSettingsUpdatePluginSetting_0AsyncWithHttpInfo(body, pluginId, instanceId, desktopId);

        }

        /// <summary>
        /// This call upade the setting of plugin 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pluginId"></param>
        /// <param name="instanceId"></param>
        /// <param name="desktopId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginSetting_0AsyncWithHttpInfo (Dictionary<string, Object> body, string pluginId, string instanceId, string desktopId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting_0");
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting_0");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting_0");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdatePluginSetting_0");

            var localVarPath = "/api/Settings/plugin/{pluginId}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginSetting_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns></returns>
        public void ClientSettingsUpdatePluginUserSetting (PluginSettingRequest body)
        {
             ClientSettingsUpdatePluginUserSettingWithHttpInfo(body);
        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdatePluginUserSettingWithHttpInfo (PluginSettingRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdatePluginUserSettingAsync (PluginSettingRequest body)
        {
             await ClientSettingsUpdatePluginUserSettingAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request of plugin settings</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginUserSettingAsyncWithHttpInfo (PluginSettingRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns></returns>
        public void ClientSettingsUpdatePluginUserSetting (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings)
        {
             ClientSettingsUpdatePluginUserSettingWithHttpInfo(pluginId, desktopId, instanceId, settings);
        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdatePluginUserSettingWithHttpInfo (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarFormParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // form parameter
            if (desktopId != null) localVarFormParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // form parameter
            if (instanceId != null) localVarFormParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // form parameter
            if (settings != null) localVarFormParams.Add("settings", this.Configuration.ApiClient.ParameterToString(settings)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdatePluginUserSettingAsync (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings)
        {
             await ClientSettingsUpdatePluginUserSettingAsyncWithHttpInfo(pluginId, desktopId, instanceId, settings);

        }

        /// <summary>
        /// This call upade the plugin settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="desktopId"></param>
        /// <param name="instanceId"></param>
        /// <param name="settings"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdatePluginUserSettingAsyncWithHttpInfo (string pluginId, string desktopId, string instanceId, Dictionary<string, Object> settings)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling ClientSettingsApi->ClientSettingsUpdatePluginUserSetting");

            var localVarPath = "/api/Settings/pluginForUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarFormParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // form parameter
            if (desktopId != null) localVarFormParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // form parameter
            if (instanceId != null) localVarFormParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // form parameter
            if (settings != null) localVarFormParams.Add("settings", this.Configuration.ApiClient.ParameterToString(settings)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdatePluginUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the setting of system 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <returns></returns>
        public void ClientSettingsUpdateUserSetting (Dictionary<string, Object> body)
        {
             ClientSettingsUpdateUserSettingWithHttpInfo(body);
        }

        /// <summary>
        /// This call upade the setting of system 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdateUserSettingWithHttpInfo (Dictionary<string, Object> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdateUserSetting");

            var localVarPath = "/api/Settings/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the setting of system 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdateUserSettingAsync (Dictionary<string, Object> body)
        {
             await ClientSettingsUpdateUserSettingAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call upade the setting of system 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateUserSettingAsyncWithHttpInfo (Dictionary<string, Object> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdateUserSetting");

            var localVarPath = "/api/Settings/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the widget settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns></returns>
        public void ClientSettingsUpdateWidgetSetting (Dictionary<string, Object> body, string id, string instanceId, int? desktopId)
        {
             ClientSettingsUpdateWidgetSettingWithHttpInfo(body, id, instanceId, desktopId);
        }

        /// <summary>
        /// This call upade the widget settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdateWidgetSettingWithHttpInfo (Dictionary<string, Object> body, string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");

            var localVarPath = "/api/Settings/widget/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateWidgetSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the widget settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdateWidgetSettingAsync (Dictionary<string, Object> body, string id, string instanceId, int? desktopId)
        {
             await ClientSettingsUpdateWidgetSettingAsyncWithHttpInfo(body, id, instanceId, desktopId);

        }

        /// <summary>
        /// This call upade the widget settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateWidgetSettingAsyncWithHttpInfo (Dictionary<string, Object> body, string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetSetting");

            var localVarPath = "/api/Settings/widget/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateWidgetSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the widget settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns></returns>
        public void ClientSettingsUpdateWidgetUserSetting (Dictionary<string, Object> body, string id, string instanceId, int? desktopId)
        {
             ClientSettingsUpdateWidgetUserSettingWithHttpInfo(body, id, instanceId, desktopId);
        }

        /// <summary>
        /// This call upade the widget settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientSettingsUpdateWidgetUserSettingWithHttpInfo (Dictionary<string, Object> body, string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");

            var localVarPath = "/api/Settings/widgetForUser/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateWidgetUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call upade the widget settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientSettingsUpdateWidgetUserSettingAsync (Dictionary<string, Object> body, string id, string instanceId, int? desktopId)
        {
             await ClientSettingsUpdateWidgetUserSettingAsyncWithHttpInfo(body, id, instanceId, desktopId);

        }

        /// <summary>
        /// This call upade the widget settings of connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Settings information to update</param>
        /// <param name="id">Widget identifier</param>
        /// <param name="instanceId">Instance identifier</param>
        /// <param name="desktopId">Desktop identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientSettingsUpdateWidgetUserSettingAsyncWithHttpInfo (Dictionary<string, Object> body, string id, string instanceId, int? desktopId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");
            // verify the required parameter 'desktopId' is set
            if (desktopId == null)
                throw new ApiException(400, "Missing required parameter 'desktopId' when calling ClientSettingsApi->ClientSettingsUpdateWidgetUserSetting");

            var localVarPath = "/api/Settings/widgetForUser/{id}/{instanceId}/{desktopId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (desktopId != null) localVarPathParams.Add("desktopId", this.Configuration.ApiClient.ParameterToString(desktopId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientSettingsUpdateWidgetUserSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
