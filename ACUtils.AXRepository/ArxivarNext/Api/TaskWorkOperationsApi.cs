/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITaskWorkOperationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void TaskWorkOperationsExecuteSignOperation (TaskWorkSignOperationRequestDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsExecuteSignOperationWithHttpInfo (TaskWorkSignOperationRequestDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmWfSignId"></param>
        /// <param name="dmTaskWorkId"></param>
        /// <param name="certId"></param>
        /// <param name="certExtraId"></param>
        /// <param name="password"></param>
        /// <param name="otp"></param>
        /// <param name="signElementList"></param>
        /// <returns></returns>
        void TaskWorkOperationsExecuteSignOperation (int? dmWfSignId, int? dmTaskWorkId, string certId, string certExtraId, string password, string otp, List<SignOperationElementDTO> signElementList);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmWfSignId"></param>
        /// <param name="dmTaskWorkId"></param>
        /// <param name="certId"></param>
        /// <param name="certExtraId"></param>
        /// <param name="password"></param>
        /// <param name="otp"></param>
        /// <param name="signElementList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsExecuteSignOperationWithHttpInfo (int? dmWfSignId, int? dmTaskWorkId, string certId, string certExtraId, string password, string otp, List<SignOperationElementDTO> signElementList);
        /// <summary>
        /// This call returns all the operations in a task work
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkOperationsDTO</returns>
        TaskWorkOperationsDTO TaskWorkOperationsGetByTaskWorkId (int? taskWorkId);

        /// <summary>
        /// This call returns all the operations in a task work
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkOperationsDTO</returns>
        ApiResponse<TaskWorkOperationsDTO> TaskWorkOperationsGetByTaskWorkIdWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>List&lt;SignDocumentDataDTO&gt;</returns>
        List<SignDocumentDataDTO> TaskWorkOperationsGetDocumentForSignOperation (int? taskWorkId, int? signOperationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>ApiResponse of List&lt;SignDocumentDataDTO&gt;</returns>
        ApiResponse<List<SignDocumentDataDTO>> TaskWorkOperationsGetDocumentForSignOperationWithHttpInfo (int? taskWorkId, int? signOperationId);
        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        List<TaskWorkDynamicJobOperationDTO> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds (TaskExitCodeDTO body);

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>ApiResponse of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        ApiResponse<List<TaskWorkDynamicJobOperationDTO>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (TaskExitCodeDTO body);
        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        List<TaskWorkDynamicJobOperationDTO> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault);

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>ApiResponse of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        ApiResponse<List<TaskWorkDynamicJobOperationDTO>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault);
        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>FieldValuesDTO</returns>
        FieldValuesDTO TaskWorkOperationsGetFieldValuesByProcessVariable (VariablesValuesCriteriaDTO body, int? processVariableId, int? taskWorkId);

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        ApiResponse<FieldValuesDTO> TaskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo (VariablesValuesCriteriaDTO body, int? processVariableId, int? taskWorkId);
        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>FieldValuesDTO</returns>
        FieldValuesDTO TaskWorkOperationsGetFieldValuesByProcessVariable (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId, int? taskWorkId);

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        ApiResponse<FieldValuesDTO> TaskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId, int? taskWorkId);
        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        FieldFilterConcreteDTO TaskWorkOperationsGetFiltersByProcessVariables (ProcessVariablesFieldsDTO body, int? processVariableId);

        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        ApiResponse<FieldFilterConcreteDTO> TaskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo (ProcessVariablesFieldsDTO body, int? processVariableId);
        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        FieldFilterConcreteDTO TaskWorkOperationsGetFiltersByProcessVariables (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId);

        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        ApiResponse<FieldFilterConcreteDTO> TaskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId);
        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ids of the TaskWorks</param>
        /// <returns>List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        List<ProfessionalRoleOperationDTO> TaskWorkOperationsGetProfessionalRoleByTaskIds (List<int?> body);

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ids of the TaskWorks</param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        ApiResponse<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleByTaskIdsWithHttpInfo (List<int?> body);
        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        List<ProfessionalRoleOperationDTO> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds (TaskExitCodeDTO body);

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        ApiResponse<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (TaskExitCodeDTO body);
        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        List<ProfessionalRoleOperationDTO> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault);

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        ApiResponse<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault);
        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        List<UserCompleteDTO> TaskWorkOperationsGetSelectedUsersForDynamicJob (int? dynamicJobUser, int? processId);

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        ApiResponse<List<UserCompleteDTO>> TaskWorkOperationsGetSelectedUsersForDynamicJobWithHttpInfo (int? dynamicJobUser, int? processId);
        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        List<UserCompleteDTO> TaskWorkOperationsGetUsersForDynamicJob ();

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        ApiResponse<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForDynamicJobWithHttpInfo ();
        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        List<UserCompleteDTO> TaskWorkOperationsGetUsersForProfessionalRoleSelection (int? taskWorkId, int? professionalRoleId);

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        ApiResponse<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForProfessionalRoleSelectionWithHttpInfo (int? taskWorkId, int? professionalRoleId);
        /// <summary>
        /// This call sets the users for a process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">users list to add</param>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns></returns>
        void TaskWorkOperationsSetDynamicJob (List<UserCompleteDTO> body, int? dynamicJobId, int? taskWorkId);

        /// <summary>
        /// This call sets the users for a process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">users list to add</param>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetDynamicJobWithHttpInfo (List<UserCompleteDTO> body, int? dynamicJobId, int? taskWorkId);
        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for multiple dynamic job set</param>
        /// <returns></returns>
        void TaskWorkOperationsSetDynamicJobMultiple (DynamicJobMultipleSetRequestDTO body);

        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for multiple dynamic job set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetDynamicJobMultipleWithHttpInfo (DynamicJobMultipleSetRequestDTO body);
        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUserId"></param>
        /// <param name="taskWorkIds"></param>
        /// <param name="users"></param>
        /// <returns></returns>
        void TaskWorkOperationsSetDynamicJobMultiple (int? dynamicJobUserId, List<int?> taskWorkIds, List<UserCompleteDTO> users);

        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUserId"></param>
        /// <param name="taskWorkIds"></param>
        /// <param name="users"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetDynamicJobMultipleWithHttpInfo (int? dynamicJobUserId, List<int?> taskWorkIds, List<UserCompleteDTO> users);
        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process variables informations</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns></returns>
        void TaskWorkOperationsSetProcessVariableValueByTaskWorkId (ProcessVariablesFieldsDTO body, int? taskWorkId);

        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process variables informations</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo (ProcessVariablesFieldsDTO body, int? taskWorkId);
        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns></returns>
        void TaskWorkOperationsSetProcessVariableValueByTaskWorkId (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? taskWorkId);

        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? taskWorkId);
        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of taskwork id</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <returns></returns>
        void TaskWorkOperationsSetProfessionalRoleByTaskIds (List<int?> body, int? professionalRoleId, int? userToAssignId);

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of taskwork id</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetProfessionalRoleByTaskIdsWithHttpInfo (List<int?> body, int? professionalRoleId, int? userToAssignId);
        /// <summary>
        /// This call sets the user for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns></returns>
        void TaskWorkOperationsSetUsersForProfessionalRoleSelection (int? taskWorkId, int? professionalRoleId, int? userId);

        /// <summary>
        /// This call sets the user for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsSetUsersForProfessionalRoleSelectionWithHttpInfo (int? taskWorkId, int? professionalRoleId, int? userId);
        /// <summary>
        /// this call executes a command task operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns></returns>
        void TaskWorkOperationsTaskWorkCommandExecute (int? taskWorkId, int? taskWorkCommandId);

        /// <summary>
        /// this call executes a command task operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsTaskWorkCommandExecuteWithHttpInfo (int? taskWorkId, int? taskWorkCommandId);
        /// <summary>
        /// This call deletes the professional role actual value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns></returns>
        void TaskWorkOperationsUnSetProfessionalRoleSelection (int? professionalRoleId, int? taskWorkId);

        /// <summary>
        /// This call deletes the professional role actual value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TaskWorkOperationsUnSetProfessionalRoleSelectionWithHttpInfo (int? professionalRoleId, int? taskWorkId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>ValidationFieldResultDTO</returns>
        ValidationFieldResultDTO TaskWorkOperationsValidateVariabile (ProcessVariableValidationDTO body, int? taskWorkId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>ApiResponse of ValidationFieldResultDTO</returns>
        ApiResponse<ValidationFieldResultDTO> TaskWorkOperationsValidateVariabileWithHttpInfo (ProcessVariableValidationDTO body, int? taskWorkId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>ValidationFieldResultDTO</returns>
        ValidationFieldResultDTO TaskWorkOperationsValidateVariabile (string variableName, ProcessVariablesFieldsDTO currentData, int? taskWorkId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>ApiResponse of ValidationFieldResultDTO</returns>
        ApiResponse<ValidationFieldResultDTO> TaskWorkOperationsValidateVariabileWithHttpInfo (string variableName, ProcessVariablesFieldsDTO currentData, int? taskWorkId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsExecuteSignOperationAsync (TaskWorkSignOperationRequestDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsExecuteSignOperationAsyncWithHttpInfo (TaskWorkSignOperationRequestDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmWfSignId"></param>
        /// <param name="dmTaskWorkId"></param>
        /// <param name="certId"></param>
        /// <param name="certExtraId"></param>
        /// <param name="password"></param>
        /// <param name="otp"></param>
        /// <param name="signElementList"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsExecuteSignOperationAsync (int? dmWfSignId, int? dmTaskWorkId, string certId, string certExtraId, string password, string otp, List<SignOperationElementDTO> signElementList);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmWfSignId"></param>
        /// <param name="dmTaskWorkId"></param>
        /// <param name="certId"></param>
        /// <param name="certExtraId"></param>
        /// <param name="password"></param>
        /// <param name="otp"></param>
        /// <param name="signElementList"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsExecuteSignOperationAsyncWithHttpInfo (int? dmWfSignId, int? dmTaskWorkId, string certId, string certExtraId, string password, string otp, List<SignOperationElementDTO> signElementList);
        /// <summary>
        /// This call returns all the operations in a task work
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkOperationsDTO</returns>
        System.Threading.Tasks.Task<TaskWorkOperationsDTO> TaskWorkOperationsGetByTaskWorkIdAsync (int? taskWorkId);

        /// <summary>
        /// This call returns all the operations in a task work
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkOperationsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskWorkOperationsDTO>> TaskWorkOperationsGetByTaskWorkIdAsyncWithHttpInfo (int? taskWorkId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>Task of List&lt;SignDocumentDataDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SignDocumentDataDTO>> TaskWorkOperationsGetDocumentForSignOperationAsync (int? taskWorkId, int? signOperationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>Task of ApiResponse (List&lt;SignDocumentDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SignDocumentDataDTO>>> TaskWorkOperationsGetDocumentForSignOperationAsyncWithHttpInfo (int? taskWorkId, int? signOperationId);
        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>Task of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TaskWorkDynamicJobOperationDTO>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsync (TaskExitCodeDTO body);

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkDynamicJobOperationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskWorkDynamicJobOperationDTO>>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (TaskExitCodeDTO body);
        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>Task of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TaskWorkDynamicJobOperationDTO>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsync (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault);

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkDynamicJobOperationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskWorkDynamicJobOperationDTO>>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault);
        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of FieldValuesDTO</returns>
        System.Threading.Tasks.Task<FieldValuesDTO> TaskWorkOperationsGetFieldValuesByProcessVariableAsync (VariablesValuesCriteriaDTO body, int? processVariableId, int? taskWorkId);

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> TaskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo (VariablesValuesCriteriaDTO body, int? processVariableId, int? taskWorkId);
        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of FieldValuesDTO</returns>
        System.Threading.Tasks.Task<FieldValuesDTO> TaskWorkOperationsGetFieldValuesByProcessVariableAsync (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId, int? taskWorkId);

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> TaskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId, int? taskWorkId);
        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        System.Threading.Tasks.Task<FieldFilterConcreteDTO> TaskWorkOperationsGetFiltersByProcessVariablesAsync (ProcessVariablesFieldsDTO body, int? processVariableId);

        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> TaskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo (ProcessVariablesFieldsDTO body, int? processVariableId);
        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        System.Threading.Tasks.Task<FieldFilterConcreteDTO> TaskWorkOperationsGetFiltersByProcessVariablesAsync (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId);

        /// <summary>
        /// This call returns the possibile filters for a table process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> TaskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId);
        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ids of the TaskWorks</param>
        /// <returns>Task of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleByTaskIdsAsync (List<int?> body);

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ids of the TaskWorks</param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleOperationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleOperationDTO>>> TaskWorkOperationsGetProfessionalRoleByTaskIdsAsyncWithHttpInfo (List<int?> body);
        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>Task of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsync (TaskExitCodeDTO body);

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleOperationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleOperationDTO>>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (TaskExitCodeDTO body);
        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>Task of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsync (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault);

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleOperationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleOperationDTO>>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault);
        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetSelectedUsersForDynamicJobAsync (int? dynamicJobUser, int? processId);

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetSelectedUsersForDynamicJobAsyncWithHttpInfo (int? dynamicJobUser, int? processId);
        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForDynamicJobAsync ();

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetUsersForDynamicJobAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForProfessionalRoleSelectionAsync (int? taskWorkId, int? professionalRoleId);

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetUsersForProfessionalRoleSelectionAsyncWithHttpInfo (int? taskWorkId, int? professionalRoleId);
        /// <summary>
        /// This call sets the users for a process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">users list to add</param>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetDynamicJobAsync (List<UserCompleteDTO> body, int? dynamicJobId, int? taskWorkId);

        /// <summary>
        /// This call sets the users for a process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">users list to add</param>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetDynamicJobAsyncWithHttpInfo (List<UserCompleteDTO> body, int? dynamicJobId, int? taskWorkId);
        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for multiple dynamic job set</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetDynamicJobMultipleAsync (DynamicJobMultipleSetRequestDTO body);

        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for multiple dynamic job set</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo (DynamicJobMultipleSetRequestDTO body);
        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUserId"></param>
        /// <param name="taskWorkIds"></param>
        /// <param name="users"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetDynamicJobMultipleAsync (int? dynamicJobUserId, List<int?> taskWorkIds, List<UserCompleteDTO> users);

        /// <summary>
        /// This call sets the users for multiple process dynamic job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUserId"></param>
        /// <param name="taskWorkIds"></param>
        /// <param name="users"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo (int? dynamicJobUserId, List<int?> taskWorkIds, List<UserCompleteDTO> users);
        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process variables informations</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsync (ProcessVariablesFieldsDTO body, int? taskWorkId);

        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process variables informations</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo (ProcessVariablesFieldsDTO body, int? taskWorkId);
        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsync (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? taskWorkId);

        /// <summary>
        /// This call sets the values for the process variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? taskWorkId);
        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of taskwork id</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetProfessionalRoleByTaskIdsAsync (List<int?> body, int? professionalRoleId, int? userToAssignId);

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of taskwork id</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetProfessionalRoleByTaskIdsAsyncWithHttpInfo (List<int?> body, int? professionalRoleId, int? userToAssignId);
        /// <summary>
        /// This call sets the user for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsSetUsersForProfessionalRoleSelectionAsync (int? taskWorkId, int? professionalRoleId, int? userId);

        /// <summary>
        /// This call sets the user for a professional role operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetUsersForProfessionalRoleSelectionAsyncWithHttpInfo (int? taskWorkId, int? professionalRoleId, int? userId);
        /// <summary>
        /// this call executes a command task operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsTaskWorkCommandExecuteAsync (int? taskWorkId, int? taskWorkCommandId);

        /// <summary>
        /// this call executes a command task operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsTaskWorkCommandExecuteAsyncWithHttpInfo (int? taskWorkId, int? taskWorkCommandId);
        /// <summary>
        /// This call deletes the professional role actual value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TaskWorkOperationsUnSetProfessionalRoleSelectionAsync (int? professionalRoleId, int? taskWorkId);

        /// <summary>
        /// This call deletes the professional role actual value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsUnSetProfessionalRoleSelectionAsyncWithHttpInfo (int? professionalRoleId, int? taskWorkId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>Task of ValidationFieldResultDTO</returns>
        System.Threading.Tasks.Task<ValidationFieldResultDTO> TaskWorkOperationsValidateVariabileAsync (ProcessVariableValidationDTO body, int? taskWorkId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>Task of ApiResponse (ValidationFieldResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationFieldResultDTO>> TaskWorkOperationsValidateVariabileAsyncWithHttpInfo (ProcessVariableValidationDTO body, int? taskWorkId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>Task of ValidationFieldResultDTO</returns>
        System.Threading.Tasks.Task<ValidationFieldResultDTO> TaskWorkOperationsValidateVariabileAsync (string variableName, ProcessVariablesFieldsDTO currentData, int? taskWorkId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>Task of ApiResponse (ValidationFieldResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationFieldResultDTO>> TaskWorkOperationsValidateVariabileAsyncWithHttpInfo (string variableName, ProcessVariablesFieldsDTO currentData, int? taskWorkId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TaskWorkOperationsApi : ITaskWorkOperationsApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskWorkOperationsApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkOperationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TaskWorkOperationsApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskWorkOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskWorkOperationsApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void TaskWorkOperationsExecuteSignOperation (TaskWorkSignOperationRequestDTO body)
        {
             TaskWorkOperationsExecuteSignOperationWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsExecuteSignOperationWithHttpInfo (TaskWorkSignOperationRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");

            var localVarPath = "/api/TaskOperations/ExecuteSignOperation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsExecuteSignOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsExecuteSignOperationAsync (TaskWorkSignOperationRequestDTO body)
        {
             await TaskWorkOperationsExecuteSignOperationAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsExecuteSignOperationAsyncWithHttpInfo (TaskWorkSignOperationRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");

            var localVarPath = "/api/TaskOperations/ExecuteSignOperation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsExecuteSignOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmWfSignId"></param>
        /// <param name="dmTaskWorkId"></param>
        /// <param name="certId"></param>
        /// <param name="certExtraId"></param>
        /// <param name="password"></param>
        /// <param name="otp"></param>
        /// <param name="signElementList"></param>
        /// <returns></returns>
        public void TaskWorkOperationsExecuteSignOperation (int? dmWfSignId, int? dmTaskWorkId, string certId, string certExtraId, string password, string otp, List<SignOperationElementDTO> signElementList)
        {
             TaskWorkOperationsExecuteSignOperationWithHttpInfo(dmWfSignId, dmTaskWorkId, certId, certExtraId, password, otp, signElementList);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmWfSignId"></param>
        /// <param name="dmTaskWorkId"></param>
        /// <param name="certId"></param>
        /// <param name="certExtraId"></param>
        /// <param name="password"></param>
        /// <param name="otp"></param>
        /// <param name="signElementList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsExecuteSignOperationWithHttpInfo (int? dmWfSignId, int? dmTaskWorkId, string certId, string certExtraId, string password, string otp, List<SignOperationElementDTO> signElementList)
        {
            // verify the required parameter 'dmWfSignId' is set
            if (dmWfSignId == null)
                throw new ApiException(400, "Missing required parameter 'dmWfSignId' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'dmTaskWorkId' is set
            if (dmTaskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'dmTaskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'certExtraId' is set
            if (certExtraId == null)
                throw new ApiException(400, "Missing required parameter 'certExtraId' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'otp' is set
            if (otp == null)
                throw new ApiException(400, "Missing required parameter 'otp' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'signElementList' is set
            if (signElementList == null)
                throw new ApiException(400, "Missing required parameter 'signElementList' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");

            var localVarPath = "/api/TaskOperations/ExecuteSignOperation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmWfSignId != null) localVarFormParams.Add("dmWfSignId", this.Configuration.ApiClient.ParameterToString(dmWfSignId)); // form parameter
            if (dmTaskWorkId != null) localVarFormParams.Add("dmTaskWorkId", this.Configuration.ApiClient.ParameterToString(dmTaskWorkId)); // form parameter
            if (certId != null) localVarFormParams.Add("certId", this.Configuration.ApiClient.ParameterToString(certId)); // form parameter
            if (certExtraId != null) localVarFormParams.Add("certExtraId", this.Configuration.ApiClient.ParameterToString(certExtraId)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (otp != null) localVarFormParams.Add("otp", this.Configuration.ApiClient.ParameterToString(otp)); // form parameter
            if (signElementList != null) localVarFormParams.Add("signElementList", this.Configuration.ApiClient.ParameterToString(signElementList)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsExecuteSignOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmWfSignId"></param>
        /// <param name="dmTaskWorkId"></param>
        /// <param name="certId"></param>
        /// <param name="certExtraId"></param>
        /// <param name="password"></param>
        /// <param name="otp"></param>
        /// <param name="signElementList"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsExecuteSignOperationAsync (int? dmWfSignId, int? dmTaskWorkId, string certId, string certExtraId, string password, string otp, List<SignOperationElementDTO> signElementList)
        {
             await TaskWorkOperationsExecuteSignOperationAsyncWithHttpInfo(dmWfSignId, dmTaskWorkId, certId, certExtraId, password, otp, signElementList);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmWfSignId"></param>
        /// <param name="dmTaskWorkId"></param>
        /// <param name="certId"></param>
        /// <param name="certExtraId"></param>
        /// <param name="password"></param>
        /// <param name="otp"></param>
        /// <param name="signElementList"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsExecuteSignOperationAsyncWithHttpInfo (int? dmWfSignId, int? dmTaskWorkId, string certId, string certExtraId, string password, string otp, List<SignOperationElementDTO> signElementList)
        {
            // verify the required parameter 'dmWfSignId' is set
            if (dmWfSignId == null)
                throw new ApiException(400, "Missing required parameter 'dmWfSignId' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'dmTaskWorkId' is set
            if (dmTaskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'dmTaskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'certExtraId' is set
            if (certExtraId == null)
                throw new ApiException(400, "Missing required parameter 'certExtraId' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'otp' is set
            if (otp == null)
                throw new ApiException(400, "Missing required parameter 'otp' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");
            // verify the required parameter 'signElementList' is set
            if (signElementList == null)
                throw new ApiException(400, "Missing required parameter 'signElementList' when calling TaskWorkOperationsApi->TaskWorkOperationsExecuteSignOperation");

            var localVarPath = "/api/TaskOperations/ExecuteSignOperation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmWfSignId != null) localVarFormParams.Add("dmWfSignId", this.Configuration.ApiClient.ParameterToString(dmWfSignId)); // form parameter
            if (dmTaskWorkId != null) localVarFormParams.Add("dmTaskWorkId", this.Configuration.ApiClient.ParameterToString(dmTaskWorkId)); // form parameter
            if (certId != null) localVarFormParams.Add("certId", this.Configuration.ApiClient.ParameterToString(certId)); // form parameter
            if (certExtraId != null) localVarFormParams.Add("certExtraId", this.Configuration.ApiClient.ParameterToString(certExtraId)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (otp != null) localVarFormParams.Add("otp", this.Configuration.ApiClient.ParameterToString(otp)); // form parameter
            if (signElementList != null) localVarFormParams.Add("signElementList", this.Configuration.ApiClient.ParameterToString(signElementList)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsExecuteSignOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns all the operations in a task work 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>TaskWorkOperationsDTO</returns>
        public TaskWorkOperationsDTO TaskWorkOperationsGetByTaskWorkId (int? taskWorkId)
        {
             ApiResponse<TaskWorkOperationsDTO> localVarResponse = TaskWorkOperationsGetByTaskWorkIdWithHttpInfo(taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the operations in a task work 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>ApiResponse of TaskWorkOperationsDTO</returns>
        public ApiResponse< TaskWorkOperationsDTO > TaskWorkOperationsGetByTaskWorkIdWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetByTaskWorkId");

            var localVarPath = "/api/TaskOperations/byTaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkOperationsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskWorkOperationsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkOperationsDTO)));
        }

        /// <summary>
        /// This call returns all the operations in a task work 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of TaskWorkOperationsDTO</returns>
        public async System.Threading.Tasks.Task<TaskWorkOperationsDTO> TaskWorkOperationsGetByTaskWorkIdAsync (int? taskWorkId)
        {
             ApiResponse<TaskWorkOperationsDTO> localVarResponse = await TaskWorkOperationsGetByTaskWorkIdAsyncWithHttpInfo(taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the operations in a task work 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Taskwork identifier</param>
        /// <returns>Task of ApiResponse (TaskWorkOperationsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskWorkOperationsDTO>> TaskWorkOperationsGetByTaskWorkIdAsyncWithHttpInfo (int? taskWorkId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetByTaskWorkId");

            var localVarPath = "/api/TaskOperations/byTaskWork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskWorkOperationsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskWorkOperationsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskWorkOperationsDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>List&lt;SignDocumentDataDTO&gt;</returns>
        public List<SignDocumentDataDTO> TaskWorkOperationsGetDocumentForSignOperation (int? taskWorkId, int? signOperationId)
        {
             ApiResponse<List<SignDocumentDataDTO>> localVarResponse = TaskWorkOperationsGetDocumentForSignOperationWithHttpInfo(taskWorkId, signOperationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>ApiResponse of List&lt;SignDocumentDataDTO&gt;</returns>
        public ApiResponse< List<SignDocumentDataDTO> > TaskWorkOperationsGetDocumentForSignOperationWithHttpInfo (int? taskWorkId, int? signOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDocumentForSignOperation");
            // verify the required parameter 'signOperationId' is set
            if (signOperationId == null)
                throw new ApiException(400, "Missing required parameter 'signOperationId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDocumentForSignOperation");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/signOperationInfo/{signOperationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (signOperationId != null) localVarPathParams.Add("signOperationId", this.Configuration.ApiClient.ParameterToString(signOperationId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetDocumentForSignOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SignDocumentDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SignDocumentDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SignDocumentDataDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>Task of List&lt;SignDocumentDataDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SignDocumentDataDTO>> TaskWorkOperationsGetDocumentForSignOperationAsync (int? taskWorkId, int? signOperationId)
        {
             ApiResponse<List<SignDocumentDataDTO>> localVarResponse = await TaskWorkOperationsGetDocumentForSignOperationAsyncWithHttpInfo(taskWorkId, signOperationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId"></param>
        /// <param name="signOperationId"></param>
        /// <returns>Task of ApiResponse (List&lt;SignDocumentDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SignDocumentDataDTO>>> TaskWorkOperationsGetDocumentForSignOperationAsyncWithHttpInfo (int? taskWorkId, int? signOperationId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDocumentForSignOperation");
            // verify the required parameter 'signOperationId' is set
            if (signOperationId == null)
                throw new ApiException(400, "Missing required parameter 'signOperationId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDocumentForSignOperation");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/signOperationInfo/{signOperationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (signOperationId != null) localVarPathParams.Add("signOperationId", this.Configuration.ApiClient.ParameterToString(signOperationId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetDocumentForSignOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SignDocumentDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SignDocumentDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SignDocumentDataDTO>)));
        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        public List<TaskWorkDynamicJobOperationDTO> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds (TaskExitCodeDTO body)
        {
             ApiResponse<List<TaskWorkDynamicJobOperationDTO>> localVarResponse = TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>ApiResponse of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        public ApiResponse< List<TaskWorkDynamicJobOperationDTO> > TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (TaskExitCodeDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getdynamicjoboperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkDynamicJobOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaskWorkDynamicJobOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkDynamicJobOperationDTO>)));
        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>Task of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskWorkDynamicJobOperationDTO>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsync (TaskExitCodeDTO body)
        {
             ApiResponse<List<TaskWorkDynamicJobOperationDTO>> localVarResponse = await TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkDynamicJobOperationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskWorkDynamicJobOperationDTO>>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (TaskExitCodeDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getdynamicjoboperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkDynamicJobOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaskWorkDynamicJobOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkDynamicJobOperationDTO>)));
        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        public List<TaskWorkDynamicJobOperationDTO> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault)
        {
             ApiResponse<List<TaskWorkDynamicJobOperationDTO>> localVarResponse = TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo(id, value, icon, translatedDescription, taskIds, isDefault);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>ApiResponse of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        public ApiResponse< List<TaskWorkDynamicJobOperationDTO> > TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'icon' is set
            if (icon == null)
                throw new ApiException(400, "Missing required parameter 'icon' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'translatedDescription' is set
            if (translatedDescription == null)
                throw new ApiException(400, "Missing required parameter 'translatedDescription' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'isDefault' is set
            if (isDefault == null)
                throw new ApiException(400, "Missing required parameter 'isDefault' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getdynamicjoboperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (value != null) localVarFormParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (icon != null) localVarFormParams.Add("icon", this.Configuration.ApiClient.ParameterToString(icon)); // form parameter
            if (translatedDescription != null) localVarFormParams.Add("translatedDescription", this.Configuration.ApiClient.ParameterToString(translatedDescription)); // form parameter
            if (taskIds != null) localVarFormParams.Add("taskIds", this.Configuration.ApiClient.ParameterToString(taskIds)); // form parameter
            if (isDefault != null) localVarFormParams.Add("isDefault", this.Configuration.ApiClient.ParameterToString(isDefault)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkDynamicJobOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaskWorkDynamicJobOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkDynamicJobOperationDTO>)));
        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>Task of List&lt;TaskWorkDynamicJobOperationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskWorkDynamicJobOperationDTO>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsync (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault)
        {
             ApiResponse<List<TaskWorkDynamicJobOperationDTO>> localVarResponse = await TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo(id, value, icon, translatedDescription, taskIds, isDefault);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the dynamic job operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>Task of ApiResponse (List&lt;TaskWorkDynamicJobOperationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskWorkDynamicJobOperationDTO>>> TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'icon' is set
            if (icon == null)
                throw new ApiException(400, "Missing required parameter 'icon' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'translatedDescription' is set
            if (translatedDescription == null)
                throw new ApiException(400, "Missing required parameter 'translatedDescription' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'isDefault' is set
            if (isDefault == null)
                throw new ApiException(400, "Missing required parameter 'isDefault' when calling TaskWorkOperationsApi->TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getdynamicjoboperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (value != null) localVarFormParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (icon != null) localVarFormParams.Add("icon", this.Configuration.ApiClient.ParameterToString(icon)); // form parameter
            if (translatedDescription != null) localVarFormParams.Add("translatedDescription", this.Configuration.ApiClient.ParameterToString(translatedDescription)); // form parameter
            if (taskIds != null) localVarFormParams.Add("taskIds", this.Configuration.ApiClient.ParameterToString(taskIds)); // form parameter
            if (isDefault != null) localVarFormParams.Add("isDefault", this.Configuration.ApiClient.ParameterToString(isDefault)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskWorkDynamicJobOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaskWorkDynamicJobOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskWorkDynamicJobOperationDTO>)));
        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>FieldValuesDTO</returns>
        public FieldValuesDTO TaskWorkOperationsGetFieldValuesByProcessVariable (VariablesValuesCriteriaDTO body, int? processVariableId, int? taskWorkId)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = TaskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo(body, processVariableId, taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        public ApiResponse< FieldValuesDTO > TaskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo (VariablesValuesCriteriaDTO body, int? processVariableId, int? taskWorkId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/processvariable/{processVariableId}/getValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFieldValuesByProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of FieldValuesDTO</returns>
        public async System.Threading.Tasks.Task<FieldValuesDTO> TaskWorkOperationsGetFieldValuesByProcessVariableAsync (VariablesValuesCriteriaDTO body, int? processVariableId, int? taskWorkId)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = await TaskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo(body, processVariableId, taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> TaskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo (VariablesValuesCriteriaDTO body, int? processVariableId, int? taskWorkId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/processvariable/{processVariableId}/getValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFieldValuesByProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>FieldValuesDTO</returns>
        public FieldValuesDTO TaskWorkOperationsGetFieldValuesByProcessVariable (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId, int? taskWorkId)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = TaskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo(processVariablesFields, variableFilters, processVariableId, taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        public ApiResponse< FieldValuesDTO > TaskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId, int? taskWorkId)
        {
            // verify the required parameter 'processVariablesFields' is set
            if (processVariablesFields == null)
                throw new ApiException(400, "Missing required parameter 'processVariablesFields' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'variableFilters' is set
            if (variableFilters == null)
                throw new ApiException(400, "Missing required parameter 'variableFilters' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/processvariable/{processVariableId}/getValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (processVariablesFields != null) localVarFormParams.Add("processVariablesFields", this.Configuration.ApiClient.ParameterToString(processVariablesFields)); // form parameter
            if (variableFilters != null) localVarFormParams.Add("variableFilters", this.Configuration.ApiClient.ParameterToString(variableFilters)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFieldValuesByProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of FieldValuesDTO</returns>
        public async System.Threading.Tasks.Task<FieldValuesDTO> TaskWorkOperationsGetFieldValuesByProcessVariableAsync (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId, int? taskWorkId)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = await TaskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo(processVariablesFields, variableFilters, processVariableId, taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possibile values for a process variable (combo or table) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> TaskWorkOperationsGetFieldValuesByProcessVariableAsyncWithHttpInfo (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId, int? taskWorkId)
        {
            // verify the required parameter 'processVariablesFields' is set
            if (processVariablesFields == null)
                throw new ApiException(400, "Missing required parameter 'processVariablesFields' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'variableFilters' is set
            if (variableFilters == null)
                throw new ApiException(400, "Missing required parameter 'variableFilters' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFieldValuesByProcessVariable");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/processvariable/{processVariableId}/getValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (processVariablesFields != null) localVarFormParams.Add("processVariablesFields", this.Configuration.ApiClient.ParameterToString(processVariablesFields)); // form parameter
            if (variableFilters != null) localVarFormParams.Add("variableFilters", this.Configuration.ApiClient.ParameterToString(variableFilters)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFieldValuesByProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        public FieldFilterConcreteDTO TaskWorkOperationsGetFiltersByProcessVariables (ProcessVariablesFieldsDTO body, int? processVariableId)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = TaskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo(body, processVariableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        public ApiResponse< FieldFilterConcreteDTO > TaskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo (ProcessVariablesFieldsDTO body, int? processVariableId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");

            var localVarPath = "/api/TaskOperations/processvariable/{processVariableId}/getFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFiltersByProcessVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldFilterConcreteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        public async System.Threading.Tasks.Task<FieldFilterConcreteDTO> TaskWorkOperationsGetFiltersByProcessVariablesAsync (ProcessVariablesFieldsDTO body, int? processVariableId)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = await TaskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo(body, processVariableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> TaskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo (ProcessVariablesFieldsDTO body, int? processVariableId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");

            var localVarPath = "/api/TaskOperations/processvariable/{processVariableId}/getFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFiltersByProcessVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldFilterConcreteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        public FieldFilterConcreteDTO TaskWorkOperationsGetFiltersByProcessVariables (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = TaskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo(booleanVariables, stringVariables, comboVariables, dateTimeVariables, doubleVariables, tableVariables, processVariableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        public ApiResponse< FieldFilterConcreteDTO > TaskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId)
        {
            // verify the required parameter 'booleanVariables' is set
            if (booleanVariables == null)
                throw new ApiException(400, "Missing required parameter 'booleanVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'stringVariables' is set
            if (stringVariables == null)
                throw new ApiException(400, "Missing required parameter 'stringVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'comboVariables' is set
            if (comboVariables == null)
                throw new ApiException(400, "Missing required parameter 'comboVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'dateTimeVariables' is set
            if (dateTimeVariables == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'doubleVariables' is set
            if (doubleVariables == null)
                throw new ApiException(400, "Missing required parameter 'doubleVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'tableVariables' is set
            if (tableVariables == null)
                throw new ApiException(400, "Missing required parameter 'tableVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");

            var localVarPath = "/api/TaskOperations/processvariable/{processVariableId}/getFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (booleanVariables != null) localVarFormParams.Add("booleanVariables", this.Configuration.ApiClient.ParameterToString(booleanVariables)); // form parameter
            if (stringVariables != null) localVarFormParams.Add("stringVariables", this.Configuration.ApiClient.ParameterToString(stringVariables)); // form parameter
            if (comboVariables != null) localVarFormParams.Add("comboVariables", this.Configuration.ApiClient.ParameterToString(comboVariables)); // form parameter
            if (dateTimeVariables != null) localVarFormParams.Add("dateTimeVariables", this.Configuration.ApiClient.ParameterToString(dateTimeVariables)); // form parameter
            if (doubleVariables != null) localVarFormParams.Add("doubleVariables", this.Configuration.ApiClient.ParameterToString(doubleVariables)); // form parameter
            if (tableVariables != null) localVarFormParams.Add("tableVariables", this.Configuration.ApiClient.ParameterToString(tableVariables)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFiltersByProcessVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldFilterConcreteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        public async System.Threading.Tasks.Task<FieldFilterConcreteDTO> TaskWorkOperationsGetFiltersByProcessVariablesAsync (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = await TaskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo(booleanVariables, stringVariables, comboVariables, dateTimeVariables, doubleVariables, tableVariables, processVariableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possibile filters for a table process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Id of the process variable</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> TaskWorkOperationsGetFiltersByProcessVariablesAsyncWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId)
        {
            // verify the required parameter 'booleanVariables' is set
            if (booleanVariables == null)
                throw new ApiException(400, "Missing required parameter 'booleanVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'stringVariables' is set
            if (stringVariables == null)
                throw new ApiException(400, "Missing required parameter 'stringVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'comboVariables' is set
            if (comboVariables == null)
                throw new ApiException(400, "Missing required parameter 'comboVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'dateTimeVariables' is set
            if (dateTimeVariables == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'doubleVariables' is set
            if (doubleVariables == null)
                throw new ApiException(400, "Missing required parameter 'doubleVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'tableVariables' is set
            if (tableVariables == null)
                throw new ApiException(400, "Missing required parameter 'tableVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetFiltersByProcessVariables");

            var localVarPath = "/api/TaskOperations/processvariable/{processVariableId}/getFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (booleanVariables != null) localVarFormParams.Add("booleanVariables", this.Configuration.ApiClient.ParameterToString(booleanVariables)); // form parameter
            if (stringVariables != null) localVarFormParams.Add("stringVariables", this.Configuration.ApiClient.ParameterToString(stringVariables)); // form parameter
            if (comboVariables != null) localVarFormParams.Add("comboVariables", this.Configuration.ApiClient.ParameterToString(comboVariables)); // form parameter
            if (dateTimeVariables != null) localVarFormParams.Add("dateTimeVariables", this.Configuration.ApiClient.ParameterToString(dateTimeVariables)); // form parameter
            if (doubleVariables != null) localVarFormParams.Add("doubleVariables", this.Configuration.ApiClient.ParameterToString(doubleVariables)); // form parameter
            if (tableVariables != null) localVarFormParams.Add("tableVariables", this.Configuration.ApiClient.ParameterToString(tableVariables)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetFiltersByProcessVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldFilterConcreteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
        }

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ids of the TaskWorks</param>
        /// <returns>List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public List<ProfessionalRoleOperationDTO> TaskWorkOperationsGetProfessionalRoleByTaskIds (List<int?> body)
        {
             ApiResponse<List<ProfessionalRoleOperationDTO>> localVarResponse = TaskWorkOperationsGetProfessionalRoleByTaskIdsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ids of the TaskWorks</param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public ApiResponse< List<ProfessionalRoleOperationDTO> > TaskWorkOperationsGetProfessionalRoleByTaskIdsWithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleByTaskIds");

            var localVarPath = "/api/TaskOperations/professionalroleoperation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetProfessionalRoleByTaskIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProfessionalRoleOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleOperationDTO>)));
        }

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ids of the TaskWorks</param>
        /// <returns>Task of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleByTaskIdsAsync (List<int?> body)
        {
             ApiResponse<List<ProfessionalRoleOperationDTO>> localVarResponse = await TaskWorkOperationsGetProfessionalRoleByTaskIdsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all professional role operations by multiple TaskWork 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ids of the TaskWorks</param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleOperationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleOperationDTO>>> TaskWorkOperationsGetProfessionalRoleByTaskIdsAsyncWithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleByTaskIds");

            var localVarPath = "/api/TaskOperations/professionalroleoperation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetProfessionalRoleByTaskIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProfessionalRoleOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleOperationDTO>)));
        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public List<ProfessionalRoleOperationDTO> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds (TaskExitCodeDTO body)
        {
             ApiResponse<List<ProfessionalRoleOperationDTO>> localVarResponse = TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public ApiResponse< List<ProfessionalRoleOperationDTO> > TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (TaskExitCodeDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getprofessionalroleoperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProfessionalRoleOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleOperationDTO>)));
        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>Task of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsync (TaskExitCodeDTO body)
        {
             ApiResponse<List<ProfessionalRoleOperationDTO>> localVarResponse = await TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">exit code for close action</param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleOperationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleOperationDTO>>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (TaskExitCodeDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getprofessionalroleoperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProfessionalRoleOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleOperationDTO>)));
        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public List<ProfessionalRoleOperationDTO> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault)
        {
             ApiResponse<List<ProfessionalRoleOperationDTO>> localVarResponse = TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo(id, value, icon, translatedDescription, taskIds, isDefault);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>ApiResponse of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public ApiResponse< List<ProfessionalRoleOperationDTO> > TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'icon' is set
            if (icon == null)
                throw new ApiException(400, "Missing required parameter 'icon' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'translatedDescription' is set
            if (translatedDescription == null)
                throw new ApiException(400, "Missing required parameter 'translatedDescription' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'isDefault' is set
            if (isDefault == null)
                throw new ApiException(400, "Missing required parameter 'isDefault' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getprofessionalroleoperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (value != null) localVarFormParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (icon != null) localVarFormParams.Add("icon", this.Configuration.ApiClient.ParameterToString(icon)); // form parameter
            if (translatedDescription != null) localVarFormParams.Add("translatedDescription", this.Configuration.ApiClient.ParameterToString(translatedDescription)); // form parameter
            if (taskIds != null) localVarFormParams.Add("taskIds", this.Configuration.ApiClient.ParameterToString(taskIds)); // form parameter
            if (isDefault != null) localVarFormParams.Add("isDefault", this.Configuration.ApiClient.ParameterToString(isDefault)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProfessionalRoleOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleOperationDTO>)));
        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>Task of List&lt;ProfessionalRoleOperationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProfessionalRoleOperationDTO>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsync (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault)
        {
             ApiResponse<List<ProfessionalRoleOperationDTO>> localVarResponse = await TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo(id, value, icon, translatedDescription, taskIds, isDefault);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the professional role operation to execute for a taskwork list close action by an exit code 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="value"></param>
        /// <param name="icon"></param>
        /// <param name="translatedDescription"></param>
        /// <param name="taskIds"></param>
        /// <param name="isDefault"></param>
        /// <returns>Task of ApiResponse (List&lt;ProfessionalRoleOperationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProfessionalRoleOperationDTO>>> TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsyncWithHttpInfo (int? id, string value, int? icon, string translatedDescription, List<int?> taskIds, bool? isDefault)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'icon' is set
            if (icon == null)
                throw new ApiException(400, "Missing required parameter 'icon' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'translatedDescription' is set
            if (translatedDescription == null)
                throw new ApiException(400, "Missing required parameter 'translatedDescription' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");
            // verify the required parameter 'isDefault' is set
            if (isDefault == null)
                throw new ApiException(400, "Missing required parameter 'isDefault' when calling TaskWorkOperationsApi->TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds");

            var localVarPath = "/api/TaskOperations/getprofessionalroleoperations/exitcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (value != null) localVarFormParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (icon != null) localVarFormParams.Add("icon", this.Configuration.ApiClient.ParameterToString(icon)); // form parameter
            if (translatedDescription != null) localVarFormParams.Add("translatedDescription", this.Configuration.ApiClient.ParameterToString(translatedDescription)); // form parameter
            if (taskIds != null) localVarFormParams.Add("taskIds", this.Configuration.ApiClient.ParameterToString(taskIds)); // form parameter
            if (isDefault != null) localVarFormParams.Add("isDefault", this.Configuration.ApiClient.ParameterToString(isDefault)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfessionalRoleOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProfessionalRoleOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfessionalRoleOperationDTO>)));
        }

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        public List<UserCompleteDTO> TaskWorkOperationsGetSelectedUsersForDynamicJob (int? dynamicJobUser, int? processId)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = TaskWorkOperationsGetSelectedUsersForDynamicJobWithHttpInfo(dynamicJobUser, processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        public ApiResponse< List<UserCompleteDTO> > TaskWorkOperationsGetSelectedUsersForDynamicJobWithHttpInfo (int? dynamicJobUser, int? processId)
        {
            // verify the required parameter 'dynamicJobUser' is set
            if (dynamicJobUser == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobUser' when calling TaskWorkOperationsApi->TaskWorkOperationsGetSelectedUsersForDynamicJob");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetSelectedUsersForDynamicJob");

            var localVarPath = "/api/TaskOperations/dynamicjob/{dynamicJobUser}/byprocessid/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobUser != null) localVarPathParams.Add("dynamicJobUser", this.Configuration.ApiClient.ParameterToString(dynamicJobUser)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetSelectedUsersForDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetSelectedUsersForDynamicJobAsync (int? dynamicJobUser, int? processId)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = await TaskWorkOperationsGetSelectedUsersForDynamicJobAsyncWithHttpInfo(dynamicJobUser, processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the selected users list for a dynamic job in a process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUser">Id of the dynamic job</param>
        /// <param name="processId">Id of the process</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetSelectedUsersForDynamicJobAsyncWithHttpInfo (int? dynamicJobUser, int? processId)
        {
            // verify the required parameter 'dynamicJobUser' is set
            if (dynamicJobUser == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobUser' when calling TaskWorkOperationsApi->TaskWorkOperationsGetSelectedUsersForDynamicJob");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetSelectedUsersForDynamicJob");

            var localVarPath = "/api/TaskOperations/dynamicjob/{dynamicJobUser}/byprocessid/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobUser != null) localVarPathParams.Add("dynamicJobUser", this.Configuration.ApiClient.ParameterToString(dynamicJobUser)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetSelectedUsersForDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        public List<UserCompleteDTO> TaskWorkOperationsGetUsersForDynamicJob ()
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = TaskWorkOperationsGetUsersForDynamicJobWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        public ApiResponse< List<UserCompleteDTO> > TaskWorkOperationsGetUsersForDynamicJobWithHttpInfo ()
        {

            var localVarPath = "/api/TaskOperations/dynamicjobusers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetUsersForDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForDynamicJobAsync ()
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = await TaskWorkOperationsGetUsersForDynamicJobAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns al possibile user for a dynamic job attribution 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetUsersForDynamicJobAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/TaskOperations/dynamicjobusers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetUsersForDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        public List<UserCompleteDTO> TaskWorkOperationsGetUsersForProfessionalRoleSelection (int? taskWorkId, int? professionalRoleId)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = TaskWorkOperationsGetUsersForProfessionalRoleSelectionWithHttpInfo(taskWorkId, professionalRoleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        public ApiResponse< List<UserCompleteDTO> > TaskWorkOperationsGetUsersForProfessionalRoleSelectionWithHttpInfo (int? taskWorkId, int? professionalRoleId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetUsersForProfessionalRoleSelection");
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetUsersForProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/usersbytaskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", this.Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetUsersForProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompleteDTO>> TaskWorkOperationsGetUsersForProfessionalRoleSelectionAsync (int? taskWorkId, int? professionalRoleId)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = await TaskWorkOperationsGetUsersForProfessionalRoleSelectionAsyncWithHttpInfo(taskWorkId, professionalRoleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the professional role possibile users for a professional role operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> TaskWorkOperationsGetUsersForProfessionalRoleSelectionAsyncWithHttpInfo (int? taskWorkId, int? professionalRoleId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetUsersForProfessionalRoleSelection");
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsGetUsersForProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/usersbytaskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", this.Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsGetUsersForProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call sets the users for a process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">users list to add</param>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns></returns>
        public void TaskWorkOperationsSetDynamicJob (List<UserCompleteDTO> body, int? dynamicJobId, int? taskWorkId)
        {
             TaskWorkOperationsSetDynamicJobWithHttpInfo(body, dynamicJobId, taskWorkId);
        }

        /// <summary>
        /// This call sets the users for a process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">users list to add</param>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetDynamicJobWithHttpInfo (List<UserCompleteDTO> body, int? dynamicJobId, int? taskWorkId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");
            // verify the required parameter 'dynamicJobId' is set
            if (dynamicJobId == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");

            var localVarPath = "/api/TaskOperations/dynamicjob/{dynamicJobId}/taskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobId != null) localVarPathParams.Add("dynamicJobId", this.Configuration.ApiClient.ParameterToString(dynamicJobId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the users for a process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">users list to add</param>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetDynamicJobAsync (List<UserCompleteDTO> body, int? dynamicJobId, int? taskWorkId)
        {
             await TaskWorkOperationsSetDynamicJobAsyncWithHttpInfo(body, dynamicJobId, taskWorkId);

        }

        /// <summary>
        /// This call sets the users for a process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">users list to add</param>
        /// <param name="dynamicJobId">Id of the dynamic job</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetDynamicJobAsyncWithHttpInfo (List<UserCompleteDTO> body, int? dynamicJobId, int? taskWorkId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");
            // verify the required parameter 'dynamicJobId' is set
            if (dynamicJobId == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJob");

            var localVarPath = "/api/TaskOperations/dynamicjob/{dynamicJobId}/taskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobId != null) localVarPathParams.Add("dynamicJobId", this.Configuration.ApiClient.ParameterToString(dynamicJobId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetDynamicJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for multiple dynamic job set</param>
        /// <returns></returns>
        public void TaskWorkOperationsSetDynamicJobMultiple (DynamicJobMultipleSetRequestDTO body)
        {
             TaskWorkOperationsSetDynamicJobMultipleWithHttpInfo(body);
        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for multiple dynamic job set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetDynamicJobMultipleWithHttpInfo (DynamicJobMultipleSetRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJobMultiple");

            var localVarPath = "/api/TaskOperations/dynamicjobmultiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetDynamicJobMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for multiple dynamic job set</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetDynamicJobMultipleAsync (DynamicJobMultipleSetRequestDTO body)
        {
             await TaskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for multiple dynamic job set</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo (DynamicJobMultipleSetRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJobMultiple");

            var localVarPath = "/api/TaskOperations/dynamicjobmultiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetDynamicJobMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUserId"></param>
        /// <param name="taskWorkIds"></param>
        /// <param name="users"></param>
        /// <returns></returns>
        public void TaskWorkOperationsSetDynamicJobMultiple (int? dynamicJobUserId, List<int?> taskWorkIds, List<UserCompleteDTO> users)
        {
             TaskWorkOperationsSetDynamicJobMultipleWithHttpInfo(dynamicJobUserId, taskWorkIds, users);
        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUserId"></param>
        /// <param name="taskWorkIds"></param>
        /// <param name="users"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetDynamicJobMultipleWithHttpInfo (int? dynamicJobUserId, List<int?> taskWorkIds, List<UserCompleteDTO> users)
        {
            // verify the required parameter 'dynamicJobUserId' is set
            if (dynamicJobUserId == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobUserId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJobMultiple");
            // verify the required parameter 'taskWorkIds' is set
            if (taskWorkIds == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkIds' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJobMultiple");
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJobMultiple");

            var localVarPath = "/api/TaskOperations/dynamicjobmultiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobUserId != null) localVarFormParams.Add("dynamicJobUserId", this.Configuration.ApiClient.ParameterToString(dynamicJobUserId)); // form parameter
            if (taskWorkIds != null) localVarFormParams.Add("taskWorkIds", this.Configuration.ApiClient.ParameterToString(taskWorkIds)); // form parameter
            if (users != null) localVarFormParams.Add("users", this.Configuration.ApiClient.ParameterToString(users)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetDynamicJobMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUserId"></param>
        /// <param name="taskWorkIds"></param>
        /// <param name="users"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetDynamicJobMultipleAsync (int? dynamicJobUserId, List<int?> taskWorkIds, List<UserCompleteDTO> users)
        {
             await TaskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo(dynamicJobUserId, taskWorkIds, users);

        }

        /// <summary>
        /// This call sets the users for multiple process dynamic job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dynamicJobUserId"></param>
        /// <param name="taskWorkIds"></param>
        /// <param name="users"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetDynamicJobMultipleAsyncWithHttpInfo (int? dynamicJobUserId, List<int?> taskWorkIds, List<UserCompleteDTO> users)
        {
            // verify the required parameter 'dynamicJobUserId' is set
            if (dynamicJobUserId == null)
                throw new ApiException(400, "Missing required parameter 'dynamicJobUserId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJobMultiple");
            // verify the required parameter 'taskWorkIds' is set
            if (taskWorkIds == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkIds' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJobMultiple");
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling TaskWorkOperationsApi->TaskWorkOperationsSetDynamicJobMultiple");

            var localVarPath = "/api/TaskOperations/dynamicjobmultiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dynamicJobUserId != null) localVarFormParams.Add("dynamicJobUserId", this.Configuration.ApiClient.ParameterToString(dynamicJobUserId)); // form parameter
            if (taskWorkIds != null) localVarFormParams.Add("taskWorkIds", this.Configuration.ApiClient.ParameterToString(taskWorkIds)); // form parameter
            if (users != null) localVarFormParams.Add("users", this.Configuration.ApiClient.ParameterToString(users)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetDynamicJobMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process variables informations</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns></returns>
        public void TaskWorkOperationsSetProcessVariableValueByTaskWorkId (ProcessVariablesFieldsDTO body, int? taskWorkId)
        {
             TaskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo(body, taskWorkId);
        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process variables informations</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo (ProcessVariablesFieldsDTO body, int? taskWorkId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/setprocessvariables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetProcessVariableValueByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process variables informations</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsync (ProcessVariablesFieldsDTO body, int? taskWorkId)
        {
             await TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo(body, taskWorkId);

        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Process variables informations</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo (ProcessVariablesFieldsDTO body, int? taskWorkId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/setprocessvariables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetProcessVariableValueByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns></returns>
        public void TaskWorkOperationsSetProcessVariableValueByTaskWorkId (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? taskWorkId)
        {
             TaskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo(booleanVariables, stringVariables, comboVariables, dateTimeVariables, doubleVariables, tableVariables, taskWorkId);
        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? taskWorkId)
        {
            // verify the required parameter 'booleanVariables' is set
            if (booleanVariables == null)
                throw new ApiException(400, "Missing required parameter 'booleanVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'stringVariables' is set
            if (stringVariables == null)
                throw new ApiException(400, "Missing required parameter 'stringVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'comboVariables' is set
            if (comboVariables == null)
                throw new ApiException(400, "Missing required parameter 'comboVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'dateTimeVariables' is set
            if (dateTimeVariables == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'doubleVariables' is set
            if (doubleVariables == null)
                throw new ApiException(400, "Missing required parameter 'doubleVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'tableVariables' is set
            if (tableVariables == null)
                throw new ApiException(400, "Missing required parameter 'tableVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/setprocessvariables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (booleanVariables != null) localVarFormParams.Add("booleanVariables", this.Configuration.ApiClient.ParameterToString(booleanVariables)); // form parameter
            if (stringVariables != null) localVarFormParams.Add("stringVariables", this.Configuration.ApiClient.ParameterToString(stringVariables)); // form parameter
            if (comboVariables != null) localVarFormParams.Add("comboVariables", this.Configuration.ApiClient.ParameterToString(comboVariables)); // form parameter
            if (dateTimeVariables != null) localVarFormParams.Add("dateTimeVariables", this.Configuration.ApiClient.ParameterToString(dateTimeVariables)); // form parameter
            if (doubleVariables != null) localVarFormParams.Add("doubleVariables", this.Configuration.ApiClient.ParameterToString(doubleVariables)); // form parameter
            if (tableVariables != null) localVarFormParams.Add("tableVariables", this.Configuration.ApiClient.ParameterToString(tableVariables)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetProcessVariableValueByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsync (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? taskWorkId)
        {
             await TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo(booleanVariables, stringVariables, comboVariables, dateTimeVariables, doubleVariables, tableVariables, taskWorkId);

        }

        /// <summary>
        /// This call sets the values for the process variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetProcessVariableValueByTaskWorkIdAsyncWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? taskWorkId)
        {
            // verify the required parameter 'booleanVariables' is set
            if (booleanVariables == null)
                throw new ApiException(400, "Missing required parameter 'booleanVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'stringVariables' is set
            if (stringVariables == null)
                throw new ApiException(400, "Missing required parameter 'stringVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'comboVariables' is set
            if (comboVariables == null)
                throw new ApiException(400, "Missing required parameter 'comboVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'dateTimeVariables' is set
            if (dateTimeVariables == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'doubleVariables' is set
            if (doubleVariables == null)
                throw new ApiException(400, "Missing required parameter 'doubleVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'tableVariables' is set
            if (tableVariables == null)
                throw new ApiException(400, "Missing required parameter 'tableVariables' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProcessVariableValueByTaskWorkId");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/setprocessvariables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (booleanVariables != null) localVarFormParams.Add("booleanVariables", this.Configuration.ApiClient.ParameterToString(booleanVariables)); // form parameter
            if (stringVariables != null) localVarFormParams.Add("stringVariables", this.Configuration.ApiClient.ParameterToString(stringVariables)); // form parameter
            if (comboVariables != null) localVarFormParams.Add("comboVariables", this.Configuration.ApiClient.ParameterToString(comboVariables)); // form parameter
            if (dateTimeVariables != null) localVarFormParams.Add("dateTimeVariables", this.Configuration.ApiClient.ParameterToString(dateTimeVariables)); // form parameter
            if (doubleVariables != null) localVarFormParams.Add("doubleVariables", this.Configuration.ApiClient.ParameterToString(doubleVariables)); // form parameter
            if (tableVariables != null) localVarFormParams.Add("tableVariables", this.Configuration.ApiClient.ParameterToString(tableVariables)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetProcessVariableValueByTaskWorkId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of taskwork id</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <returns></returns>
        public void TaskWorkOperationsSetProfessionalRoleByTaskIds (List<int?> body, int? professionalRoleId, int? userToAssignId)
        {
             TaskWorkOperationsSetProfessionalRoleByTaskIdsWithHttpInfo(body, professionalRoleId, userToAssignId);
        }

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of taskwork id</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetProfessionalRoleByTaskIdsWithHttpInfo (List<int?> body, int? professionalRoleId, int? userToAssignId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");
            // verify the required parameter 'userToAssignId' is set
            if (userToAssignId == null)
                throw new ApiException(400, "Missing required parameter 'userToAssignId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/{userToAssignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", this.Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (userToAssignId != null) localVarPathParams.Add("userToAssignId", this.Configuration.ApiClient.ParameterToString(userToAssignId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetProfessionalRoleByTaskIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of taskwork id</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetProfessionalRoleByTaskIdsAsync (List<int?> body, int? professionalRoleId, int? userToAssignId)
        {
             await TaskWorkOperationsSetProfessionalRoleByTaskIdsAsyncWithHttpInfo(body, professionalRoleId, userToAssignId);

        }

        /// <summary>
        /// This call sets the professional roles users for multiple TaskWork Ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of taskwork id</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userToAssignId">If of user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetProfessionalRoleByTaskIdsAsyncWithHttpInfo (List<int?> body, int? professionalRoleId, int? userToAssignId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");
            // verify the required parameter 'userToAssignId' is set
            if (userToAssignId == null)
                throw new ApiException(400, "Missing required parameter 'userToAssignId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetProfessionalRoleByTaskIds");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/{userToAssignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", this.Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (userToAssignId != null) localVarPathParams.Add("userToAssignId", this.Configuration.ApiClient.ParameterToString(userToAssignId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetProfessionalRoleByTaskIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the user for a professional role operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns></returns>
        public void TaskWorkOperationsSetUsersForProfessionalRoleSelection (int? taskWorkId, int? professionalRoleId, int? userId)
        {
             TaskWorkOperationsSetUsersForProfessionalRoleSelectionWithHttpInfo(taskWorkId, professionalRoleId, userId);
        }

        /// <summary>
        /// This call sets the user for a professional role operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsSetUsersForProfessionalRoleSelectionWithHttpInfo (int? taskWorkId, int? professionalRoleId, int? userId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/setuserbytaskwork/{taskWorkId}/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", this.Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetUsersForProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the user for a professional role operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsSetUsersForProfessionalRoleSelectionAsync (int? taskWorkId, int? professionalRoleId, int? userId)
        {
             await TaskWorkOperationsSetUsersForProfessionalRoleSelectionAsyncWithHttpInfo(taskWorkId, professionalRoleId, userId);

        }

        /// <summary>
        /// This call sets the user for a professional role operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="userId">Id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsSetUsersForProfessionalRoleSelectionAsyncWithHttpInfo (int? taskWorkId, int? professionalRoleId, int? userId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TaskWorkOperationsApi->TaskWorkOperationsSetUsersForProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/setuserbytaskwork/{taskWorkId}/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", this.Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsSetUsersForProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// this call executes a command task operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns></returns>
        public void TaskWorkOperationsTaskWorkCommandExecute (int? taskWorkId, int? taskWorkCommandId)
        {
             TaskWorkOperationsTaskWorkCommandExecuteWithHttpInfo(taskWorkId, taskWorkCommandId);
        }

        /// <summary>
        /// this call executes a command task operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsTaskWorkCommandExecuteWithHttpInfo (int? taskWorkId, int? taskWorkCommandId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsTaskWorkCommandExecute");
            // verify the required parameter 'taskWorkCommandId' is set
            if (taskWorkCommandId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkCommandId' when calling TaskWorkOperationsApi->TaskWorkOperationsTaskWorkCommandExecute");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/taskworkcommand/{taskWorkCommandId}/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkCommandId != null) localVarPathParams.Add("taskWorkCommandId", this.Configuration.ApiClient.ParameterToString(taskWorkCommandId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsTaskWorkCommandExecute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// this call executes a command task operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsTaskWorkCommandExecuteAsync (int? taskWorkId, int? taskWorkCommandId)
        {
             await TaskWorkOperationsTaskWorkCommandExecuteAsyncWithHttpInfo(taskWorkId, taskWorkCommandId);

        }

        /// <summary>
        /// this call executes a command task operation 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskWorkId">Task id of the operation</param>
        /// <param name="taskWorkCommandId">Id of the command operation</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsTaskWorkCommandExecuteAsyncWithHttpInfo (int? taskWorkId, int? taskWorkCommandId)
        {
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsTaskWorkCommandExecute");
            // verify the required parameter 'taskWorkCommandId' is set
            if (taskWorkCommandId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkCommandId' when calling TaskWorkOperationsApi->TaskWorkOperationsTaskWorkCommandExecute");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/taskworkcommand/{taskWorkCommandId}/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (taskWorkCommandId != null) localVarPathParams.Add("taskWorkCommandId", this.Configuration.ApiClient.ParameterToString(taskWorkCommandId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsTaskWorkCommandExecute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes the professional role actual value 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns></returns>
        public void TaskWorkOperationsUnSetProfessionalRoleSelection (int? professionalRoleId, int? taskWorkId)
        {
             TaskWorkOperationsUnSetProfessionalRoleSelectionWithHttpInfo(professionalRoleId, taskWorkId);
        }

        /// <summary>
        /// This call deletes the professional role actual value 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TaskWorkOperationsUnSetProfessionalRoleSelectionWithHttpInfo (int? professionalRoleId, int? taskWorkId)
        {
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsUnSetProfessionalRoleSelection");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsUnSetProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/bytaskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", this.Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsUnSetProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes the professional role actual value 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TaskWorkOperationsUnSetProfessionalRoleSelectionAsync (int? professionalRoleId, int? taskWorkId)
        {
             await TaskWorkOperationsUnSetProfessionalRoleSelectionAsyncWithHttpInfo(professionalRoleId, taskWorkId);

        }

        /// <summary>
        /// This call deletes the professional role actual value 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="professionalRoleId">Id of the professional role</param>
        /// <param name="taskWorkId">Id of the task work</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TaskWorkOperationsUnSetProfessionalRoleSelectionAsyncWithHttpInfo (int? professionalRoleId, int? taskWorkId)
        {
            // verify the required parameter 'professionalRoleId' is set
            if (professionalRoleId == null)
                throw new ApiException(400, "Missing required parameter 'professionalRoleId' when calling TaskWorkOperationsApi->TaskWorkOperationsUnSetProfessionalRoleSelection");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsUnSetProfessionalRoleSelection");

            var localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/bytaskwork/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (professionalRoleId != null) localVarPathParams.Add("professionalRoleId", this.Configuration.ApiClient.ParameterToString(professionalRoleId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsUnSetProfessionalRoleSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>ValidationFieldResultDTO</returns>
        public ValidationFieldResultDTO TaskWorkOperationsValidateVariabile (ProcessVariableValidationDTO body, int? taskWorkId)
        {
             ApiResponse<ValidationFieldResultDTO> localVarResponse = TaskWorkOperationsValidateVariabileWithHttpInfo(body, taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>ApiResponse of ValidationFieldResultDTO</returns>
        public ApiResponse< ValidationFieldResultDTO > TaskWorkOperationsValidateVariabileWithHttpInfo (ProcessVariableValidationDTO body, int? taskWorkId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsValidateVariabile");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsValidateVariabile");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsValidateVariabile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationFieldResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidationFieldResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationFieldResultDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>Task of ValidationFieldResultDTO</returns>
        public async System.Threading.Tasks.Task<ValidationFieldResultDTO> TaskWorkOperationsValidateVariabileAsync (ProcessVariableValidationDTO body, int? taskWorkId)
        {
             ApiResponse<ValidationFieldResultDTO> localVarResponse = await TaskWorkOperationsValidateVariabileAsyncWithHttpInfo(body, taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>Task of ApiResponse (ValidationFieldResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationFieldResultDTO>> TaskWorkOperationsValidateVariabileAsyncWithHttpInfo (ProcessVariableValidationDTO body, int? taskWorkId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskWorkOperationsApi->TaskWorkOperationsValidateVariabile");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsValidateVariabile");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsValidateVariabile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationFieldResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidationFieldResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationFieldResultDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>ValidationFieldResultDTO</returns>
        public ValidationFieldResultDTO TaskWorkOperationsValidateVariabile (string variableName, ProcessVariablesFieldsDTO currentData, int? taskWorkId)
        {
             ApiResponse<ValidationFieldResultDTO> localVarResponse = TaskWorkOperationsValidateVariabileWithHttpInfo(variableName, currentData, taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>ApiResponse of ValidationFieldResultDTO</returns>
        public ApiResponse< ValidationFieldResultDTO > TaskWorkOperationsValidateVariabileWithHttpInfo (string variableName, ProcessVariablesFieldsDTO currentData, int? taskWorkId)
        {
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling TaskWorkOperationsApi->TaskWorkOperationsValidateVariabile");
            // verify the required parameter 'currentData' is set
            if (currentData == null)
                throw new ApiException(400, "Missing required parameter 'currentData' when calling TaskWorkOperationsApi->TaskWorkOperationsValidateVariabile");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsValidateVariabile");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (variableName != null) localVarFormParams.Add("variableName", this.Configuration.ApiClient.ParameterToString(variableName)); // form parameter
            if (currentData != null) localVarFormParams.Add("currentData", this.Configuration.ApiClient.ParameterToString(currentData)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsValidateVariabile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationFieldResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidationFieldResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationFieldResultDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>Task of ValidationFieldResultDTO</returns>
        public async System.Threading.Tasks.Task<ValidationFieldResultDTO> TaskWorkOperationsValidateVariabileAsync (string variableName, ProcessVariablesFieldsDTO currentData, int? taskWorkId)
        {
             ApiResponse<ValidationFieldResultDTO> localVarResponse = await TaskWorkOperationsValidateVariabileAsyncWithHttpInfo(variableName, currentData, taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="taskWorkId"></param>
        /// <returns>Task of ApiResponse (ValidationFieldResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationFieldResultDTO>> TaskWorkOperationsValidateVariabileAsyncWithHttpInfo (string variableName, ProcessVariablesFieldsDTO currentData, int? taskWorkId)
        {
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling TaskWorkOperationsApi->TaskWorkOperationsValidateVariabile");
            // verify the required parameter 'currentData' is set
            if (currentData == null)
                throw new ApiException(400, "Missing required parameter 'currentData' when calling TaskWorkOperationsApi->TaskWorkOperationsValidateVariabile");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling TaskWorkOperationsApi->TaskWorkOperationsValidateVariabile");

            var localVarPath = "/api/TaskOperations/{taskWorkId}/validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (variableName != null) localVarFormParams.Add("variableName", this.Configuration.ApiClient.ParameterToString(variableName)); // form parameter
            if (currentData != null) localVarFormParams.Add("currentData", this.Configuration.ApiClient.ParameterToString(currentData)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskWorkOperationsValidateVariabile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationFieldResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidationFieldResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationFieldResultDTO)));
        }

    }
}
