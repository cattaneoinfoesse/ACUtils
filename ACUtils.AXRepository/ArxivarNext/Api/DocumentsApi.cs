/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>bool?</returns>
        bool? DocumentsCanRead (int? docnumber);

        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> DocumentsCanReadWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns></returns>
        void DocumentsCanWrite (int? docnumber);

        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsCanWriteWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns if the user can write the document under workflow process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns></returns>
        void DocumentsCanWriteForTask (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call returns if the user can write the document under workflow process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsCanWriteForTaskWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call returns if the user can write the document under workflow process (V2).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Identifier of document process</param>
        /// <param name="docnumber">Identifier of profile</param>
        /// <returns></returns>
        void DocumentsCanWriteForTask_0 (Guid? documentId, int? docnumber);

        /// <summary>
        /// This call returns if the user can write the document under workflow process (V2).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Identifier of document process</param>
        /// <param name="docnumber">Identifier of profile</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsCanWriteForTask_0WithHttpInfo (Guid? documentId, int? docnumber);
        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsExportMassiveForProfile (ExportMassiveForProfileRequestDTO body);

        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsExportMassiveForProfileWithHttpInfo (ExportMassiveForProfileRequestDTO body);
        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profiles"></param>
        /// <param name="forView"></param>
        /// <returns>byte[]</returns>
        byte[] DocumentsExportMassiveForProfile (List<int?> profiles, bool? forView);

        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profiles"></param>
        /// <param name="forView"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsExportMassiveForProfileWithHttpInfo (List<int?> profiles, bool? forView);
        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsExportMassiveForProfile_0 (ExportMassiveForProcessDocRequestDTO body);

        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsExportMassiveForProfile_0WithHttpInfo (ExportMassiveForProcessDocRequestDTO body);
        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <returns>byte[]</returns>
        byte[] DocumentsExportMassiveForProfile_0 (List<ExportMassiveForProcessDocItemRequestDTO> items, bool? forView);

        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsExportMassiveForProfile_0WithHttpInfo (List<ExportMassiveForProcessDocItemRequestDTO> items, bool? forView);
        /// <summary>
        /// This call returns the document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetDocumentByRevisionId (int? revisionId, bool? forView = null);

        /// <summary>
        /// This call returns the document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetDocumentByRevisionIdWithHttpInfo (int? revisionId, bool? forView = null);
        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use {id}/{forView} instead
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetExtractP7M (int? id);

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use {id}/{forView} instead
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetExtractP7MWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetExtractedDocumentByRevisionId (int? revisionId);

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetExtractedDocumentByRevisionIdWithHttpInfo (int? revisionId);
        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetExtractedForProfile (int? id);

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetExtractedForProfileWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetExtractedForTask (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetExtractedForTaskWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetExtractedForTaskAttachement (int? id);

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetExtractedForTaskAttachementWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetExtractedProfileAttachment (int? id);

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetExtractedProfileAttachmentWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetExtractedProfileAttachmentRevision (int? attachmentId, int? attachmentRevisionId);

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetExtractedProfileAttachmentRevisionWithHttpInfo (int? attachmentId, int? attachmentRevisionId);
        /// <summary>
        /// This call retrieve a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetForExternalAttachment (int? id, bool? forView = null);

        /// <summary>
        /// This call retrieve a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetForExternalAttachmentWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call gets the document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetForMail (int? id, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// This call gets the document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetForMailWithHttpInfo (int? id, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetForProcessAttachement (int? attachementid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetForProcessAttachementWithHttpInfo (int? attachementid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetForProcessDocument (int? processdocid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetForProcessDocumentWithHttpInfo (int? processdocid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetForProfile (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetForProfileWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="cacheId">Cache Identifier</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetForProfileByCacheId (int? id, string cacheId);

        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="cacheId">Cache Identifier</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetForProfileByCacheIdWithHttpInfo (int? id, string cacheId);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetForTask (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetForTaskWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetForTaskAttachement (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetForTaskAttachementWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns if the document process has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>bool?</returns>
        bool? DocumentsGetForTaskHasDocument (int? processDocId);

        /// <summary>
        /// This call returns if the document process has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> DocumentsGetForTaskHasDocumentWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetForTaskReadOnly (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetForTaskReadOnlyWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call returns if the profile has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>bool?</returns>
        bool? DocumentsGetHasDocumentForProfile (int? id);

        /// <summary>
        /// This call returns if the profile has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> DocumentsGetHasDocumentForProfileWithHttpInfo (int? id);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProcessDoc (MailMassiveForProcessDocRequestDTO body);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        ApiResponse<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProcessDocWithHttpInfo (MailMassiveForProcessDocRequestDTO body);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProcessDoc (List<MailMassiveForProcessDocItemRequestDTO> items, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        ApiResponse<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProcessDocWithHttpInfo (List<MailMassiveForProcessDocItemRequestDTO> items, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProfile (MailMassiveForProfileRequestDTO body);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        ApiResponse<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProfileWithHttpInfo (MailMassiveForProfileRequestDTO body);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProfile (List<int?> items, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        ApiResponse<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProfileWithHttpInfo (List<int?> items, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// This call gets the process document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetProcessdocForMail (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetProcessdocForMailWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// This call retrieve the attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DocumentsGetRevisionDocumentById (int? attachmentId, int? revisionId, bool? forView = null);

        /// <summary>
        /// This call retrieve the attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DocumentsGetRevisionDocumentByIdWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null);
        /// <summary>
        /// This call update a file associated to a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns></returns>
        void DocumentsSetDocument (string cacheId, int? docNumber);

        /// <summary>
        /// This call update a file associated to a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsSetDocumentWithHttpInfo (string cacheId, int? docNumber);
        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns></returns>
        void DocumentsSetDocumentWithOption (string cacheId, int? docNumber, int? updateOption);

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsSetDocumentWithOptionWithHttpInfo (string cacheId, int? docNumber, int? updateOption);
        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns></returns>
        void DocumentsSetDocumentWithOptionForProcessV2 (string cacheId, int? docNumber, int? updateOption);

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsSetDocumentWithOptionForProcessV2WithHttpInfo (string cacheId, int? docNumber, int? updateOption);
        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns></returns>
        void DocumentsSetDocumentWithOptionForTaskV2 (string cacheId, int? docNumber, Guid? processDocId, int? updateOption);

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsSetDocumentWithOptionForTaskV2WithHttpInfo (string cacheId, int? docNumber, Guid? processDocId, int? updateOption);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> DocumentsCanReadAsync (int? docnumber);

        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> DocumentsCanReadAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsCanWriteAsync (int? docnumber);

        /// <summary>
        /// This call returns if the user can write the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCanWriteAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns if the user can write the document under workflow process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsCanWriteForTaskAsync (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call returns if the user can write the document under workflow process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCanWriteForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call returns if the user can write the document under workflow process (V2).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Identifier of document process</param>
        /// <param name="docnumber">Identifier of profile</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsCanWriteForTask_0Async (Guid? documentId, int? docnumber);

        /// <summary>
        /// This call returns if the user can write the document under workflow process (V2).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Identifier of document process</param>
        /// <param name="docnumber">Identifier of profile</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCanWriteForTask_0AsyncWithHttpInfo (Guid? documentId, int? docnumber);
        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsExportMassiveForProfileAsync (ExportMassiveForProfileRequestDTO body);

        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsExportMassiveForProfileAsyncWithHttpInfo (ExportMassiveForProfileRequestDTO body);
        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profiles"></param>
        /// <param name="forView"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsExportMassiveForProfileAsync (List<int?> profiles, bool? forView);

        /// <summary>
        /// This call start new export procedure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profiles"></param>
        /// <param name="forView"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsExportMassiveForProfileAsyncWithHttpInfo (List<int?> profiles, bool? forView);
        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsExportMassiveForProfile_0Async (ExportMassiveForProcessDocRequestDTO body);

        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsExportMassiveForProfile_0AsyncWithHttpInfo (ExportMassiveForProcessDocRequestDTO body);
        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsExportMassiveForProfile_0Async (List<ExportMassiveForProcessDocItemRequestDTO> items, bool? forView);

        /// <summary>
        /// This call start new export procedure for processdoc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsExportMassiveForProfile_0AsyncWithHttpInfo (List<ExportMassiveForProcessDocItemRequestDTO> items, bool? forView);
        /// <summary>
        /// This call returns the document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetDocumentByRevisionIdAsync (int? revisionId, bool? forView = null);

        /// <summary>
        /// This call returns the document associated to a specified revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetDocumentByRevisionIdAsyncWithHttpInfo (int? revisionId, bool? forView = null);
        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use {id}/{forView} instead
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetExtractP7MAsync (int? id);

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use {id}/{forView} instead
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractP7MAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedDocumentByRevisionIdAsync (int? revisionId);

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedDocumentByRevisionIdAsyncWithHttpInfo (int? revisionId);
        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedForProfileAsync (int? id);

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedForProfileAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedForTaskAsync (int? processDocId, int? taskWorkId);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId);
        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedForTaskAttachementAsync (int? id);

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedForTaskAttachementAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedProfileAttachmentAsync (int? id);

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedProfileAttachmentAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedProfileAttachmentRevisionAsync (int? attachmentId, int? attachmentRevisionId);

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedProfileAttachmentRevisionAsyncWithHttpInfo (int? attachmentId, int? attachmentRevisionId);
        /// <summary>
        /// This call retrieve a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetForExternalAttachmentAsync (int? id, bool? forView = null);

        /// <summary>
        /// This call retrieve a file for an external profile attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForExternalAttachmentAsyncWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call gets the document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetForMailAsync (int? id, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// This call gets the document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForMailAsyncWithHttpInfo (int? id, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetForProcessAttachementAsync (int? attachementid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForProcessAttachementAsyncWithHttpInfo (int? attachementid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetForProcessDocumentAsync (int? processdocid, int? processId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForProcessDocumentAsyncWithHttpInfo (int? processdocid, int? processId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetForProfileAsync (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForProfileAsyncWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="cacheId">Cache Identifier</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetForProfileByCacheIdAsync (int? id, string cacheId);

        /// <summary>
        /// This call returns the file associated with a specified profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="cacheId">Cache Identifier</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForProfileByCacheIdAsyncWithHttpInfo (int? id, string cacheId);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetForTaskAsync (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call returns the file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetForTaskAttachementAsync (int? id, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with the task attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForTaskAttachementAsyncWithHttpInfo (int? id, bool? forView = null);
        /// <summary>
        /// This call returns if the document process has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> DocumentsGetForTaskHasDocumentAsync (int? processDocId);

        /// <summary>
        /// This call returns if the document process has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> DocumentsGetForTaskHasDocumentAsyncWithHttpInfo (int? processDocId);
        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetForTaskReadOnlyAsync (int? processDocId, int? taskWorkId, bool? forView = null);

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForTaskReadOnlyAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null);
        /// <summary>
        /// This call returns if the profile has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> DocumentsGetHasDocumentForProfileAsync (int? id);

        /// <summary>
        /// This call returns if the profile has a associated file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> DocumentsGetHasDocumentForProfileAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProcessDocAsync (MailMassiveForProcessDocRequestDTO body);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProcessDocAsyncWithHttpInfo (MailMassiveForProcessDocRequestDTO body);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProcessDocAsync (List<MailMassiveForProcessDocItemRequestDTO> items, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProcessDocAsyncWithHttpInfo (List<MailMassiveForProcessDocItemRequestDTO> items, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProfileAsync (MailMassiveForProfileRequestDTO body);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProfileAsyncWithHttpInfo (MailMassiveForProfileRequestDTO body);
        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProfileAsync (List<int?> items, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProfileAsyncWithHttpInfo (List<int?> items, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// This call gets the process document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetProcessdocForMailAsync (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments);

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetProcessdocForMailAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments);
        /// <summary>
        /// This call retrieve the attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DocumentsGetRevisionDocumentByIdAsync (int? attachmentId, int? revisionId, bool? forView = null);

        /// <summary>
        /// This call retrieve the attachemnt file by its revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetRevisionDocumentByIdAsyncWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null);
        /// <summary>
        /// This call update a file associated to a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsSetDocumentAsync (string cacheId, int? docNumber);

        /// <summary>
        /// This call update a file associated to a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentAsyncWithHttpInfo (string cacheId, int? docNumber);
        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsSetDocumentWithOptionAsync (string cacheId, int? docNumber, int? updateOption);

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentWithOptionAsyncWithHttpInfo (string cacheId, int? docNumber, int? updateOption);
        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsSetDocumentWithOptionForProcessV2Async (string cacheId, int? docNumber, int? updateOption);

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentWithOptionForProcessV2AsyncWithHttpInfo (string cacheId, int? docNumber, int? updateOption);
        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsSetDocumentWithOptionForTaskV2Async (string cacheId, int? docNumber, Guid? processDocId, int? updateOption);

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentWithOptionForTaskV2AsyncWithHttpInfo (string cacheId, int? docNumber, Guid? processDocId, int? updateOption);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DocumentsApi : IDocumentsApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DocumentsApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>bool?</returns>
        public bool? DocumentsCanRead (int? docnumber)
        {
             ApiResponse<bool?> localVarResponse = DocumentsCanReadWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > DocumentsCanReadWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling DocumentsApi->DocumentsCanRead");

            var localVarPath = "/api/Documents/{docnumber}/canRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> DocumentsCanReadAsync (int? docnumber)
        {
             ApiResponse<bool?> localVarResponse = await DocumentsCanReadAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> DocumentsCanReadAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling DocumentsApi->DocumentsCanRead");

            var localVarPath = "/api/Documents/{docnumber}/canRead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns></returns>
        public void DocumentsCanWrite (int? docnumber)
        {
             DocumentsCanWriteWithHttpInfo(docnumber);
        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsCanWriteWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling DocumentsApi->DocumentsCanWrite");

            var localVarPath = "/api/Documents/{docnumber}/canWrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanWrite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsCanWriteAsync (int? docnumber)
        {
             await DocumentsCanWriteAsyncWithHttpInfo(docnumber);

        }

        /// <summary>
        /// This call returns if the user can write the file. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCanWriteAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling DocumentsApi->DocumentsCanWrite");

            var localVarPath = "/api/Documents/{docnumber}/canWrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanWrite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns></returns>
        public void DocumentsCanWriteForTask (int? processDocId, int? taskWorkId)
        {
             DocumentsCanWriteForTaskWithHttpInfo(processDocId, taskWorkId);
        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsCanWriteForTaskWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsCanWriteForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsCanWriteForTask");

            var localVarPath = "/api/Documents/forTask/{processDocId}/{taskWorkId}/canWrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanWriteForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsCanWriteForTaskAsync (int? processDocId, int? taskWorkId)
        {
             await DocumentsCanWriteForTaskAsyncWithHttpInfo(processDocId, taskWorkId);

        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCanWriteForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsCanWriteForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsCanWriteForTask");

            var localVarPath = "/api/Documents/forTask/{processDocId}/{taskWorkId}/canWrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanWriteForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process (V2). 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Identifier of document process</param>
        /// <param name="docnumber">Identifier of profile</param>
        /// <returns></returns>
        public void DocumentsCanWriteForTask_0 (Guid? documentId, int? docnumber)
        {
             DocumentsCanWriteForTask_0WithHttpInfo(documentId, docnumber);
        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process (V2). 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Identifier of document process</param>
        /// <param name="docnumber">Identifier of profile</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsCanWriteForTask_0WithHttpInfo (Guid? documentId, int? docnumber)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCanWriteForTask_0");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling DocumentsApi->DocumentsCanWriteForTask_0");

            var localVarPath = "/api/Documents/forTaskV2/{documentId}/{docnumber}/canWrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanWriteForTask_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process (V2). 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Identifier of document process</param>
        /// <param name="docnumber">Identifier of profile</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsCanWriteForTask_0Async (Guid? documentId, int? docnumber)
        {
             await DocumentsCanWriteForTask_0AsyncWithHttpInfo(documentId, docnumber);

        }

        /// <summary>
        /// This call returns if the user can write the document under workflow process (V2). 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Identifier of document process</param>
        /// <param name="docnumber">Identifier of profile</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsCanWriteForTask_0AsyncWithHttpInfo (Guid? documentId, int? docnumber)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DocumentsCanWriteForTask_0");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling DocumentsApi->DocumentsCanWriteForTask_0");

            var localVarPath = "/api/Documents/forTaskV2/{documentId}/{docnumber}/canWrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCanWriteForTask_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsExportMassiveForProfile (ExportMassiveForProfileRequestDTO body)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsExportMassiveForProfileWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsExportMassiveForProfileWithHttpInfo (ExportMassiveForProfileRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentsApi->DocumentsExportMassiveForProfile");

            var localVarPath = "/api/Documents/ExportMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsExportMassiveForProfileAsync (ExportMassiveForProfileRequestDTO body)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsExportMassiveForProfileAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsExportMassiveForProfileAsyncWithHttpInfo (ExportMassiveForProfileRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentsApi->DocumentsExportMassiveForProfile");

            var localVarPath = "/api/Documents/ExportMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profiles"></param>
        /// <param name="forView"></param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsExportMassiveForProfile (List<int?> profiles, bool? forView)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsExportMassiveForProfileWithHttpInfo(profiles, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profiles"></param>
        /// <param name="forView"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsExportMassiveForProfileWithHttpInfo (List<int?> profiles, bool? forView)
        {
            // verify the required parameter 'profiles' is set
            if (profiles == null)
                throw new ApiException(400, "Missing required parameter 'profiles' when calling DocumentsApi->DocumentsExportMassiveForProfile");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsExportMassiveForProfile");

            var localVarPath = "/api/Documents/ExportMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profiles != null) localVarFormParams.Add("profiles", this.Configuration.ApiClient.ParameterToString(profiles)); // form parameter
            if (forView != null) localVarFormParams.Add("forView", this.Configuration.ApiClient.ParameterToString(forView)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profiles"></param>
        /// <param name="forView"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsExportMassiveForProfileAsync (List<int?> profiles, bool? forView)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsExportMassiveForProfileAsyncWithHttpInfo(profiles, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call start new export procedure 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profiles"></param>
        /// <param name="forView"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsExportMassiveForProfileAsyncWithHttpInfo (List<int?> profiles, bool? forView)
        {
            // verify the required parameter 'profiles' is set
            if (profiles == null)
                throw new ApiException(400, "Missing required parameter 'profiles' when calling DocumentsApi->DocumentsExportMassiveForProfile");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsExportMassiveForProfile");

            var localVarPath = "/api/Documents/ExportMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profiles != null) localVarFormParams.Add("profiles", this.Configuration.ApiClient.ParameterToString(profiles)); // form parameter
            if (forView != null) localVarFormParams.Add("forView", this.Configuration.ApiClient.ParameterToString(forView)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsExportMassiveForProfile_0 (ExportMassiveForProcessDocRequestDTO body)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsExportMassiveForProfile_0WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsExportMassiveForProfile_0WithHttpInfo (ExportMassiveForProcessDocRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentsApi->DocumentsExportMassiveForProfile_0");

            var localVarPath = "/api/Documents/ExportMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsExportMassiveForProfile_0Async (ExportMassiveForProcessDocRequestDTO body)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsExportMassiveForProfile_0AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for export procedure</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsExportMassiveForProfile_0AsyncWithHttpInfo (ExportMassiveForProcessDocRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentsApi->DocumentsExportMassiveForProfile_0");

            var localVarPath = "/api/Documents/ExportMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsExportMassiveForProfile_0 (List<ExportMassiveForProcessDocItemRequestDTO> items, bool? forView)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsExportMassiveForProfile_0WithHttpInfo(items, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsExportMassiveForProfile_0WithHttpInfo (List<ExportMassiveForProcessDocItemRequestDTO> items, bool? forView)
        {
            // verify the required parameter 'items' is set
            if (items == null)
                throw new ApiException(400, "Missing required parameter 'items' when calling DocumentsApi->DocumentsExportMassiveForProfile_0");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsExportMassiveForProfile_0");

            var localVarPath = "/api/Documents/ExportMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (items != null) localVarFormParams.Add("items", this.Configuration.ApiClient.ParameterToString(items)); // form parameter
            if (forView != null) localVarFormParams.Add("forView", this.Configuration.ApiClient.ParameterToString(forView)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsExportMassiveForProfile_0Async (List<ExportMassiveForProcessDocItemRequestDTO> items, bool? forView)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsExportMassiveForProfile_0AsyncWithHttpInfo(items, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call start new export procedure for processdoc 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsExportMassiveForProfile_0AsyncWithHttpInfo (List<ExportMassiveForProcessDocItemRequestDTO> items, bool? forView)
        {
            // verify the required parameter 'items' is set
            if (items == null)
                throw new ApiException(400, "Missing required parameter 'items' when calling DocumentsApi->DocumentsExportMassiveForProfile_0");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsExportMassiveForProfile_0");

            var localVarPath = "/api/Documents/ExportMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (items != null) localVarFormParams.Add("items", this.Configuration.ApiClient.ParameterToString(items)); // form parameter
            if (forView != null) localVarFormParams.Add("forView", this.Configuration.ApiClient.ParameterToString(forView)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsExportMassiveForProfile_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the document associated to a specified revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetDocumentByRevisionId (int? revisionId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetDocumentByRevisionIdWithHttpInfo(revisionId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the document associated to a specified revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetDocumentByRevisionIdWithHttpInfo (int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetDocumentByRevisionId");

            var localVarPath = "/api/Documents/byRevision/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetDocumentByRevisionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the document associated to a specified revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetDocumentByRevisionIdAsync (int? revisionId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetDocumentByRevisionIdAsyncWithHttpInfo(revisionId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the document associated to a specified revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetDocumentByRevisionIdAsyncWithHttpInfo (int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetDocumentByRevisionId");

            var localVarPath = "/api/Documents/byRevision/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetDocumentByRevisionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile This method is deprecated. Use {id}/{forView} instead
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetExtractP7M (int? id)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetExtractP7MWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile This method is deprecated. Use {id}/{forView} instead
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetExtractP7MWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractP7M");

            var localVarPath = "/api/Documents/{id}/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractP7M", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile This method is deprecated. Use {id}/{forView} instead
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetExtractP7MAsync (int? id)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetExtractP7MAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file, contained in the signature, associated with the profile This method is deprecated. Use {id}/{forView} instead
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractP7MAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractP7M");

            var localVarPath = "/api/Documents/{id}/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractP7M", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetExtractedDocumentByRevisionId (int? revisionId)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetExtractedDocumentByRevisionIdWithHttpInfo(revisionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetExtractedDocumentByRevisionIdWithHttpInfo (int? revisionId)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetExtractedDocumentByRevisionId");

            var localVarPath = "/api/Documents/extractByRevision/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedDocumentByRevisionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedDocumentByRevisionIdAsync (int? revisionId)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetExtractedDocumentByRevisionIdAsyncWithHttpInfo(revisionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the document associated to a specified revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of revision</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedDocumentByRevisionIdAsyncWithHttpInfo (int? revisionId)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetExtractedDocumentByRevisionId");

            var localVarPath = "/api/Documents/extractByRevision/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedDocumentByRevisionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetExtractedForProfile (int? id)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetExtractedForProfileWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetExtractedForProfileWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedForProfile");

            var localVarPath = "/api/Documents/extract/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedForProfileAsync (int? id)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetExtractedForProfileAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with a specified profile (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedForProfileAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedForProfile");

            var localVarPath = "/api/Documents/extract/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetExtractedForTask (int? processDocId, int? taskWorkId)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetExtractedForTaskWithHttpInfo(processDocId, taskWorkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetExtractedForTaskWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetExtractedForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetExtractedForTask");

            var localVarPath = "/api/Documents/extractForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedForTaskAsync (int? processDocId, int? taskWorkId)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetExtractedForTaskAsyncWithHttpInfo(processDocId, taskWorkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetExtractedForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetExtractedForTask");

            var localVarPath = "/api/Documents/extractForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetExtractedForTaskAttachement (int? id)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetExtractedForTaskAttachementWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetExtractedForTaskAttachementWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedForTaskAttachement");

            var localVarPath = "/api/Documents/extractTaskattachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForTaskAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedForTaskAttachementAsync (int? id)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetExtractedForTaskAttachementAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with the task attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedForTaskAttachementAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedForTaskAttachement");

            var localVarPath = "/api/Documents/extractTaskattachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedForTaskAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetExtractedProfileAttachment (int? id)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetExtractedProfileAttachmentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetExtractedProfileAttachmentWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedProfileAttachment");

            var localVarPath = "/api/Documents/extractProfileAttachment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedProfileAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedProfileAttachmentAsync (int? id)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetExtractedProfileAttachmentAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedProfileAttachmentAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetExtractedProfileAttachment");

            var localVarPath = "/api/Documents/extractProfileAttachment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedProfileAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetExtractedProfileAttachmentRevision (int? attachmentId, int? attachmentRevisionId)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetExtractedProfileAttachmentRevisionWithHttpInfo(attachmentId, attachmentRevisionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetExtractedProfileAttachmentRevisionWithHttpInfo (int? attachmentId, int? attachmentRevisionId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling DocumentsApi->DocumentsGetExtractedProfileAttachmentRevision");
            // verify the required parameter 'attachmentRevisionId' is set
            if (attachmentRevisionId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentRevisionId' when calling DocumentsApi->DocumentsGetExtractedProfileAttachmentRevision");

            var localVarPath = "/api/Documents/extractProfileAttachment/{attachmentId}/revisions/{attachmentRevisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (attachmentRevisionId != null) localVarPathParams.Add("attachmentRevisionId", this.Configuration.ApiClient.ParameterToString(attachmentRevisionId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedProfileAttachmentRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetExtractedProfileAttachmentRevisionAsync (int? attachmentId, int? attachmentRevisionId)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetExtractedProfileAttachmentRevisionAsyncWithHttpInfo(attachmentId, attachmentRevisionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision (extracted from cryptographic envelopes) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="attachmentRevisionId">Identifier of attachment revision</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetExtractedProfileAttachmentRevisionAsyncWithHttpInfo (int? attachmentId, int? attachmentRevisionId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling DocumentsApi->DocumentsGetExtractedProfileAttachmentRevision");
            // verify the required parameter 'attachmentRevisionId' is set
            if (attachmentRevisionId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentRevisionId' when calling DocumentsApi->DocumentsGetExtractedProfileAttachmentRevision");

            var localVarPath = "/api/Documents/extractProfileAttachment/{attachmentId}/revisions/{attachmentRevisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (attachmentRevisionId != null) localVarPathParams.Add("attachmentRevisionId", this.Configuration.ApiClient.ParameterToString(attachmentRevisionId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetExtractedProfileAttachmentRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetForExternalAttachment (int? id, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetForExternalAttachmentWithHttpInfo(id, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetForExternalAttachmentWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForExternalAttachment");

            var localVarPath = "/api/Documents/profileAttachment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForExternalAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetForExternalAttachmentAsync (int? id, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetForExternalAttachmentAsyncWithHttpInfo(id, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve a file for an external profile attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForExternalAttachmentAsyncWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForExternalAttachment");

            var localVarPath = "/api/Documents/profileAttachment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForExternalAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call gets the document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetForMail (int? id, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetForMailWithHttpInfo(id, forView, createZip, addAttachments);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets the document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetForMailWithHttpInfo (int? id, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetForMail");

            var localVarPath = "/api/Documents/GetMail/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            if (createZip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createZip", createZip)); // query parameter
            if (addAttachments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addAttachments", addAttachments)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call gets the document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetForMailAsync (int? id, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetForMailAsyncWithHttpInfo(id, forView, createZip, addAttachments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets the document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Docnumber</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForMailAsyncWithHttpInfo (int? id, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetForMail");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetForMail");

            var localVarPath = "/api/Documents/GetMail/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            if (createZip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createZip", createZip)); // query parameter
            if (addAttachments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addAttachments", addAttachments)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetForProcessAttachement (int? attachementid, int? processId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetForProcessAttachementWithHttpInfo(attachementid, processId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetForProcessAttachementWithHttpInfo (int? attachementid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'attachementid' is set
            if (attachementid == null)
                throw new ApiException(400, "Missing required parameter 'attachementid' when calling DocumentsApi->DocumentsGetForProcessAttachement");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentsApi->DocumentsGetForProcessAttachement");

            var localVarPath = "/api/Documents/processattachments/{processId}/{attachementid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachementid != null) localVarPathParams.Add("attachementid", this.Configuration.ApiClient.ParameterToString(attachementid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProcessAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetForProcessAttachementAsync (int? attachementid, int? processId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetForProcessAttachementAsyncWithHttpInfo(attachementid, processId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with the attachment into in a process workflow 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachementid">Identifier of attachment</param>
        /// <param name="processId">Identifier of process</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForProcessAttachementAsyncWithHttpInfo (int? attachementid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'attachementid' is set
            if (attachementid == null)
                throw new ApiException(400, "Missing required parameter 'attachementid' when calling DocumentsApi->DocumentsGetForProcessAttachement");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentsApi->DocumentsGetForProcessAttachement");

            var localVarPath = "/api/Documents/processattachments/{processId}/{attachementid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachementid != null) localVarPathParams.Add("attachementid", this.Configuration.ApiClient.ParameterToString(attachementid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProcessAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetForProcessDocument (int? processdocid, int? processId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetForProcessDocumentWithHttpInfo(processdocid, processId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetForProcessDocumentWithHttpInfo (int? processdocid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'processdocid' is set
            if (processdocid == null)
                throw new ApiException(400, "Missing required parameter 'processdocid' when calling DocumentsApi->DocumentsGetForProcessDocument");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentsApi->DocumentsGetForProcessDocument");

            var localVarPath = "/api/Documents/processdocument/{processId}/{processdocid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processdocid != null) localVarPathParams.Add("processdocid", this.Configuration.ApiClient.ParameterToString(processdocid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProcessDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetForProcessDocumentAsync (int? processdocid, int? processId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetForProcessDocumentAsyncWithHttpInfo(processdocid, processId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with the document process into in a process workflow 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processdocid">Identifier of document process</param>
        /// <param name="processId">Identifier of process workflow</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForProcessDocumentAsyncWithHttpInfo (int? processdocid, int? processId, bool? forView = null)
        {
            // verify the required parameter 'processdocid' is set
            if (processdocid == null)
                throw new ApiException(400, "Missing required parameter 'processdocid' when calling DocumentsApi->DocumentsGetForProcessDocument");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling DocumentsApi->DocumentsGetForProcessDocument");

            var localVarPath = "/api/Documents/processdocument/{processId}/{processdocid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processdocid != null) localVarPathParams.Add("processdocid", this.Configuration.ApiClient.ParameterToString(processdocid)); // path parameter
            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProcessDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetForProfile (int? id, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetForProfileWithHttpInfo(id, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetForProfileWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForProfile");

            var localVarPath = "/api/Documents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetForProfileAsync (int? id, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetForProfileAsyncWithHttpInfo(id, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForProfileAsyncWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForProfile");

            var localVarPath = "/api/Documents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="cacheId">Cache Identifier</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetForProfileByCacheId (int? id, string cacheId)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetForProfileByCacheIdWithHttpInfo(id, cacheId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="cacheId">Cache Identifier</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetForProfileByCacheIdWithHttpInfo (int? id, string cacheId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForProfileByCacheId");
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsGetForProfileByCacheId");

            var localVarPath = "/api/Documents/{id}/cache/{cacheId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProfileByCacheId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="cacheId">Cache Identifier</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetForProfileByCacheIdAsync (int? id, string cacheId)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetForProfileByCacheIdAsyncWithHttpInfo(id, cacheId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with a specified profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <param name="cacheId">Cache Identifier</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForProfileByCacheIdAsyncWithHttpInfo (int? id, string cacheId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForProfileByCacheId");
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsGetForProfileByCacheId");

            var localVarPath = "/api/Documents/{id}/cache/{cacheId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForProfileByCacheId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetForTask (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetForTaskWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetForTaskWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetForTask");

            var localVarPath = "/api/Documents/ForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetForTaskAsync (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetForTaskAsyncWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForTaskAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTask");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetForTask");

            var localVarPath = "/api/Documents/ForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with the task attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetForTaskAttachement (int? id, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetForTaskAttachementWithHttpInfo(id, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with the task attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetForTaskAttachementWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForTaskAttachement");

            var localVarPath = "/api/Documents/taskattachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with the task attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetForTaskAttachementAsync (int? id, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetForTaskAttachementAsyncWithHttpInfo(id, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with the task attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of task attachment</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForTaskAttachementAsyncWithHttpInfo (int? id, bool? forView = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetForTaskAttachement");

            var localVarPath = "/api/Documents/taskattachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskAttachement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns if the document process has a associated file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>bool?</returns>
        public bool? DocumentsGetForTaskHasDocument (int? processDocId)
        {
             ApiResponse<bool?> localVarResponse = DocumentsGetForTaskHasDocumentWithHttpInfo(processDocId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if the document process has a associated file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > DocumentsGetForTaskHasDocumentWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTaskHasDocument");

            var localVarPath = "/api/Documents/ForTask/HasDocument/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskHasDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns if the document process has a associated file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> DocumentsGetForTaskHasDocumentAsync (int? processDocId)
        {
             ApiResponse<bool?> localVarResponse = await DocumentsGetForTaskHasDocumentAsyncWithHttpInfo(processDocId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if the document process has a associated file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> DocumentsGetForTaskHasDocumentAsyncWithHttpInfo (int? processDocId)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTaskHasDocument");

            var localVarPath = "/api/Documents/ForTask/HasDocument/{processDocId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskHasDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetForTaskReadOnly (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetForTaskReadOnlyWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetForTaskReadOnlyWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTaskReadOnly");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetForTaskReadOnly");

            var localVarPath = "/api/Documents/ForTaskReadOnly/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskReadOnly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetForTaskReadOnlyAsync (int? processDocId, int? taskWorkId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetForTaskReadOnlyAsyncWithHttpInfo(processDocId, taskWorkId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the file associated with a taskwork and a document in process, for read-only management 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Identifier of document process</param>
        /// <param name="taskWorkId">Identifier of taskwork</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetForTaskReadOnlyAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView = null)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetForTaskReadOnly");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetForTaskReadOnly");

            var localVarPath = "/api/Documents/ForTaskReadOnly/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetForTaskReadOnly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call returns if the profile has a associated file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>bool?</returns>
        public bool? DocumentsGetHasDocumentForProfile (int? id)
        {
             ApiResponse<bool?> localVarResponse = DocumentsGetHasDocumentForProfileWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if the profile has a associated file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > DocumentsGetHasDocumentForProfileWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetHasDocumentForProfile");

            var localVarPath = "/api/Documents/HasDocument/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetHasDocumentForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns if the profile has a associated file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> DocumentsGetHasDocumentForProfileAsync (int? id)
        {
             ApiResponse<bool?> localVarResponse = await DocumentsGetHasDocumentForProfileAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if the profile has a associated file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Document Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> DocumentsGetHasDocumentForProfileAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentsApi->DocumentsGetHasDocumentForProfile");

            var localVarPath = "/api/Documents/HasDocument/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetHasDocumentForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        public MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProcessDoc (MailMassiveForProcessDocRequestDTO body)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = DocumentsGetMailMassiveForProcessDocWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        public ApiResponse< MailMassiveForProfileResponseDTO > DocumentsGetMailMassiveForProcessDocWithHttpInfo (MailMassiveForProcessDocRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");

            var localVarPath = "/api/Documents/GetMailMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        public async System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProcessDocAsync (MailMassiveForProcessDocRequestDTO body)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = await DocumentsGetMailMassiveForProcessDocAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProcessDocAsyncWithHttpInfo (MailMassiveForProcessDocRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");

            var localVarPath = "/api/Documents/GetMailMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        public MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProcessDoc (List<MailMassiveForProcessDocItemRequestDTO> items, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = DocumentsGetMailMassiveForProcessDocWithHttpInfo(items, forView, createZip, addAttachments);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        public ApiResponse< MailMassiveForProfileResponseDTO > DocumentsGetMailMassiveForProcessDocWithHttpInfo (List<MailMassiveForProcessDocItemRequestDTO> items, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'items' is set
            if (items == null)
                throw new ApiException(400, "Missing required parameter 'items' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");

            var localVarPath = "/api/Documents/GetMailMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (items != null) localVarFormParams.Add("items", this.Configuration.ApiClient.ParameterToString(items)); // form parameter
            if (forView != null) localVarFormParams.Add("forView", this.Configuration.ApiClient.ParameterToString(forView)); // form parameter
            if (createZip != null) localVarFormParams.Add("createZip", this.Configuration.ApiClient.ParameterToString(createZip)); // form parameter
            if (addAttachments != null) localVarFormParams.Add("addAttachments", this.Configuration.ApiClient.ParameterToString(addAttachments)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        public async System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProcessDocAsync (List<MailMassiveForProcessDocItemRequestDTO> items, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = await DocumentsGetMailMassiveForProcessDocAsyncWithHttpInfo(items, forView, createZip, addAttachments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with process documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProcessDocAsyncWithHttpInfo (List<MailMassiveForProcessDocItemRequestDTO> items, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'items' is set
            if (items == null)
                throw new ApiException(400, "Missing required parameter 'items' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetMailMassiveForProcessDoc");

            var localVarPath = "/api/Documents/GetMailMassiveProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (items != null) localVarFormParams.Add("items", this.Configuration.ApiClient.ParameterToString(items)); // form parameter
            if (forView != null) localVarFormParams.Add("forView", this.Configuration.ApiClient.ParameterToString(forView)); // form parameter
            if (createZip != null) localVarFormParams.Add("createZip", this.Configuration.ApiClient.ParameterToString(createZip)); // form parameter
            if (addAttachments != null) localVarFormParams.Add("addAttachments", this.Configuration.ApiClient.ParameterToString(addAttachments)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        public MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProfile (MailMassiveForProfileRequestDTO body)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = DocumentsGetMailMassiveForProfileWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        public ApiResponse< MailMassiveForProfileResponseDTO > DocumentsGetMailMassiveForProfileWithHttpInfo (MailMassiveForProfileRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");

            var localVarPath = "/api/Documents/GetMailMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        public async System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProfileAsync (MailMassiveForProfileRequestDTO body)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = await DocumentsGetMailMassiveForProfileAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProfileAsyncWithHttpInfo (MailMassiveForProfileRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");

            var localVarPath = "/api/Documents/GetMailMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>MailMassiveForProfileResponseDTO</returns>
        public MailMassiveForProfileResponseDTO DocumentsGetMailMassiveForProfile (List<int?> items, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = DocumentsGetMailMassiveForProfileWithHttpInfo(items, forView, createZip, addAttachments);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>ApiResponse of MailMassiveForProfileResponseDTO</returns>
        public ApiResponse< MailMassiveForProfileResponseDTO > DocumentsGetMailMassiveForProfileWithHttpInfo (List<int?> items, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'items' is set
            if (items == null)
                throw new ApiException(400, "Missing required parameter 'items' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");

            var localVarPath = "/api/Documents/GetMailMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (items != null) localVarFormParams.Add("items", this.Configuration.ApiClient.ParameterToString(items)); // form parameter
            if (forView != null) localVarFormParams.Add("forView", this.Configuration.ApiClient.ParameterToString(forView)); // form parameter
            if (createZip != null) localVarFormParams.Add("createZip", this.Configuration.ApiClient.ParameterToString(createZip)); // form parameter
            if (addAttachments != null) localVarFormParams.Add("addAttachments", this.Configuration.ApiClient.ParameterToString(addAttachments)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>Task of MailMassiveForProfileResponseDTO</returns>
        public async System.Threading.Tasks.Task<MailMassiveForProfileResponseDTO> DocumentsGetMailMassiveForProfileAsync (List<int?> items, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<MailMassiveForProfileResponseDTO> localVarResponse = await DocumentsGetMailMassiveForProfileAsyncWithHttpInfo(items, forView, createZip, addAttachments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an asynchronous queue job that creates an eml file with documents in attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items"></param>
        /// <param name="forView"></param>
        /// <param name="createZip"></param>
        /// <param name="addAttachments"></param>
        /// <returns>Task of ApiResponse (MailMassiveForProfileResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailMassiveForProfileResponseDTO>> DocumentsGetMailMassiveForProfileAsyncWithHttpInfo (List<int?> items, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'items' is set
            if (items == null)
                throw new ApiException(400, "Missing required parameter 'items' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetMailMassiveForProfile");

            var localVarPath = "/api/Documents/GetMailMassive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (items != null) localVarFormParams.Add("items", this.Configuration.ApiClient.ParameterToString(items)); // form parameter
            if (forView != null) localVarFormParams.Add("forView", this.Configuration.ApiClient.ParameterToString(forView)); // form parameter
            if (createZip != null) localVarFormParams.Add("createZip", this.Configuration.ApiClient.ParameterToString(createZip)); // form parameter
            if (addAttachments != null) localVarFormParams.Add("addAttachments", this.Configuration.ApiClient.ParameterToString(addAttachments)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetMailMassiveForProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailMassiveForProfileResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailMassiveForProfileResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailMassiveForProfileResponseDTO)));
        }

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetProcessdocForMail (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetProcessdocForMailWithHttpInfo(processDocId, taskWorkId, forView, createZip, addAttachments);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetProcessdocForMailWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetProcessdocForMail");

            var localVarPath = "/api/Documents/GetMail/ForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            if (createZip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createZip", createZip)); // query parameter
            if (addAttachments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addAttachments", addAttachments)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetProcessdocForMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetProcessdocForMailAsync (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetProcessdocForMailAsyncWithHttpInfo(processDocId, taskWorkId, forView, createZip, addAttachments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets the process document as attachment inside of an eml file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDocId">Id of process document</param>
        /// <param name="taskWorkId">Id of task</param>
        /// <param name="forView">Cryptographic envelopes will be removed and stylesheet applied</param>
        /// <param name="createZip">Attachment as zip</param>
        /// <param name="addAttachments">Add also the documents attachments</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetProcessdocForMailAsyncWithHttpInfo (int? processDocId, int? taskWorkId, bool? forView, bool? createZip, bool? addAttachments)
        {
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'forView' is set
            if (forView == null)
                throw new ApiException(400, "Missing required parameter 'forView' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'createZip' is set
            if (createZip == null)
                throw new ApiException(400, "Missing required parameter 'createZip' when calling DocumentsApi->DocumentsGetProcessdocForMail");
            // verify the required parameter 'addAttachments' is set
            if (addAttachments == null)
                throw new ApiException(400, "Missing required parameter 'addAttachments' when calling DocumentsApi->DocumentsGetProcessdocForMail");

            var localVarPath = "/api/Documents/GetMail/ForTask/{processDocId}/{taskWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (taskWorkId != null) localVarPathParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            if (createZip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createZip", createZip)); // query parameter
            if (addAttachments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addAttachments", addAttachments)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetProcessdocForMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DocumentsGetRevisionDocumentById (int? attachmentId, int? revisionId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = DocumentsGetRevisionDocumentByIdWithHttpInfo(attachmentId, revisionId, forView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DocumentsGetRevisionDocumentByIdWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling DocumentsApi->DocumentsGetRevisionDocumentById");
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetRevisionDocumentById");

            var localVarPath = "/api/Documents/profileAttachment/{attachmentId}/revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetRevisionDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DocumentsGetRevisionDocumentByIdAsync (int? attachmentId, int? revisionId, bool? forView = null)
        {
             ApiResponse<byte[]> localVarResponse = await DocumentsGetRevisionDocumentByIdAsyncWithHttpInfo(attachmentId, revisionId, forView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve the attachemnt file by its revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of attachment</param>
        /// <param name="revisionId">Revision Number</param>
        /// <param name="forView">Cryptographic envelope removed and stylesheet applied if available (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DocumentsGetRevisionDocumentByIdAsyncWithHttpInfo (int? attachmentId, int? revisionId, bool? forView = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling DocumentsApi->DocumentsGetRevisionDocumentById");
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling DocumentsApi->DocumentsGetRevisionDocumentById");

            var localVarPath = "/api/Documents/profileAttachment/{attachmentId}/revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            if (forView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forView", forView)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetRevisionDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// This call update a file associated to a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns></returns>
        public void DocumentsSetDocument (string cacheId, int? docNumber)
        {
             DocumentsSetDocumentWithHttpInfo(cacheId, docNumber);
        }

        /// <summary>
        /// This call update a file associated to a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsSetDocumentWithHttpInfo (string cacheId, int? docNumber)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocument");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocument");

            var localVarPath = "/api/Documents/{docNumber}/{cacheId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call update a file associated to a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsSetDocumentAsync (string cacheId, int? docNumber)
        {
             await DocumentsSetDocumentAsyncWithHttpInfo(cacheId, docNumber);

        }

        /// <summary>
        /// This call update a file associated to a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentAsyncWithHttpInfo (string cacheId, int? docNumber)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocument");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocument");

            var localVarPath = "/api/Documents/{docNumber}/{cacheId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns></returns>
        public void DocumentsSetDocumentWithOption (string cacheId, int? docNumber, int? updateOption)
        {
             DocumentsSetDocumentWithOptionWithHttpInfo(cacheId, docNumber, updateOption);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsSetDocumentWithOptionWithHttpInfo (string cacheId, int? docNumber, int? updateOption)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocumentWithOption");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocumentWithOption");
            // verify the required parameter 'updateOption' is set
            if (updateOption == null)
                throw new ApiException(400, "Missing required parameter 'updateOption' when calling DocumentsApi->DocumentsSetDocumentWithOption");

            var localVarPath = "/api/Documents/{docNumber}/{cacheId}/{updateOption}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (updateOption != null) localVarPathParams.Add("updateOption", this.Configuration.ApiClient.ParameterToString(updateOption)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocumentWithOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsSetDocumentWithOptionAsync (string cacheId, int? docNumber, int? updateOption)
        {
             await DocumentsSetDocumentWithOptionAsyncWithHttpInfo(cacheId, docNumber, updateOption);

        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentWithOptionAsyncWithHttpInfo (string cacheId, int? docNumber, int? updateOption)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocumentWithOption");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocumentWithOption");
            // verify the required parameter 'updateOption' is set
            if (updateOption == null)
                throw new ApiException(400, "Missing required parameter 'updateOption' when calling DocumentsApi->DocumentsSetDocumentWithOption");

            var localVarPath = "/api/Documents/{docNumber}/{cacheId}/{updateOption}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (updateOption != null) localVarPathParams.Add("updateOption", this.Configuration.ApiClient.ParameterToString(updateOption)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocumentWithOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns></returns>
        public void DocumentsSetDocumentWithOptionForProcessV2 (string cacheId, int? docNumber, int? updateOption)
        {
             DocumentsSetDocumentWithOptionForProcessV2WithHttpInfo(cacheId, docNumber, updateOption);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsSetDocumentWithOptionForProcessV2WithHttpInfo (string cacheId, int? docNumber, int? updateOption)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocumentWithOptionForProcessV2");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocumentWithOptionForProcessV2");
            // verify the required parameter 'updateOption' is set
            if (updateOption == null)
                throw new ApiException(400, "Missing required parameter 'updateOption' when calling DocumentsApi->DocumentsSetDocumentWithOptionForProcessV2");

            var localVarPath = "/api/Documents/processV2/{docNumber}/{cacheId}/{updateOption}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (updateOption != null) localVarPathParams.Add("updateOption", this.Configuration.ApiClient.ParameterToString(updateOption)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocumentWithOptionForProcessV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsSetDocumentWithOptionForProcessV2Async (string cacheId, int? docNumber, int? updateOption)
        {
             await DocumentsSetDocumentWithOptionForProcessV2AsyncWithHttpInfo(cacheId, docNumber, updateOption);

        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentWithOptionForProcessV2AsyncWithHttpInfo (string cacheId, int? docNumber, int? updateOption)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocumentWithOptionForProcessV2");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocumentWithOptionForProcessV2");
            // verify the required parameter 'updateOption' is set
            if (updateOption == null)
                throw new ApiException(400, "Missing required parameter 'updateOption' when calling DocumentsApi->DocumentsSetDocumentWithOptionForProcessV2");

            var localVarPath = "/api/Documents/processV2/{docNumber}/{cacheId}/{updateOption}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (updateOption != null) localVarPathParams.Add("updateOption", this.Configuration.ApiClient.ParameterToString(updateOption)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocumentWithOptionForProcessV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns></returns>
        public void DocumentsSetDocumentWithOptionForTaskV2 (string cacheId, int? docNumber, Guid? processDocId, int? updateOption)
        {
             DocumentsSetDocumentWithOptionForTaskV2WithHttpInfo(cacheId, docNumber, processDocId, updateOption);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsSetDocumentWithOptionForTaskV2WithHttpInfo (string cacheId, int? docNumber, Guid? processDocId, int? updateOption)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocumentWithOptionForTaskV2");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocumentWithOptionForTaskV2");
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsSetDocumentWithOptionForTaskV2");
            // verify the required parameter 'updateOption' is set
            if (updateOption == null)
                throw new ApiException(400, "Missing required parameter 'updateOption' when calling DocumentsApi->DocumentsSetDocumentWithOptionForTaskV2");

            var localVarPath = "/api/Documents/{docNumber}/{processDocId}/{cacheId}/{updateOption}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (updateOption != null) localVarPathParams.Add("updateOption", this.Configuration.ApiClient.ParameterToString(updateOption)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocumentWithOptionForTaskV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsSetDocumentWithOptionForTaskV2Async (string cacheId, int? docNumber, Guid? processDocId, int? updateOption)
        {
             await DocumentsSetDocumentWithOptionForTaskV2AsyncWithHttpInfo(cacheId, docNumber, processDocId, updateOption);

        }

        /// <summary>
        /// This call update a file associated to a profile. The update mode is specified by the update option parameter 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheId">Identifier of cache</param>
        /// <param name="docNumber">Document Identifier</param>
        /// <param name="processDocId">Process document identifier</param>
        /// <param name="updateOption">Possible values:  0: None  1: ForceRevision  2: ForceOverWrite </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsSetDocumentWithOptionForTaskV2AsyncWithHttpInfo (string cacheId, int? docNumber, Guid? processDocId, int? updateOption)
        {
            // verify the required parameter 'cacheId' is set
            if (cacheId == null)
                throw new ApiException(400, "Missing required parameter 'cacheId' when calling DocumentsApi->DocumentsSetDocumentWithOptionForTaskV2");
            // verify the required parameter 'docNumber' is set
            if (docNumber == null)
                throw new ApiException(400, "Missing required parameter 'docNumber' when calling DocumentsApi->DocumentsSetDocumentWithOptionForTaskV2");
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling DocumentsApi->DocumentsSetDocumentWithOptionForTaskV2");
            // verify the required parameter 'updateOption' is set
            if (updateOption == null)
                throw new ApiException(400, "Missing required parameter 'updateOption' when calling DocumentsApi->DocumentsSetDocumentWithOptionForTaskV2");

            var localVarPath = "/api/Documents/{docNumber}/{processDocId}/{cacheId}/{updateOption}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheId != null) localVarPathParams.Add("cacheId", this.Configuration.ApiClient.ParameterToString(cacheId)); // path parameter
            if (docNumber != null) localVarPathParams.Add("docNumber", this.Configuration.ApiClient.ParameterToString(docNumber)); // path parameter
            if (processDocId != null) localVarPathParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // path parameter
            if (updateOption != null) localVarPathParams.Add("updateOption", this.Configuration.ApiClient.ParameterToString(updateOption)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsSetDocumentWithOptionForTaskV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
