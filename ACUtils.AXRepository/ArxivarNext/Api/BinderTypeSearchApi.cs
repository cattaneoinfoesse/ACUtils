/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBinderTypeSearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns binders by a given search object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The search object</param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        List<BinderDTO> BinderTypeSearchGetBindersByAdvancedSearch (SearchConcreteDTO body);

        /// <summary>
        /// This call returns binders by a given search object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The search object</param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        ApiResponse<List<BinderDTO>> BinderTypeSearchGetBindersByAdvancedSearchWithHttpInfo (SearchConcreteDTO body);
        /// <summary>
        /// This call returns binders by a given search object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daAAndOr"></param>
        /// <param name="contactFields"></param>
        /// <param name="aooField"></param>
        /// <param name="documentTypeField"></param>
        /// <param name="protocolField"></param>
        /// <param name="conservationField"></param>
        /// <param name="stampField"></param>
        /// <param name="dateTimeFields"></param>
        /// <param name="stringFields"></param>
        /// <param name="intFields"></param>
        /// <param name="boolFields"></param>
        /// <param name="doubleFields"></param>
        /// <param name="stringListFields"></param>
        /// <param name="groupFields"></param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        List<BinderDTO> BinderTypeSearchGetBindersByAdvancedSearch (int? daAAndOr, List<FieldBaseForSearchContactDto> contactFields, FieldBaseForSearchAooDto aooField, FieldBaseForSearchDocumentTypeDto documentTypeField, FieldBaseForSearchProtocolloDto protocolField, FieldBaseForSearchConservazioneDto conservationField, FieldBaseForSearchStampDto stampField, List<FieldBaseForSearchDateTimeDto> dateTimeFields, List<FieldBaseForSearchStringDto> stringFields, List<FieldBaseForSearchIntDto> intFields, List<FieldBaseForSearchBoolDto> boolFields, List<FieldBaseForSearchDoubleDto> doubleFields, List<FieldBaseForSearchListDto> stringListFields, List<FieldBaseForSearchDTO> groupFields);

        /// <summary>
        /// This call returns binders by a given search object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daAAndOr"></param>
        /// <param name="contactFields"></param>
        /// <param name="aooField"></param>
        /// <param name="documentTypeField"></param>
        /// <param name="protocolField"></param>
        /// <param name="conservationField"></param>
        /// <param name="stampField"></param>
        /// <param name="dateTimeFields"></param>
        /// <param name="stringFields"></param>
        /// <param name="intFields"></param>
        /// <param name="boolFields"></param>
        /// <param name="doubleFields"></param>
        /// <param name="stringListFields"></param>
        /// <param name="groupFields"></param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        ApiResponse<List<BinderDTO>> BinderTypeSearchGetBindersByAdvancedSearchWithHttpInfo (int? daAAndOr, List<FieldBaseForSearchContactDto> contactFields, FieldBaseForSearchAooDto aooField, FieldBaseForSearchDocumentTypeDto documentTypeField, FieldBaseForSearchProtocolloDto protocolField, FieldBaseForSearchConservazioneDto conservationField, FieldBaseForSearchStampDto stampField, List<FieldBaseForSearchDateTimeDto> dateTimeFields, List<FieldBaseForSearchStringDto> stringFields, List<FieldBaseForSearchIntDto> intFields, List<FieldBaseForSearchBoolDto> boolFields, List<FieldBaseForSearchDoubleDto> doubleFields, List<FieldBaseForSearchListDto> stringListFields, List<FieldBaseForSearchDTO> groupFields);
        /// <summary>
        /// This call returns a search object for a search by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>SearchConcreteDTO</returns>
        SearchConcreteDTO BinderTypeSearchGetSearchByBinderType (int? binderTypeId);

        /// <summary>
        /// This call returns a search object for a search by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>ApiResponse of SearchConcreteDTO</returns>
        ApiResponse<SearchConcreteDTO> BinderTypeSearchGetSearchByBinderTypeWithHttpInfo (int? binderTypeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns binders by a given search object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The search object</param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BinderDTO>> BinderTypeSearchGetBindersByAdvancedSearchAsync (SearchConcreteDTO body);

        /// <summary>
        /// This call returns binders by a given search object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The search object</param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BinderTypeSearchGetBindersByAdvancedSearchAsyncWithHttpInfo (SearchConcreteDTO body);
        /// <summary>
        /// This call returns binders by a given search object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daAAndOr"></param>
        /// <param name="contactFields"></param>
        /// <param name="aooField"></param>
        /// <param name="documentTypeField"></param>
        /// <param name="protocolField"></param>
        /// <param name="conservationField"></param>
        /// <param name="stampField"></param>
        /// <param name="dateTimeFields"></param>
        /// <param name="stringFields"></param>
        /// <param name="intFields"></param>
        /// <param name="boolFields"></param>
        /// <param name="doubleFields"></param>
        /// <param name="stringListFields"></param>
        /// <param name="groupFields"></param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BinderDTO>> BinderTypeSearchGetBindersByAdvancedSearchAsync (int? daAAndOr, List<FieldBaseForSearchContactDto> contactFields, FieldBaseForSearchAooDto aooField, FieldBaseForSearchDocumentTypeDto documentTypeField, FieldBaseForSearchProtocolloDto protocolField, FieldBaseForSearchConservazioneDto conservationField, FieldBaseForSearchStampDto stampField, List<FieldBaseForSearchDateTimeDto> dateTimeFields, List<FieldBaseForSearchStringDto> stringFields, List<FieldBaseForSearchIntDto> intFields, List<FieldBaseForSearchBoolDto> boolFields, List<FieldBaseForSearchDoubleDto> doubleFields, List<FieldBaseForSearchListDto> stringListFields, List<FieldBaseForSearchDTO> groupFields);

        /// <summary>
        /// This call returns binders by a given search object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daAAndOr"></param>
        /// <param name="contactFields"></param>
        /// <param name="aooField"></param>
        /// <param name="documentTypeField"></param>
        /// <param name="protocolField"></param>
        /// <param name="conservationField"></param>
        /// <param name="stampField"></param>
        /// <param name="dateTimeFields"></param>
        /// <param name="stringFields"></param>
        /// <param name="intFields"></param>
        /// <param name="boolFields"></param>
        /// <param name="doubleFields"></param>
        /// <param name="stringListFields"></param>
        /// <param name="groupFields"></param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BinderTypeSearchGetBindersByAdvancedSearchAsyncWithHttpInfo (int? daAAndOr, List<FieldBaseForSearchContactDto> contactFields, FieldBaseForSearchAooDto aooField, FieldBaseForSearchDocumentTypeDto documentTypeField, FieldBaseForSearchProtocolloDto protocolField, FieldBaseForSearchConservazioneDto conservationField, FieldBaseForSearchStampDto stampField, List<FieldBaseForSearchDateTimeDto> dateTimeFields, List<FieldBaseForSearchStringDto> stringFields, List<FieldBaseForSearchIntDto> intFields, List<FieldBaseForSearchBoolDto> boolFields, List<FieldBaseForSearchDoubleDto> doubleFields, List<FieldBaseForSearchListDto> stringListFields, List<FieldBaseForSearchDTO> groupFields);
        /// <summary>
        /// This call returns a search object for a search by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>Task of SearchConcreteDTO</returns>
        System.Threading.Tasks.Task<SearchConcreteDTO> BinderTypeSearchGetSearchByBinderTypeAsync (int? binderTypeId);

        /// <summary>
        /// This call returns a search object for a search by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>Task of ApiResponse (SearchConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchConcreteDTO>> BinderTypeSearchGetSearchByBinderTypeAsyncWithHttpInfo (int? binderTypeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BinderTypeSearchApi : IBinderTypeSearchApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BinderTypeSearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BinderTypeSearchApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BinderTypeSearchApi"/> class
        /// </summary>
        /// <returns></returns>
        public BinderTypeSearchApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BinderTypeSearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BinderTypeSearchApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns binders by a given search object 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The search object</param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        public List<BinderDTO> BinderTypeSearchGetBindersByAdvancedSearch (SearchConcreteDTO body)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = BinderTypeSearchGetBindersByAdvancedSearchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns binders by a given search object 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The search object</param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        public ApiResponse< List<BinderDTO> > BinderTypeSearchGetBindersByAdvancedSearchWithHttpInfo (SearchConcreteDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");

            var localVarPath = "/api/BinderTypeSearches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BinderTypeSearchGetBindersByAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call returns binders by a given search object 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The search object</param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinderDTO>> BinderTypeSearchGetBindersByAdvancedSearchAsync (SearchConcreteDTO body)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = await BinderTypeSearchGetBindersByAdvancedSearchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns binders by a given search object 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The search object</param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BinderTypeSearchGetBindersByAdvancedSearchAsyncWithHttpInfo (SearchConcreteDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");

            var localVarPath = "/api/BinderTypeSearches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BinderTypeSearchGetBindersByAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call returns binders by a given search object 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daAAndOr"></param>
        /// <param name="contactFields"></param>
        /// <param name="aooField"></param>
        /// <param name="documentTypeField"></param>
        /// <param name="protocolField"></param>
        /// <param name="conservationField"></param>
        /// <param name="stampField"></param>
        /// <param name="dateTimeFields"></param>
        /// <param name="stringFields"></param>
        /// <param name="intFields"></param>
        /// <param name="boolFields"></param>
        /// <param name="doubleFields"></param>
        /// <param name="stringListFields"></param>
        /// <param name="groupFields"></param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        public List<BinderDTO> BinderTypeSearchGetBindersByAdvancedSearch (int? daAAndOr, List<FieldBaseForSearchContactDto> contactFields, FieldBaseForSearchAooDto aooField, FieldBaseForSearchDocumentTypeDto documentTypeField, FieldBaseForSearchProtocolloDto protocolField, FieldBaseForSearchConservazioneDto conservationField, FieldBaseForSearchStampDto stampField, List<FieldBaseForSearchDateTimeDto> dateTimeFields, List<FieldBaseForSearchStringDto> stringFields, List<FieldBaseForSearchIntDto> intFields, List<FieldBaseForSearchBoolDto> boolFields, List<FieldBaseForSearchDoubleDto> doubleFields, List<FieldBaseForSearchListDto> stringListFields, List<FieldBaseForSearchDTO> groupFields)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = BinderTypeSearchGetBindersByAdvancedSearchWithHttpInfo(daAAndOr, contactFields, aooField, documentTypeField, protocolField, conservationField, stampField, dateTimeFields, stringFields, intFields, boolFields, doubleFields, stringListFields, groupFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns binders by a given search object 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daAAndOr"></param>
        /// <param name="contactFields"></param>
        /// <param name="aooField"></param>
        /// <param name="documentTypeField"></param>
        /// <param name="protocolField"></param>
        /// <param name="conservationField"></param>
        /// <param name="stampField"></param>
        /// <param name="dateTimeFields"></param>
        /// <param name="stringFields"></param>
        /// <param name="intFields"></param>
        /// <param name="boolFields"></param>
        /// <param name="doubleFields"></param>
        /// <param name="stringListFields"></param>
        /// <param name="groupFields"></param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        public ApiResponse< List<BinderDTO> > BinderTypeSearchGetBindersByAdvancedSearchWithHttpInfo (int? daAAndOr, List<FieldBaseForSearchContactDto> contactFields, FieldBaseForSearchAooDto aooField, FieldBaseForSearchDocumentTypeDto documentTypeField, FieldBaseForSearchProtocolloDto protocolField, FieldBaseForSearchConservazioneDto conservationField, FieldBaseForSearchStampDto stampField, List<FieldBaseForSearchDateTimeDto> dateTimeFields, List<FieldBaseForSearchStringDto> stringFields, List<FieldBaseForSearchIntDto> intFields, List<FieldBaseForSearchBoolDto> boolFields, List<FieldBaseForSearchDoubleDto> doubleFields, List<FieldBaseForSearchListDto> stringListFields, List<FieldBaseForSearchDTO> groupFields)
        {
            // verify the required parameter 'daAAndOr' is set
            if (daAAndOr == null)
                throw new ApiException(400, "Missing required parameter 'daAAndOr' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'contactFields' is set
            if (contactFields == null)
                throw new ApiException(400, "Missing required parameter 'contactFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'aooField' is set
            if (aooField == null)
                throw new ApiException(400, "Missing required parameter 'aooField' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'documentTypeField' is set
            if (documentTypeField == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeField' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'protocolField' is set
            if (protocolField == null)
                throw new ApiException(400, "Missing required parameter 'protocolField' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'conservationField' is set
            if (conservationField == null)
                throw new ApiException(400, "Missing required parameter 'conservationField' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'stampField' is set
            if (stampField == null)
                throw new ApiException(400, "Missing required parameter 'stampField' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'dateTimeFields' is set
            if (dateTimeFields == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'stringFields' is set
            if (stringFields == null)
                throw new ApiException(400, "Missing required parameter 'stringFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'intFields' is set
            if (intFields == null)
                throw new ApiException(400, "Missing required parameter 'intFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'boolFields' is set
            if (boolFields == null)
                throw new ApiException(400, "Missing required parameter 'boolFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'doubleFields' is set
            if (doubleFields == null)
                throw new ApiException(400, "Missing required parameter 'doubleFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'stringListFields' is set
            if (stringListFields == null)
                throw new ApiException(400, "Missing required parameter 'stringListFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'groupFields' is set
            if (groupFields == null)
                throw new ApiException(400, "Missing required parameter 'groupFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");

            var localVarPath = "/api/BinderTypeSearches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (daAAndOr != null) localVarFormParams.Add("daAAndOr", this.Configuration.ApiClient.ParameterToString(daAAndOr)); // form parameter
            if (contactFields != null) localVarFormParams.Add("contactFields", this.Configuration.ApiClient.ParameterToString(contactFields)); // form parameter
            if (aooField != null) localVarFormParams.Add("aooField", this.Configuration.ApiClient.ParameterToString(aooField)); // form parameter
            if (documentTypeField != null) localVarFormParams.Add("documentTypeField", this.Configuration.ApiClient.ParameterToString(documentTypeField)); // form parameter
            if (protocolField != null) localVarFormParams.Add("protocolField", this.Configuration.ApiClient.ParameterToString(protocolField)); // form parameter
            if (conservationField != null) localVarFormParams.Add("conservationField", this.Configuration.ApiClient.ParameterToString(conservationField)); // form parameter
            if (stampField != null) localVarFormParams.Add("stampField", this.Configuration.ApiClient.ParameterToString(stampField)); // form parameter
            if (dateTimeFields != null) localVarFormParams.Add("dateTimeFields", this.Configuration.ApiClient.ParameterToString(dateTimeFields)); // form parameter
            if (stringFields != null) localVarFormParams.Add("stringFields", this.Configuration.ApiClient.ParameterToString(stringFields)); // form parameter
            if (intFields != null) localVarFormParams.Add("intFields", this.Configuration.ApiClient.ParameterToString(intFields)); // form parameter
            if (boolFields != null) localVarFormParams.Add("boolFields", this.Configuration.ApiClient.ParameterToString(boolFields)); // form parameter
            if (doubleFields != null) localVarFormParams.Add("doubleFields", this.Configuration.ApiClient.ParameterToString(doubleFields)); // form parameter
            if (stringListFields != null) localVarFormParams.Add("stringListFields", this.Configuration.ApiClient.ParameterToString(stringListFields)); // form parameter
            if (groupFields != null) localVarFormParams.Add("groupFields", this.Configuration.ApiClient.ParameterToString(groupFields)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BinderTypeSearchGetBindersByAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call returns binders by a given search object 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daAAndOr"></param>
        /// <param name="contactFields"></param>
        /// <param name="aooField"></param>
        /// <param name="documentTypeField"></param>
        /// <param name="protocolField"></param>
        /// <param name="conservationField"></param>
        /// <param name="stampField"></param>
        /// <param name="dateTimeFields"></param>
        /// <param name="stringFields"></param>
        /// <param name="intFields"></param>
        /// <param name="boolFields"></param>
        /// <param name="doubleFields"></param>
        /// <param name="stringListFields"></param>
        /// <param name="groupFields"></param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinderDTO>> BinderTypeSearchGetBindersByAdvancedSearchAsync (int? daAAndOr, List<FieldBaseForSearchContactDto> contactFields, FieldBaseForSearchAooDto aooField, FieldBaseForSearchDocumentTypeDto documentTypeField, FieldBaseForSearchProtocolloDto protocolField, FieldBaseForSearchConservazioneDto conservationField, FieldBaseForSearchStampDto stampField, List<FieldBaseForSearchDateTimeDto> dateTimeFields, List<FieldBaseForSearchStringDto> stringFields, List<FieldBaseForSearchIntDto> intFields, List<FieldBaseForSearchBoolDto> boolFields, List<FieldBaseForSearchDoubleDto> doubleFields, List<FieldBaseForSearchListDto> stringListFields, List<FieldBaseForSearchDTO> groupFields)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = await BinderTypeSearchGetBindersByAdvancedSearchAsyncWithHttpInfo(daAAndOr, contactFields, aooField, documentTypeField, protocolField, conservationField, stampField, dateTimeFields, stringFields, intFields, boolFields, doubleFields, stringListFields, groupFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns binders by a given search object 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="daAAndOr"></param>
        /// <param name="contactFields"></param>
        /// <param name="aooField"></param>
        /// <param name="documentTypeField"></param>
        /// <param name="protocolField"></param>
        /// <param name="conservationField"></param>
        /// <param name="stampField"></param>
        /// <param name="dateTimeFields"></param>
        /// <param name="stringFields"></param>
        /// <param name="intFields"></param>
        /// <param name="boolFields"></param>
        /// <param name="doubleFields"></param>
        /// <param name="stringListFields"></param>
        /// <param name="groupFields"></param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BinderTypeSearchGetBindersByAdvancedSearchAsyncWithHttpInfo (int? daAAndOr, List<FieldBaseForSearchContactDto> contactFields, FieldBaseForSearchAooDto aooField, FieldBaseForSearchDocumentTypeDto documentTypeField, FieldBaseForSearchProtocolloDto protocolField, FieldBaseForSearchConservazioneDto conservationField, FieldBaseForSearchStampDto stampField, List<FieldBaseForSearchDateTimeDto> dateTimeFields, List<FieldBaseForSearchStringDto> stringFields, List<FieldBaseForSearchIntDto> intFields, List<FieldBaseForSearchBoolDto> boolFields, List<FieldBaseForSearchDoubleDto> doubleFields, List<FieldBaseForSearchListDto> stringListFields, List<FieldBaseForSearchDTO> groupFields)
        {
            // verify the required parameter 'daAAndOr' is set
            if (daAAndOr == null)
                throw new ApiException(400, "Missing required parameter 'daAAndOr' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'contactFields' is set
            if (contactFields == null)
                throw new ApiException(400, "Missing required parameter 'contactFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'aooField' is set
            if (aooField == null)
                throw new ApiException(400, "Missing required parameter 'aooField' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'documentTypeField' is set
            if (documentTypeField == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeField' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'protocolField' is set
            if (protocolField == null)
                throw new ApiException(400, "Missing required parameter 'protocolField' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'conservationField' is set
            if (conservationField == null)
                throw new ApiException(400, "Missing required parameter 'conservationField' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'stampField' is set
            if (stampField == null)
                throw new ApiException(400, "Missing required parameter 'stampField' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'dateTimeFields' is set
            if (dateTimeFields == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'stringFields' is set
            if (stringFields == null)
                throw new ApiException(400, "Missing required parameter 'stringFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'intFields' is set
            if (intFields == null)
                throw new ApiException(400, "Missing required parameter 'intFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'boolFields' is set
            if (boolFields == null)
                throw new ApiException(400, "Missing required parameter 'boolFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'doubleFields' is set
            if (doubleFields == null)
                throw new ApiException(400, "Missing required parameter 'doubleFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'stringListFields' is set
            if (stringListFields == null)
                throw new ApiException(400, "Missing required parameter 'stringListFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");
            // verify the required parameter 'groupFields' is set
            if (groupFields == null)
                throw new ApiException(400, "Missing required parameter 'groupFields' when calling BinderTypeSearchApi->BinderTypeSearchGetBindersByAdvancedSearch");

            var localVarPath = "/api/BinderTypeSearches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (daAAndOr != null) localVarFormParams.Add("daAAndOr", this.Configuration.ApiClient.ParameterToString(daAAndOr)); // form parameter
            if (contactFields != null) localVarFormParams.Add("contactFields", this.Configuration.ApiClient.ParameterToString(contactFields)); // form parameter
            if (aooField != null) localVarFormParams.Add("aooField", this.Configuration.ApiClient.ParameterToString(aooField)); // form parameter
            if (documentTypeField != null) localVarFormParams.Add("documentTypeField", this.Configuration.ApiClient.ParameterToString(documentTypeField)); // form parameter
            if (protocolField != null) localVarFormParams.Add("protocolField", this.Configuration.ApiClient.ParameterToString(protocolField)); // form parameter
            if (conservationField != null) localVarFormParams.Add("conservationField", this.Configuration.ApiClient.ParameterToString(conservationField)); // form parameter
            if (stampField != null) localVarFormParams.Add("stampField", this.Configuration.ApiClient.ParameterToString(stampField)); // form parameter
            if (dateTimeFields != null) localVarFormParams.Add("dateTimeFields", this.Configuration.ApiClient.ParameterToString(dateTimeFields)); // form parameter
            if (stringFields != null) localVarFormParams.Add("stringFields", this.Configuration.ApiClient.ParameterToString(stringFields)); // form parameter
            if (intFields != null) localVarFormParams.Add("intFields", this.Configuration.ApiClient.ParameterToString(intFields)); // form parameter
            if (boolFields != null) localVarFormParams.Add("boolFields", this.Configuration.ApiClient.ParameterToString(boolFields)); // form parameter
            if (doubleFields != null) localVarFormParams.Add("doubleFields", this.Configuration.ApiClient.ParameterToString(doubleFields)); // form parameter
            if (stringListFields != null) localVarFormParams.Add("stringListFields", this.Configuration.ApiClient.ParameterToString(stringListFields)); // form parameter
            if (groupFields != null) localVarFormParams.Add("groupFields", this.Configuration.ApiClient.ParameterToString(groupFields)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BinderTypeSearchGetBindersByAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call returns a search object for a search by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>SearchConcreteDTO</returns>
        public SearchConcreteDTO BinderTypeSearchGetSearchByBinderType (int? binderTypeId)
        {
             ApiResponse<SearchConcreteDTO> localVarResponse = BinderTypeSearchGetSearchByBinderTypeWithHttpInfo(binderTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a search object for a search by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>ApiResponse of SearchConcreteDTO</returns>
        public ApiResponse< SearchConcreteDTO > BinderTypeSearchGetSearchByBinderTypeWithHttpInfo (int? binderTypeId)
        {
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BinderTypeSearchApi->BinderTypeSearchGetSearchByBinderType");

            var localVarPath = "/api/BinderTypeSearches/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BinderTypeSearchGetSearchByBinderType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchConcreteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchConcreteDTO)));
        }

        /// <summary>
        /// This call returns a search object for a search by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>Task of SearchConcreteDTO</returns>
        public async System.Threading.Tasks.Task<SearchConcreteDTO> BinderTypeSearchGetSearchByBinderTypeAsync (int? binderTypeId)
        {
             ApiResponse<SearchConcreteDTO> localVarResponse = await BinderTypeSearchGetSearchByBinderTypeAsyncWithHttpInfo(binderTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a search object for a search by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>Task of ApiResponse (SearchConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchConcreteDTO>> BinderTypeSearchGetSearchByBinderTypeAsyncWithHttpInfo (int? binderTypeId)
        {
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BinderTypeSearchApi->BinderTypeSearchGetSearchByBinderType");

            var localVarPath = "/api/BinderTypeSearches/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BinderTypeSearchGetSearchByBinderType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchConcreteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchConcreteDTO)));
        }

    }
}
