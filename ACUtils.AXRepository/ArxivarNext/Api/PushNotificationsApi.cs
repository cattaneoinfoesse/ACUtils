/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPushNotificationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a user push notification device by token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>int?</returns>
        int? PushNotificationsPnDeviceDelete (string token);

        /// <summary>
        /// Delete a user push notification device by token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> PushNotificationsPnDeviceDeleteWithHttpInfo (string token);
        /// <summary>
        /// Delete any push notification device. Admin user required
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>int?</returns>
        int? PushNotificationsPnDeviceDeleteAdmin (int? id);

        /// <summary>
        /// Delete any push notification device. Admin user required
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> PushNotificationsPnDeviceDeleteAdminWithHttpInfo (int? id);
        /// <summary>
        /// Get a push notification device by token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>PnDeviceDTO</returns>
        PnDeviceDTO PushNotificationsPnDeviceGetByToken (string token);

        /// <summary>
        /// Get a push notification device by token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        ApiResponse<PnDeviceDTO> PushNotificationsPnDeviceGetByTokenWithHttpInfo (string token);
        /// <summary>
        /// Get the user push notification device list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PnDeviceDTO&gt;</returns>
        List<PnDeviceDTO> PushNotificationsPnDeviceGetList ();

        /// <summary>
        /// Get the user push notification device list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PnDeviceDTO&gt;</returns>
        ApiResponse<List<PnDeviceDTO>> PushNotificationsPnDeviceGetListWithHttpInfo ();
        /// <summary>
        /// Get the whole push notification device list. Admin user required
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PnDeviceDTO&gt;</returns>
        List<PnDeviceDTO> PushNotificationsPnDeviceGetListAdmin ();

        /// <summary>
        /// Get the whole push notification device list. Admin user required
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PnDeviceDTO&gt;</returns>
        ApiResponse<List<PnDeviceDTO>> PushNotificationsPnDeviceGetListAdminWithHttpInfo ();
        /// <summary>
        /// Insert a new push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>PnDeviceDTO</returns>
        PnDeviceDTO PushNotificationsPnDeviceInsert (PnDeviceDTO body);

        /// <summary>
        /// Insert a new push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        ApiResponse<PnDeviceDTO> PushNotificationsPnDeviceInsertWithHttpInfo (PnDeviceDTO body);
        /// <summary>
        /// Insert a new push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>PnDeviceDTO</returns>
        PnDeviceDTO PushNotificationsPnDeviceInsert (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);

        /// <summary>
        /// Insert a new push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        ApiResponse<PnDeviceDTO> PushNotificationsPnDeviceInsertWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);
        /// <summary>
        /// Insert or update a push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>PnDeviceDTO</returns>
        PnDeviceDTO PushNotificationsPnDeviceRegisterOrUpdate (PnDeviceDTO body);

        /// <summary>
        /// Insert or update a push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        ApiResponse<PnDeviceDTO> PushNotificationsPnDeviceRegisterOrUpdateWithHttpInfo (PnDeviceDTO body);
        /// <summary>
        /// Insert or update a push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>PnDeviceDTO</returns>
        PnDeviceDTO PushNotificationsPnDeviceRegisterOrUpdate (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);

        /// <summary>
        /// Insert or update a push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        ApiResponse<PnDeviceDTO> PushNotificationsPnDeviceRegisterOrUpdateWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);
        /// <summary>
        /// Update an existing push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>PnDeviceDTO</returns>
        PnDeviceDTO PushNotificationsPnDeviceUpdate (PnDeviceDTO body);

        /// <summary>
        /// Update an existing push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        ApiResponse<PnDeviceDTO> PushNotificationsPnDeviceUpdateWithHttpInfo (PnDeviceDTO body);
        /// <summary>
        /// Update an existing push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>PnDeviceDTO</returns>
        PnDeviceDTO PushNotificationsPnDeviceUpdate (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);

        /// <summary>
        /// Update an existing push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        ApiResponse<PnDeviceDTO> PushNotificationsPnDeviceUpdateWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a user push notification device by token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> PushNotificationsPnDeviceDeleteAsync (string token);

        /// <summary>
        /// Delete a user push notification device by token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> PushNotificationsPnDeviceDeleteAsyncWithHttpInfo (string token);
        /// <summary>
        /// Delete any push notification device. Admin user required
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> PushNotificationsPnDeviceDeleteAdminAsync (int? id);

        /// <summary>
        /// Delete any push notification device. Admin user required
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> PushNotificationsPnDeviceDeleteAdminAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a push notification device by token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceGetByTokenAsync (string token);

        /// <summary>
        /// Get a push notification device by token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceGetByTokenAsyncWithHttpInfo (string token);
        /// <summary>
        /// Get the user push notification device list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PnDeviceDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PnDeviceDTO>> PushNotificationsPnDeviceGetListAsync ();

        /// <summary>
        /// Get the user push notification device list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PnDeviceDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PnDeviceDTO>>> PushNotificationsPnDeviceGetListAsyncWithHttpInfo ();
        /// <summary>
        /// Get the whole push notification device list. Admin user required
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PnDeviceDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PnDeviceDTO>> PushNotificationsPnDeviceGetListAdminAsync ();

        /// <summary>
        /// Get the whole push notification device list. Admin user required
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PnDeviceDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PnDeviceDTO>>> PushNotificationsPnDeviceGetListAdminAsyncWithHttpInfo ();
        /// <summary>
        /// Insert a new push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceInsertAsync (PnDeviceDTO body);

        /// <summary>
        /// Insert a new push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceInsertAsyncWithHttpInfo (PnDeviceDTO body);
        /// <summary>
        /// Insert a new push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceInsertAsync (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);

        /// <summary>
        /// Insert a new push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceInsertAsyncWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);
        /// <summary>
        /// Insert or update a push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceRegisterOrUpdateAsync (PnDeviceDTO body);

        /// <summary>
        /// Insert or update a push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceRegisterOrUpdateAsyncWithHttpInfo (PnDeviceDTO body);
        /// <summary>
        /// Insert or update a push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceRegisterOrUpdateAsync (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);

        /// <summary>
        /// Insert or update a push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceRegisterOrUpdateAsyncWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);
        /// <summary>
        /// Update an existing push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceUpdateAsync (PnDeviceDTO body);

        /// <summary>
        /// Update an existing push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceUpdateAsyncWithHttpInfo (PnDeviceDTO body);
        /// <summary>
        /// Update an existing push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceUpdateAsync (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);

        /// <summary>
        /// Update an existing push notification device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceUpdateAsyncWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PushNotificationsApi : IPushNotificationsApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PushNotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PushNotificationsApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PushNotificationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PushNotificationsApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PushNotificationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PushNotificationsApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a user push notification device by token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>int?</returns>
        public int? PushNotificationsPnDeviceDelete (string token)
        {
             ApiResponse<int?> localVarResponse = PushNotificationsPnDeviceDeleteWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a user push notification device by token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > PushNotificationsPnDeviceDeleteWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PushNotificationsApi->PushNotificationsPnDeviceDelete");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Delete a user push notification device by token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> PushNotificationsPnDeviceDeleteAsync (string token)
        {
             ApiResponse<int?> localVarResponse = await PushNotificationsPnDeviceDeleteAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a user push notification device by token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> PushNotificationsPnDeviceDeleteAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PushNotificationsApi->PushNotificationsPnDeviceDelete");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Delete any push notification device. Admin user required 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>int?</returns>
        public int? PushNotificationsPnDeviceDeleteAdmin (int? id)
        {
             ApiResponse<int?> localVarResponse = PushNotificationsPnDeviceDeleteAdminWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete any push notification device. Admin user required 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > PushNotificationsPnDeviceDeleteAdminWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushNotificationsApi->PushNotificationsPnDeviceDeleteAdmin");

            var localVarPath = "/api/pushNotifications/deviceAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceDeleteAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Delete any push notification device. Admin user required 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> PushNotificationsPnDeviceDeleteAdminAsync (int? id)
        {
             ApiResponse<int?> localVarResponse = await PushNotificationsPnDeviceDeleteAdminAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete any push notification device. Admin user required 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> PushNotificationsPnDeviceDeleteAdminAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushNotificationsApi->PushNotificationsPnDeviceDeleteAdmin");

            var localVarPath = "/api/pushNotifications/deviceAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceDeleteAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Get a push notification device by token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>PnDeviceDTO</returns>
        public PnDeviceDTO PushNotificationsPnDeviceGetByToken (string token)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = PushNotificationsPnDeviceGetByTokenWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a push notification device by token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        public ApiResponse< PnDeviceDTO > PushNotificationsPnDeviceGetByTokenWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PushNotificationsApi->PushNotificationsPnDeviceGetByToken");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceGetByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Get a push notification device by token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        public async System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceGetByTokenAsync (string token)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = await PushNotificationsPnDeviceGetByTokenAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a push notification device by token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceGetByTokenAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PushNotificationsApi->PushNotificationsPnDeviceGetByToken");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceGetByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Get the user push notification device list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PnDeviceDTO&gt;</returns>
        public List<PnDeviceDTO> PushNotificationsPnDeviceGetList ()
        {
             ApiResponse<List<PnDeviceDTO>> localVarResponse = PushNotificationsPnDeviceGetListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user push notification device list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PnDeviceDTO&gt;</returns>
        public ApiResponse< List<PnDeviceDTO> > PushNotificationsPnDeviceGetListWithHttpInfo ()
        {

            var localVarPath = "/api/pushNotifications/deviceList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PnDeviceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PnDeviceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PnDeviceDTO>)));
        }

        /// <summary>
        /// Get the user push notification device list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PnDeviceDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PnDeviceDTO>> PushNotificationsPnDeviceGetListAsync ()
        {
             ApiResponse<List<PnDeviceDTO>> localVarResponse = await PushNotificationsPnDeviceGetListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the user push notification device list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PnDeviceDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PnDeviceDTO>>> PushNotificationsPnDeviceGetListAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/pushNotifications/deviceList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PnDeviceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PnDeviceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PnDeviceDTO>)));
        }

        /// <summary>
        /// Get the whole push notification device list. Admin user required 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PnDeviceDTO&gt;</returns>
        public List<PnDeviceDTO> PushNotificationsPnDeviceGetListAdmin ()
        {
             ApiResponse<List<PnDeviceDTO>> localVarResponse = PushNotificationsPnDeviceGetListAdminWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the whole push notification device list. Admin user required 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PnDeviceDTO&gt;</returns>
        public ApiResponse< List<PnDeviceDTO> > PushNotificationsPnDeviceGetListAdminWithHttpInfo ()
        {

            var localVarPath = "/api/pushNotifications/deviceListAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceGetListAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PnDeviceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PnDeviceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PnDeviceDTO>)));
        }

        /// <summary>
        /// Get the whole push notification device list. Admin user required 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PnDeviceDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PnDeviceDTO>> PushNotificationsPnDeviceGetListAdminAsync ()
        {
             ApiResponse<List<PnDeviceDTO>> localVarResponse = await PushNotificationsPnDeviceGetListAdminAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the whole push notification device list. Admin user required 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PnDeviceDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PnDeviceDTO>>> PushNotificationsPnDeviceGetListAdminAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/pushNotifications/deviceListAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceGetListAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PnDeviceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PnDeviceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PnDeviceDTO>)));
        }

        /// <summary>
        /// Insert a new push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>PnDeviceDTO</returns>
        public PnDeviceDTO PushNotificationsPnDeviceInsert (PnDeviceDTO body)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = PushNotificationsPnDeviceInsertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a new push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        public ApiResponse< PnDeviceDTO > PushNotificationsPnDeviceInsertWithHttpInfo (PnDeviceDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Insert a new push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        public async System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceInsertAsync (PnDeviceDTO body)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = await PushNotificationsPnDeviceInsertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a new push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceInsertAsyncWithHttpInfo (PnDeviceDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Insert a new push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>PnDeviceDTO</returns>
        public PnDeviceDTO PushNotificationsPnDeviceInsert (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = PushNotificationsPnDeviceInsertWithHttpInfo(id, userId, deviceKind, token, enabled, appKind);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a new push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        public ApiResponse< PnDeviceDTO > PushNotificationsPnDeviceInsertWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");
            // verify the required parameter 'deviceKind' is set
            if (deviceKind == null)
                throw new ApiException(400, "Missing required parameter 'deviceKind' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");
            // verify the required parameter 'appKind' is set
            if (appKind == null)
                throw new ApiException(400, "Missing required parameter 'appKind' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (deviceKind != null) localVarFormParams.Add("deviceKind", this.Configuration.ApiClient.ParameterToString(deviceKind)); // form parameter
            if (token != null) localVarFormParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", this.Configuration.ApiClient.ParameterToString(enabled)); // form parameter
            if (appKind != null) localVarFormParams.Add("appKind", this.Configuration.ApiClient.ParameterToString(appKind)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Insert a new push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        public async System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceInsertAsync (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = await PushNotificationsPnDeviceInsertAsyncWithHttpInfo(id, userId, deviceKind, token, enabled, appKind);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a new push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceInsertAsyncWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");
            // verify the required parameter 'deviceKind' is set
            if (deviceKind == null)
                throw new ApiException(400, "Missing required parameter 'deviceKind' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");
            // verify the required parameter 'appKind' is set
            if (appKind == null)
                throw new ApiException(400, "Missing required parameter 'appKind' when calling PushNotificationsApi->PushNotificationsPnDeviceInsert");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (deviceKind != null) localVarFormParams.Add("deviceKind", this.Configuration.ApiClient.ParameterToString(deviceKind)); // form parameter
            if (token != null) localVarFormParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", this.Configuration.ApiClient.ParameterToString(enabled)); // form parameter
            if (appKind != null) localVarFormParams.Add("appKind", this.Configuration.ApiClient.ParameterToString(appKind)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Insert or update a push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>PnDeviceDTO</returns>
        public PnDeviceDTO PushNotificationsPnDeviceRegisterOrUpdate (PnDeviceDTO body)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = PushNotificationsPnDeviceRegisterOrUpdateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert or update a push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        public ApiResponse< PnDeviceDTO > PushNotificationsPnDeviceRegisterOrUpdateWithHttpInfo (PnDeviceDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");

            var localVarPath = "/api/pushNotifications/device/registerOrUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceRegisterOrUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Insert or update a push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        public async System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceRegisterOrUpdateAsync (PnDeviceDTO body)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = await PushNotificationsPnDeviceRegisterOrUpdateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert or update a push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceRegisterOrUpdateAsyncWithHttpInfo (PnDeviceDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");

            var localVarPath = "/api/pushNotifications/device/registerOrUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceRegisterOrUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Insert or update a push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>PnDeviceDTO</returns>
        public PnDeviceDTO PushNotificationsPnDeviceRegisterOrUpdate (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = PushNotificationsPnDeviceRegisterOrUpdateWithHttpInfo(id, userId, deviceKind, token, enabled, appKind);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert or update a push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        public ApiResponse< PnDeviceDTO > PushNotificationsPnDeviceRegisterOrUpdateWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");
            // verify the required parameter 'deviceKind' is set
            if (deviceKind == null)
                throw new ApiException(400, "Missing required parameter 'deviceKind' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");
            // verify the required parameter 'appKind' is set
            if (appKind == null)
                throw new ApiException(400, "Missing required parameter 'appKind' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");

            var localVarPath = "/api/pushNotifications/device/registerOrUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (deviceKind != null) localVarFormParams.Add("deviceKind", this.Configuration.ApiClient.ParameterToString(deviceKind)); // form parameter
            if (token != null) localVarFormParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", this.Configuration.ApiClient.ParameterToString(enabled)); // form parameter
            if (appKind != null) localVarFormParams.Add("appKind", this.Configuration.ApiClient.ParameterToString(appKind)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceRegisterOrUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Insert or update a push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        public async System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceRegisterOrUpdateAsync (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = await PushNotificationsPnDeviceRegisterOrUpdateAsyncWithHttpInfo(id, userId, deviceKind, token, enabled, appKind);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert or update a push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceRegisterOrUpdateAsyncWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");
            // verify the required parameter 'deviceKind' is set
            if (deviceKind == null)
                throw new ApiException(400, "Missing required parameter 'deviceKind' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");
            // verify the required parameter 'appKind' is set
            if (appKind == null)
                throw new ApiException(400, "Missing required parameter 'appKind' when calling PushNotificationsApi->PushNotificationsPnDeviceRegisterOrUpdate");

            var localVarPath = "/api/pushNotifications/device/registerOrUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (deviceKind != null) localVarFormParams.Add("deviceKind", this.Configuration.ApiClient.ParameterToString(deviceKind)); // form parameter
            if (token != null) localVarFormParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", this.Configuration.ApiClient.ParameterToString(enabled)); // form parameter
            if (appKind != null) localVarFormParams.Add("appKind", this.Configuration.ApiClient.ParameterToString(appKind)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceRegisterOrUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Update an existing push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>PnDeviceDTO</returns>
        public PnDeviceDTO PushNotificationsPnDeviceUpdate (PnDeviceDTO body)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = PushNotificationsPnDeviceUpdateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        public ApiResponse< PnDeviceDTO > PushNotificationsPnDeviceUpdateWithHttpInfo (PnDeviceDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Update an existing push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        public async System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceUpdateAsync (PnDeviceDTO body)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = await PushNotificationsPnDeviceUpdateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceUpdateAsyncWithHttpInfo (PnDeviceDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Update an existing push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>PnDeviceDTO</returns>
        public PnDeviceDTO PushNotificationsPnDeviceUpdate (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = PushNotificationsPnDeviceUpdateWithHttpInfo(id, userId, deviceKind, token, enabled, appKind);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>ApiResponse of PnDeviceDTO</returns>
        public ApiResponse< PnDeviceDTO > PushNotificationsPnDeviceUpdateWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");
            // verify the required parameter 'deviceKind' is set
            if (deviceKind == null)
                throw new ApiException(400, "Missing required parameter 'deviceKind' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");
            // verify the required parameter 'appKind' is set
            if (appKind == null)
                throw new ApiException(400, "Missing required parameter 'appKind' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (deviceKind != null) localVarFormParams.Add("deviceKind", this.Configuration.ApiClient.ParameterToString(deviceKind)); // form parameter
            if (token != null) localVarFormParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", this.Configuration.ApiClient.ParameterToString(enabled)); // form parameter
            if (appKind != null) localVarFormParams.Add("appKind", this.Configuration.ApiClient.ParameterToString(appKind)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

        /// <summary>
        /// Update an existing push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of PnDeviceDTO</returns>
        public async System.Threading.Tasks.Task<PnDeviceDTO> PushNotificationsPnDeviceUpdateAsync (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
             ApiResponse<PnDeviceDTO> localVarResponse = await PushNotificationsPnDeviceUpdateAsyncWithHttpInfo(id, userId, deviceKind, token, enabled, appKind);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing push notification device 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="deviceKind"></param>
        /// <param name="token"></param>
        /// <param name="enabled"></param>
        /// <param name="appKind"></param>
        /// <returns>Task of ApiResponse (PnDeviceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PnDeviceDTO>> PushNotificationsPnDeviceUpdateAsyncWithHttpInfo (int? id, int? userId, int? deviceKind, string token, bool? enabled, int? appKind)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");
            // verify the required parameter 'deviceKind' is set
            if (deviceKind == null)
                throw new ApiException(400, "Missing required parameter 'deviceKind' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");
            // verify the required parameter 'appKind' is set
            if (appKind == null)
                throw new ApiException(400, "Missing required parameter 'appKind' when calling PushNotificationsApi->PushNotificationsPnDeviceUpdate");

            var localVarPath = "/api/pushNotifications/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (deviceKind != null) localVarFormParams.Add("deviceKind", this.Configuration.ApiClient.ParameterToString(deviceKind)); // form parameter
            if (token != null) localVarFormParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", this.Configuration.ApiClient.ParameterToString(enabled)); // form parameter
            if (appKind != null) localVarFormParams.Add("appKind", this.Configuration.ApiClient.ParameterToString(appKind)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PushNotificationsPnDeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PnDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PnDeviceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PnDeviceDTO)));
        }

    }
}
