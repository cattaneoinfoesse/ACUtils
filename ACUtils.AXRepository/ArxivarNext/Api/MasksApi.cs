/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMasksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Tells if the mask can be upgraded to advanced
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId"></param>
        /// <returns>bool?</returns>
        bool? MasksCanUpgradeToAdvanced (string maskId);

        /// <summary>
        /// Tells if the mask can be upgraded to advanced
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> MasksCanUpgradeToAdvancedWithHttpInfo (string maskId);
        /// <summary>
        /// This call clones a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Options to use for cloning</param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns></returns>
        void MasksCloneMask (MaskCloneOptionsDto body, string id);

        /// <summary>
        /// This call clones a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Options to use for cloning</param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MasksCloneMaskWithHttpInfo (MaskCloneOptionsDto body, string id);
        /// <summary>
        /// This call clones a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePredefinedProfile"></param>
        /// <param name="predefinedProfileName"></param>
        /// <param name="maskName"></param>
        /// <param name="originalMaskId"></param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns></returns>
        void MasksCloneMask (bool? clonePredefinedProfile, string predefinedProfileName, string maskName, string originalMaskId, string id);

        /// <summary>
        /// This call clones a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePredefinedProfile"></param>
        /// <param name="predefinedProfileName"></param>
        /// <param name="maskName"></param>
        /// <param name="originalMaskId"></param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MasksCloneMaskWithHttpInfo (bool? clonePredefinedProfile, string predefinedProfileName, string maskName, string originalMaskId, string id);
        /// <summary>
        /// This call deletes a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Object</returns>
        Object MasksDelete (string id);

        /// <summary>
        /// This call deletes a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MasksDeleteWithHttpInfo (string id);
        /// <summary>
        /// This call returns a mask by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>MaskDTO</returns>
        MaskDTO MasksGetById (string id);

        /// <summary>
        /// This call returns a mask by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>ApiResponse of MaskDTO</returns>
        ApiResponse<MaskDTO> MasksGetByIdWithHttpInfo (string id);
        /// <summary>
        /// This call returns all possibile Document Types for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>List&lt;DocumentTypeBaseDTO&gt;</returns>
        List<DocumentTypeBaseDTO> MasksGetDocumentTypesByMaskId (string maskId, string businessUnitCode = null);

        /// <summary>
        /// This call returns all possibile Document Types for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeBaseDTO&gt;</returns>
        ApiResponse<List<DocumentTypeBaseDTO>> MasksGetDocumentTypesByMaskIdWithHttpInfo (string maskId, string businessUnitCode = null);
        /// <summary>
        /// This call returns all possibile Document Types for a mask
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Masks/{maskId}/DocumentTypes?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>List&lt;DocumentTypeBaseDTO&gt;</returns>
        List<DocumentTypeBaseDTO> MasksGetDocumentTypesByMaskIdOld (string maskId, string businessUnitCode);

        /// <summary>
        /// This call returns all possibile Document Types for a mask
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Masks/{maskId}/DocumentTypes?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeBaseDTO&gt;</returns>
        ApiResponse<List<DocumentTypeBaseDTO>> MasksGetDocumentTypesByMaskIdOldWithHttpInfo (string maskId, string businessUnitCode);
        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>DocumentTypeBaseTreeDTO</returns>
        DocumentTypeBaseTreeDTO MasksGetDocumentTypesTreeByMaskId (string maskId, string businessUnitCode = null);

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>ApiResponse of DocumentTypeBaseTreeDTO</returns>
        ApiResponse<DocumentTypeBaseTreeDTO> MasksGetDocumentTypesTreeByMaskIdWithHttpInfo (string maskId, string businessUnitCode = null);
        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format)
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Masks/{maskId}/DocumentTypesTree?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>DocumentTypeBaseTreeDTO</returns>
        DocumentTypeBaseTreeDTO MasksGetDocumentTypesTreeByMaskIdOld (string maskId, string businessUnitCode);

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format)
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Masks/{maskId}/DocumentTypesTree?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>ApiResponse of DocumentTypeBaseTreeDTO</returns>
        ApiResponse<DocumentTypeBaseTreeDTO> MasksGetDocumentTypesTreeByMaskIdOldWithHttpInfo (string maskId, string businessUnitCode);
        /// <summary>
        /// This call returns possibile fields by a Document Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemid">Document Type Identifier</param>
        /// <returns>List&lt;MaskDetailDTO&gt;</returns>
        List<MaskDetailDTO> MasksGetFieldsByClasse (int? systemid);

        /// <summary>
        /// This call returns possibile fields by a Document Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemid">Document Type Identifier</param>
        /// <returns>ApiResponse of List&lt;MaskDetailDTO&gt;</returns>
        ApiResponse<List<MaskDetailDTO>> MasksGetFieldsByClasseWithHttpInfo (int? systemid);
        /// <summary>
        /// This call returns all masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MaskDTO&gt;</returns>
        List<MaskDTO> MasksGetList ();

        /// <summary>
        /// This call returns all masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MaskDTO&gt;</returns>
        ApiResponse<List<MaskDTO>> MasksGetListWithHttpInfo ();
        /// <summary>
        /// This call returns the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>PermissionsDTO</returns>
        PermissionsDTO MasksGetPermission (string maskId);

        /// <summary>
        /// This call returns the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        ApiResponse<PermissionsDTO> MasksGetPermissionWithHttpInfo (string maskId);
        /// <summary>
        /// This calls returns the profile schema for a mask associated to a class additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO MasksGetProfileForClasseBox (string additionalFieldName, ProfileDTO body = null);

        /// <summary>
        /// This calls returns the profile schema for a mask associated to a class additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> MasksGetProfileForClasseBoxWithHttpInfo (string additionalFieldName, ProfileDTO body = null);
        /// <summary>
        /// This call returns the profile schema by a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO MasksGetProfileSchemaByMaskId (string maskId);

        /// <summary>
        /// This call returns the profile schema by a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> MasksGetProfileSchemaByMaskIdWithHttpInfo (string maskId);
        /// <summary>
        /// This call returns the profile schema by a mask and a variables mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        MaskProfileSchemaDTO MasksGetProfileSchemaByMaskIdAndMappings (string maskId, ProcessVariablesMappingDTO body = null);

        /// <summary>
        /// This call returns the profile schema by a mask and a variables mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        ApiResponse<MaskProfileSchemaDTO> MasksGetProfileSchemaByMaskIdAndMappingsWithHttpInfo (string maskId, ProcessVariablesMappingDTO body = null);
        /// <summary>
        /// This call returns the root mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MaskDTO</returns>
        MaskDTO MasksGetRoot ();

        /// <summary>
        /// This call returns the root mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MaskDTO</returns>
        ApiResponse<MaskDTO> MasksGetRootWithHttpInfo ();
        /// <summary>
        /// This call inserts a new mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void MasksInserMask (MaskDTO body = null);

        /// <summary>
        /// This call inserts a new mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MasksInserMaskWithHttpInfo (MaskDTO body = null);
        /// <summary>
        /// This call executes a new profiling
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        ProfileResultDTO MasksPost (string maskId, ProfileDTO body = null);

        /// <summary>
        /// This call executes a new profiling
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        ApiResponse<ProfileResultDTO> MasksPostWithHttpInfo (string maskId, ProfileDTO body = null);
        /// <summary>
        /// This call updates the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permissions to update</param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns></returns>
        void MasksSetPermission (PermissionsDTO body, string maskId);

        /// <summary>
        /// This call updates the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permissions to update</param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MasksSetPermissionWithHttpInfo (PermissionsDTO body, string maskId);
        /// <summary>
        /// This call updates the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns></returns>
        void MasksSetPermission (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, string maskId);

        /// <summary>
        /// This call updates the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MasksSetPermissionWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, string maskId);
        /// <summary>
        /// This call updates a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MaskDTO</returns>
        MaskDTO MasksUpdateMask (string id, MaskDTO body = null);

        /// <summary>
        /// This call updates a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MaskDTO</returns>
        ApiResponse<MaskDTO> MasksUpdateMaskWithHttpInfo (string id, MaskDTO body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Tells if the mask can be upgraded to advanced
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> MasksCanUpgradeToAdvancedAsync (string maskId);

        /// <summary>
        /// Tells if the mask can be upgraded to advanced
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> MasksCanUpgradeToAdvancedAsyncWithHttpInfo (string maskId);
        /// <summary>
        /// This call clones a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Options to use for cloning</param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MasksCloneMaskAsync (MaskCloneOptionsDto body, string id);

        /// <summary>
        /// This call clones a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Options to use for cloning</param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MasksCloneMaskAsyncWithHttpInfo (MaskCloneOptionsDto body, string id);
        /// <summary>
        /// This call clones a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePredefinedProfile"></param>
        /// <param name="predefinedProfileName"></param>
        /// <param name="maskName"></param>
        /// <param name="originalMaskId"></param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MasksCloneMaskAsync (bool? clonePredefinedProfile, string predefinedProfileName, string maskName, string originalMaskId, string id);

        /// <summary>
        /// This call clones a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePredefinedProfile"></param>
        /// <param name="predefinedProfileName"></param>
        /// <param name="maskName"></param>
        /// <param name="originalMaskId"></param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MasksCloneMaskAsyncWithHttpInfo (bool? clonePredefinedProfile, string predefinedProfileName, string maskName, string originalMaskId, string id);
        /// <summary>
        /// This call deletes a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MasksDeleteAsync (string id);

        /// <summary>
        /// This call deletes a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MasksDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// This call returns a mask by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of MaskDTO</returns>
        System.Threading.Tasks.Task<MaskDTO> MasksGetByIdAsync (string id);

        /// <summary>
        /// This call returns a mask by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of ApiResponse (MaskDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskDTO>> MasksGetByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// This call returns all possibile Document Types for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeBaseDTO>> MasksGetDocumentTypesByMaskIdAsync (string maskId, string businessUnitCode = null);

        /// <summary>
        /// This call returns all possibile Document Types for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeBaseDTO>>> MasksGetDocumentTypesByMaskIdAsyncWithHttpInfo (string maskId, string businessUnitCode = null);
        /// <summary>
        /// This call returns all possibile Document Types for a mask
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Masks/{maskId}/DocumentTypes?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>Task of List&lt;DocumentTypeBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeBaseDTO>> MasksGetDocumentTypesByMaskIdOldAsync (string maskId, string businessUnitCode);

        /// <summary>
        /// This call returns all possibile Document Types for a mask
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Masks/{maskId}/DocumentTypes?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeBaseDTO>>> MasksGetDocumentTypesByMaskIdOldAsyncWithHttpInfo (string maskId, string businessUnitCode);
        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>Task of DocumentTypeBaseTreeDTO</returns>
        System.Threading.Tasks.Task<DocumentTypeBaseTreeDTO> MasksGetDocumentTypesTreeByMaskIdAsync (string maskId, string businessUnitCode = null);

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>Task of ApiResponse (DocumentTypeBaseTreeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeBaseTreeDTO>> MasksGetDocumentTypesTreeByMaskIdAsyncWithHttpInfo (string maskId, string businessUnitCode = null);
        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format)
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Masks/{maskId}/DocumentTypesTree?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>Task of DocumentTypeBaseTreeDTO</returns>
        System.Threading.Tasks.Task<DocumentTypeBaseTreeDTO> MasksGetDocumentTypesTreeByMaskIdOldAsync (string maskId, string businessUnitCode);

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format)
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Masks/{maskId}/DocumentTypesTree?businessunitcode&#x3D;{businessunitcode}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>Task of ApiResponse (DocumentTypeBaseTreeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeBaseTreeDTO>> MasksGetDocumentTypesTreeByMaskIdOldAsyncWithHttpInfo (string maskId, string businessUnitCode);
        /// <summary>
        /// This call returns possibile fields by a Document Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemid">Document Type Identifier</param>
        /// <returns>Task of List&lt;MaskDetailDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MaskDetailDTO>> MasksGetFieldsByClasseAsync (int? systemid);

        /// <summary>
        /// This call returns possibile fields by a Document Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemid">Document Type Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;MaskDetailDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MaskDetailDTO>>> MasksGetFieldsByClasseAsyncWithHttpInfo (int? systemid);
        /// <summary>
        /// This call returns all masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MaskDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MaskDTO>> MasksGetListAsync ();

        /// <summary>
        /// This call returns all masks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MaskDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MaskDTO>>> MasksGetListAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of PermissionsDTO</returns>
        System.Threading.Tasks.Task<PermissionsDTO> MasksGetPermissionAsync (string maskId);

        /// <summary>
        /// This call returns the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> MasksGetPermissionAsyncWithHttpInfo (string maskId);
        /// <summary>
        /// This calls returns the profile schema for a mask associated to a class additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> MasksGetProfileForClasseBoxAsync (string additionalFieldName, ProfileDTO body = null);

        /// <summary>
        /// This calls returns the profile schema for a mask associated to a class additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> MasksGetProfileForClasseBoxAsyncWithHttpInfo (string additionalFieldName, ProfileDTO body = null);
        /// <summary>
        /// This call returns the profile schema by a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> MasksGetProfileSchemaByMaskIdAsync (string maskId);

        /// <summary>
        /// This call returns the profile schema by a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> MasksGetProfileSchemaByMaskIdAsyncWithHttpInfo (string maskId);
        /// <summary>
        /// This call returns the profile schema by a mask and a variables mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        System.Threading.Tasks.Task<MaskProfileSchemaDTO> MasksGetProfileSchemaByMaskIdAndMappingsAsync (string maskId, ProcessVariablesMappingDTO body = null);

        /// <summary>
        /// This call returns the profile schema by a mask and a variables mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> MasksGetProfileSchemaByMaskIdAndMappingsAsyncWithHttpInfo (string maskId, ProcessVariablesMappingDTO body = null);
        /// <summary>
        /// This call returns the root mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MaskDTO</returns>
        System.Threading.Tasks.Task<MaskDTO> MasksGetRootAsync ();

        /// <summary>
        /// This call returns the root mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MaskDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskDTO>> MasksGetRootAsyncWithHttpInfo ();
        /// <summary>
        /// This call inserts a new mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MasksInserMaskAsync (MaskDTO body = null);

        /// <summary>
        /// This call inserts a new mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MasksInserMaskAsyncWithHttpInfo (MaskDTO body = null);
        /// <summary>
        /// This call executes a new profiling
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        System.Threading.Tasks.Task<ProfileResultDTO> MasksPostAsync (string maskId, ProfileDTO body = null);

        /// <summary>
        /// This call executes a new profiling
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> MasksPostAsyncWithHttpInfo (string maskId, ProfileDTO body = null);
        /// <summary>
        /// This call updates the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permissions to update</param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MasksSetPermissionAsync (PermissionsDTO body, string maskId);

        /// <summary>
        /// This call updates the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permissions to update</param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MasksSetPermissionAsyncWithHttpInfo (PermissionsDTO body, string maskId);
        /// <summary>
        /// This call updates the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MasksSetPermissionAsync (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, string maskId);

        /// <summary>
        /// This call updates the permissions for a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MasksSetPermissionAsyncWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, string maskId);
        /// <summary>
        /// This call updates a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MaskDTO</returns>
        System.Threading.Tasks.Task<MaskDTO> MasksUpdateMaskAsync (string id, MaskDTO body = null);

        /// <summary>
        /// This call updates a mask
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MaskDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaskDTO>> MasksUpdateMaskAsyncWithHttpInfo (string id, MaskDTO body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MasksApi : IMasksApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MasksApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MasksApi"/> class
        /// </summary>
        /// <returns></returns>
        public MasksApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MasksApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Tells if the mask can be upgraded to advanced 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId"></param>
        /// <returns>bool?</returns>
        public bool? MasksCanUpgradeToAdvanced (string maskId)
        {
             ApiResponse<bool?> localVarResponse = MasksCanUpgradeToAdvancedWithHttpInfo(maskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tells if the mask can be upgraded to advanced 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > MasksCanUpgradeToAdvancedWithHttpInfo (string maskId)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksCanUpgradeToAdvanced");

            var localVarPath = "/api/Masks/{maskId}/CanUpgradeToAdvanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksCanUpgradeToAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Tells if the mask can be upgraded to advanced 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> MasksCanUpgradeToAdvancedAsync (string maskId)
        {
             ApiResponse<bool?> localVarResponse = await MasksCanUpgradeToAdvancedAsyncWithHttpInfo(maskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tells if the mask can be upgraded to advanced 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> MasksCanUpgradeToAdvancedAsyncWithHttpInfo (string maskId)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksCanUpgradeToAdvanced");

            var localVarPath = "/api/Masks/{maskId}/CanUpgradeToAdvanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksCanUpgradeToAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call clones a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Options to use for cloning</param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns></returns>
        public void MasksCloneMask (MaskCloneOptionsDto body, string id)
        {
             MasksCloneMaskWithHttpInfo(body, id);
        }

        /// <summary>
        /// This call clones a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Options to use for cloning</param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MasksCloneMaskWithHttpInfo (MaskCloneOptionsDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasksApi->MasksCloneMask");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasksApi->MasksCloneMask");

            var localVarPath = "/api/Masks/{id}/Clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksCloneMask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call clones a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Options to use for cloning</param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MasksCloneMaskAsync (MaskCloneOptionsDto body, string id)
        {
             await MasksCloneMaskAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// This call clones a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Options to use for cloning</param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MasksCloneMaskAsyncWithHttpInfo (MaskCloneOptionsDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasksApi->MasksCloneMask");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasksApi->MasksCloneMask");

            var localVarPath = "/api/Masks/{id}/Clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksCloneMask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call clones a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePredefinedProfile"></param>
        /// <param name="predefinedProfileName"></param>
        /// <param name="maskName"></param>
        /// <param name="originalMaskId"></param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns></returns>
        public void MasksCloneMask (bool? clonePredefinedProfile, string predefinedProfileName, string maskName, string originalMaskId, string id)
        {
             MasksCloneMaskWithHttpInfo(clonePredefinedProfile, predefinedProfileName, maskName, originalMaskId, id);
        }

        /// <summary>
        /// This call clones a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePredefinedProfile"></param>
        /// <param name="predefinedProfileName"></param>
        /// <param name="maskName"></param>
        /// <param name="originalMaskId"></param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MasksCloneMaskWithHttpInfo (bool? clonePredefinedProfile, string predefinedProfileName, string maskName, string originalMaskId, string id)
        {
            // verify the required parameter 'clonePredefinedProfile' is set
            if (clonePredefinedProfile == null)
                throw new ApiException(400, "Missing required parameter 'clonePredefinedProfile' when calling MasksApi->MasksCloneMask");
            // verify the required parameter 'predefinedProfileName' is set
            if (predefinedProfileName == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileName' when calling MasksApi->MasksCloneMask");
            // verify the required parameter 'maskName' is set
            if (maskName == null)
                throw new ApiException(400, "Missing required parameter 'maskName' when calling MasksApi->MasksCloneMask");
            // verify the required parameter 'originalMaskId' is set
            if (originalMaskId == null)
                throw new ApiException(400, "Missing required parameter 'originalMaskId' when calling MasksApi->MasksCloneMask");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasksApi->MasksCloneMask");

            var localVarPath = "/api/Masks/{id}/Clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clonePredefinedProfile != null) localVarFormParams.Add("clonePredefinedProfile", this.Configuration.ApiClient.ParameterToString(clonePredefinedProfile)); // form parameter
            if (predefinedProfileName != null) localVarFormParams.Add("predefinedProfileName", this.Configuration.ApiClient.ParameterToString(predefinedProfileName)); // form parameter
            if (maskName != null) localVarFormParams.Add("maskName", this.Configuration.ApiClient.ParameterToString(maskName)); // form parameter
            if (originalMaskId != null) localVarFormParams.Add("originalMaskId", this.Configuration.ApiClient.ParameterToString(originalMaskId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksCloneMask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call clones a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePredefinedProfile"></param>
        /// <param name="predefinedProfileName"></param>
        /// <param name="maskName"></param>
        /// <param name="originalMaskId"></param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MasksCloneMaskAsync (bool? clonePredefinedProfile, string predefinedProfileName, string maskName, string originalMaskId, string id)
        {
             await MasksCloneMaskAsyncWithHttpInfo(clonePredefinedProfile, predefinedProfileName, maskName, originalMaskId, id);

        }

        /// <summary>
        /// This call clones a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePredefinedProfile"></param>
        /// <param name="predefinedProfileName"></param>
        /// <param name="maskName"></param>
        /// <param name="originalMaskId"></param>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MasksCloneMaskAsyncWithHttpInfo (bool? clonePredefinedProfile, string predefinedProfileName, string maskName, string originalMaskId, string id)
        {
            // verify the required parameter 'clonePredefinedProfile' is set
            if (clonePredefinedProfile == null)
                throw new ApiException(400, "Missing required parameter 'clonePredefinedProfile' when calling MasksApi->MasksCloneMask");
            // verify the required parameter 'predefinedProfileName' is set
            if (predefinedProfileName == null)
                throw new ApiException(400, "Missing required parameter 'predefinedProfileName' when calling MasksApi->MasksCloneMask");
            // verify the required parameter 'maskName' is set
            if (maskName == null)
                throw new ApiException(400, "Missing required parameter 'maskName' when calling MasksApi->MasksCloneMask");
            // verify the required parameter 'originalMaskId' is set
            if (originalMaskId == null)
                throw new ApiException(400, "Missing required parameter 'originalMaskId' when calling MasksApi->MasksCloneMask");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasksApi->MasksCloneMask");

            var localVarPath = "/api/Masks/{id}/Clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clonePredefinedProfile != null) localVarFormParams.Add("clonePredefinedProfile", this.Configuration.ApiClient.ParameterToString(clonePredefinedProfile)); // form parameter
            if (predefinedProfileName != null) localVarFormParams.Add("predefinedProfileName", this.Configuration.ApiClient.ParameterToString(predefinedProfileName)); // form parameter
            if (maskName != null) localVarFormParams.Add("maskName", this.Configuration.ApiClient.ParameterToString(maskName)); // form parameter
            if (originalMaskId != null) localVarFormParams.Add("originalMaskId", this.Configuration.ApiClient.ParameterToString(originalMaskId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksCloneMask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Object</returns>
        public Object MasksDelete (string id)
        {
             ApiResponse<Object> localVarResponse = MasksDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call deletes a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > MasksDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasksApi->MasksDelete");

            var localVarPath = "/api/Masks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call deletes a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MasksDeleteAsync (string id)
        {
             ApiResponse<Object> localVarResponse = await MasksDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call deletes a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MasksDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasksApi->MasksDelete");

            var localVarPath = "/api/Masks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call returns a mask by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>MaskDTO</returns>
        public MaskDTO MasksGetById (string id)
        {
             ApiResponse<MaskDTO> localVarResponse = MasksGetByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a mask by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>ApiResponse of MaskDTO</returns>
        public ApiResponse< MaskDTO > MasksGetByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasksApi->MasksGetById");

            var localVarPath = "/api/Masks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskDTO)));
        }

        /// <summary>
        /// This call returns a mask by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of MaskDTO</returns>
        public async System.Threading.Tasks.Task<MaskDTO> MasksGetByIdAsync (string id)
        {
             ApiResponse<MaskDTO> localVarResponse = await MasksGetByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a mask by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <returns>Task of ApiResponse (MaskDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskDTO>> MasksGetByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasksApi->MasksGetById");

            var localVarPath = "/api/Masks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskDTO)));
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>List&lt;DocumentTypeBaseDTO&gt;</returns>
        public List<DocumentTypeBaseDTO> MasksGetDocumentTypesByMaskId (string maskId, string businessUnitCode = null)
        {
             ApiResponse<List<DocumentTypeBaseDTO>> localVarResponse = MasksGetDocumentTypesByMaskIdWithHttpInfo(maskId, businessUnitCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeBaseDTO&gt;</returns>
        public ApiResponse< List<DocumentTypeBaseDTO> > MasksGetDocumentTypesByMaskIdWithHttpInfo (string maskId, string businessUnitCode = null)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetDocumentTypesByMaskId");

            var localVarPath = "/api/Masks/{maskId}/DocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetDocumentTypesByMaskId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentTypeBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeBaseDTO>)));
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeBaseDTO>> MasksGetDocumentTypesByMaskIdAsync (string maskId, string businessUnitCode = null)
        {
             ApiResponse<List<DocumentTypeBaseDTO>> localVarResponse = await MasksGetDocumentTypesByMaskIdAsyncWithHttpInfo(maskId, businessUnitCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeBaseDTO>>> MasksGetDocumentTypesByMaskIdAsyncWithHttpInfo (string maskId, string businessUnitCode = null)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetDocumentTypesByMaskId");

            var localVarPath = "/api/Masks/{maskId}/DocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetDocumentTypesByMaskId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentTypeBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeBaseDTO>)));
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask This method is deprecated. Use api/Masks/{maskId}/DocumentTypes?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>List&lt;DocumentTypeBaseDTO&gt;</returns>
        public List<DocumentTypeBaseDTO> MasksGetDocumentTypesByMaskIdOld (string maskId, string businessUnitCode)
        {
             ApiResponse<List<DocumentTypeBaseDTO>> localVarResponse = MasksGetDocumentTypesByMaskIdOldWithHttpInfo(maskId, businessUnitCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask This method is deprecated. Use api/Masks/{maskId}/DocumentTypes?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeBaseDTO&gt;</returns>
        public ApiResponse< List<DocumentTypeBaseDTO> > MasksGetDocumentTypesByMaskIdOldWithHttpInfo (string maskId, string businessUnitCode)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetDocumentTypesByMaskIdOld");
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling MasksApi->MasksGetDocumentTypesByMaskIdOld");

            var localVarPath = "/api/Masks/{maskId}/DocumentTypes/{businessUnitCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (businessUnitCode != null) localVarPathParams.Add("businessUnitCode", this.Configuration.ApiClient.ParameterToString(businessUnitCode)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetDocumentTypesByMaskIdOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentTypeBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeBaseDTO>)));
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask This method is deprecated. Use api/Masks/{maskId}/DocumentTypes?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>Task of List&lt;DocumentTypeBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeBaseDTO>> MasksGetDocumentTypesByMaskIdOldAsync (string maskId, string businessUnitCode)
        {
             ApiResponse<List<DocumentTypeBaseDTO>> localVarResponse = await MasksGetDocumentTypesByMaskIdOldAsyncWithHttpInfo(maskId, businessUnitCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask This method is deprecated. Use api/Masks/{maskId}/DocumentTypes?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeBaseDTO>>> MasksGetDocumentTypesByMaskIdOldAsyncWithHttpInfo (string maskId, string businessUnitCode)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetDocumentTypesByMaskIdOld");
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling MasksApi->MasksGetDocumentTypesByMaskIdOld");

            var localVarPath = "/api/Masks/{maskId}/DocumentTypes/{businessUnitCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (businessUnitCode != null) localVarPathParams.Add("businessUnitCode", this.Configuration.ApiClient.ParameterToString(businessUnitCode)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetDocumentTypesByMaskIdOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentTypeBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeBaseDTO>)));
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>DocumentTypeBaseTreeDTO</returns>
        public DocumentTypeBaseTreeDTO MasksGetDocumentTypesTreeByMaskId (string maskId, string businessUnitCode = null)
        {
             ApiResponse<DocumentTypeBaseTreeDTO> localVarResponse = MasksGetDocumentTypesTreeByMaskIdWithHttpInfo(maskId, businessUnitCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>ApiResponse of DocumentTypeBaseTreeDTO</returns>
        public ApiResponse< DocumentTypeBaseTreeDTO > MasksGetDocumentTypesTreeByMaskIdWithHttpInfo (string maskId, string businessUnitCode = null)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetDocumentTypesTreeByMaskId");

            var localVarPath = "/api/Masks/{maskId}/DocumentTypesTree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetDocumentTypesTreeByMaskId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeBaseTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeBaseTreeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeBaseTreeDTO)));
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>Task of DocumentTypeBaseTreeDTO</returns>
        public async System.Threading.Tasks.Task<DocumentTypeBaseTreeDTO> MasksGetDocumentTypesTreeByMaskIdAsync (string maskId, string businessUnitCode = null)
        {
             ApiResponse<DocumentTypeBaseTreeDTO> localVarResponse = await MasksGetDocumentTypesTreeByMaskIdAsyncWithHttpInfo(maskId, businessUnitCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code (optional)</param>
        /// <returns>Task of ApiResponse (DocumentTypeBaseTreeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeBaseTreeDTO>> MasksGetDocumentTypesTreeByMaskIdAsyncWithHttpInfo (string maskId, string businessUnitCode = null)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetDocumentTypesTreeByMaskId");

            var localVarPath = "/api/Masks/{maskId}/DocumentTypesTree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetDocumentTypesTreeByMaskId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeBaseTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeBaseTreeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeBaseTreeDTO)));
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format) This method is deprecated. Use api/Masks/{maskId}/DocumentTypesTree?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>DocumentTypeBaseTreeDTO</returns>
        public DocumentTypeBaseTreeDTO MasksGetDocumentTypesTreeByMaskIdOld (string maskId, string businessUnitCode)
        {
             ApiResponse<DocumentTypeBaseTreeDTO> localVarResponse = MasksGetDocumentTypesTreeByMaskIdOldWithHttpInfo(maskId, businessUnitCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format) This method is deprecated. Use api/Masks/{maskId}/DocumentTypesTree?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>ApiResponse of DocumentTypeBaseTreeDTO</returns>
        public ApiResponse< DocumentTypeBaseTreeDTO > MasksGetDocumentTypesTreeByMaskIdOldWithHttpInfo (string maskId, string businessUnitCode)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetDocumentTypesTreeByMaskIdOld");
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling MasksApi->MasksGetDocumentTypesTreeByMaskIdOld");

            var localVarPath = "/api/Masks/{maskId}/DocumentTypesTree/{businessUnitCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (businessUnitCode != null) localVarPathParams.Add("businessUnitCode", this.Configuration.ApiClient.ParameterToString(businessUnitCode)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetDocumentTypesTreeByMaskIdOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeBaseTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeBaseTreeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeBaseTreeDTO)));
        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format) This method is deprecated. Use api/Masks/{maskId}/DocumentTypesTree?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>Task of DocumentTypeBaseTreeDTO</returns>
        public async System.Threading.Tasks.Task<DocumentTypeBaseTreeDTO> MasksGetDocumentTypesTreeByMaskIdOldAsync (string maskId, string businessUnitCode)
        {
             ApiResponse<DocumentTypeBaseTreeDTO> localVarResponse = await MasksGetDocumentTypesTreeByMaskIdOldAsyncWithHttpInfo(maskId, businessUnitCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all possibile Document Types for a mask (tree format) This method is deprecated. Use api/Masks/{maskId}/DocumentTypesTree?businessunitcode&#x3D;{businessunitcode}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="businessUnitCode">Business Unit Code</param>
        /// <returns>Task of ApiResponse (DocumentTypeBaseTreeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeBaseTreeDTO>> MasksGetDocumentTypesTreeByMaskIdOldAsyncWithHttpInfo (string maskId, string businessUnitCode)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetDocumentTypesTreeByMaskIdOld");
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling MasksApi->MasksGetDocumentTypesTreeByMaskIdOld");

            var localVarPath = "/api/Masks/{maskId}/DocumentTypesTree/{businessUnitCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (businessUnitCode != null) localVarPathParams.Add("businessUnitCode", this.Configuration.ApiClient.ParameterToString(businessUnitCode)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetDocumentTypesTreeByMaskIdOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeBaseTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeBaseTreeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeBaseTreeDTO)));
        }

        /// <summary>
        /// This call returns possibile fields by a Document Type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemid">Document Type Identifier</param>
        /// <returns>List&lt;MaskDetailDTO&gt;</returns>
        public List<MaskDetailDTO> MasksGetFieldsByClasse (int? systemid)
        {
             ApiResponse<List<MaskDetailDTO>> localVarResponse = MasksGetFieldsByClasseWithHttpInfo(systemid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns possibile fields by a Document Type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemid">Document Type Identifier</param>
        /// <returns>ApiResponse of List&lt;MaskDetailDTO&gt;</returns>
        public ApiResponse< List<MaskDetailDTO> > MasksGetFieldsByClasseWithHttpInfo (int? systemid)
        {
            // verify the required parameter 'systemid' is set
            if (systemid == null)
                throw new ApiException(400, "Missing required parameter 'systemid' when calling MasksApi->MasksGetFieldsByClasse");

            var localVarPath = "/api/Masks/fieldsbydocumenttype/{systemid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemid != null) localVarPathParams.Add("systemid", this.Configuration.ApiClient.ParameterToString(systemid)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetFieldsByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaskDetailDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MaskDetailDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaskDetailDTO>)));
        }

        /// <summary>
        /// This call returns possibile fields by a Document Type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemid">Document Type Identifier</param>
        /// <returns>Task of List&lt;MaskDetailDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MaskDetailDTO>> MasksGetFieldsByClasseAsync (int? systemid)
        {
             ApiResponse<List<MaskDetailDTO>> localVarResponse = await MasksGetFieldsByClasseAsyncWithHttpInfo(systemid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns possibile fields by a Document Type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemid">Document Type Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;MaskDetailDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MaskDetailDTO>>> MasksGetFieldsByClasseAsyncWithHttpInfo (int? systemid)
        {
            // verify the required parameter 'systemid' is set
            if (systemid == null)
                throw new ApiException(400, "Missing required parameter 'systemid' when calling MasksApi->MasksGetFieldsByClasse");

            var localVarPath = "/api/Masks/fieldsbydocumenttype/{systemid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemid != null) localVarPathParams.Add("systemid", this.Configuration.ApiClient.ParameterToString(systemid)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetFieldsByClasse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaskDetailDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MaskDetailDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaskDetailDTO>)));
        }

        /// <summary>
        /// This call returns all masks 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MaskDTO&gt;</returns>
        public List<MaskDTO> MasksGetList ()
        {
             ApiResponse<List<MaskDTO>> localVarResponse = MasksGetListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all masks 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MaskDTO&gt;</returns>
        public ApiResponse< List<MaskDTO> > MasksGetListWithHttpInfo ()
        {

            var localVarPath = "/api/Masks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaskDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MaskDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaskDTO>)));
        }

        /// <summary>
        /// This call returns all masks 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MaskDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MaskDTO>> MasksGetListAsync ()
        {
             ApiResponse<List<MaskDTO>> localVarResponse = await MasksGetListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all masks 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MaskDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MaskDTO>>> MasksGetListAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Masks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaskDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MaskDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaskDTO>)));
        }

        /// <summary>
        /// This call returns the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>PermissionsDTO</returns>
        public PermissionsDTO MasksGetPermission (string maskId)
        {
             ApiResponse<PermissionsDTO> localVarResponse = MasksGetPermissionWithHttpInfo(maskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        public ApiResponse< PermissionsDTO > MasksGetPermissionWithHttpInfo (string maskId)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetPermission");

            var localVarPath = "/api/Masks/{maskId}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call returns the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of PermissionsDTO</returns>
        public async System.Threading.Tasks.Task<PermissionsDTO> MasksGetPermissionAsync (string maskId)
        {
             ApiResponse<PermissionsDTO> localVarResponse = await MasksGetPermissionAsyncWithHttpInfo(maskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> MasksGetPermissionAsyncWithHttpInfo (string maskId)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetPermission");

            var localVarPath = "/api/Masks/{maskId}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This calls returns the profile schema for a mask associated to a class additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO MasksGetProfileForClasseBox (string additionalFieldName, ProfileDTO body = null)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = MasksGetProfileForClasseBoxWithHttpInfo(additionalFieldName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This calls returns the profile schema for a mask associated to a class additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > MasksGetProfileForClasseBoxWithHttpInfo (string additionalFieldName, ProfileDTO body = null)
        {
            // verify the required parameter 'additionalFieldName' is set
            if (additionalFieldName == null)
                throw new ApiException(400, "Missing required parameter 'additionalFieldName' when calling MasksApi->MasksGetProfileForClasseBox");

            var localVarPath = "/api/Masks/byclassadditionalfield/{additionalFieldName}/profileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (additionalFieldName != null) localVarPathParams.Add("additionalFieldName", this.Configuration.ApiClient.ParameterToString(additionalFieldName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetProfileForClasseBox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This calls returns the profile schema for a mask associated to a class additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> MasksGetProfileForClasseBoxAsync (string additionalFieldName, ProfileDTO body = null)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await MasksGetProfileForClasseBoxAsyncWithHttpInfo(additionalFieldName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This calls returns the profile schema for a mask associated to a class additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalFieldName">Additional name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> MasksGetProfileForClasseBoxAsyncWithHttpInfo (string additionalFieldName, ProfileDTO body = null)
        {
            // verify the required parameter 'additionalFieldName' is set
            if (additionalFieldName == null)
                throw new ApiException(400, "Missing required parameter 'additionalFieldName' when calling MasksApi->MasksGetProfileForClasseBox");

            var localVarPath = "/api/Masks/byclassadditionalfield/{additionalFieldName}/profileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (additionalFieldName != null) localVarPathParams.Add("additionalFieldName", this.Configuration.ApiClient.ParameterToString(additionalFieldName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetProfileForClasseBox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the profile schema by a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO MasksGetProfileSchemaByMaskId (string maskId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = MasksGetProfileSchemaByMaskIdWithHttpInfo(maskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the profile schema by a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > MasksGetProfileSchemaByMaskIdWithHttpInfo (string maskId)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetProfileSchemaByMaskId");

            var localVarPath = "/api/Masks/{maskId}/profileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetProfileSchemaByMaskId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the profile schema by a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> MasksGetProfileSchemaByMaskIdAsync (string maskId)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await MasksGetProfileSchemaByMaskIdAsyncWithHttpInfo(maskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the profile schema by a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> MasksGetProfileSchemaByMaskIdAsyncWithHttpInfo (string maskId)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetProfileSchemaByMaskId");

            var localVarPath = "/api/Masks/{maskId}/profileSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetProfileSchemaByMaskId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the profile schema by a mask and a variables mapping 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MaskProfileSchemaDTO</returns>
        public MaskProfileSchemaDTO MasksGetProfileSchemaByMaskIdAndMappings (string maskId, ProcessVariablesMappingDTO body = null)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = MasksGetProfileSchemaByMaskIdAndMappingsWithHttpInfo(maskId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the profile schema by a mask and a variables mapping 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MaskProfileSchemaDTO</returns>
        public ApiResponse< MaskProfileSchemaDTO > MasksGetProfileSchemaByMaskIdAndMappingsWithHttpInfo (string maskId, ProcessVariablesMappingDTO body = null)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetProfileSchemaByMaskIdAndMappings");

            var localVarPath = "/api/Masks/{maskId}/profileSchemaWithMappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetProfileSchemaByMaskIdAndMappings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the profile schema by a mask and a variables mapping 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MaskProfileSchemaDTO</returns>
        public async System.Threading.Tasks.Task<MaskProfileSchemaDTO> MasksGetProfileSchemaByMaskIdAndMappingsAsync (string maskId, ProcessVariablesMappingDTO body = null)
        {
             ApiResponse<MaskProfileSchemaDTO> localVarResponse = await MasksGetProfileSchemaByMaskIdAndMappingsAsyncWithHttpInfo(maskId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the profile schema by a mask and a variables mapping 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MaskProfileSchemaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskProfileSchemaDTO>> MasksGetProfileSchemaByMaskIdAndMappingsAsyncWithHttpInfo (string maskId, ProcessVariablesMappingDTO body = null)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksGetProfileSchemaByMaskIdAndMappings");

            var localVarPath = "/api/Masks/{maskId}/profileSchemaWithMappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetProfileSchemaByMaskIdAndMappings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskProfileSchemaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskProfileSchemaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskProfileSchemaDTO)));
        }

        /// <summary>
        /// This call returns the root mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MaskDTO</returns>
        public MaskDTO MasksGetRoot ()
        {
             ApiResponse<MaskDTO> localVarResponse = MasksGetRootWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the root mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MaskDTO</returns>
        public ApiResponse< MaskDTO > MasksGetRootWithHttpInfo ()
        {

            var localVarPath = "/api/Masks/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetRoot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskDTO)));
        }

        /// <summary>
        /// This call returns the root mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MaskDTO</returns>
        public async System.Threading.Tasks.Task<MaskDTO> MasksGetRootAsync ()
        {
             ApiResponse<MaskDTO> localVarResponse = await MasksGetRootAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the root mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MaskDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskDTO>> MasksGetRootAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Masks/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksGetRoot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskDTO)));
        }

        /// <summary>
        /// This call inserts a new mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void MasksInserMask (MaskDTO body = null)
        {
             MasksInserMaskWithHttpInfo(body);
        }

        /// <summary>
        /// This call inserts a new mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MasksInserMaskWithHttpInfo (MaskDTO body = null)
        {

            var localVarPath = "/api/Masks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksInserMask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call inserts a new mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MasksInserMaskAsync (MaskDTO body = null)
        {
             await MasksInserMaskAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call inserts a new mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MasksInserMaskAsyncWithHttpInfo (MaskDTO body = null)
        {

            var localVarPath = "/api/Masks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksInserMask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call executes a new profiling 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProfileResultDTO</returns>
        public ProfileResultDTO MasksPost (string maskId, ProfileDTO body = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = MasksPostWithHttpInfo(maskId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes a new profiling 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProfileResultDTO</returns>
        public ApiResponse< ProfileResultDTO > MasksPostWithHttpInfo (string maskId, ProfileDTO body = null)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksPost");

            var localVarPath = "/api/Masks/{maskId}/Profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call executes a new profiling 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProfileResultDTO</returns>
        public async System.Threading.Tasks.Task<ProfileResultDTO> MasksPostAsync (string maskId, ProfileDTO body = null)
        {
             ApiResponse<ProfileResultDTO> localVarResponse = await MasksPostAsyncWithHttpInfo(maskId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes a new profiling 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maskId">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProfileResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileResultDTO>> MasksPostAsyncWithHttpInfo (string maskId, ProfileDTO body = null)
        {
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksPost");

            var localVarPath = "/api/Masks/{maskId}/Profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProfileResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileResultDTO)));
        }

        /// <summary>
        /// This call updates the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permissions to update</param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns></returns>
        public void MasksSetPermission (PermissionsDTO body, string maskId)
        {
             MasksSetPermissionWithHttpInfo(body, maskId);
        }

        /// <summary>
        /// This call updates the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permissions to update</param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MasksSetPermissionWithHttpInfo (PermissionsDTO body, string maskId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasksApi->MasksSetPermission");
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksSetPermission");

            var localVarPath = "/api/Masks/{maskId}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksSetPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permissions to update</param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MasksSetPermissionAsync (PermissionsDTO body, string maskId)
        {
             await MasksSetPermissionAsyncWithHttpInfo(body, maskId);

        }

        /// <summary>
        /// This call updates the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permissions to update</param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MasksSetPermissionAsyncWithHttpInfo (PermissionsDTO body, string maskId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasksApi->MasksSetPermission");
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksSetPermission");

            var localVarPath = "/api/Masks/{maskId}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksSetPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns></returns>
        public void MasksSetPermission (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, string maskId)
        {
             MasksSetPermissionWithHttpInfo(usersPermissions, permissionsProperties, maskId);
        }

        /// <summary>
        /// This call updates the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MasksSetPermissionWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, string maskId)
        {
            // verify the required parameter 'usersPermissions' is set
            if (usersPermissions == null)
                throw new ApiException(400, "Missing required parameter 'usersPermissions' when calling MasksApi->MasksSetPermission");
            // verify the required parameter 'permissionsProperties' is set
            if (permissionsProperties == null)
                throw new ApiException(400, "Missing required parameter 'permissionsProperties' when calling MasksApi->MasksSetPermission");
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksSetPermission");

            var localVarPath = "/api/Masks/{maskId}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (usersPermissions != null) localVarFormParams.Add("usersPermissions", this.Configuration.ApiClient.ParameterToString(usersPermissions)); // form parameter
            if (permissionsProperties != null) localVarFormParams.Add("permissionsProperties", this.Configuration.ApiClient.ParameterToString(permissionsProperties)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksSetPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MasksSetPermissionAsync (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, string maskId)
        {
             await MasksSetPermissionAsyncWithHttpInfo(usersPermissions, permissionsProperties, maskId);

        }

        /// <summary>
        /// This call updates the permissions for a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="maskId">Identifier of the mask</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MasksSetPermissionAsyncWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, string maskId)
        {
            // verify the required parameter 'usersPermissions' is set
            if (usersPermissions == null)
                throw new ApiException(400, "Missing required parameter 'usersPermissions' when calling MasksApi->MasksSetPermission");
            // verify the required parameter 'permissionsProperties' is set
            if (permissionsProperties == null)
                throw new ApiException(400, "Missing required parameter 'permissionsProperties' when calling MasksApi->MasksSetPermission");
            // verify the required parameter 'maskId' is set
            if (maskId == null)
                throw new ApiException(400, "Missing required parameter 'maskId' when calling MasksApi->MasksSetPermission");

            var localVarPath = "/api/Masks/{maskId}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maskId != null) localVarPathParams.Add("maskId", this.Configuration.ApiClient.ParameterToString(maskId)); // path parameter
            if (usersPermissions != null) localVarFormParams.Add("usersPermissions", this.Configuration.ApiClient.ParameterToString(usersPermissions)); // form parameter
            if (permissionsProperties != null) localVarFormParams.Add("permissionsProperties", this.Configuration.ApiClient.ParameterToString(permissionsProperties)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksSetPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MaskDTO</returns>
        public MaskDTO MasksUpdateMask (string id, MaskDTO body = null)
        {
             ApiResponse<MaskDTO> localVarResponse = MasksUpdateMaskWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MaskDTO</returns>
        public ApiResponse< MaskDTO > MasksUpdateMaskWithHttpInfo (string id, MaskDTO body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasksApi->MasksUpdateMask");

            var localVarPath = "/api/Masks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksUpdateMask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskDTO)));
        }

        /// <summary>
        /// This call updates a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MaskDTO</returns>
        public async System.Threading.Tasks.Task<MaskDTO> MasksUpdateMaskAsync (string id, MaskDTO body = null)
        {
             ApiResponse<MaskDTO> localVarResponse = await MasksUpdateMaskAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a mask 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mask</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MaskDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaskDTO>> MasksUpdateMaskAsyncWithHttpInfo (string id, MaskDTO body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasksApi->MasksUpdateMask");

            var localVarPath = "/api/Masks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasksUpdateMask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaskDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaskDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaskDTO)));
        }

    }
}
