/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBarcodeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call insert new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode insert request</param>
        /// <returns>BarcodeDTO</returns>
        BarcodeDTO BarcodeBarcodeInsert (BarcodeInsertRequestDTO body);

        /// <summary>
        /// This call insert new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode insert request</param>
        /// <returns>ApiResponse of BarcodeDTO</returns>
        ApiResponse<BarcodeDTO> BarcodeBarcodeInsertWithHttpInfo (BarcodeInsertRequestDTO body);
        /// <summary>
        /// This call insert new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="barcodeType"></param>
        /// <param name="barcode"></param>
        /// <returns>BarcodeDTO</returns>
        BarcodeDTO BarcodeBarcodeInsert (int? docnumber, int? barcodeType, string barcode);

        /// <summary>
        /// This call insert new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="barcodeType"></param>
        /// <param name="barcode"></param>
        /// <returns>ApiResponse of BarcodeDTO</returns>
        ApiResponse<BarcodeDTO> BarcodeBarcodeInsertWithHttpInfo (int? docnumber, int? barcodeType, string barcode);
        /// <summary>
        /// This call returns the barcode grapich user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>BarcodeGraphicTemplateDto</returns>
        BarcodeGraphicTemplateDto BarcodeGetBarcodeGraphicUserTemplate (int? dmTipidocumentoId);

        /// <summary>
        /// This call returns the barcode grapich user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>ApiResponse of BarcodeGraphicTemplateDto</returns>
        ApiResponse<BarcodeGraphicTemplateDto> BarcodeGetBarcodeGraphicUserTemplateWithHttpInfo (int? dmTipidocumentoId);
        /// <summary>
        /// This call returns the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BarcodeUserSettingsDto</returns>
        BarcodeUserSettingsDto BarcodeGetBarcodeUserSettings ();

        /// <summary>
        /// This call returns the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BarcodeUserSettingsDto</returns>
        ApiResponse<BarcodeUserSettingsDto> BarcodeGetBarcodeUserSettingsWithHttpInfo ();
        /// <summary>
        /// This call returns the barcode user template by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>BarcodeTemplateDto</returns>
        BarcodeTemplateDto BarcodeGetBarcodeUserTemplate (int? dmTipidocumentoId);

        /// <summary>
        /// This call returns the barcode user template by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>ApiResponse of BarcodeTemplateDto</returns>
        ApiResponse<BarcodeTemplateDto> BarcodeGetBarcodeUserTemplateWithHttpInfo (int? dmTipidocumentoId);
        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>DefaultBarcodeTemplateDto</returns>
        DefaultBarcodeTemplateDto BarcodeGetDefaultTemplate (string printerFamilyValue);

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>ApiResponse of DefaultBarcodeTemplateDto</returns>
        ApiResponse<DefaultBarcodeTemplateDto> BarcodeGetDefaultTemplateWithHttpInfo (string printerFamilyValue);
        /// <summary>
        /// This call executes the print of barcode in format Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        BarcodePrintResultDto BarcodePrintArxBarcode (int? docnumber);

        /// <summary>
        /// This call executes the print of barcode in format Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        ApiResponse<BarcodePrintResultDto> BarcodePrintArxBarcodeWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call executes the print of barcode for attachment of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        BarcodePrintResultDto BarcodePrintAttachmentByDocnumber (int? docnumber);

        /// <summary>
        /// This call executes the print of barcode for attachment of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        ApiResponse<BarcodePrintResultDto> BarcodePrintAttachmentByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call executes the print of barcode associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        BarcodePrintResultDto BarcodePrintByDocnumber (int? docnumber);

        /// <summary>
        /// This call executes the print of barcode associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        ApiResponse<BarcodePrintResultDto> BarcodePrintByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call executes the print of barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        BarcodePrintResultDto BarcodePrintByIdBarcode (int? idBarcode);

        /// <summary>
        /// This call executes the print of barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        ApiResponse<BarcodePrintResultDto> BarcodePrintByIdBarcodeWithHttpInfo (int? idBarcode);
        /// <summary>
        /// This call executes the print of barcode for revision of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        BarcodePrintResultDto BarcodePrintRevisionByDocnumber (int? docnumber);

        /// <summary>
        /// This call executes the print of barcode for revision of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        ApiResponse<BarcodePrintResultDto> BarcodePrintRevisionByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Graphic Template to save</param>
        /// <returns></returns>
        void BarcodeSetBarcodeGraphicUserTemplate (BarcodeGraphicTemplateSaveDto body);

        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Graphic Template to save</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeSetBarcodeGraphicUserTemplateWithHttpInfo (BarcodeGraphicTemplateSaveDto body);
        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId"></param>
        /// <param name="graphicTemplateB64"></param>
        /// <returns></returns>
        void BarcodeSetBarcodeGraphicUserTemplate (int? dmTipidocumentoId, string graphicTemplateB64);

        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId"></param>
        /// <param name="graphicTemplateB64"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeSetBarcodeGraphicUserTemplateWithHttpInfo (int? dmTipidocumentoId, string graphicTemplateB64);
        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode settings for user</param>
        /// <returns></returns>
        void BarcodeSetBarcodeUserSettings (BarcodeUserSettingsDto body);

        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode settings for user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeSetBarcodeUserSettingsWithHttpInfo (BarcodeUserSettingsDto body);
        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateUserSettings"></param>
        /// <param name="barcodePrintMode"></param>
        /// <param name="barcodePrintSettings"></param>
        /// <param name="barcodeAttachmentPrintOffsetX"></param>
        /// <param name="barcodeAttachmentPrintOffsetY"></param>
        /// <param name="printerMode"></param>
        /// <returns></returns>
        void BarcodeSetBarcodeUserSettings (bool? activateUserSettings, int? barcodePrintMode, string barcodePrintSettings, int? barcodeAttachmentPrintOffsetX, int? barcodeAttachmentPrintOffsetY, int? printerMode);

        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateUserSettings"></param>
        /// <param name="barcodePrintMode"></param>
        /// <param name="barcodePrintSettings"></param>
        /// <param name="barcodeAttachmentPrintOffsetX"></param>
        /// <param name="barcodeAttachmentPrintOffsetY"></param>
        /// <param name="printerMode"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeSetBarcodeUserSettingsWithHttpInfo (bool? activateUserSettings, int? barcodePrintMode, string barcodePrintSettings, int? barcodeAttachmentPrintOffsetX, int? barcodeAttachmentPrintOffsetY, int? printerMode);
        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Template</param>
        /// <returns></returns>
        void BarcodeSetBarcodeUserTemplate (BarcodeTemplateDto body);

        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Template</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeSetBarcodeUserTemplateWithHttpInfo (BarcodeTemplateDto body);
        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeTemplate"></param>
        /// <param name="printerFamily"></param>
        /// <param name="dmTipidocumentoId"></param>
        /// <returns></returns>
        void BarcodeSetBarcodeUserTemplate (string barcodeTemplate, int? printerFamily, int? dmTipidocumentoId);

        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeTemplate"></param>
        /// <param name="printerFamily"></param>
        /// <param name="dmTipidocumentoId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeSetBarcodeUserTemplateWithHttpInfo (string barcodeTemplate, int? printerFamily, int? dmTipidocumentoId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call insert new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode insert request</param>
        /// <returns>Task of BarcodeDTO</returns>
        System.Threading.Tasks.Task<BarcodeDTO> BarcodeBarcodeInsertAsync (BarcodeInsertRequestDTO body);

        /// <summary>
        /// This call insert new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode insert request</param>
        /// <returns>Task of ApiResponse (BarcodeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeDTO>> BarcodeBarcodeInsertAsyncWithHttpInfo (BarcodeInsertRequestDTO body);
        /// <summary>
        /// This call insert new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="barcodeType"></param>
        /// <param name="barcode"></param>
        /// <returns>Task of BarcodeDTO</returns>
        System.Threading.Tasks.Task<BarcodeDTO> BarcodeBarcodeInsertAsync (int? docnumber, int? barcodeType, string barcode);

        /// <summary>
        /// This call insert new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="barcodeType"></param>
        /// <param name="barcode"></param>
        /// <returns>Task of ApiResponse (BarcodeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeDTO>> BarcodeBarcodeInsertAsyncWithHttpInfo (int? docnumber, int? barcodeType, string barcode);
        /// <summary>
        /// This call returns the barcode grapich user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of BarcodeGraphicTemplateDto</returns>
        System.Threading.Tasks.Task<BarcodeGraphicTemplateDto> BarcodeGetBarcodeGraphicUserTemplateAsync (int? dmTipidocumentoId);

        /// <summary>
        /// This call returns the barcode grapich user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of ApiResponse (BarcodeGraphicTemplateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeGraphicTemplateDto>> BarcodeGetBarcodeGraphicUserTemplateAsyncWithHttpInfo (int? dmTipidocumentoId);
        /// <summary>
        /// This call returns the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BarcodeUserSettingsDto</returns>
        System.Threading.Tasks.Task<BarcodeUserSettingsDto> BarcodeGetBarcodeUserSettingsAsync ();

        /// <summary>
        /// This call returns the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BarcodeUserSettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeUserSettingsDto>> BarcodeGetBarcodeUserSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the barcode user template by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of BarcodeTemplateDto</returns>
        System.Threading.Tasks.Task<BarcodeTemplateDto> BarcodeGetBarcodeUserTemplateAsync (int? dmTipidocumentoId);

        /// <summary>
        /// This call returns the barcode user template by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of ApiResponse (BarcodeTemplateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeTemplateDto>> BarcodeGetBarcodeUserTemplateAsyncWithHttpInfo (int? dmTipidocumentoId);
        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>Task of DefaultBarcodeTemplateDto</returns>
        System.Threading.Tasks.Task<DefaultBarcodeTemplateDto> BarcodeGetDefaultTemplateAsync (string printerFamilyValue);

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>Task of ApiResponse (DefaultBarcodeTemplateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DefaultBarcodeTemplateDto>> BarcodeGetDefaultTemplateAsyncWithHttpInfo (string printerFamilyValue);
        /// <summary>
        /// This call executes the print of barcode in format Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintArxBarcodeAsync (int? docnumber);

        /// <summary>
        /// This call executes the print of barcode in format Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintArxBarcodeAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call executes the print of barcode for attachment of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintAttachmentByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This call executes the print of barcode for attachment of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintAttachmentByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call executes the print of barcode associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This call executes the print of barcode associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call executes the print of barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintByIdBarcodeAsync (int? idBarcode);

        /// <summary>
        /// This call executes the print of barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintByIdBarcodeAsyncWithHttpInfo (int? idBarcode);
        /// <summary>
        /// This call executes the print of barcode for revision of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintRevisionByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This call executes the print of barcode for revision of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintRevisionByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Graphic Template to save</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeSetBarcodeGraphicUserTemplateAsync (BarcodeGraphicTemplateSaveDto body);

        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Graphic Template to save</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeGraphicUserTemplateAsyncWithHttpInfo (BarcodeGraphicTemplateSaveDto body);
        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId"></param>
        /// <param name="graphicTemplateB64"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeSetBarcodeGraphicUserTemplateAsync (int? dmTipidocumentoId, string graphicTemplateB64);

        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId"></param>
        /// <param name="graphicTemplateB64"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeGraphicUserTemplateAsyncWithHttpInfo (int? dmTipidocumentoId, string graphicTemplateB64);
        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode settings for user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeSetBarcodeUserSettingsAsync (BarcodeUserSettingsDto body);

        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode settings for user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserSettingsAsyncWithHttpInfo (BarcodeUserSettingsDto body);
        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateUserSettings"></param>
        /// <param name="barcodePrintMode"></param>
        /// <param name="barcodePrintSettings"></param>
        /// <param name="barcodeAttachmentPrintOffsetX"></param>
        /// <param name="barcodeAttachmentPrintOffsetY"></param>
        /// <param name="printerMode"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeSetBarcodeUserSettingsAsync (bool? activateUserSettings, int? barcodePrintMode, string barcodePrintSettings, int? barcodeAttachmentPrintOffsetX, int? barcodeAttachmentPrintOffsetY, int? printerMode);

        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateUserSettings"></param>
        /// <param name="barcodePrintMode"></param>
        /// <param name="barcodePrintSettings"></param>
        /// <param name="barcodeAttachmentPrintOffsetX"></param>
        /// <param name="barcodeAttachmentPrintOffsetY"></param>
        /// <param name="printerMode"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserSettingsAsyncWithHttpInfo (bool? activateUserSettings, int? barcodePrintMode, string barcodePrintSettings, int? barcodeAttachmentPrintOffsetX, int? barcodeAttachmentPrintOffsetY, int? printerMode);
        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Template</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeSetBarcodeUserTemplateAsync (BarcodeTemplateDto body);

        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Template</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserTemplateAsyncWithHttpInfo (BarcodeTemplateDto body);
        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeTemplate"></param>
        /// <param name="printerFamily"></param>
        /// <param name="dmTipidocumentoId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeSetBarcodeUserTemplateAsync (string barcodeTemplate, int? printerFamily, int? dmTipidocumentoId);

        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeTemplate"></param>
        /// <param name="printerFamily"></param>
        /// <param name="dmTipidocumentoId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserTemplateAsyncWithHttpInfo (string barcodeTemplate, int? printerFamily, int? dmTipidocumentoId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BarcodeApi : IBarcodeApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BarcodeApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeApi"/> class
        /// </summary>
        /// <returns></returns>
        public BarcodeApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BarcodeApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call insert new barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode insert request</param>
        /// <returns>BarcodeDTO</returns>
        public BarcodeDTO BarcodeBarcodeInsert (BarcodeInsertRequestDTO body)
        {
             ApiResponse<BarcodeDTO> localVarResponse = BarcodeBarcodeInsertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call insert new barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode insert request</param>
        /// <returns>ApiResponse of BarcodeDTO</returns>
        public ApiResponse< BarcodeDTO > BarcodeBarcodeInsertWithHttpInfo (BarcodeInsertRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BarcodeApi->BarcodeBarcodeInsert");

            var localVarPath = "/api/Barcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeBarcodeInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeDTO)));
        }

        /// <summary>
        /// This call insert new barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode insert request</param>
        /// <returns>Task of BarcodeDTO</returns>
        public async System.Threading.Tasks.Task<BarcodeDTO> BarcodeBarcodeInsertAsync (BarcodeInsertRequestDTO body)
        {
             ApiResponse<BarcodeDTO> localVarResponse = await BarcodeBarcodeInsertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call insert new barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode insert request</param>
        /// <returns>Task of ApiResponse (BarcodeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeDTO>> BarcodeBarcodeInsertAsyncWithHttpInfo (BarcodeInsertRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BarcodeApi->BarcodeBarcodeInsert");

            var localVarPath = "/api/Barcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeBarcodeInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeDTO)));
        }

        /// <summary>
        /// This call insert new barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="barcodeType"></param>
        /// <param name="barcode"></param>
        /// <returns>BarcodeDTO</returns>
        public BarcodeDTO BarcodeBarcodeInsert (int? docnumber, int? barcodeType, string barcode)
        {
             ApiResponse<BarcodeDTO> localVarResponse = BarcodeBarcodeInsertWithHttpInfo(docnumber, barcodeType, barcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call insert new barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="barcodeType"></param>
        /// <param name="barcode"></param>
        /// <returns>ApiResponse of BarcodeDTO</returns>
        public ApiResponse< BarcodeDTO > BarcodeBarcodeInsertWithHttpInfo (int? docnumber, int? barcodeType, string barcode)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodeBarcodeInsert");
            // verify the required parameter 'barcodeType' is set
            if (barcodeType == null)
                throw new ApiException(400, "Missing required parameter 'barcodeType' when calling BarcodeApi->BarcodeBarcodeInsert");
            // verify the required parameter 'barcode' is set
            if (barcode == null)
                throw new ApiException(400, "Missing required parameter 'barcode' when calling BarcodeApi->BarcodeBarcodeInsert");

            var localVarPath = "/api/Barcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarFormParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // form parameter
            if (barcodeType != null) localVarFormParams.Add("barcodeType", this.Configuration.ApiClient.ParameterToString(barcodeType)); // form parameter
            if (barcode != null) localVarFormParams.Add("barcode", this.Configuration.ApiClient.ParameterToString(barcode)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeBarcodeInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeDTO)));
        }

        /// <summary>
        /// This call insert new barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="barcodeType"></param>
        /// <param name="barcode"></param>
        /// <returns>Task of BarcodeDTO</returns>
        public async System.Threading.Tasks.Task<BarcodeDTO> BarcodeBarcodeInsertAsync (int? docnumber, int? barcodeType, string barcode)
        {
             ApiResponse<BarcodeDTO> localVarResponse = await BarcodeBarcodeInsertAsyncWithHttpInfo(docnumber, barcodeType, barcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call insert new barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="barcodeType"></param>
        /// <param name="barcode"></param>
        /// <returns>Task of ApiResponse (BarcodeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeDTO>> BarcodeBarcodeInsertAsyncWithHttpInfo (int? docnumber, int? barcodeType, string barcode)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodeBarcodeInsert");
            // verify the required parameter 'barcodeType' is set
            if (barcodeType == null)
                throw new ApiException(400, "Missing required parameter 'barcodeType' when calling BarcodeApi->BarcodeBarcodeInsert");
            // verify the required parameter 'barcode' is set
            if (barcode == null)
                throw new ApiException(400, "Missing required parameter 'barcode' when calling BarcodeApi->BarcodeBarcodeInsert");

            var localVarPath = "/api/Barcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarFormParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // form parameter
            if (barcodeType != null) localVarFormParams.Add("barcodeType", this.Configuration.ApiClient.ParameterToString(barcodeType)); // form parameter
            if (barcode != null) localVarFormParams.Add("barcode", this.Configuration.ApiClient.ParameterToString(barcode)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeBarcodeInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeDTO)));
        }

        /// <summary>
        /// This call returns the barcode grapich user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>BarcodeGraphicTemplateDto</returns>
        public BarcodeGraphicTemplateDto BarcodeGetBarcodeGraphicUserTemplate (int? dmTipidocumentoId)
        {
             ApiResponse<BarcodeGraphicTemplateDto> localVarResponse = BarcodeGetBarcodeGraphicUserTemplateWithHttpInfo(dmTipidocumentoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the barcode grapich user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>ApiResponse of BarcodeGraphicTemplateDto</returns>
        public ApiResponse< BarcodeGraphicTemplateDto > BarcodeGetBarcodeGraphicUserTemplateWithHttpInfo (int? dmTipidocumentoId)
        {
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeGetBarcodeGraphicUserTemplate");

            var localVarPath = "/api/Barcode/userGraphicTemplate/documentType/{dmTipidocumentoId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmTipidocumentoId != null) localVarPathParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeGraphicUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeGraphicTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodeGraphicTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeGraphicTemplateDto)));
        }

        /// <summary>
        /// This call returns the barcode grapich user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of BarcodeGraphicTemplateDto</returns>
        public async System.Threading.Tasks.Task<BarcodeGraphicTemplateDto> BarcodeGetBarcodeGraphicUserTemplateAsync (int? dmTipidocumentoId)
        {
             ApiResponse<BarcodeGraphicTemplateDto> localVarResponse = await BarcodeGetBarcodeGraphicUserTemplateAsyncWithHttpInfo(dmTipidocumentoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the barcode grapich user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of ApiResponse (BarcodeGraphicTemplateDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeGraphicTemplateDto>> BarcodeGetBarcodeGraphicUserTemplateAsyncWithHttpInfo (int? dmTipidocumentoId)
        {
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeGetBarcodeGraphicUserTemplate");

            var localVarPath = "/api/Barcode/userGraphicTemplate/documentType/{dmTipidocumentoId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmTipidocumentoId != null) localVarPathParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeGraphicUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeGraphicTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodeGraphicTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeGraphicTemplateDto)));
        }

        /// <summary>
        /// This call returns the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BarcodeUserSettingsDto</returns>
        public BarcodeUserSettingsDto BarcodeGetBarcodeUserSettings ()
        {
             ApiResponse<BarcodeUserSettingsDto> localVarResponse = BarcodeGetBarcodeUserSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BarcodeUserSettingsDto</returns>
        public ApiResponse< BarcodeUserSettingsDto > BarcodeGetBarcodeUserSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/Barcode/userSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeUserSettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodeUserSettingsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeUserSettingsDto)));
        }

        /// <summary>
        /// This call returns the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BarcodeUserSettingsDto</returns>
        public async System.Threading.Tasks.Task<BarcodeUserSettingsDto> BarcodeGetBarcodeUserSettingsAsync ()
        {
             ApiResponse<BarcodeUserSettingsDto> localVarResponse = await BarcodeGetBarcodeUserSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BarcodeUserSettingsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeUserSettingsDto>> BarcodeGetBarcodeUserSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Barcode/userSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeUserSettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodeUserSettingsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeUserSettingsDto)));
        }

        /// <summary>
        /// This call returns the barcode user template by document type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>BarcodeTemplateDto</returns>
        public BarcodeTemplateDto BarcodeGetBarcodeUserTemplate (int? dmTipidocumentoId)
        {
             ApiResponse<BarcodeTemplateDto> localVarResponse = BarcodeGetBarcodeUserTemplateWithHttpInfo(dmTipidocumentoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the barcode user template by document type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>ApiResponse of BarcodeTemplateDto</returns>
        public ApiResponse< BarcodeTemplateDto > BarcodeGetBarcodeUserTemplateWithHttpInfo (int? dmTipidocumentoId)
        {
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeGetBarcodeUserTemplate");

            var localVarPath = "/api/Barcode/userTemplate/documentType/{dmTipidocumentoId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmTipidocumentoId != null) localVarPathParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodeTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeTemplateDto)));
        }

        /// <summary>
        /// This call returns the barcode user template by document type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of BarcodeTemplateDto</returns>
        public async System.Threading.Tasks.Task<BarcodeTemplateDto> BarcodeGetBarcodeUserTemplateAsync (int? dmTipidocumentoId)
        {
             ApiResponse<BarcodeTemplateDto> localVarResponse = await BarcodeGetBarcodeUserTemplateAsyncWithHttpInfo(dmTipidocumentoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the barcode user template by document type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of ApiResponse (BarcodeTemplateDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeTemplateDto>> BarcodeGetBarcodeUserTemplateAsyncWithHttpInfo (int? dmTipidocumentoId)
        {
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeGetBarcodeUserTemplate");

            var localVarPath = "/api/Barcode/userTemplate/documentType/{dmTipidocumentoId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmTipidocumentoId != null) localVarPathParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodeTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeTemplateDto)));
        }

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>DefaultBarcodeTemplateDto</returns>
        public DefaultBarcodeTemplateDto BarcodeGetDefaultTemplate (string printerFamilyValue)
        {
             ApiResponse<DefaultBarcodeTemplateDto> localVarResponse = BarcodeGetDefaultTemplateWithHttpInfo(printerFamilyValue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>ApiResponse of DefaultBarcodeTemplateDto</returns>
        public ApiResponse< DefaultBarcodeTemplateDto > BarcodeGetDefaultTemplateWithHttpInfo (string printerFamilyValue)
        {
            // verify the required parameter 'printerFamilyValue' is set
            if (printerFamilyValue == null)
                throw new ApiException(400, "Missing required parameter 'printerFamilyValue' when calling BarcodeApi->BarcodeGetDefaultTemplate");

            var localVarPath = "/api/Barcode/defaultTemplate/printerFamily/{printerFamilyValue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printerFamilyValue != null) localVarPathParams.Add("printerFamilyValue", this.Configuration.ApiClient.ParameterToString(printerFamilyValue)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetDefaultTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DefaultBarcodeTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DefaultBarcodeTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DefaultBarcodeTemplateDto)));
        }

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>Task of DefaultBarcodeTemplateDto</returns>
        public async System.Threading.Tasks.Task<DefaultBarcodeTemplateDto> BarcodeGetDefaultTemplateAsync (string printerFamilyValue)
        {
             ApiResponse<DefaultBarcodeTemplateDto> localVarResponse = await BarcodeGetDefaultTemplateAsyncWithHttpInfo(printerFamilyValue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>Task of ApiResponse (DefaultBarcodeTemplateDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DefaultBarcodeTemplateDto>> BarcodeGetDefaultTemplateAsyncWithHttpInfo (string printerFamilyValue)
        {
            // verify the required parameter 'printerFamilyValue' is set
            if (printerFamilyValue == null)
                throw new ApiException(400, "Missing required parameter 'printerFamilyValue' when calling BarcodeApi->BarcodeGetDefaultTemplate");

            var localVarPath = "/api/Barcode/defaultTemplate/printerFamily/{printerFamilyValue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printerFamilyValue != null) localVarPathParams.Add("printerFamilyValue", this.Configuration.ApiClient.ParameterToString(printerFamilyValue)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetDefaultTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DefaultBarcodeTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DefaultBarcodeTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DefaultBarcodeTemplateDto)));
        }

        /// <summary>
        /// This call executes the print of barcode in format Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        public BarcodePrintResultDto BarcodePrintArxBarcode (int? docnumber)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = BarcodePrintArxBarcodeWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes the print of barcode in format Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        public ApiResponse< BarcodePrintResultDto > BarcodePrintArxBarcodeWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintArxBarcode");

            var localVarPath = "/api/Barcode/printArxBarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "docnumber", docnumber)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintArxBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode in format Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        public async System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintArxBarcodeAsync (int? docnumber)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = await BarcodePrintArxBarcodeAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes the print of barcode in format Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintArxBarcodeAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintArxBarcode");

            var localVarPath = "/api/Barcode/printArxBarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "docnumber", docnumber)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintArxBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode for attachment of document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        public BarcodePrintResultDto BarcodePrintAttachmentByDocnumber (int? docnumber)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = BarcodePrintAttachmentByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes the print of barcode for attachment of document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        public ApiResponse< BarcodePrintResultDto > BarcodePrintAttachmentByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintAttachmentByDocnumber");

            var localVarPath = "/api/Barcode/printAttachment/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintAttachmentByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode for attachment of document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        public async System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintAttachmentByDocnumberAsync (int? docnumber)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = await BarcodePrintAttachmentByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes the print of barcode for attachment of document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintAttachmentByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintAttachmentByDocnumber");

            var localVarPath = "/api/Barcode/printAttachment/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintAttachmentByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode associated with a document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        public BarcodePrintResultDto BarcodePrintByDocnumber (int? docnumber)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = BarcodePrintByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes the print of barcode associated with a document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        public ApiResponse< BarcodePrintResultDto > BarcodePrintByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintByDocnumber");

            var localVarPath = "/api/Barcode/print/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode associated with a document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        public async System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintByDocnumberAsync (int? docnumber)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = await BarcodePrintByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes the print of barcode associated with a document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintByDocnumber");

            var localVarPath = "/api/Barcode/print/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        public BarcodePrintResultDto BarcodePrintByIdBarcode (int? idBarcode)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = BarcodePrintByIdBarcodeWithHttpInfo(idBarcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes the print of barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        public ApiResponse< BarcodePrintResultDto > BarcodePrintByIdBarcodeWithHttpInfo (int? idBarcode)
        {
            // verify the required parameter 'idBarcode' is set
            if (idBarcode == null)
                throw new ApiException(400, "Missing required parameter 'idBarcode' when calling BarcodeApi->BarcodePrintByIdBarcode");

            var localVarPath = "/api/Barcode/print/{idBarcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idBarcode != null) localVarPathParams.Add("idBarcode", this.Configuration.ApiClient.ParameterToString(idBarcode)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintByIdBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        public async System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintByIdBarcodeAsync (int? idBarcode)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = await BarcodePrintByIdBarcodeAsyncWithHttpInfo(idBarcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes the print of barcode 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintByIdBarcodeAsyncWithHttpInfo (int? idBarcode)
        {
            // verify the required parameter 'idBarcode' is set
            if (idBarcode == null)
                throw new ApiException(400, "Missing required parameter 'idBarcode' when calling BarcodeApi->BarcodePrintByIdBarcode");

            var localVarPath = "/api/Barcode/print/{idBarcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idBarcode != null) localVarPathParams.Add("idBarcode", this.Configuration.ApiClient.ParameterToString(idBarcode)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintByIdBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode for revision of document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        public BarcodePrintResultDto BarcodePrintRevisionByDocnumber (int? docnumber)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = BarcodePrintRevisionByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes the print of barcode for revision of document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        public ApiResponse< BarcodePrintResultDto > BarcodePrintRevisionByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintRevisionByDocnumber");

            var localVarPath = "/api/Barcode/printRevision/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintRevisionByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode for revision of document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        public async System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintRevisionByDocnumberAsync (int? docnumber)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = await BarcodePrintRevisionByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes the print of barcode for revision of document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintRevisionByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintRevisionByDocnumber");

            var localVarPath = "/api/Barcode/printRevision/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintRevisionByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Graphic Template to save</param>
        /// <returns></returns>
        public void BarcodeSetBarcodeGraphicUserTemplate (BarcodeGraphicTemplateSaveDto body)
        {
             BarcodeSetBarcodeGraphicUserTemplateWithHttpInfo(body);
        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Graphic Template to save</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeSetBarcodeGraphicUserTemplateWithHttpInfo (BarcodeGraphicTemplateSaveDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BarcodeApi->BarcodeSetBarcodeGraphicUserTemplate");

            var localVarPath = "/api/Barcode/setUserGraphicTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeGraphicUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Graphic Template to save</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeSetBarcodeGraphicUserTemplateAsync (BarcodeGraphicTemplateSaveDto body)
        {
             await BarcodeSetBarcodeGraphicUserTemplateAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Graphic Template to save</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeGraphicUserTemplateAsyncWithHttpInfo (BarcodeGraphicTemplateSaveDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BarcodeApi->BarcodeSetBarcodeGraphicUserTemplate");

            var localVarPath = "/api/Barcode/setUserGraphicTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeGraphicUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId"></param>
        /// <param name="graphicTemplateB64"></param>
        /// <returns></returns>
        public void BarcodeSetBarcodeGraphicUserTemplate (int? dmTipidocumentoId, string graphicTemplateB64)
        {
             BarcodeSetBarcodeGraphicUserTemplateWithHttpInfo(dmTipidocumentoId, graphicTemplateB64);
        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId"></param>
        /// <param name="graphicTemplateB64"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeSetBarcodeGraphicUserTemplateWithHttpInfo (int? dmTipidocumentoId, string graphicTemplateB64)
        {
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeSetBarcodeGraphicUserTemplate");
            // verify the required parameter 'graphicTemplateB64' is set
            if (graphicTemplateB64 == null)
                throw new ApiException(400, "Missing required parameter 'graphicTemplateB64' when calling BarcodeApi->BarcodeSetBarcodeGraphicUserTemplate");

            var localVarPath = "/api/Barcode/setUserGraphicTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmTipidocumentoId != null) localVarFormParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // form parameter
            if (graphicTemplateB64 != null) localVarFormParams.Add("graphicTemplateB64", this.Configuration.ApiClient.ParameterToString(graphicTemplateB64)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeGraphicUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId"></param>
        /// <param name="graphicTemplateB64"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeSetBarcodeGraphicUserTemplateAsync (int? dmTipidocumentoId, string graphicTemplateB64)
        {
             await BarcodeSetBarcodeGraphicUserTemplateAsyncWithHttpInfo(dmTipidocumentoId, graphicTemplateB64);

        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId"></param>
        /// <param name="graphicTemplateB64"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeGraphicUserTemplateAsyncWithHttpInfo (int? dmTipidocumentoId, string graphicTemplateB64)
        {
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeSetBarcodeGraphicUserTemplate");
            // verify the required parameter 'graphicTemplateB64' is set
            if (graphicTemplateB64 == null)
                throw new ApiException(400, "Missing required parameter 'graphicTemplateB64' when calling BarcodeApi->BarcodeSetBarcodeGraphicUserTemplate");

            var localVarPath = "/api/Barcode/setUserGraphicTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmTipidocumentoId != null) localVarFormParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // form parameter
            if (graphicTemplateB64 != null) localVarFormParams.Add("graphicTemplateB64", this.Configuration.ApiClient.ParameterToString(graphicTemplateB64)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeGraphicUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode settings for user</param>
        /// <returns></returns>
        public void BarcodeSetBarcodeUserSettings (BarcodeUserSettingsDto body)
        {
             BarcodeSetBarcodeUserSettingsWithHttpInfo(body);
        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode settings for user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeSetBarcodeUserSettingsWithHttpInfo (BarcodeUserSettingsDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");

            var localVarPath = "/api/Barcode/setUserSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode settings for user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeSetBarcodeUserSettingsAsync (BarcodeUserSettingsDto body)
        {
             await BarcodeSetBarcodeUserSettingsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode settings for user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserSettingsAsyncWithHttpInfo (BarcodeUserSettingsDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");

            var localVarPath = "/api/Barcode/setUserSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateUserSettings"></param>
        /// <param name="barcodePrintMode"></param>
        /// <param name="barcodePrintSettings"></param>
        /// <param name="barcodeAttachmentPrintOffsetX"></param>
        /// <param name="barcodeAttachmentPrintOffsetY"></param>
        /// <param name="printerMode"></param>
        /// <returns></returns>
        public void BarcodeSetBarcodeUserSettings (bool? activateUserSettings, int? barcodePrintMode, string barcodePrintSettings, int? barcodeAttachmentPrintOffsetX, int? barcodeAttachmentPrintOffsetY, int? printerMode)
        {
             BarcodeSetBarcodeUserSettingsWithHttpInfo(activateUserSettings, barcodePrintMode, barcodePrintSettings, barcodeAttachmentPrintOffsetX, barcodeAttachmentPrintOffsetY, printerMode);
        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateUserSettings"></param>
        /// <param name="barcodePrintMode"></param>
        /// <param name="barcodePrintSettings"></param>
        /// <param name="barcodeAttachmentPrintOffsetX"></param>
        /// <param name="barcodeAttachmentPrintOffsetY"></param>
        /// <param name="printerMode"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeSetBarcodeUserSettingsWithHttpInfo (bool? activateUserSettings, int? barcodePrintMode, string barcodePrintSettings, int? barcodeAttachmentPrintOffsetX, int? barcodeAttachmentPrintOffsetY, int? printerMode)
        {
            // verify the required parameter 'activateUserSettings' is set
            if (activateUserSettings == null)
                throw new ApiException(400, "Missing required parameter 'activateUserSettings' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");
            // verify the required parameter 'barcodePrintMode' is set
            if (barcodePrintMode == null)
                throw new ApiException(400, "Missing required parameter 'barcodePrintMode' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");
            // verify the required parameter 'barcodePrintSettings' is set
            if (barcodePrintSettings == null)
                throw new ApiException(400, "Missing required parameter 'barcodePrintSettings' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");
            // verify the required parameter 'barcodeAttachmentPrintOffsetX' is set
            if (barcodeAttachmentPrintOffsetX == null)
                throw new ApiException(400, "Missing required parameter 'barcodeAttachmentPrintOffsetX' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");
            // verify the required parameter 'barcodeAttachmentPrintOffsetY' is set
            if (barcodeAttachmentPrintOffsetY == null)
                throw new ApiException(400, "Missing required parameter 'barcodeAttachmentPrintOffsetY' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");
            // verify the required parameter 'printerMode' is set
            if (printerMode == null)
                throw new ApiException(400, "Missing required parameter 'printerMode' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");

            var localVarPath = "/api/Barcode/setUserSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activateUserSettings != null) localVarFormParams.Add("activateUserSettings", this.Configuration.ApiClient.ParameterToString(activateUserSettings)); // form parameter
            if (barcodePrintMode != null) localVarFormParams.Add("barcodePrintMode", this.Configuration.ApiClient.ParameterToString(barcodePrintMode)); // form parameter
            if (barcodePrintSettings != null) localVarFormParams.Add("barcodePrintSettings", this.Configuration.ApiClient.ParameterToString(barcodePrintSettings)); // form parameter
            if (barcodeAttachmentPrintOffsetX != null) localVarFormParams.Add("barcodeAttachmentPrintOffsetX", this.Configuration.ApiClient.ParameterToString(barcodeAttachmentPrintOffsetX)); // form parameter
            if (barcodeAttachmentPrintOffsetY != null) localVarFormParams.Add("barcodeAttachmentPrintOffsetY", this.Configuration.ApiClient.ParameterToString(barcodeAttachmentPrintOffsetY)); // form parameter
            if (printerMode != null) localVarFormParams.Add("printerMode", this.Configuration.ApiClient.ParameterToString(printerMode)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateUserSettings"></param>
        /// <param name="barcodePrintMode"></param>
        /// <param name="barcodePrintSettings"></param>
        /// <param name="barcodeAttachmentPrintOffsetX"></param>
        /// <param name="barcodeAttachmentPrintOffsetY"></param>
        /// <param name="printerMode"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeSetBarcodeUserSettingsAsync (bool? activateUserSettings, int? barcodePrintMode, string barcodePrintSettings, int? barcodeAttachmentPrintOffsetX, int? barcodeAttachmentPrintOffsetY, int? printerMode)
        {
             await BarcodeSetBarcodeUserSettingsAsyncWithHttpInfo(activateUserSettings, barcodePrintMode, barcodePrintSettings, barcodeAttachmentPrintOffsetX, barcodeAttachmentPrintOffsetY, printerMode);

        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateUserSettings"></param>
        /// <param name="barcodePrintMode"></param>
        /// <param name="barcodePrintSettings"></param>
        /// <param name="barcodeAttachmentPrintOffsetX"></param>
        /// <param name="barcodeAttachmentPrintOffsetY"></param>
        /// <param name="printerMode"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserSettingsAsyncWithHttpInfo (bool? activateUserSettings, int? barcodePrintMode, string barcodePrintSettings, int? barcodeAttachmentPrintOffsetX, int? barcodeAttachmentPrintOffsetY, int? printerMode)
        {
            // verify the required parameter 'activateUserSettings' is set
            if (activateUserSettings == null)
                throw new ApiException(400, "Missing required parameter 'activateUserSettings' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");
            // verify the required parameter 'barcodePrintMode' is set
            if (barcodePrintMode == null)
                throw new ApiException(400, "Missing required parameter 'barcodePrintMode' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");
            // verify the required parameter 'barcodePrintSettings' is set
            if (barcodePrintSettings == null)
                throw new ApiException(400, "Missing required parameter 'barcodePrintSettings' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");
            // verify the required parameter 'barcodeAttachmentPrintOffsetX' is set
            if (barcodeAttachmentPrintOffsetX == null)
                throw new ApiException(400, "Missing required parameter 'barcodeAttachmentPrintOffsetX' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");
            // verify the required parameter 'barcodeAttachmentPrintOffsetY' is set
            if (barcodeAttachmentPrintOffsetY == null)
                throw new ApiException(400, "Missing required parameter 'barcodeAttachmentPrintOffsetY' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");
            // verify the required parameter 'printerMode' is set
            if (printerMode == null)
                throw new ApiException(400, "Missing required parameter 'printerMode' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");

            var localVarPath = "/api/Barcode/setUserSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activateUserSettings != null) localVarFormParams.Add("activateUserSettings", this.Configuration.ApiClient.ParameterToString(activateUserSettings)); // form parameter
            if (barcodePrintMode != null) localVarFormParams.Add("barcodePrintMode", this.Configuration.ApiClient.ParameterToString(barcodePrintMode)); // form parameter
            if (barcodePrintSettings != null) localVarFormParams.Add("barcodePrintSettings", this.Configuration.ApiClient.ParameterToString(barcodePrintSettings)); // form parameter
            if (barcodeAttachmentPrintOffsetX != null) localVarFormParams.Add("barcodeAttachmentPrintOffsetX", this.Configuration.ApiClient.ParameterToString(barcodeAttachmentPrintOffsetX)); // form parameter
            if (barcodeAttachmentPrintOffsetY != null) localVarFormParams.Add("barcodeAttachmentPrintOffsetY", this.Configuration.ApiClient.ParameterToString(barcodeAttachmentPrintOffsetY)); // form parameter
            if (printerMode != null) localVarFormParams.Add("printerMode", this.Configuration.ApiClient.ParameterToString(printerMode)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Template</param>
        /// <returns></returns>
        public void BarcodeSetBarcodeUserTemplate (BarcodeTemplateDto body)
        {
             BarcodeSetBarcodeUserTemplateWithHttpInfo(body);
        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Template</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeSetBarcodeUserTemplateWithHttpInfo (BarcodeTemplateDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BarcodeApi->BarcodeSetBarcodeUserTemplate");

            var localVarPath = "/api/Barcode/setUserTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Template</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeSetBarcodeUserTemplateAsync (BarcodeTemplateDto body)
        {
             await BarcodeSetBarcodeUserTemplateAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Barcode Template</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserTemplateAsyncWithHttpInfo (BarcodeTemplateDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BarcodeApi->BarcodeSetBarcodeUserTemplate");

            var localVarPath = "/api/Barcode/setUserTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeTemplate"></param>
        /// <param name="printerFamily"></param>
        /// <param name="dmTipidocumentoId"></param>
        /// <returns></returns>
        public void BarcodeSetBarcodeUserTemplate (string barcodeTemplate, int? printerFamily, int? dmTipidocumentoId)
        {
             BarcodeSetBarcodeUserTemplateWithHttpInfo(barcodeTemplate, printerFamily, dmTipidocumentoId);
        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeTemplate"></param>
        /// <param name="printerFamily"></param>
        /// <param name="dmTipidocumentoId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeSetBarcodeUserTemplateWithHttpInfo (string barcodeTemplate, int? printerFamily, int? dmTipidocumentoId)
        {
            // verify the required parameter 'barcodeTemplate' is set
            if (barcodeTemplate == null)
                throw new ApiException(400, "Missing required parameter 'barcodeTemplate' when calling BarcodeApi->BarcodeSetBarcodeUserTemplate");
            // verify the required parameter 'printerFamily' is set
            if (printerFamily == null)
                throw new ApiException(400, "Missing required parameter 'printerFamily' when calling BarcodeApi->BarcodeSetBarcodeUserTemplate");
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeSetBarcodeUserTemplate");

            var localVarPath = "/api/Barcode/setUserTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (barcodeTemplate != null) localVarFormParams.Add("barcodeTemplate", this.Configuration.ApiClient.ParameterToString(barcodeTemplate)); // form parameter
            if (printerFamily != null) localVarFormParams.Add("printerFamily", this.Configuration.ApiClient.ParameterToString(printerFamily)); // form parameter
            if (dmTipidocumentoId != null) localVarFormParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeTemplate"></param>
        /// <param name="printerFamily"></param>
        /// <param name="dmTipidocumentoId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeSetBarcodeUserTemplateAsync (string barcodeTemplate, int? printerFamily, int? dmTipidocumentoId)
        {
             await BarcodeSetBarcodeUserTemplateAsyncWithHttpInfo(barcodeTemplate, printerFamily, dmTipidocumentoId);

        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeTemplate"></param>
        /// <param name="printerFamily"></param>
        /// <param name="dmTipidocumentoId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserTemplateAsyncWithHttpInfo (string barcodeTemplate, int? printerFamily, int? dmTipidocumentoId)
        {
            // verify the required parameter 'barcodeTemplate' is set
            if (barcodeTemplate == null)
                throw new ApiException(400, "Missing required parameter 'barcodeTemplate' when calling BarcodeApi->BarcodeSetBarcodeUserTemplate");
            // verify the required parameter 'printerFamily' is set
            if (printerFamily == null)
                throw new ApiException(400, "Missing required parameter 'printerFamily' when calling BarcodeApi->BarcodeSetBarcodeUserTemplate");
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeSetBarcodeUserTemplate");

            var localVarPath = "/api/Barcode/setUserTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (barcodeTemplate != null) localVarFormParams.Add("barcodeTemplate", this.Configuration.ApiClient.ParameterToString(barcodeTemplate)); // form parameter
            if (printerFamily != null) localVarFormParams.Add("printerFamily", this.Configuration.ApiClient.ParameterToString(printerFamily)); // form parameter
            if (dmTipidocumentoId != null) localVarFormParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
