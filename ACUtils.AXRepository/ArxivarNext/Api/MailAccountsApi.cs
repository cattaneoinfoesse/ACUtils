/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMailAccountsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The id of the mail account to delete</param>
        /// <returns></returns>
        void MailAccountsDeleteMailAccount (int? mailAccountId);

        /// <summary>
        /// Deletes the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The id of the mail account to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MailAccountsDeleteMailAccountWithHttpInfo (int? mailAccountId);
        /// <summary>
        /// Gets the information of the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>MailAccountDTO</returns>
        MailAccountDTO MailAccountsGetMailAccountDetail (int? mailAccountId);

        /// <summary>
        /// Gets the information of the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        ApiResponse<MailAccountDTO> MailAccountsGetMailAccountDetailWithHttpInfo (int? mailAccountId);
        /// <summary>
        /// Gets the list of the mail accounts for the current authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MailAccountDTO&gt;</returns>
        List<MailAccountDTO> MailAccountsGetMailAccounts ();

        /// <summary>
        /// Gets the list of the mail accounts for the current authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MailAccountDTO&gt;</returns>
        ApiResponse<List<MailAccountDTO>> MailAccountsGetMailAccountsWithHttpInfo ();
        /// <summary>
        /// Creates a new mail account for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>MailAccountDTO</returns>
        MailAccountDTO MailAccountsInsertMailAccount (MailAccountDTO model = null);

        /// <summary>
        /// Creates a new mail account for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        ApiResponse<MailAccountDTO> MailAccountsInsertMailAccountWithHttpInfo (MailAccountDTO model = null);
        /// <summary>
        /// Sets the specified mail account as the default mail account for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns></returns>
        void MailAccountsSetDefaultMailAccount (int? mailAccountId);

        /// <summary>
        /// Sets the specified mail account as the default mail account for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MailAccountsSetDefaultMailAccountWithHttpInfo (int? mailAccountId);
        /// <summary>
        /// Updates the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <param name="model"> (optional)</param>
        /// <returns>MailAccountDTO</returns>
        MailAccountDTO MailAccountsUpdateMailAccount (int? mailAccountId, MailAccountDTO model = null);

        /// <summary>
        /// Updates the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        ApiResponse<MailAccountDTO> MailAccountsUpdateMailAccountWithHttpInfo (int? mailAccountId, MailAccountDTO model = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The id of the mail account to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MailAccountsDeleteMailAccountAsync (int? mailAccountId);

        /// <summary>
        /// Deletes the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The id of the mail account to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MailAccountsDeleteMailAccountAsyncWithHttpInfo (int? mailAccountId);
        /// <summary>
        /// Gets the information of the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>Task of MailAccountDTO</returns>
        System.Threading.Tasks.Task<MailAccountDTO> MailAccountsGetMailAccountDetailAsync (int? mailAccountId);

        /// <summary>
        /// Gets the information of the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> MailAccountsGetMailAccountDetailAsyncWithHttpInfo (int? mailAccountId);
        /// <summary>
        /// Gets the list of the mail accounts for the current authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MailAccountDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MailAccountDTO>> MailAccountsGetMailAccountsAsync ();

        /// <summary>
        /// Gets the list of the mail accounts for the current authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MailAccountDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MailAccountDTO>>> MailAccountsGetMailAccountsAsyncWithHttpInfo ();
        /// <summary>
        /// Creates a new mail account for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MailAccountDTO</returns>
        System.Threading.Tasks.Task<MailAccountDTO> MailAccountsInsertMailAccountAsync (MailAccountDTO model = null);

        /// <summary>
        /// Creates a new mail account for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> MailAccountsInsertMailAccountAsyncWithHttpInfo (MailAccountDTO model = null);
        /// <summary>
        /// Sets the specified mail account as the default mail account for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MailAccountsSetDefaultMailAccountAsync (int? mailAccountId);

        /// <summary>
        /// Sets the specified mail account as the default mail account for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MailAccountsSetDefaultMailAccountAsyncWithHttpInfo (int? mailAccountId);
        /// <summary>
        /// Updates the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MailAccountDTO</returns>
        System.Threading.Tasks.Task<MailAccountDTO> MailAccountsUpdateMailAccountAsync (int? mailAccountId, MailAccountDTO model = null);

        /// <summary>
        /// Updates the specified mail account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> MailAccountsUpdateMailAccountAsyncWithHttpInfo (int? mailAccountId, MailAccountDTO model = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MailAccountsApi : IMailAccountsApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MailAccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MailAccountsApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MailAccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MailAccountsApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The id of the mail account to delete</param>
        /// <returns></returns>
        public void MailAccountsDeleteMailAccount (int? mailAccountId)
        {
             MailAccountsDeleteMailAccountWithHttpInfo(mailAccountId);
        }

        /// <summary>
        /// Deletes the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The id of the mail account to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MailAccountsDeleteMailAccountWithHttpInfo (int? mailAccountId)
        {
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling MailAccountsApi->MailAccountsDeleteMailAccount");

            var localVarPath = "/api/MailAccounts/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsDeleteMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The id of the mail account to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MailAccountsDeleteMailAccountAsync (int? mailAccountId)
        {
             await MailAccountsDeleteMailAccountAsyncWithHttpInfo(mailAccountId);

        }

        /// <summary>
        /// Deletes the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The id of the mail account to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MailAccountsDeleteMailAccountAsyncWithHttpInfo (int? mailAccountId)
        {
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling MailAccountsApi->MailAccountsDeleteMailAccount");

            var localVarPath = "/api/MailAccounts/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsDeleteMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the information of the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>MailAccountDTO</returns>
        public MailAccountDTO MailAccountsGetMailAccountDetail (int? mailAccountId)
        {
             ApiResponse<MailAccountDTO> localVarResponse = MailAccountsGetMailAccountDetailWithHttpInfo(mailAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the information of the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        public ApiResponse< MailAccountDTO > MailAccountsGetMailAccountDetailWithHttpInfo (int? mailAccountId)
        {
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling MailAccountsApi->MailAccountsGetMailAccountDetail");

            var localVarPath = "/api/MailAccounts/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsGetMailAccountDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

        /// <summary>
        /// Gets the information of the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>Task of MailAccountDTO</returns>
        public async System.Threading.Tasks.Task<MailAccountDTO> MailAccountsGetMailAccountDetailAsync (int? mailAccountId)
        {
             ApiResponse<MailAccountDTO> localVarResponse = await MailAccountsGetMailAccountDetailAsyncWithHttpInfo(mailAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the information of the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> MailAccountsGetMailAccountDetailAsyncWithHttpInfo (int? mailAccountId)
        {
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling MailAccountsApi->MailAccountsGetMailAccountDetail");

            var localVarPath = "/api/MailAccounts/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsGetMailAccountDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

        /// <summary>
        /// Gets the list of the mail accounts for the current authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MailAccountDTO&gt;</returns>
        public List<MailAccountDTO> MailAccountsGetMailAccounts ()
        {
             ApiResponse<List<MailAccountDTO>> localVarResponse = MailAccountsGetMailAccountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of the mail accounts for the current authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MailAccountDTO&gt;</returns>
        public ApiResponse< List<MailAccountDTO> > MailAccountsGetMailAccountsWithHttpInfo ()
        {

            var localVarPath = "/api/MailAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsGetMailAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MailAccountDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MailAccountDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MailAccountDTO>)));
        }

        /// <summary>
        /// Gets the list of the mail accounts for the current authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MailAccountDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MailAccountDTO>> MailAccountsGetMailAccountsAsync ()
        {
             ApiResponse<List<MailAccountDTO>> localVarResponse = await MailAccountsGetMailAccountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of the mail accounts for the current authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MailAccountDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MailAccountDTO>>> MailAccountsGetMailAccountsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/MailAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsGetMailAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MailAccountDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MailAccountDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MailAccountDTO>)));
        }

        /// <summary>
        /// Creates a new mail account for the authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>MailAccountDTO</returns>
        public MailAccountDTO MailAccountsInsertMailAccount (MailAccountDTO model = null)
        {
             ApiResponse<MailAccountDTO> localVarResponse = MailAccountsInsertMailAccountWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new mail account for the authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        public ApiResponse< MailAccountDTO > MailAccountsInsertMailAccountWithHttpInfo (MailAccountDTO model = null)
        {

            var localVarPath = "/api/MailAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsInsertMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

        /// <summary>
        /// Creates a new mail account for the authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MailAccountDTO</returns>
        public async System.Threading.Tasks.Task<MailAccountDTO> MailAccountsInsertMailAccountAsync (MailAccountDTO model = null)
        {
             ApiResponse<MailAccountDTO> localVarResponse = await MailAccountsInsertMailAccountAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new mail account for the authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> MailAccountsInsertMailAccountAsyncWithHttpInfo (MailAccountDTO model = null)
        {

            var localVarPath = "/api/MailAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsInsertMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

        /// <summary>
        /// Sets the specified mail account as the default mail account for the authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns></returns>
        public void MailAccountsSetDefaultMailAccount (int? mailAccountId)
        {
             MailAccountsSetDefaultMailAccountWithHttpInfo(mailAccountId);
        }

        /// <summary>
        /// Sets the specified mail account as the default mail account for the authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MailAccountsSetDefaultMailAccountWithHttpInfo (int? mailAccountId)
        {
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling MailAccountsApi->MailAccountsSetDefaultMailAccount");

            var localVarPath = "/api/MailAccounts/{mailAccountId}/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsSetDefaultMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the specified mail account as the default mail account for the authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MailAccountsSetDefaultMailAccountAsync (int? mailAccountId)
        {
             await MailAccountsSetDefaultMailAccountAsyncWithHttpInfo(mailAccountId);

        }

        /// <summary>
        /// Sets the specified mail account as the default mail account for the authenticated user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MailAccountsSetDefaultMailAccountAsyncWithHttpInfo (int? mailAccountId)
        {
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling MailAccountsApi->MailAccountsSetDefaultMailAccount");

            var localVarPath = "/api/MailAccounts/{mailAccountId}/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsSetDefaultMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <param name="model"> (optional)</param>
        /// <returns>MailAccountDTO</returns>
        public MailAccountDTO MailAccountsUpdateMailAccount (int? mailAccountId, MailAccountDTO model = null)
        {
             ApiResponse<MailAccountDTO> localVarResponse = MailAccountsUpdateMailAccountWithHttpInfo(mailAccountId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MailAccountDTO</returns>
        public ApiResponse< MailAccountDTO > MailAccountsUpdateMailAccountWithHttpInfo (int? mailAccountId, MailAccountDTO model = null)
        {
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling MailAccountsApi->MailAccountsUpdateMailAccount");

            var localVarPath = "/api/MailAccounts/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsUpdateMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

        /// <summary>
        /// Updates the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MailAccountDTO</returns>
        public async System.Threading.Tasks.Task<MailAccountDTO> MailAccountsUpdateMailAccountAsync (int? mailAccountId, MailAccountDTO model = null)
        {
             ApiResponse<MailAccountDTO> localVarResponse = await MailAccountsUpdateMailAccountAsyncWithHttpInfo(mailAccountId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the specified mail account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">The mail account&#39;s id</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MailAccountDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailAccountDTO>> MailAccountsUpdateMailAccountAsyncWithHttpInfo (int? mailAccountId, MailAccountDTO model = null)
        {
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling MailAccountsApi->MailAccountsUpdateMailAccount");

            var localVarPath = "/api/MailAccounts/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailAccountsUpdateMailAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailAccountDTO)));
        }

    }
}
