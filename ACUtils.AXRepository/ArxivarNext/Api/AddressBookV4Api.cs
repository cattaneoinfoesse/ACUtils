/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAddressBookV4Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns an adressbook by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4GetAddressBookById (int? addressBookId);

        /// <summary>
        /// This call returns an adressbook by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4GetAddressBookByIdWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call returns a contact by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>ContactV4DTO</returns>
        ContactV4DTO AddressBookV4GetContactById (int? contactId);

        /// <summary>
        /// This call returns a contact by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        ApiResponse<ContactV4DTO> AddressBookV4GetContactByIdWithHttpInfo (int? contactId);
        /// <summary>
        /// This call returns new AddreBook object for insert
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4GetForInsert ();

        /// <summary>
        /// This call returns new AddreBook object for insert
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4GetForInsertWithHttpInfo ();
        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4GetForInsert_0 (int? addressbookCategoryId);

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4GetForInsert_0WithHttpInfo (int? addressbookCategoryId);
        /// <summary>
        /// This call returns all the possible fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        List<RubricaFieldDTO> AddressBookV4GetSearchField ();

        /// <summary>
        /// This call returns all the possible fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        ApiResponse<List<RubricaFieldDTO>> AddressBookV4GetSearchFieldWithHttpInfo ();
        /// <summary>
        /// This call returns all the possible select fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        List<RubricaFieldDTO> AddressBookV4GetSelectField ();

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        ApiResponse<List<RubricaFieldDTO>> AddressBookV4GetSelectFieldWithHttpInfo ();
        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4InsertAddressBook (AddressBookV4DTO body);

        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4InsertAddressBookWithHttpInfo (AddressBookV4DTO body);
        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4InsertAddressBook (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields);

        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4InsertAddressBookWithHttpInfo (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields);
        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>List&lt;AddressBookV4DTO&gt;</returns>
        List<AddressBookV4DTO> AddressBookV4InsertAddressBook_0 (List<AddressBookV4DTO> body);

        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>ApiResponse of List&lt;AddressBookV4DTO&gt;</returns>
        ApiResponse<List<AddressBookV4DTO>> AddressBookV4InsertAddressBook_0WithHttpInfo (List<AddressBookV4DTO> body);
        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>ContactV4DTO</returns>
        ContactV4DTO AddressBookV4InsertContact (ContactV4DTO body);

        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        ApiResponse<ContactV4DTO> AddressBookV4InsertContactWithHttpInfo (ContactV4DTO body);
        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ContactV4DTO</returns>
        ContactV4DTO AddressBookV4InsertContact (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);

        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        ApiResponse<ContactV4DTO> AddressBookV4InsertContactWithHttpInfo (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);
        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4UpdateAddressBook (AddressBookV4DTO body, int? addressbookId);

        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4UpdateAddressBookWithHttpInfo (AddressBookV4DTO body, int? addressbookId);
        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4UpdateAddressBook (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId);

        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4UpdateAddressBookWithHttpInfo (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId);
        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>ContactV4DTO</returns>
        ContactV4DTO AddressBookV4UpdateContact (ContactV4DTO body);

        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        ApiResponse<ContactV4DTO> AddressBookV4UpdateContactWithHttpInfo (ContactV4DTO body);
        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ContactV4DTO</returns>
        ContactV4DTO AddressBookV4UpdateContact (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);

        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        ApiResponse<ContactV4DTO> AddressBookV4UpdateContactWithHttpInfo (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns an adressbook by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetAddressBookByIdAsync (int? addressBookId);

        /// <summary>
        /// This call returns an adressbook by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetAddressBookByIdAsyncWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call returns a contact by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>Task of ContactV4DTO</returns>
        System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4GetContactByIdAsync (int? contactId);

        /// <summary>
        /// This call returns a contact by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4GetContactByIdAsyncWithHttpInfo (int? contactId);
        /// <summary>
        /// This call returns new AddreBook object for insert
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetForInsertAsync ();

        /// <summary>
        /// This call returns new AddreBook object for insert
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetForInsertAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetForInsert_0Async (int? addressbookCategoryId);

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetForInsert_0AsyncWithHttpInfo (int? addressbookCategoryId);
        /// <summary>
        /// This call returns all the possible fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookV4GetSearchFieldAsync ();

        /// <summary>
        /// This call returns all the possible fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookV4GetSearchFieldAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all the possible select fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookV4GetSelectFieldAsync ();

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookV4GetSelectFieldAsyncWithHttpInfo ();
        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4InsertAddressBookAsync (AddressBookV4DTO body);

        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4InsertAddressBookAsyncWithHttpInfo (AddressBookV4DTO body);
        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4InsertAddressBookAsync (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields);

        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4InsertAddressBookAsyncWithHttpInfo (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields);
        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>Task of List&lt;AddressBookV4DTO&gt;</returns>
        System.Threading.Tasks.Task<List<AddressBookV4DTO>> AddressBookV4InsertAddressBook_0Async (List<AddressBookV4DTO> body);

        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>Task of ApiResponse (List&lt;AddressBookV4DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AddressBookV4DTO>>> AddressBookV4InsertAddressBook_0AsyncWithHttpInfo (List<AddressBookV4DTO> body);
        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>Task of ContactV4DTO</returns>
        System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4InsertContactAsync (ContactV4DTO body);

        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4InsertContactAsyncWithHttpInfo (ContactV4DTO body);
        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ContactV4DTO</returns>
        System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4InsertContactAsync (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);

        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4InsertContactAsyncWithHttpInfo (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);
        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4UpdateAddressBookAsync (AddressBookV4DTO body, int? addressbookId);

        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4UpdateAddressBookAsyncWithHttpInfo (AddressBookV4DTO body, int? addressbookId);
        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4UpdateAddressBookAsync (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId);

        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4UpdateAddressBookAsyncWithHttpInfo (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId);
        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>Task of ContactV4DTO</returns>
        System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4UpdateContactAsync (ContactV4DTO body);

        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4UpdateContactAsyncWithHttpInfo (ContactV4DTO body);
        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ContactV4DTO</returns>
        System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4UpdateContactAsync (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);

        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4UpdateContactAsyncWithHttpInfo (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AddressBookV4Api : IAddressBookV4Api
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookV4Api"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressBookV4Api(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookV4Api"/> class
        /// </summary>
        /// <returns></returns>
        public AddressBookV4Api()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookV4Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressBookV4Api(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns an adressbook by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4GetAddressBookById (int? addressBookId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4GetAddressBookByIdWithHttpInfo(addressBookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns an adressbook by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4GetAddressBookByIdWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookV4Api->AddressBookV4GetAddressBookById");

            var localVarPath = "/api/V4/AddressBook/addressbook/{addressBookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetAddressBookById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns an adressbook by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetAddressBookByIdAsync (int? addressBookId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4GetAddressBookByIdAsyncWithHttpInfo(addressBookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns an adressbook by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetAddressBookByIdAsyncWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookV4Api->AddressBookV4GetAddressBookById");

            var localVarPath = "/api/V4/AddressBook/addressbook/{addressBookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetAddressBookById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns a contact by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>ContactV4DTO</returns>
        public ContactV4DTO AddressBookV4GetContactById (int? contactId)
        {
             ApiResponse<ContactV4DTO> localVarResponse = AddressBookV4GetContactByIdWithHttpInfo(contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a contact by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        public ApiResponse< ContactV4DTO > AddressBookV4GetContactByIdWithHttpInfo (int? contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling AddressBookV4Api->AddressBookV4GetContactById");

            var localVarPath = "/api/V4/AddressBook/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call returns a contact by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>Task of ContactV4DTO</returns>
        public async System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4GetContactByIdAsync (int? contactId)
        {
             ApiResponse<ContactV4DTO> localVarResponse = await AddressBookV4GetContactByIdAsyncWithHttpInfo(contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a contact by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4GetContactByIdAsyncWithHttpInfo (int? contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling AddressBookV4Api->AddressBookV4GetContactById");

            var localVarPath = "/api/V4/AddressBook/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call returns new AddreBook object for insert 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4GetForInsert ()
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4GetForInsertWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns new AddreBook object for insert 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4GetForInsertWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/newinstance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetForInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns new AddreBook object for insert 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetForInsertAsync ()
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4GetForInsertAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns new AddreBook object for insert 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetForInsertAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/newinstance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetForInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4GetForInsert_0 (int? addressbookCategoryId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4GetForInsert_0WithHttpInfo(addressbookCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4GetForInsert_0WithHttpInfo (int? addressbookCategoryId)
        {
            // verify the required parameter 'addressbookCategoryId' is set
            if (addressbookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookCategoryId' when calling AddressBookV4Api->AddressBookV4GetForInsert_0");

            var localVarPath = "/api/V4/AddressBook/newinstance/{addressbookCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookCategoryId != null) localVarPathParams.Add("addressbookCategoryId", this.Configuration.ApiClient.ParameterToString(addressbookCategoryId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetForInsert_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetForInsert_0Async (int? addressbookCategoryId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4GetForInsert_0AsyncWithHttpInfo(addressbookCategoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetForInsert_0AsyncWithHttpInfo (int? addressbookCategoryId)
        {
            // verify the required parameter 'addressbookCategoryId' is set
            if (addressbookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookCategoryId' when calling AddressBookV4Api->AddressBookV4GetForInsert_0");

            var localVarPath = "/api/V4/AddressBook/newinstance/{addressbookCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookCategoryId != null) localVarPathParams.Add("addressbookCategoryId", this.Configuration.ApiClient.ParameterToString(addressbookCategoryId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetForInsert_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns all the possible fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        public List<RubricaFieldDTO> AddressBookV4GetSearchField ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = AddressBookV4GetSearchFieldWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the possible fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        public ApiResponse< List<RubricaFieldDTO> > AddressBookV4GetSearchFieldWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/SearchField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetSearchField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call returns all the possible fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookV4GetSearchFieldAsync ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = await AddressBookV4GetSearchFieldAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the possible fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookV4GetSearchFieldAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/SearchField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetSearchField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        public List<RubricaFieldDTO> AddressBookV4GetSelectField ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = AddressBookV4GetSelectFieldWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        public ApiResponse< List<RubricaFieldDTO> > AddressBookV4GetSelectFieldWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookV4GetSelectFieldAsync ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = await AddressBookV4GetSelectFieldAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookV4GetSelectFieldAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4InsertAddressBook (AddressBookV4DTO body)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4InsertAddressBookWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4InsertAddressBookWithHttpInfo (AddressBookV4DTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4InsertAddressBookAsync (AddressBookV4DTO body)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4InsertAddressBookAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4InsertAddressBookAsyncWithHttpInfo (AddressBookV4DTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4InsertAddressBook (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4InsertAddressBookWithHttpInfo(contacts, officeCode, publicAdministrationCode, pecAddressBook, id, businessName, fax, address, location, postalCode, province, country, email, phoneNumber, cellPhone, state, type, addressBookCategoryId, businessUnit, _class, fiscalCode, vatNumber, priority, addressBookBusinessUnitCode, addressBookNote, externalCode, additionalFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4InsertAddressBookWithHttpInfo (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields)
        {
            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new ApiException(400, "Missing required parameter 'contacts' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'officeCode' is set
            if (officeCode == null)
                throw new ApiException(400, "Missing required parameter 'officeCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'publicAdministrationCode' is set
            if (publicAdministrationCode == null)
                throw new ApiException(400, "Missing required parameter 'publicAdministrationCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'pecAddressBook' is set
            if (pecAddressBook == null)
                throw new ApiException(400, "Missing required parameter 'pecAddressBook' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'businessName' is set
            if (businessName == null)
                throw new ApiException(400, "Missing required parameter 'businessName' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'province' is set
            if (province == null)
                throw new ApiException(400, "Missing required parameter 'province' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'addressBookCategoryId' is set
            if (addressBookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookCategoryId' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'fiscalCode' is set
            if (fiscalCode == null)
                throw new ApiException(400, "Missing required parameter 'fiscalCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'vatNumber' is set
            if (vatNumber == null)
                throw new ApiException(400, "Missing required parameter 'vatNumber' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'addressBookBusinessUnitCode' is set
            if (addressBookBusinessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'addressBookBusinessUnitCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'addressBookNote' is set
            if (addressBookNote == null)
                throw new ApiException(400, "Missing required parameter 'addressBookNote' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'externalCode' is set
            if (externalCode == null)
                throw new ApiException(400, "Missing required parameter 'externalCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'additionalFields' is set
            if (additionalFields == null)
                throw new ApiException(400, "Missing required parameter 'additionalFields' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (officeCode != null) localVarFormParams.Add("officeCode", this.Configuration.ApiClient.ParameterToString(officeCode)); // form parameter
            if (publicAdministrationCode != null) localVarFormParams.Add("publicAdministrationCode", this.Configuration.ApiClient.ParameterToString(publicAdministrationCode)); // form parameter
            if (pecAddressBook != null) localVarFormParams.Add("pecAddressBook", this.Configuration.ApiClient.ParameterToString(pecAddressBook)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (businessName != null) localVarFormParams.Add("businessName", this.Configuration.ApiClient.ParameterToString(businessName)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (location != null) localVarFormParams.Add("location", this.Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (postalCode != null) localVarFormParams.Add("postalCode", this.Configuration.ApiClient.ParameterToString(postalCode)); // form parameter
            if (province != null) localVarFormParams.Add("province", this.Configuration.ApiClient.ParameterToString(province)); // form parameter
            if (country != null) localVarFormParams.Add("country", this.Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (phoneNumber != null) localVarFormParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (addressBookCategoryId != null) localVarFormParams.Add("addressBookCategoryId", this.Configuration.ApiClient.ParameterToString(addressBookCategoryId)); // form parameter
            if (businessUnit != null) localVarFormParams.Add("businessUnit", this.Configuration.ApiClient.ParameterToString(businessUnit)); // form parameter
            if (_class != null) localVarFormParams.Add("class", this.Configuration.ApiClient.ParameterToString(_class)); // form parameter
            if (fiscalCode != null) localVarFormParams.Add("fiscalCode", this.Configuration.ApiClient.ParameterToString(fiscalCode)); // form parameter
            if (vatNumber != null) localVarFormParams.Add("vatNumber", this.Configuration.ApiClient.ParameterToString(vatNumber)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (addressBookBusinessUnitCode != null) localVarFormParams.Add("addressBookBusinessUnitCode", this.Configuration.ApiClient.ParameterToString(addressBookBusinessUnitCode)); // form parameter
            if (addressBookNote != null) localVarFormParams.Add("addressBookNote", this.Configuration.ApiClient.ParameterToString(addressBookNote)); // form parameter
            if (externalCode != null) localVarFormParams.Add("externalCode", this.Configuration.ApiClient.ParameterToString(externalCode)); // form parameter
            if (additionalFields != null) localVarFormParams.Add("additionalFields", this.Configuration.ApiClient.ParameterToString(additionalFields)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4InsertAddressBookAsync (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4InsertAddressBookAsyncWithHttpInfo(contacts, officeCode, publicAdministrationCode, pecAddressBook, id, businessName, fax, address, location, postalCode, province, country, email, phoneNumber, cellPhone, state, type, addressBookCategoryId, businessUnit, _class, fiscalCode, vatNumber, priority, addressBookBusinessUnitCode, addressBookNote, externalCode, additionalFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4InsertAddressBookAsyncWithHttpInfo (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields)
        {
            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new ApiException(400, "Missing required parameter 'contacts' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'officeCode' is set
            if (officeCode == null)
                throw new ApiException(400, "Missing required parameter 'officeCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'publicAdministrationCode' is set
            if (publicAdministrationCode == null)
                throw new ApiException(400, "Missing required parameter 'publicAdministrationCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'pecAddressBook' is set
            if (pecAddressBook == null)
                throw new ApiException(400, "Missing required parameter 'pecAddressBook' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'businessName' is set
            if (businessName == null)
                throw new ApiException(400, "Missing required parameter 'businessName' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'province' is set
            if (province == null)
                throw new ApiException(400, "Missing required parameter 'province' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'addressBookCategoryId' is set
            if (addressBookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookCategoryId' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'fiscalCode' is set
            if (fiscalCode == null)
                throw new ApiException(400, "Missing required parameter 'fiscalCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'vatNumber' is set
            if (vatNumber == null)
                throw new ApiException(400, "Missing required parameter 'vatNumber' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'addressBookBusinessUnitCode' is set
            if (addressBookBusinessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'addressBookBusinessUnitCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'addressBookNote' is set
            if (addressBookNote == null)
                throw new ApiException(400, "Missing required parameter 'addressBookNote' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'externalCode' is set
            if (externalCode == null)
                throw new ApiException(400, "Missing required parameter 'externalCode' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");
            // verify the required parameter 'additionalFields' is set
            if (additionalFields == null)
                throw new ApiException(400, "Missing required parameter 'additionalFields' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (officeCode != null) localVarFormParams.Add("officeCode", this.Configuration.ApiClient.ParameterToString(officeCode)); // form parameter
            if (publicAdministrationCode != null) localVarFormParams.Add("publicAdministrationCode", this.Configuration.ApiClient.ParameterToString(publicAdministrationCode)); // form parameter
            if (pecAddressBook != null) localVarFormParams.Add("pecAddressBook", this.Configuration.ApiClient.ParameterToString(pecAddressBook)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (businessName != null) localVarFormParams.Add("businessName", this.Configuration.ApiClient.ParameterToString(businessName)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (location != null) localVarFormParams.Add("location", this.Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (postalCode != null) localVarFormParams.Add("postalCode", this.Configuration.ApiClient.ParameterToString(postalCode)); // form parameter
            if (province != null) localVarFormParams.Add("province", this.Configuration.ApiClient.ParameterToString(province)); // form parameter
            if (country != null) localVarFormParams.Add("country", this.Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (phoneNumber != null) localVarFormParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (addressBookCategoryId != null) localVarFormParams.Add("addressBookCategoryId", this.Configuration.ApiClient.ParameterToString(addressBookCategoryId)); // form parameter
            if (businessUnit != null) localVarFormParams.Add("businessUnit", this.Configuration.ApiClient.ParameterToString(businessUnit)); // form parameter
            if (_class != null) localVarFormParams.Add("class", this.Configuration.ApiClient.ParameterToString(_class)); // form parameter
            if (fiscalCode != null) localVarFormParams.Add("fiscalCode", this.Configuration.ApiClient.ParameterToString(fiscalCode)); // form parameter
            if (vatNumber != null) localVarFormParams.Add("vatNumber", this.Configuration.ApiClient.ParameterToString(vatNumber)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (addressBookBusinessUnitCode != null) localVarFormParams.Add("addressBookBusinessUnitCode", this.Configuration.ApiClient.ParameterToString(addressBookBusinessUnitCode)); // form parameter
            if (addressBookNote != null) localVarFormParams.Add("addressBookNote", this.Configuration.ApiClient.ParameterToString(addressBookNote)); // form parameter
            if (externalCode != null) localVarFormParams.Add("externalCode", this.Configuration.ApiClient.ParameterToString(externalCode)); // form parameter
            if (additionalFields != null) localVarFormParams.Add("additionalFields", this.Configuration.ApiClient.ParameterToString(additionalFields)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>List&lt;AddressBookV4DTO&gt;</returns>
        public List<AddressBookV4DTO> AddressBookV4InsertAddressBook_0 (List<AddressBookV4DTO> body)
        {
             ApiResponse<List<AddressBookV4DTO>> localVarResponse = AddressBookV4InsertAddressBook_0WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>ApiResponse of List&lt;AddressBookV4DTO&gt;</returns>
        public ApiResponse< List<AddressBookV4DTO> > AddressBookV4InsertAddressBook_0WithHttpInfo (List<AddressBookV4DTO> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookV4Api->AddressBookV4InsertAddressBook_0");

            var localVarPath = "/api/V4/AddressBook/addressbooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertAddressBook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AddressBookV4DTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AddressBookV4DTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AddressBookV4DTO>)));
        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>Task of List&lt;AddressBookV4DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AddressBookV4DTO>> AddressBookV4InsertAddressBook_0Async (List<AddressBookV4DTO> body)
        {
             ApiResponse<List<AddressBookV4DTO>> localVarResponse = await AddressBookV4InsertAddressBook_0AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>Task of ApiResponse (List&lt;AddressBookV4DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AddressBookV4DTO>>> AddressBookV4InsertAddressBook_0AsyncWithHttpInfo (List<AddressBookV4DTO> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookV4Api->AddressBookV4InsertAddressBook_0");

            var localVarPath = "/api/V4/AddressBook/addressbooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertAddressBook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AddressBookV4DTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AddressBookV4DTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AddressBookV4DTO>)));
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>ContactV4DTO</returns>
        public ContactV4DTO AddressBookV4InsertContact (ContactV4DTO body)
        {
             ApiResponse<ContactV4DTO> localVarResponse = AddressBookV4InsertContactWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        public ApiResponse< ContactV4DTO > AddressBookV4InsertContactWithHttpInfo (ContactV4DTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookV4Api->AddressBookV4InsertContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>Task of ContactV4DTO</returns>
        public async System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4InsertContactAsync (ContactV4DTO body)
        {
             ApiResponse<ContactV4DTO> localVarResponse = await AddressBookV4InsertContactAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4InsertContactAsyncWithHttpInfo (ContactV4DTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookV4Api->AddressBookV4InsertContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ContactV4DTO</returns>
        public ContactV4DTO AddressBookV4InsertContact (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
             ApiResponse<ContactV4DTO> localVarResponse = AddressBookV4InsertContactWithHttpInfo(feaEnabled, feaExpireDate, firstName, lastName, pec, addressBookId, contactName, job, phone, fax, cellPhone, house, department, office, email, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        public ApiResponse< ContactV4DTO > AddressBookV4InsertContactWithHttpInfo (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
            // verify the required parameter 'feaEnabled' is set
            if (feaEnabled == null)
                throw new ApiException(400, "Missing required parameter 'feaEnabled' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'feaExpireDate' is set
            if (feaExpireDate == null)
                throw new ApiException(400, "Missing required parameter 'feaExpireDate' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'pec' is set
            if (pec == null)
                throw new ApiException(400, "Missing required parameter 'pec' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'contactName' is set
            if (contactName == null)
                throw new ApiException(400, "Missing required parameter 'contactName' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'house' is set
            if (house == null)
                throw new ApiException(400, "Missing required parameter 'house' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'department' is set
            if (department == null)
                throw new ApiException(400, "Missing required parameter 'department' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'office' is set
            if (office == null)
                throw new ApiException(400, "Missing required parameter 'office' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookV4Api->AddressBookV4InsertContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feaEnabled != null) localVarFormParams.Add("feaEnabled", this.Configuration.ApiClient.ParameterToString(feaEnabled)); // form parameter
            if (feaExpireDate != null) localVarFormParams.Add("feaExpireDate", this.Configuration.ApiClient.ParameterToString(feaExpireDate)); // form parameter
            if (firstName != null) localVarFormParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // form parameter
            if (lastName != null) localVarFormParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // form parameter
            if (pec != null) localVarFormParams.Add("pec", this.Configuration.ApiClient.ParameterToString(pec)); // form parameter
            if (addressBookId != null) localVarFormParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // form parameter
            if (contactName != null) localVarFormParams.Add("contactName", this.Configuration.ApiClient.ParameterToString(contactName)); // form parameter
            if (job != null) localVarFormParams.Add("job", this.Configuration.ApiClient.ParameterToString(job)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (house != null) localVarFormParams.Add("house", this.Configuration.ApiClient.ParameterToString(house)); // form parameter
            if (department != null) localVarFormParams.Add("department", this.Configuration.ApiClient.ParameterToString(department)); // form parameter
            if (office != null) localVarFormParams.Add("office", this.Configuration.ApiClient.ParameterToString(office)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ContactV4DTO</returns>
        public async System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4InsertContactAsync (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
             ApiResponse<ContactV4DTO> localVarResponse = await AddressBookV4InsertContactAsyncWithHttpInfo(feaEnabled, feaExpireDate, firstName, lastName, pec, addressBookId, contactName, job, phone, fax, cellPhone, house, department, office, email, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4InsertContactAsyncWithHttpInfo (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
            // verify the required parameter 'feaEnabled' is set
            if (feaEnabled == null)
                throw new ApiException(400, "Missing required parameter 'feaEnabled' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'feaExpireDate' is set
            if (feaExpireDate == null)
                throw new ApiException(400, "Missing required parameter 'feaExpireDate' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'pec' is set
            if (pec == null)
                throw new ApiException(400, "Missing required parameter 'pec' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'contactName' is set
            if (contactName == null)
                throw new ApiException(400, "Missing required parameter 'contactName' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'house' is set
            if (house == null)
                throw new ApiException(400, "Missing required parameter 'house' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'department' is set
            if (department == null)
                throw new ApiException(400, "Missing required parameter 'department' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'office' is set
            if (office == null)
                throw new ApiException(400, "Missing required parameter 'office' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookV4Api->AddressBookV4InsertContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookV4Api->AddressBookV4InsertContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feaEnabled != null) localVarFormParams.Add("feaEnabled", this.Configuration.ApiClient.ParameterToString(feaEnabled)); // form parameter
            if (feaExpireDate != null) localVarFormParams.Add("feaExpireDate", this.Configuration.ApiClient.ParameterToString(feaExpireDate)); // form parameter
            if (firstName != null) localVarFormParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // form parameter
            if (lastName != null) localVarFormParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // form parameter
            if (pec != null) localVarFormParams.Add("pec", this.Configuration.ApiClient.ParameterToString(pec)); // form parameter
            if (addressBookId != null) localVarFormParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // form parameter
            if (contactName != null) localVarFormParams.Add("contactName", this.Configuration.ApiClient.ParameterToString(contactName)); // form parameter
            if (job != null) localVarFormParams.Add("job", this.Configuration.ApiClient.ParameterToString(job)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (house != null) localVarFormParams.Add("house", this.Configuration.ApiClient.ParameterToString(house)); // form parameter
            if (department != null) localVarFormParams.Add("department", this.Configuration.ApiClient.ParameterToString(department)); // form parameter
            if (office != null) localVarFormParams.Add("office", this.Configuration.ApiClient.ParameterToString(office)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4UpdateAddressBook (AddressBookV4DTO body, int? addressbookId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4UpdateAddressBookWithHttpInfo(body, addressbookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4UpdateAddressBookWithHttpInfo (AddressBookV4DTO body, int? addressbookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4UpdateAddressBookAsync (AddressBookV4DTO body, int? addressbookId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4UpdateAddressBookAsyncWithHttpInfo(body, addressbookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4UpdateAddressBookAsyncWithHttpInfo (AddressBookV4DTO body, int? addressbookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4UpdateAddressBook (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4UpdateAddressBookWithHttpInfo(contacts, officeCode, publicAdministrationCode, pecAddressBook, id, businessName, fax, address, location, postalCode, province, country, email, phoneNumber, cellPhone, state, type, addressBookCategoryId, businessUnit, _class, fiscalCode, vatNumber, priority, addressBookBusinessUnitCode, addressBookNote, externalCode, additionalFields, addressbookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4UpdateAddressBookWithHttpInfo (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId)
        {
            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new ApiException(400, "Missing required parameter 'contacts' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'officeCode' is set
            if (officeCode == null)
                throw new ApiException(400, "Missing required parameter 'officeCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'publicAdministrationCode' is set
            if (publicAdministrationCode == null)
                throw new ApiException(400, "Missing required parameter 'publicAdministrationCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'pecAddressBook' is set
            if (pecAddressBook == null)
                throw new ApiException(400, "Missing required parameter 'pecAddressBook' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'businessName' is set
            if (businessName == null)
                throw new ApiException(400, "Missing required parameter 'businessName' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'province' is set
            if (province == null)
                throw new ApiException(400, "Missing required parameter 'province' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressBookCategoryId' is set
            if (addressBookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookCategoryId' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'fiscalCode' is set
            if (fiscalCode == null)
                throw new ApiException(400, "Missing required parameter 'fiscalCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'vatNumber' is set
            if (vatNumber == null)
                throw new ApiException(400, "Missing required parameter 'vatNumber' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressBookBusinessUnitCode' is set
            if (addressBookBusinessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'addressBookBusinessUnitCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressBookNote' is set
            if (addressBookNote == null)
                throw new ApiException(400, "Missing required parameter 'addressBookNote' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'externalCode' is set
            if (externalCode == null)
                throw new ApiException(400, "Missing required parameter 'externalCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'additionalFields' is set
            if (additionalFields == null)
                throw new ApiException(400, "Missing required parameter 'additionalFields' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (officeCode != null) localVarFormParams.Add("officeCode", this.Configuration.ApiClient.ParameterToString(officeCode)); // form parameter
            if (publicAdministrationCode != null) localVarFormParams.Add("publicAdministrationCode", this.Configuration.ApiClient.ParameterToString(publicAdministrationCode)); // form parameter
            if (pecAddressBook != null) localVarFormParams.Add("pecAddressBook", this.Configuration.ApiClient.ParameterToString(pecAddressBook)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (businessName != null) localVarFormParams.Add("businessName", this.Configuration.ApiClient.ParameterToString(businessName)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (location != null) localVarFormParams.Add("location", this.Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (postalCode != null) localVarFormParams.Add("postalCode", this.Configuration.ApiClient.ParameterToString(postalCode)); // form parameter
            if (province != null) localVarFormParams.Add("province", this.Configuration.ApiClient.ParameterToString(province)); // form parameter
            if (country != null) localVarFormParams.Add("country", this.Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (phoneNumber != null) localVarFormParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (addressBookCategoryId != null) localVarFormParams.Add("addressBookCategoryId", this.Configuration.ApiClient.ParameterToString(addressBookCategoryId)); // form parameter
            if (businessUnit != null) localVarFormParams.Add("businessUnit", this.Configuration.ApiClient.ParameterToString(businessUnit)); // form parameter
            if (_class != null) localVarFormParams.Add("class", this.Configuration.ApiClient.ParameterToString(_class)); // form parameter
            if (fiscalCode != null) localVarFormParams.Add("fiscalCode", this.Configuration.ApiClient.ParameterToString(fiscalCode)); // form parameter
            if (vatNumber != null) localVarFormParams.Add("vatNumber", this.Configuration.ApiClient.ParameterToString(vatNumber)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (addressBookBusinessUnitCode != null) localVarFormParams.Add("addressBookBusinessUnitCode", this.Configuration.ApiClient.ParameterToString(addressBookBusinessUnitCode)); // form parameter
            if (addressBookNote != null) localVarFormParams.Add("addressBookNote", this.Configuration.ApiClient.ParameterToString(addressBookNote)); // form parameter
            if (externalCode != null) localVarFormParams.Add("externalCode", this.Configuration.ApiClient.ParameterToString(externalCode)); // form parameter
            if (additionalFields != null) localVarFormParams.Add("additionalFields", this.Configuration.ApiClient.ParameterToString(additionalFields)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4UpdateAddressBookAsync (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4UpdateAddressBookAsyncWithHttpInfo(contacts, officeCode, publicAdministrationCode, pecAddressBook, id, businessName, fax, address, location, postalCode, province, country, email, phoneNumber, cellPhone, state, type, addressBookCategoryId, businessUnit, _class, fiscalCode, vatNumber, priority, addressBookBusinessUnitCode, addressBookNote, externalCode, additionalFields, addressbookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="officeCode"></param>
        /// <param name="publicAdministrationCode"></param>
        /// <param name="pecAddressBook"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4UpdateAddressBookAsyncWithHttpInfo (List<ContactV4DTO> contacts, string officeCode, string publicAdministrationCode, string pecAddressBook, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId)
        {
            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new ApiException(400, "Missing required parameter 'contacts' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'officeCode' is set
            if (officeCode == null)
                throw new ApiException(400, "Missing required parameter 'officeCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'publicAdministrationCode' is set
            if (publicAdministrationCode == null)
                throw new ApiException(400, "Missing required parameter 'publicAdministrationCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'pecAddressBook' is set
            if (pecAddressBook == null)
                throw new ApiException(400, "Missing required parameter 'pecAddressBook' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'businessName' is set
            if (businessName == null)
                throw new ApiException(400, "Missing required parameter 'businessName' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'province' is set
            if (province == null)
                throw new ApiException(400, "Missing required parameter 'province' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressBookCategoryId' is set
            if (addressBookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookCategoryId' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'fiscalCode' is set
            if (fiscalCode == null)
                throw new ApiException(400, "Missing required parameter 'fiscalCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'vatNumber' is set
            if (vatNumber == null)
                throw new ApiException(400, "Missing required parameter 'vatNumber' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressBookBusinessUnitCode' is set
            if (addressBookBusinessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'addressBookBusinessUnitCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressBookNote' is set
            if (addressBookNote == null)
                throw new ApiException(400, "Missing required parameter 'addressBookNote' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'externalCode' is set
            if (externalCode == null)
                throw new ApiException(400, "Missing required parameter 'externalCode' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'additionalFields' is set
            if (additionalFields == null)
                throw new ApiException(400, "Missing required parameter 'additionalFields' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (officeCode != null) localVarFormParams.Add("officeCode", this.Configuration.ApiClient.ParameterToString(officeCode)); // form parameter
            if (publicAdministrationCode != null) localVarFormParams.Add("publicAdministrationCode", this.Configuration.ApiClient.ParameterToString(publicAdministrationCode)); // form parameter
            if (pecAddressBook != null) localVarFormParams.Add("pecAddressBook", this.Configuration.ApiClient.ParameterToString(pecAddressBook)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (businessName != null) localVarFormParams.Add("businessName", this.Configuration.ApiClient.ParameterToString(businessName)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (location != null) localVarFormParams.Add("location", this.Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (postalCode != null) localVarFormParams.Add("postalCode", this.Configuration.ApiClient.ParameterToString(postalCode)); // form parameter
            if (province != null) localVarFormParams.Add("province", this.Configuration.ApiClient.ParameterToString(province)); // form parameter
            if (country != null) localVarFormParams.Add("country", this.Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (phoneNumber != null) localVarFormParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (addressBookCategoryId != null) localVarFormParams.Add("addressBookCategoryId", this.Configuration.ApiClient.ParameterToString(addressBookCategoryId)); // form parameter
            if (businessUnit != null) localVarFormParams.Add("businessUnit", this.Configuration.ApiClient.ParameterToString(businessUnit)); // form parameter
            if (_class != null) localVarFormParams.Add("class", this.Configuration.ApiClient.ParameterToString(_class)); // form parameter
            if (fiscalCode != null) localVarFormParams.Add("fiscalCode", this.Configuration.ApiClient.ParameterToString(fiscalCode)); // form parameter
            if (vatNumber != null) localVarFormParams.Add("vatNumber", this.Configuration.ApiClient.ParameterToString(vatNumber)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (addressBookBusinessUnitCode != null) localVarFormParams.Add("addressBookBusinessUnitCode", this.Configuration.ApiClient.ParameterToString(addressBookBusinessUnitCode)); // form parameter
            if (addressBookNote != null) localVarFormParams.Add("addressBookNote", this.Configuration.ApiClient.ParameterToString(addressBookNote)); // form parameter
            if (externalCode != null) localVarFormParams.Add("externalCode", this.Configuration.ApiClient.ParameterToString(externalCode)); // form parameter
            if (additionalFields != null) localVarFormParams.Add("additionalFields", this.Configuration.ApiClient.ParameterToString(additionalFields)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>ContactV4DTO</returns>
        public ContactV4DTO AddressBookV4UpdateContact (ContactV4DTO body)
        {
             ApiResponse<ContactV4DTO> localVarResponse = AddressBookV4UpdateContactWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        public ApiResponse< ContactV4DTO > AddressBookV4UpdateContactWithHttpInfo (ContactV4DTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookV4Api->AddressBookV4UpdateContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>Task of ContactV4DTO</returns>
        public async System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4UpdateContactAsync (ContactV4DTO body)
        {
             ApiResponse<ContactV4DTO> localVarResponse = await AddressBookV4UpdateContactAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4UpdateContactAsyncWithHttpInfo (ContactV4DTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookV4Api->AddressBookV4UpdateContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ContactV4DTO</returns>
        public ContactV4DTO AddressBookV4UpdateContact (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
             ApiResponse<ContactV4DTO> localVarResponse = AddressBookV4UpdateContactWithHttpInfo(feaEnabled, feaExpireDate, firstName, lastName, pec, addressBookId, contactName, job, phone, fax, cellPhone, house, department, office, email, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        public ApiResponse< ContactV4DTO > AddressBookV4UpdateContactWithHttpInfo (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
            // verify the required parameter 'feaEnabled' is set
            if (feaEnabled == null)
                throw new ApiException(400, "Missing required parameter 'feaEnabled' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'feaExpireDate' is set
            if (feaExpireDate == null)
                throw new ApiException(400, "Missing required parameter 'feaExpireDate' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'pec' is set
            if (pec == null)
                throw new ApiException(400, "Missing required parameter 'pec' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'contactName' is set
            if (contactName == null)
                throw new ApiException(400, "Missing required parameter 'contactName' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'house' is set
            if (house == null)
                throw new ApiException(400, "Missing required parameter 'house' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'department' is set
            if (department == null)
                throw new ApiException(400, "Missing required parameter 'department' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'office' is set
            if (office == null)
                throw new ApiException(400, "Missing required parameter 'office' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookV4Api->AddressBookV4UpdateContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feaEnabled != null) localVarFormParams.Add("feaEnabled", this.Configuration.ApiClient.ParameterToString(feaEnabled)); // form parameter
            if (feaExpireDate != null) localVarFormParams.Add("feaExpireDate", this.Configuration.ApiClient.ParameterToString(feaExpireDate)); // form parameter
            if (firstName != null) localVarFormParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // form parameter
            if (lastName != null) localVarFormParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // form parameter
            if (pec != null) localVarFormParams.Add("pec", this.Configuration.ApiClient.ParameterToString(pec)); // form parameter
            if (addressBookId != null) localVarFormParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // form parameter
            if (contactName != null) localVarFormParams.Add("contactName", this.Configuration.ApiClient.ParameterToString(contactName)); // form parameter
            if (job != null) localVarFormParams.Add("job", this.Configuration.ApiClient.ParameterToString(job)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (house != null) localVarFormParams.Add("house", this.Configuration.ApiClient.ParameterToString(house)); // form parameter
            if (department != null) localVarFormParams.Add("department", this.Configuration.ApiClient.ParameterToString(department)); // form parameter
            if (office != null) localVarFormParams.Add("office", this.Configuration.ApiClient.ParameterToString(office)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ContactV4DTO</returns>
        public async System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4UpdateContactAsync (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
             ApiResponse<ContactV4DTO> localVarResponse = await AddressBookV4UpdateContactAsyncWithHttpInfo(feaEnabled, feaExpireDate, firstName, lastName, pec, addressBookId, contactName, job, phone, fax, cellPhone, house, department, office, email, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feaEnabled"></param>
        /// <param name="feaExpireDate"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="pec"></param>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4UpdateContactAsyncWithHttpInfo (bool? feaEnabled, DateTime? feaExpireDate, string firstName, string lastName, string pec, int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
            // verify the required parameter 'feaEnabled' is set
            if (feaEnabled == null)
                throw new ApiException(400, "Missing required parameter 'feaEnabled' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'feaExpireDate' is set
            if (feaExpireDate == null)
                throw new ApiException(400, "Missing required parameter 'feaExpireDate' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'pec' is set
            if (pec == null)
                throw new ApiException(400, "Missing required parameter 'pec' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'contactName' is set
            if (contactName == null)
                throw new ApiException(400, "Missing required parameter 'contactName' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'house' is set
            if (house == null)
                throw new ApiException(400, "Missing required parameter 'house' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'department' is set
            if (department == null)
                throw new ApiException(400, "Missing required parameter 'department' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'office' is set
            if (office == null)
                throw new ApiException(400, "Missing required parameter 'office' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookV4Api->AddressBookV4UpdateContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookV4Api->AddressBookV4UpdateContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feaEnabled != null) localVarFormParams.Add("feaEnabled", this.Configuration.ApiClient.ParameterToString(feaEnabled)); // form parameter
            if (feaExpireDate != null) localVarFormParams.Add("feaExpireDate", this.Configuration.ApiClient.ParameterToString(feaExpireDate)); // form parameter
            if (firstName != null) localVarFormParams.Add("firstName", this.Configuration.ApiClient.ParameterToString(firstName)); // form parameter
            if (lastName != null) localVarFormParams.Add("lastName", this.Configuration.ApiClient.ParameterToString(lastName)); // form parameter
            if (pec != null) localVarFormParams.Add("pec", this.Configuration.ApiClient.ParameterToString(pec)); // form parameter
            if (addressBookId != null) localVarFormParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // form parameter
            if (contactName != null) localVarFormParams.Add("contactName", this.Configuration.ApiClient.ParameterToString(contactName)); // form parameter
            if (job != null) localVarFormParams.Add("job", this.Configuration.ApiClient.ParameterToString(job)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (house != null) localVarFormParams.Add("house", this.Configuration.ApiClient.ParameterToString(house)); // form parameter
            if (department != null) localVarFormParams.Add("department", this.Configuration.ApiClient.ParameterToString(department)); // form parameter
            if (office != null) localVarFormParams.Add("office", this.Configuration.ApiClient.ParameterToString(office)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

    }
}
