/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressBookV4Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns an adressbook by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4GetAddressBookById (int? addressBookId);

        /// <summary>
        /// This call returns an adressbook by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4GetAddressBookByIdWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call returns a contact by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>ContactV4DTO</returns>
        ContactV4DTO AddressBookV4GetContactById (int? contactId);

        /// <summary>
        /// This call returns a contact by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        ApiResponse<ContactV4DTO> AddressBookV4GetContactByIdWithHttpInfo (int? contactId);
        /// <summary>
        /// This call returns new AddreBook object for insert
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4GetForInsert ();

        /// <summary>
        /// This call returns new AddreBook object for insert
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4GetForInsertWithHttpInfo ();
        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4GetForInsert_0 (int? addressbookCategoryId);

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4GetForInsert_0WithHttpInfo (int? addressbookCategoryId);
        /// <summary>
        /// This call returns all the possible fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        List<RubricaFieldDTO> AddressBookV4GetSearchField ();

        /// <summary>
        /// This call returns all the possible fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        ApiResponse<List<RubricaFieldDTO>> AddressBookV4GetSearchFieldWithHttpInfo ();
        /// <summary>
        /// This call returns all the possible select fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        List<RubricaFieldDTO> AddressBookV4GetSelectField ();

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        ApiResponse<List<RubricaFieldDTO>> AddressBookV4GetSelectFieldWithHttpInfo ();
        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookV4Dto">Address book item to profile</param>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4InsertAddressBook (AddressBookV4DTO addressBookV4Dto);

        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookV4Dto">Address book item to profile</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4InsertAddressBookWithHttpInfo (AddressBookV4DTO addressBookV4Dto);
        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookDtos">Address book items to profile</param>
        /// <returns>List&lt;AddressBookV4DTO&gt;</returns>
        List<AddressBookV4DTO> AddressBookV4InsertAddressBook_0 (List<AddressBookV4DTO> addressBookDtos);

        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookDtos">Address book items to profile</param>
        /// <returns>ApiResponse of List&lt;AddressBookV4DTO&gt;</returns>
        ApiResponse<List<AddressBookV4DTO>> AddressBookV4InsertAddressBook_0WithHttpInfo (List<AddressBookV4DTO> addressBookDtos);
        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactV4Dto">Contact item to insert</param>
        /// <returns>ContactV4DTO</returns>
        ContactV4DTO AddressBookV4InsertContact (ContactV4DTO contactV4Dto);

        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactV4Dto">Contact item to insert</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        ApiResponse<ContactV4DTO> AddressBookV4InsertContactWithHttpInfo (ContactV4DTO contactV4Dto);
        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <param name="addressBookV4Dto">Address book data to update</param>
        /// <returns>AddressBookV4DTO</returns>
        AddressBookV4DTO AddressBookV4UpdateAddressBook (int? addressbookId, AddressBookV4DTO addressBookV4Dto);

        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <param name="addressBookV4Dto">Address book data to update</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        ApiResponse<AddressBookV4DTO> AddressBookV4UpdateAddressBookWithHttpInfo (int? addressbookId, AddressBookV4DTO addressBookV4Dto);
        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Identifier of contact to update</param>
        /// <returns>ContactV4DTO</returns>
        ContactV4DTO AddressBookV4UpdateContact (ContactV4DTO contact);

        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Identifier of contact to update</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        ApiResponse<ContactV4DTO> AddressBookV4UpdateContactWithHttpInfo (ContactV4DTO contact);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns an adressbook by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetAddressBookByIdAsync (int? addressBookId);

        /// <summary>
        /// This call returns an adressbook by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetAddressBookByIdAsyncWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call returns a contact by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>Task of ContactV4DTO</returns>
        System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4GetContactByIdAsync (int? contactId);

        /// <summary>
        /// This call returns a contact by identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4GetContactByIdAsyncWithHttpInfo (int? contactId);
        /// <summary>
        /// This call returns new AddreBook object for insert
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetForInsertAsync ();

        /// <summary>
        /// This call returns new AddreBook object for insert
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetForInsertAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetForInsert_0Async (int? addressbookCategoryId);

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetForInsert_0AsyncWithHttpInfo (int? addressbookCategoryId);
        /// <summary>
        /// This call returns all the possible fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookV4GetSearchFieldAsync ();

        /// <summary>
        /// This call returns all the possible fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookV4GetSearchFieldAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all the possible select fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookV4GetSelectFieldAsync ();

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookV4GetSelectFieldAsyncWithHttpInfo ();
        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookV4Dto">Address book item to profile</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4InsertAddressBookAsync (AddressBookV4DTO addressBookV4Dto);

        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookV4Dto">Address book item to profile</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4InsertAddressBookAsyncWithHttpInfo (AddressBookV4DTO addressBookV4Dto);
        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookDtos">Address book items to profile</param>
        /// <returns>Task of List&lt;AddressBookV4DTO&gt;</returns>
        System.Threading.Tasks.Task<List<AddressBookV4DTO>> AddressBookV4InsertAddressBook_0Async (List<AddressBookV4DTO> addressBookDtos);

        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookDtos">Address book items to profile</param>
        /// <returns>Task of ApiResponse (List&lt;AddressBookV4DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AddressBookV4DTO>>> AddressBookV4InsertAddressBook_0AsyncWithHttpInfo (List<AddressBookV4DTO> addressBookDtos);
        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactV4Dto">Contact item to insert</param>
        /// <returns>Task of ContactV4DTO</returns>
        System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4InsertContactAsync (ContactV4DTO contactV4Dto);

        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactV4Dto">Contact item to insert</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4InsertContactAsyncWithHttpInfo (ContactV4DTO contactV4Dto);
        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <param name="addressBookV4Dto">Address book data to update</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4UpdateAddressBookAsync (int? addressbookId, AddressBookV4DTO addressBookV4Dto);

        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <param name="addressBookV4Dto">Address book data to update</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4UpdateAddressBookAsyncWithHttpInfo (int? addressbookId, AddressBookV4DTO addressBookV4Dto);
        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Identifier of contact to update</param>
        /// <returns>Task of ContactV4DTO</returns>
        System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4UpdateContactAsync (ContactV4DTO contact);

        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Identifier of contact to update</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4UpdateContactAsyncWithHttpInfo (ContactV4DTO contact);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressBookV4Api : IAddressBookV4Api
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookV4Api"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressBookV4Api(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookV4Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressBookV4Api(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns an adressbook by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4GetAddressBookById (int? addressBookId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4GetAddressBookByIdWithHttpInfo(addressBookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns an adressbook by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4GetAddressBookByIdWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookV4Api->AddressBookV4GetAddressBookById");

            var localVarPath = "/api/V4/AddressBook/addressbook/{addressBookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetAddressBookById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns an adressbook by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetAddressBookByIdAsync (int? addressBookId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4GetAddressBookByIdAsyncWithHttpInfo(addressBookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns an adressbook by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Adress book identifier</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetAddressBookByIdAsyncWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookV4Api->AddressBookV4GetAddressBookById");

            var localVarPath = "/api/V4/AddressBook/addressbook/{addressBookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetAddressBookById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns a contact by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>ContactV4DTO</returns>
        public ContactV4DTO AddressBookV4GetContactById (int? contactId)
        {
             ApiResponse<ContactV4DTO> localVarResponse = AddressBookV4GetContactByIdWithHttpInfo(contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a contact by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        public ApiResponse< ContactV4DTO > AddressBookV4GetContactByIdWithHttpInfo (int? contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling AddressBookV4Api->AddressBookV4GetContactById");

            var localVarPath = "/api/V4/AddressBook/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call returns a contact by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>Task of ContactV4DTO</returns>
        public async System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4GetContactByIdAsync (int? contactId)
        {
             ApiResponse<ContactV4DTO> localVarResponse = await AddressBookV4GetContactByIdAsyncWithHttpInfo(contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a contact by identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Contact identifier</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4GetContactByIdAsyncWithHttpInfo (int? contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling AddressBookV4Api->AddressBookV4GetContactById");

            var localVarPath = "/api/V4/AddressBook/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call returns new AddreBook object for insert 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4GetForInsert ()
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4GetForInsertWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns new AddreBook object for insert 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4GetForInsertWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/newinstance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetForInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns new AddreBook object for insert 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetForInsertAsync ()
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4GetForInsertAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns new AddreBook object for insert 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetForInsertAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/newinstance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetForInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4GetForInsert_0 (int? addressbookCategoryId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4GetForInsert_0WithHttpInfo(addressbookCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4GetForInsert_0WithHttpInfo (int? addressbookCategoryId)
        {
            // verify the required parameter 'addressbookCategoryId' is set
            if (addressbookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookCategoryId' when calling AddressBookV4Api->AddressBookV4GetForInsert_0");

            var localVarPath = "/api/V4/AddressBook/newinstance/{addressbookCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookCategoryId != null) localVarPathParams.Add("addressbookCategoryId", this.Configuration.ApiClient.ParameterToString(addressbookCategoryId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetForInsert_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4GetForInsert_0Async (int? addressbookCategoryId)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4GetForInsert_0AsyncWithHttpInfo(addressbookCategoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4GetForInsert_0AsyncWithHttpInfo (int? addressbookCategoryId)
        {
            // verify the required parameter 'addressbookCategoryId' is set
            if (addressbookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookCategoryId' when calling AddressBookV4Api->AddressBookV4GetForInsert_0");

            var localVarPath = "/api/V4/AddressBook/newinstance/{addressbookCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookCategoryId != null) localVarPathParams.Add("addressbookCategoryId", this.Configuration.ApiClient.ParameterToString(addressbookCategoryId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetForInsert_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call returns all the possible fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        public List<RubricaFieldDTO> AddressBookV4GetSearchField ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = AddressBookV4GetSearchFieldWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the possible fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        public ApiResponse< List<RubricaFieldDTO> > AddressBookV4GetSearchFieldWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/SearchField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetSearchField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call returns all the possible fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookV4GetSearchFieldAsync ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = await AddressBookV4GetSearchFieldAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the possible fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookV4GetSearchFieldAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/SearchField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetSearchField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        public List<RubricaFieldDTO> AddressBookV4GetSelectField ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = AddressBookV4GetSelectFieldWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        public ApiResponse< List<RubricaFieldDTO> > AddressBookV4GetSelectFieldWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookV4GetSelectFieldAsync ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = await AddressBookV4GetSelectFieldAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book V4 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookV4GetSelectFieldAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V4/AddressBook/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4GetSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookV4Dto">Address book item to profile</param>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4InsertAddressBook (AddressBookV4DTO addressBookV4Dto)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4InsertAddressBookWithHttpInfo(addressBookV4Dto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookV4Dto">Address book item to profile</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4InsertAddressBookWithHttpInfo (AddressBookV4DTO addressBookV4Dto)
        {
            // verify the required parameter 'addressBookV4Dto' is set
            if (addressBookV4Dto == null)
                throw new ApiException(400, "Missing required parameter 'addressBookV4Dto' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookV4Dto != null && addressBookV4Dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressBookV4Dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressBookV4Dto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookV4Dto">Address book item to profile</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4InsertAddressBookAsync (AddressBookV4DTO addressBookV4Dto)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4InsertAddressBookAsyncWithHttpInfo(addressBookV4Dto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookV4Dto">Address book item to profile</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4InsertAddressBookAsyncWithHttpInfo (AddressBookV4DTO addressBookV4Dto)
        {
            // verify the required parameter 'addressBookV4Dto' is set
            if (addressBookV4Dto == null)
                throw new ApiException(400, "Missing required parameter 'addressBookV4Dto' when calling AddressBookV4Api->AddressBookV4InsertAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookV4Dto != null && addressBookV4Dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressBookV4Dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressBookV4Dto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookDtos">Address book items to profile</param>
        /// <returns>List&lt;AddressBookV4DTO&gt;</returns>
        public List<AddressBookV4DTO> AddressBookV4InsertAddressBook_0 (List<AddressBookV4DTO> addressBookDtos)
        {
             ApiResponse<List<AddressBookV4DTO>> localVarResponse = AddressBookV4InsertAddressBook_0WithHttpInfo(addressBookDtos);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookDtos">Address book items to profile</param>
        /// <returns>ApiResponse of List&lt;AddressBookV4DTO&gt;</returns>
        public ApiResponse< List<AddressBookV4DTO> > AddressBookV4InsertAddressBook_0WithHttpInfo (List<AddressBookV4DTO> addressBookDtos)
        {
            // verify the required parameter 'addressBookDtos' is set
            if (addressBookDtos == null)
                throw new ApiException(400, "Missing required parameter 'addressBookDtos' when calling AddressBookV4Api->AddressBookV4InsertAddressBook_0");

            var localVarPath = "/api/V4/AddressBook/addressbooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookDtos != null && addressBookDtos.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressBookDtos); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressBookDtos; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertAddressBook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AddressBookV4DTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AddressBookV4DTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AddressBookV4DTO>)));
        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookDtos">Address book items to profile</param>
        /// <returns>Task of List&lt;AddressBookV4DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AddressBookV4DTO>> AddressBookV4InsertAddressBook_0Async (List<AddressBookV4DTO> addressBookDtos)
        {
             ApiResponse<List<AddressBookV4DTO>> localVarResponse = await AddressBookV4InsertAddressBook_0AsyncWithHttpInfo(addressBookDtos);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookDtos">Address book items to profile</param>
        /// <returns>Task of ApiResponse (List&lt;AddressBookV4DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AddressBookV4DTO>>> AddressBookV4InsertAddressBook_0AsyncWithHttpInfo (List<AddressBookV4DTO> addressBookDtos)
        {
            // verify the required parameter 'addressBookDtos' is set
            if (addressBookDtos == null)
                throw new ApiException(400, "Missing required parameter 'addressBookDtos' when calling AddressBookV4Api->AddressBookV4InsertAddressBook_0");

            var localVarPath = "/api/V4/AddressBook/addressbooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookDtos != null && addressBookDtos.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressBookDtos); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressBookDtos; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertAddressBook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AddressBookV4DTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AddressBookV4DTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AddressBookV4DTO>)));
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactV4Dto">Contact item to insert</param>
        /// <returns>ContactV4DTO</returns>
        public ContactV4DTO AddressBookV4InsertContact (ContactV4DTO contactV4Dto)
        {
             ApiResponse<ContactV4DTO> localVarResponse = AddressBookV4InsertContactWithHttpInfo(contactV4Dto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactV4Dto">Contact item to insert</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        public ApiResponse< ContactV4DTO > AddressBookV4InsertContactWithHttpInfo (ContactV4DTO contactV4Dto)
        {
            // verify the required parameter 'contactV4Dto' is set
            if (contactV4Dto == null)
                throw new ApiException(400, "Missing required parameter 'contactV4Dto' when calling AddressBookV4Api->AddressBookV4InsertContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactV4Dto != null && contactV4Dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactV4Dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactV4Dto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactV4Dto">Contact item to insert</param>
        /// <returns>Task of ContactV4DTO</returns>
        public async System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4InsertContactAsync (ContactV4DTO contactV4Dto)
        {
             ApiResponse<ContactV4DTO> localVarResponse = await AddressBookV4InsertContactAsyncWithHttpInfo(contactV4Dto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactV4Dto">Contact item to insert</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4InsertContactAsyncWithHttpInfo (ContactV4DTO contactV4Dto)
        {
            // verify the required parameter 'contactV4Dto' is set
            if (contactV4Dto == null)
                throw new ApiException(400, "Missing required parameter 'contactV4Dto' when calling AddressBookV4Api->AddressBookV4InsertContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactV4Dto != null && contactV4Dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactV4Dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactV4Dto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4InsertContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <param name="addressBookV4Dto">Address book data to update</param>
        /// <returns>AddressBookV4DTO</returns>
        public AddressBookV4DTO AddressBookV4UpdateAddressBook (int? addressbookId, AddressBookV4DTO addressBookV4Dto)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = AddressBookV4UpdateAddressBookWithHttpInfo(addressbookId, addressBookV4Dto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <param name="addressBookV4Dto">Address book data to update</param>
        /// <returns>ApiResponse of AddressBookV4DTO</returns>
        public ApiResponse< AddressBookV4DTO > AddressBookV4UpdateAddressBookWithHttpInfo (int? addressbookId, AddressBookV4DTO addressBookV4Dto)
        {
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressBookV4Dto' is set
            if (addressBookV4Dto == null)
                throw new ApiException(400, "Missing required parameter 'addressBookV4Dto' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            if (addressBookV4Dto != null && addressBookV4Dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressBookV4Dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressBookV4Dto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <param name="addressBookV4Dto">Address book data to update</param>
        /// <returns>Task of AddressBookV4DTO</returns>
        public async System.Threading.Tasks.Task<AddressBookV4DTO> AddressBookV4UpdateAddressBookAsync (int? addressbookId, AddressBookV4DTO addressBookV4Dto)
        {
             ApiResponse<AddressBookV4DTO> localVarResponse = await AddressBookV4UpdateAddressBookAsyncWithHttpInfo(addressbookId, addressBookV4Dto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <param name="addressBookV4Dto">Address book data to update</param>
        /// <returns>Task of ApiResponse (AddressBookV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookV4DTO>> AddressBookV4UpdateAddressBookAsyncWithHttpInfo (int? addressbookId, AddressBookV4DTO addressBookV4Dto)
        {
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");
            // verify the required parameter 'addressBookV4Dto' is set
            if (addressBookV4Dto == null)
                throw new ApiException(400, "Missing required parameter 'addressBookV4Dto' when calling AddressBookV4Api->AddressBookV4UpdateAddressBook");

            var localVarPath = "/api/V4/AddressBook/addressbook/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            if (addressBookV4Dto != null && addressBookV4Dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressBookV4Dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressBookV4Dto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookV4DTO)));
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Identifier of contact to update</param>
        /// <returns>ContactV4DTO</returns>
        public ContactV4DTO AddressBookV4UpdateContact (ContactV4DTO contact)
        {
             ApiResponse<ContactV4DTO> localVarResponse = AddressBookV4UpdateContactWithHttpInfo(contact);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Identifier of contact to update</param>
        /// <returns>ApiResponse of ContactV4DTO</returns>
        public ApiResponse< ContactV4DTO > AddressBookV4UpdateContactWithHttpInfo (ContactV4DTO contact)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling AddressBookV4Api->AddressBookV4UpdateContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Identifier of contact to update</param>
        /// <returns>Task of ContactV4DTO</returns>
        public async System.Threading.Tasks.Task<ContactV4DTO> AddressBookV4UpdateContactAsync (ContactV4DTO contact)
        {
             ApiResponse<ContactV4DTO> localVarResponse = await AddressBookV4UpdateContactAsyncWithHttpInfo(contact);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Identifier of contact to update</param>
        /// <returns>Task of ApiResponse (ContactV4DTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactV4DTO>> AddressBookV4UpdateContactAsyncWithHttpInfo (ContactV4DTO contact)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling AddressBookV4Api->AddressBookV4UpdateContact");

            var localVarPath = "/api/V4/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookV4UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactV4DTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactV4DTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactV4DTO)));
        }

    }
}
