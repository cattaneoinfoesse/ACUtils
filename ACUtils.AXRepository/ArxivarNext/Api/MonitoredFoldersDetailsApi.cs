/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMonitoredFoldersDetailsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes a monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersDetailId"></param>
        /// <returns></returns>
        void MonitoredFoldersDetailsMonitoredFoldersDetailDelete (string monitoredFoldersDetailId);

        /// <summary>
        /// This call deletes a monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersDetailId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MonitoredFoldersDetailsMonitoredFoldersDetailDeleteWithHttpInfo (string monitoredFoldersDetailId);
        /// <summary>
        /// This call deletes a monitored folders detail by monitored folder id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns></returns>
        void MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderId (string monitoredFoldersId);

        /// <summary>
        /// This call deletes a monitored folders detail by monitored folder id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdWithHttpInfo (string monitoredFoldersId);
        /// <summary>
        /// This call returns all the monitored folders details for a gover monitored folder id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>List&lt;MonitoredFolderDetailDTO&gt;</returns>
        List<MonitoredFolderDetailDTO> MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderId (string monitoredFoldersId);

        /// <summary>
        /// This call returns all the monitored folders details for a gover monitored folder id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>ApiResponse of List&lt;MonitoredFolderDetailDTO&gt;</returns>
        ApiResponse<List<MonitoredFolderDetailDTO>> MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdWithHttpInfo (string monitoredFoldersId);
        /// <summary>
        /// This call insert new monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MonitoredFolderDetailDTO</returns>
        MonitoredFolderDetailDTO MonitoredFoldersDetailsMonitoredFoldersDetailInsert (MonitoredFolderDetailDTO body);

        /// <summary>
        /// This call insert new monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MonitoredFolderDetailDTO</returns>
        ApiResponse<MonitoredFolderDetailDTO> MonitoredFoldersDetailsMonitoredFoldersDetailInsertWithHttpInfo (MonitoredFolderDetailDTO body);
        /// <summary>
        /// This call insert new monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="monitoredFolderId"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="position"></param>
        /// <param name="fieldName"></param>
        /// <param name="fieldKind"></param>
        /// <returns>MonitoredFolderDetailDTO</returns>
        MonitoredFolderDetailDTO MonitoredFoldersDetailsMonitoredFoldersDetailInsert (string id, string monitoredFolderId, int? from, int? to, int? position, string fieldName, int? fieldKind);

        /// <summary>
        /// This call insert new monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="monitoredFolderId"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="position"></param>
        /// <param name="fieldName"></param>
        /// <param name="fieldKind"></param>
        /// <returns>ApiResponse of MonitoredFolderDetailDTO</returns>
        ApiResponse<MonitoredFolderDetailDTO> MonitoredFoldersDetailsMonitoredFoldersDetailInsertWithHttpInfo (string id, string monitoredFolderId, int? from, int? to, int? position, string fieldName, int? fieldKind);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes a monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersDetailId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MonitoredFoldersDetailsMonitoredFoldersDetailDeleteAsync (string monitoredFoldersDetailId);

        /// <summary>
        /// This call deletes a monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersDetailId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MonitoredFoldersDetailsMonitoredFoldersDetailDeleteAsyncWithHttpInfo (string monitoredFoldersDetailId);
        /// <summary>
        /// This call deletes a monitored folders detail by monitored folder id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdAsync (string monitoredFoldersId);

        /// <summary>
        /// This call deletes a monitored folders detail by monitored folder id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdAsyncWithHttpInfo (string monitoredFoldersId);
        /// <summary>
        /// This call returns all the monitored folders details for a gover monitored folder id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>Task of List&lt;MonitoredFolderDetailDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MonitoredFolderDetailDTO>> MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdAsync (string monitoredFoldersId);

        /// <summary>
        /// This call returns all the monitored folders details for a gover monitored folder id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>Task of ApiResponse (List&lt;MonitoredFolderDetailDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MonitoredFolderDetailDTO>>> MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdAsyncWithHttpInfo (string monitoredFoldersId);
        /// <summary>
        /// This call insert new monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MonitoredFolderDetailDTO</returns>
        System.Threading.Tasks.Task<MonitoredFolderDetailDTO> MonitoredFoldersDetailsMonitoredFoldersDetailInsertAsync (MonitoredFolderDetailDTO body);

        /// <summary>
        /// This call insert new monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MonitoredFolderDetailDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MonitoredFolderDetailDTO>> MonitoredFoldersDetailsMonitoredFoldersDetailInsertAsyncWithHttpInfo (MonitoredFolderDetailDTO body);
        /// <summary>
        /// This call insert new monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="monitoredFolderId"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="position"></param>
        /// <param name="fieldName"></param>
        /// <param name="fieldKind"></param>
        /// <returns>Task of MonitoredFolderDetailDTO</returns>
        System.Threading.Tasks.Task<MonitoredFolderDetailDTO> MonitoredFoldersDetailsMonitoredFoldersDetailInsertAsync (string id, string monitoredFolderId, int? from, int? to, int? position, string fieldName, int? fieldKind);

        /// <summary>
        /// This call insert new monitored folders detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="monitoredFolderId"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="position"></param>
        /// <param name="fieldName"></param>
        /// <param name="fieldKind"></param>
        /// <returns>Task of ApiResponse (MonitoredFolderDetailDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MonitoredFolderDetailDTO>> MonitoredFoldersDetailsMonitoredFoldersDetailInsertAsyncWithHttpInfo (string id, string monitoredFolderId, int? from, int? to, int? position, string fieldName, int? fieldKind);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MonitoredFoldersDetailsApi : IMonitoredFoldersDetailsApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoredFoldersDetailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MonitoredFoldersDetailsApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoredFoldersDetailsApi"/> class
        /// </summary>
        /// <returns></returns>
        public MonitoredFoldersDetailsApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoredFoldersDetailsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MonitoredFoldersDetailsApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes a monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersDetailId"></param>
        /// <returns></returns>
        public void MonitoredFoldersDetailsMonitoredFoldersDetailDelete (string monitoredFoldersDetailId)
        {
             MonitoredFoldersDetailsMonitoredFoldersDetailDeleteWithHttpInfo(monitoredFoldersDetailId);
        }

        /// <summary>
        /// This call deletes a monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersDetailId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MonitoredFoldersDetailsMonitoredFoldersDetailDeleteWithHttpInfo (string monitoredFoldersDetailId)
        {
            // verify the required parameter 'monitoredFoldersDetailId' is set
            if (monitoredFoldersDetailId == null)
                throw new ApiException(400, "Missing required parameter 'monitoredFoldersDetailId' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailDelete");

            var localVarPath = "/api/MonitoredFoldersDetails/{monitoredFoldersDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (monitoredFoldersDetailId != null) localVarPathParams.Add("monitoredFoldersDetailId", this.Configuration.ApiClient.ParameterToString(monitoredFoldersDetailId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoredFoldersDetailsMonitoredFoldersDetailDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersDetailId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MonitoredFoldersDetailsMonitoredFoldersDetailDeleteAsync (string monitoredFoldersDetailId)
        {
             await MonitoredFoldersDetailsMonitoredFoldersDetailDeleteAsyncWithHttpInfo(monitoredFoldersDetailId);

        }

        /// <summary>
        /// This call deletes a monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersDetailId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MonitoredFoldersDetailsMonitoredFoldersDetailDeleteAsyncWithHttpInfo (string monitoredFoldersDetailId)
        {
            // verify the required parameter 'monitoredFoldersDetailId' is set
            if (monitoredFoldersDetailId == null)
                throw new ApiException(400, "Missing required parameter 'monitoredFoldersDetailId' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailDelete");

            var localVarPath = "/api/MonitoredFoldersDetails/{monitoredFoldersDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (monitoredFoldersDetailId != null) localVarPathParams.Add("monitoredFoldersDetailId", this.Configuration.ApiClient.ParameterToString(monitoredFoldersDetailId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoredFoldersDetailsMonitoredFoldersDetailDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a monitored folders detail by monitored folder id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns></returns>
        public void MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderId (string monitoredFoldersId)
        {
             MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdWithHttpInfo(monitoredFoldersId);
        }

        /// <summary>
        /// This call deletes a monitored folders detail by monitored folder id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdWithHttpInfo (string monitoredFoldersId)
        {
            // verify the required parameter 'monitoredFoldersId' is set
            if (monitoredFoldersId == null)
                throw new ApiException(400, "Missing required parameter 'monitoredFoldersId' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderId");

            var localVarPath = "/api/MonitoredFoldersDetails/bymonitoredfolder/{monitoredFoldersId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (monitoredFoldersId != null) localVarPathParams.Add("monitoredFoldersId", this.Configuration.ApiClient.ParameterToString(monitoredFoldersId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a monitored folders detail by monitored folder id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdAsync (string monitoredFoldersId)
        {
             await MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdAsyncWithHttpInfo(monitoredFoldersId);

        }

        /// <summary>
        /// This call deletes a monitored folders detail by monitored folder id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdAsyncWithHttpInfo (string monitoredFoldersId)
        {
            // verify the required parameter 'monitoredFoldersId' is set
            if (monitoredFoldersId == null)
                throw new ApiException(400, "Missing required parameter 'monitoredFoldersId' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderId");

            var localVarPath = "/api/MonitoredFoldersDetails/bymonitoredfolder/{monitoredFoldersId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (monitoredFoldersId != null) localVarPathParams.Add("monitoredFoldersId", this.Configuration.ApiClient.ParameterToString(monitoredFoldersId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns all the monitored folders details for a gover monitored folder id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>List&lt;MonitoredFolderDetailDTO&gt;</returns>
        public List<MonitoredFolderDetailDTO> MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderId (string monitoredFoldersId)
        {
             ApiResponse<List<MonitoredFolderDetailDTO>> localVarResponse = MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdWithHttpInfo(monitoredFoldersId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the monitored folders details for a gover monitored folder id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>ApiResponse of List&lt;MonitoredFolderDetailDTO&gt;</returns>
        public ApiResponse< List<MonitoredFolderDetailDTO> > MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdWithHttpInfo (string monitoredFoldersId)
        {
            // verify the required parameter 'monitoredFoldersId' is set
            if (monitoredFoldersId == null)
                throw new ApiException(400, "Missing required parameter 'monitoredFoldersId' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderId");

            var localVarPath = "/api/MonitoredFoldersDetails/{monitoredFoldersId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (monitoredFoldersId != null) localVarPathParams.Add("monitoredFoldersId", this.Configuration.ApiClient.ParameterToString(monitoredFoldersId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MonitoredFolderDetailDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MonitoredFolderDetailDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MonitoredFolderDetailDTO>)));
        }

        /// <summary>
        /// This call returns all the monitored folders details for a gover monitored folder id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>Task of List&lt;MonitoredFolderDetailDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MonitoredFolderDetailDTO>> MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdAsync (string monitoredFoldersId)
        {
             ApiResponse<List<MonitoredFolderDetailDTO>> localVarResponse = await MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdAsyncWithHttpInfo(monitoredFoldersId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the monitored folders details for a gover monitored folder id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitoredFoldersId"></param>
        /// <returns>Task of ApiResponse (List&lt;MonitoredFolderDetailDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MonitoredFolderDetailDTO>>> MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdAsyncWithHttpInfo (string monitoredFoldersId)
        {
            // verify the required parameter 'monitoredFoldersId' is set
            if (monitoredFoldersId == null)
                throw new ApiException(400, "Missing required parameter 'monitoredFoldersId' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderId");

            var localVarPath = "/api/MonitoredFoldersDetails/{monitoredFoldersId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (monitoredFoldersId != null) localVarPathParams.Add("monitoredFoldersId", this.Configuration.ApiClient.ParameterToString(monitoredFoldersId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MonitoredFolderDetailDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MonitoredFolderDetailDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MonitoredFolderDetailDTO>)));
        }

        /// <summary>
        /// This call insert new monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MonitoredFolderDetailDTO</returns>
        public MonitoredFolderDetailDTO MonitoredFoldersDetailsMonitoredFoldersDetailInsert (MonitoredFolderDetailDTO body)
        {
             ApiResponse<MonitoredFolderDetailDTO> localVarResponse = MonitoredFoldersDetailsMonitoredFoldersDetailInsertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call insert new monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MonitoredFolderDetailDTO</returns>
        public ApiResponse< MonitoredFolderDetailDTO > MonitoredFoldersDetailsMonitoredFoldersDetailInsertWithHttpInfo (MonitoredFolderDetailDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");

            var localVarPath = "/api/MonitoredFoldersDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoredFoldersDetailsMonitoredFoldersDetailInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MonitoredFolderDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MonitoredFolderDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MonitoredFolderDetailDTO)));
        }

        /// <summary>
        /// This call insert new monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MonitoredFolderDetailDTO</returns>
        public async System.Threading.Tasks.Task<MonitoredFolderDetailDTO> MonitoredFoldersDetailsMonitoredFoldersDetailInsertAsync (MonitoredFolderDetailDTO body)
        {
             ApiResponse<MonitoredFolderDetailDTO> localVarResponse = await MonitoredFoldersDetailsMonitoredFoldersDetailInsertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call insert new monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MonitoredFolderDetailDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MonitoredFolderDetailDTO>> MonitoredFoldersDetailsMonitoredFoldersDetailInsertAsyncWithHttpInfo (MonitoredFolderDetailDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");

            var localVarPath = "/api/MonitoredFoldersDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoredFoldersDetailsMonitoredFoldersDetailInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MonitoredFolderDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MonitoredFolderDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MonitoredFolderDetailDTO)));
        }

        /// <summary>
        /// This call insert new monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="monitoredFolderId"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="position"></param>
        /// <param name="fieldName"></param>
        /// <param name="fieldKind"></param>
        /// <returns>MonitoredFolderDetailDTO</returns>
        public MonitoredFolderDetailDTO MonitoredFoldersDetailsMonitoredFoldersDetailInsert (string id, string monitoredFolderId, int? from, int? to, int? position, string fieldName, int? fieldKind)
        {
             ApiResponse<MonitoredFolderDetailDTO> localVarResponse = MonitoredFoldersDetailsMonitoredFoldersDetailInsertWithHttpInfo(id, monitoredFolderId, from, to, position, fieldName, fieldKind);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call insert new monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="monitoredFolderId"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="position"></param>
        /// <param name="fieldName"></param>
        /// <param name="fieldKind"></param>
        /// <returns>ApiResponse of MonitoredFolderDetailDTO</returns>
        public ApiResponse< MonitoredFolderDetailDTO > MonitoredFoldersDetailsMonitoredFoldersDetailInsertWithHttpInfo (string id, string monitoredFolderId, int? from, int? to, int? position, string fieldName, int? fieldKind)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'monitoredFolderId' is set
            if (monitoredFolderId == null)
                throw new ApiException(400, "Missing required parameter 'monitoredFolderId' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'position' is set
            if (position == null)
                throw new ApiException(400, "Missing required parameter 'position' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'fieldKind' is set
            if (fieldKind == null)
                throw new ApiException(400, "Missing required parameter 'fieldKind' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");

            var localVarPath = "/api/MonitoredFoldersDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (monitoredFolderId != null) localVarFormParams.Add("monitoredFolderId", this.Configuration.ApiClient.ParameterToString(monitoredFolderId)); // form parameter
            if (from != null) localVarFormParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (position != null) localVarFormParams.Add("position", this.Configuration.ApiClient.ParameterToString(position)); // form parameter
            if (fieldName != null) localVarFormParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // form parameter
            if (fieldKind != null) localVarFormParams.Add("fieldKind", this.Configuration.ApiClient.ParameterToString(fieldKind)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoredFoldersDetailsMonitoredFoldersDetailInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MonitoredFolderDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MonitoredFolderDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MonitoredFolderDetailDTO)));
        }

        /// <summary>
        /// This call insert new monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="monitoredFolderId"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="position"></param>
        /// <param name="fieldName"></param>
        /// <param name="fieldKind"></param>
        /// <returns>Task of MonitoredFolderDetailDTO</returns>
        public async System.Threading.Tasks.Task<MonitoredFolderDetailDTO> MonitoredFoldersDetailsMonitoredFoldersDetailInsertAsync (string id, string monitoredFolderId, int? from, int? to, int? position, string fieldName, int? fieldKind)
        {
             ApiResponse<MonitoredFolderDetailDTO> localVarResponse = await MonitoredFoldersDetailsMonitoredFoldersDetailInsertAsyncWithHttpInfo(id, monitoredFolderId, from, to, position, fieldName, fieldKind);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call insert new monitored folders detail 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="monitoredFolderId"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="position"></param>
        /// <param name="fieldName"></param>
        /// <param name="fieldKind"></param>
        /// <returns>Task of ApiResponse (MonitoredFolderDetailDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MonitoredFolderDetailDTO>> MonitoredFoldersDetailsMonitoredFoldersDetailInsertAsyncWithHttpInfo (string id, string monitoredFolderId, int? from, int? to, int? position, string fieldName, int? fieldKind)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'monitoredFolderId' is set
            if (monitoredFolderId == null)
                throw new ApiException(400, "Missing required parameter 'monitoredFolderId' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'position' is set
            if (position == null)
                throw new ApiException(400, "Missing required parameter 'position' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");
            // verify the required parameter 'fieldKind' is set
            if (fieldKind == null)
                throw new ApiException(400, "Missing required parameter 'fieldKind' when calling MonitoredFoldersDetailsApi->MonitoredFoldersDetailsMonitoredFoldersDetailInsert");

            var localVarPath = "/api/MonitoredFoldersDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (monitoredFolderId != null) localVarFormParams.Add("monitoredFolderId", this.Configuration.ApiClient.ParameterToString(monitoredFolderId)); // form parameter
            if (from != null) localVarFormParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (position != null) localVarFormParams.Add("position", this.Configuration.ApiClient.ParameterToString(position)); // form parameter
            if (fieldName != null) localVarFormParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // form parameter
            if (fieldKind != null) localVarFormParams.Add("fieldKind", this.Configuration.ApiClient.ParameterToString(fieldKind)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoredFoldersDetailsMonitoredFoldersDetailInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MonitoredFolderDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MonitoredFolderDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MonitoredFolderDetailDTO)));
        }

    }
}
