/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IQueueApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call checks if to delete a queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>bool?</returns>
        bool? QueueAdminDeleteQueue (string queueId);

        /// <summary>
        /// This call checks if to delete a queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> QueueAdminDeleteQueueWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>List&lt;QueueAggregationInfoDto&gt;</returns>
        List<QueueAggregationInfoDto> QueueAdminGetQueueAggregationList (GetQueueInfoDto body);

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>ApiResponse of List&lt;QueueAggregationInfoDto&gt;</returns>
        ApiResponse<List<QueueAggregationInfoDto>> QueueAdminGetQueueAggregationListWithHttpInfo (GetQueueInfoDto body);
        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>List&lt;QueueAggregationInfoDto&gt;</returns>
        List<QueueAggregationInfoDto> QueueAdminGetQueueAggregationList (DateTime? dateFrom, string typeFullName, int? startItem, int? count);

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of List&lt;QueueAggregationInfoDto&gt;</returns>
        ApiResponse<List<QueueAggregationInfoDto>> QueueAdminGetQueueAggregationListWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count);
        /// <summary>
        /// This call returns the specific queue aggregated information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueAggregationInfoDto</returns>
        QueueAggregationInfoDto QueueAdminGetQueueAggregationList_0 (string queueId);

        /// <summary>
        /// This call returns the specific queue aggregated information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueAggregationInfoDto</returns>
        ApiResponse<QueueAggregationInfoDto> QueueAdminGetQueueAggregationList_0WithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the end job information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueJobInfoDto</returns>
        QueueJobInfoDto QueueAdminGetQueueEndJobInfo (string queueId);

        /// <summary>
        /// This call returns the end job information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueJobInfoDto</returns>
        ApiResponse<QueueJobInfoDto> QueueAdminGetQueueEndJobInfoWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the job information list (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        List<QueueJobInfoDto> QueueAdminGetQueueJobInfo (GetQueueJobInfoDto body, string queueId);

        /// <summary>
        /// This call returns the job information list (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        ApiResponse<List<QueueJobInfoDto>> QueueAdminGetQueueJobInfoWithHttpInfo (GetQueueJobInfoDto body, string queueId);
        /// <summary>
        /// This call returns the job information list (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        List<QueueJobInfoDto> QueueAdminGetQueueJobInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);

        /// <summary>
        /// This call returns the job information list (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        ApiResponse<List<QueueJobInfoDto>> QueueAdminGetQueueJobInfoWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);
        /// <summary>
        /// This call returns all queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        List<QueueJobInfoDto> QueueAdminGetQueueList (GetQueueInfoDto body);

        /// <summary>
        /// This call returns all queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        ApiResponse<List<QueueJobInfoDto>> QueueAdminGetQueueListWithHttpInfo (GetQueueInfoDto body);
        /// <summary>
        /// This call returns all queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        List<QueueJobInfoDto> QueueAdminGetQueueList (DateTime? dateFrom, string typeFullName, int? startItem, int? count);

        /// <summary>
        /// This call returns all queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        ApiResponse<List<QueueJobInfoDto>> QueueAdminGetQueueListWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count);
        /// <summary>
        /// This call returns a work job information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueJobInfoDto</returns>
        QueueJobInfoDto QueueAdminGetQueueWorkJobInfo (string queueId);

        /// <summary>
        /// This call returns a work job information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueJobInfoDto</returns>
        ApiResponse<QueueJobInfoDto> QueueAdminGetQueueWorkJobInfoWithHttpInfo (string queueId);
        /// <summary>
        /// This call checks if to delete a queue job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>bool?</returns>
        bool? QueueDeleteJob (string jobId);

        /// <summary>
        /// This call checks if to delete a queue job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> QueueDeleteJobWithHttpInfo (string jobId);
        /// <summary>
        /// This call checks if to delete a queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>bool?</returns>
        bool? QueueDeleteQueue (string queueId);

        /// <summary>
        /// This call checks if to delete a queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> QueueDeleteQueueWithHttpInfo (string queueId);
        /// <summary>
        /// This call checks if to equeue a job is in state Scheduled or Failed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>bool?</returns>
        bool? QueueEnqueuedJob (string jobId);

        /// <summary>
        /// This call checks if to equeue a job is in state Scheduled or Failed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> QueueEnqueuedJobWithHttpInfo (string jobId);
        /// <summary>
        /// This call returns a job info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>QueueJobInfoDto</returns>
        QueueJobInfoDto QueueGetJobInfo (string jobId);

        /// <summary>
        /// This call returns a job info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>ApiResponse of QueueJobInfoDto</returns>
        ApiResponse<QueueJobInfoDto> QueueGetJobInfoWithHttpInfo (string jobId);
        /// <summary>
        /// This call returns the queue aggregated information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>List&lt;QueueAggregationInfoDto&gt;</returns>
        List<QueueAggregationInfoDto> QueueGetQueueAggregationList (GetQueueInfoDto body);

        /// <summary>
        /// This call returns the queue aggregated information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>ApiResponse of List&lt;QueueAggregationInfoDto&gt;</returns>
        ApiResponse<List<QueueAggregationInfoDto>> QueueGetQueueAggregationListWithHttpInfo (GetQueueInfoDto body);
        /// <summary>
        /// This call returns the queue aggregated information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>List&lt;QueueAggregationInfoDto&gt;</returns>
        List<QueueAggregationInfoDto> QueueGetQueueAggregationList (DateTime? dateFrom, string typeFullName, int? startItem, int? count);

        /// <summary>
        /// This call returns the queue aggregated information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of List&lt;QueueAggregationInfoDto&gt;</returns>
        ApiResponse<List<QueueAggregationInfoDto>> QueueGetQueueAggregationListWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count);
        /// <summary>
        /// This call returns the specific queue aggregated information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueAggregationInfoDto</returns>
        QueueAggregationInfoDto QueueGetQueueAggregationList_0 (string queueId);

        /// <summary>
        /// This call returns the specific queue aggregated information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueAggregationInfoDto</returns>
        ApiResponse<QueueAggregationInfoDto> QueueGetQueueAggregationList_0WithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the specific queue aggregated status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueAggregationStatusInfoDto</returns>
        QueueAggregationStatusInfoDto QueueGetQueueAggregationStatusInfo (string queueId);

        /// <summary>
        /// This call returns the specific queue aggregated status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueAggregationStatusInfoDto</returns>
        ApiResponse<QueueAggregationStatusInfoDto> QueueGetQueueAggregationStatusInfoWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the end job information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueJobInfoDto</returns>
        QueueJobInfoDto QueueGetQueueEndJobInfo (string queueId);

        /// <summary>
        /// This call returns the end job information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueJobInfoDto</returns>
        ApiResponse<QueueJobInfoDto> QueueGetQueueEndJobInfoWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the job info information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        List<QueueJobInfoDto> QueueGetQueueJobInfo (GetQueueJobInfoDto body, string queueId);

        /// <summary>
        /// This call returns the job info information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        ApiResponse<List<QueueJobInfoDto>> QueueGetQueueJobInfoWithHttpInfo (GetQueueJobInfoDto body, string queueId);
        /// <summary>
        /// This call returns the job info information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        List<QueueJobInfoDto> QueueGetQueueJobInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);

        /// <summary>
        /// This call returns the job info information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        ApiResponse<List<QueueJobInfoDto>> QueueGetQueueJobInfoWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);
        /// <summary>
        /// Gets the job result of specific queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="queueId"></param>
        /// <returns>List&lt;JobResultDto&gt;</returns>
        List<JobResultDto> QueueGetQueueJobSucceededResultList (GetQueueJobInfoDto body, string queueId);

        /// <summary>
        /// Gets the job result of specific queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="queueId"></param>
        /// <returns>ApiResponse of List&lt;JobResultDto&gt;</returns>
        ApiResponse<List<JobResultDto>> QueueGetQueueJobSucceededResultListWithHttpInfo (GetQueueJobInfoDto body, string queueId);
        /// <summary>
        /// Gets the job result of specific queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId"></param>
        /// <returns>List&lt;JobResultDto&gt;</returns>
        List<JobResultDto> QueueGetQueueJobSucceededResultList (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);

        /// <summary>
        /// Gets the job result of specific queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId"></param>
        /// <returns>ApiResponse of List&lt;JobResultDto&gt;</returns>
        ApiResponse<List<JobResultDto>> QueueGetQueueJobSucceededResultListWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);
        /// <summary>
        /// This call returns all jobs of queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        List<QueueJobInfoDto> QueueGetQueueList (GetQueueInfoDto body);

        /// <summary>
        /// This call returns all jobs of queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        ApiResponse<List<QueueJobInfoDto>> QueueGetQueueListWithHttpInfo (GetQueueInfoDto body);
        /// <summary>
        /// This call returns all jobs of queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        List<QueueJobInfoDto> QueueGetQueueList (DateTime? dateFrom, string typeFullName, int? startItem, int? count);

        /// <summary>
        /// This call returns all jobs of queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        ApiResponse<List<QueueJobInfoDto>> QueueGetQueueListWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count);
        /// <summary>
        /// This call returns the counts of work item for a queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>int?</returns>
        int? QueueGetQueueWorkItemCount (string queueId);

        /// <summary>
        /// This call returns the counts of work item for a queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> QueueGetQueueWorkItemCountWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the counts how many work item jobs left
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>long?</returns>
        long? QueueGetQueueWorkItemLeftCount (string queueId);

        /// <summary>
        /// This call returns the counts how many work item jobs left
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> QueueGetQueueWorkItemLeftCountWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns a work job information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueJobInfoDto</returns>
        QueueJobInfoDto QueueGetQueueWorkJobInfo (string queueId);

        /// <summary>
        /// This call returns a work job information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueJobInfoDto</returns>
        ApiResponse<QueueJobInfoDto> QueueGetQueueWorkJobInfoWithHttpInfo (string queueId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call checks if to delete a queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> QueueAdminDeleteQueueAsync (string queueId);

        /// <summary>
        /// This call checks if to delete a queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> QueueAdminDeleteQueueAsyncWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of List&lt;QueueAggregationInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueAggregationInfoDto>> QueueAdminGetQueueAggregationListAsync (GetQueueInfoDto body);

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of ApiResponse (List&lt;QueueAggregationInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueAggregationInfoDto>>> QueueAdminGetQueueAggregationListAsyncWithHttpInfo (GetQueueInfoDto body);
        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of List&lt;QueueAggregationInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueAggregationInfoDto>> QueueAdminGetQueueAggregationListAsync (DateTime? dateFrom, string typeFullName, int? startItem, int? count);

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (List&lt;QueueAggregationInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueAggregationInfoDto>>> QueueAdminGetQueueAggregationListAsyncWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count);
        /// <summary>
        /// This call returns the specific queue aggregated information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueAggregationInfoDto</returns>
        System.Threading.Tasks.Task<QueueAggregationInfoDto> QueueAdminGetQueueAggregationList_0Async (string queueId);

        /// <summary>
        /// This call returns the specific queue aggregated information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueAggregationInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueAggregationInfoDto>> QueueAdminGetQueueAggregationList_0AsyncWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the end job information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueJobInfoDto</returns>
        System.Threading.Tasks.Task<QueueJobInfoDto> QueueAdminGetQueueEndJobInfoAsync (string queueId);

        /// <summary>
        /// This call returns the end job information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueJobInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueJobInfoDto>> QueueAdminGetQueueEndJobInfoAsyncWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the job information list (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueAdminGetQueueJobInfoAsync (GetQueueJobInfoDto body, string queueId);

        /// <summary>
        /// This call returns the job information list (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueAdminGetQueueJobInfoAsyncWithHttpInfo (GetQueueJobInfoDto body, string queueId);
        /// <summary>
        /// This call returns the job information list (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueAdminGetQueueJobInfoAsync (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);

        /// <summary>
        /// This call returns the job information list (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueAdminGetQueueJobInfoAsyncWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);
        /// <summary>
        /// This call returns all queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueAdminGetQueueListAsync (GetQueueInfoDto body);

        /// <summary>
        /// This call returns all queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueAdminGetQueueListAsyncWithHttpInfo (GetQueueInfoDto body);
        /// <summary>
        /// This call returns all queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueAdminGetQueueListAsync (DateTime? dateFrom, string typeFullName, int? startItem, int? count);

        /// <summary>
        /// This call returns all queue (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueAdminGetQueueListAsyncWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count);
        /// <summary>
        /// This call returns a work job information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueJobInfoDto</returns>
        System.Threading.Tasks.Task<QueueJobInfoDto> QueueAdminGetQueueWorkJobInfoAsync (string queueId);

        /// <summary>
        /// This call returns a work job information (administrator required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueJobInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueJobInfoDto>> QueueAdminGetQueueWorkJobInfoAsyncWithHttpInfo (string queueId);
        /// <summary>
        /// This call checks if to delete a queue job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> QueueDeleteJobAsync (string jobId);

        /// <summary>
        /// This call checks if to delete a queue job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> QueueDeleteJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// This call checks if to delete a queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> QueueDeleteQueueAsync (string queueId);

        /// <summary>
        /// This call checks if to delete a queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> QueueDeleteQueueAsyncWithHttpInfo (string queueId);
        /// <summary>
        /// This call checks if to equeue a job is in state Scheduled or Failed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> QueueEnqueuedJobAsync (string jobId);

        /// <summary>
        /// This call checks if to equeue a job is in state Scheduled or Failed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> QueueEnqueuedJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// This call returns a job info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of QueueJobInfoDto</returns>
        System.Threading.Tasks.Task<QueueJobInfoDto> QueueGetJobInfoAsync (string jobId);

        /// <summary>
        /// This call returns a job info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of ApiResponse (QueueJobInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueJobInfoDto>> QueueGetJobInfoAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// This call returns the queue aggregated information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of List&lt;QueueAggregationInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueAggregationInfoDto>> QueueGetQueueAggregationListAsync (GetQueueInfoDto body);

        /// <summary>
        /// This call returns the queue aggregated information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of ApiResponse (List&lt;QueueAggregationInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueAggregationInfoDto>>> QueueGetQueueAggregationListAsyncWithHttpInfo (GetQueueInfoDto body);
        /// <summary>
        /// This call returns the queue aggregated information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of List&lt;QueueAggregationInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueAggregationInfoDto>> QueueGetQueueAggregationListAsync (DateTime? dateFrom, string typeFullName, int? startItem, int? count);

        /// <summary>
        /// This call returns the queue aggregated information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (List&lt;QueueAggregationInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueAggregationInfoDto>>> QueueGetQueueAggregationListAsyncWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count);
        /// <summary>
        /// This call returns the specific queue aggregated information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueAggregationInfoDto</returns>
        System.Threading.Tasks.Task<QueueAggregationInfoDto> QueueGetQueueAggregationList_0Async (string queueId);

        /// <summary>
        /// This call returns the specific queue aggregated information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueAggregationInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueAggregationInfoDto>> QueueGetQueueAggregationList_0AsyncWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the specific queue aggregated status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueAggregationStatusInfoDto</returns>
        System.Threading.Tasks.Task<QueueAggregationStatusInfoDto> QueueGetQueueAggregationStatusInfoAsync (string queueId);

        /// <summary>
        /// This call returns the specific queue aggregated status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueAggregationStatusInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueAggregationStatusInfoDto>> QueueGetQueueAggregationStatusInfoAsyncWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the end job information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueJobInfoDto</returns>
        System.Threading.Tasks.Task<QueueJobInfoDto> QueueGetQueueEndJobInfoAsync (string queueId);

        /// <summary>
        /// This call returns the end job information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueJobInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueJobInfoDto>> QueueGetQueueEndJobInfoAsyncWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the job info information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueGetQueueJobInfoAsync (GetQueueJobInfoDto body, string queueId);

        /// <summary>
        /// This call returns the job info information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueGetQueueJobInfoAsyncWithHttpInfo (GetQueueJobInfoDto body, string queueId);
        /// <summary>
        /// This call returns the job info information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueGetQueueJobInfoAsync (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);

        /// <summary>
        /// This call returns the job info information list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueGetQueueJobInfoAsyncWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);
        /// <summary>
        /// Gets the job result of specific queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="queueId"></param>
        /// <returns>Task of List&lt;JobResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<JobResultDto>> QueueGetQueueJobSucceededResultListAsync (GetQueueJobInfoDto body, string queueId);

        /// <summary>
        /// Gets the job result of specific queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="queueId"></param>
        /// <returns>Task of ApiResponse (List&lt;JobResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobResultDto>>> QueueGetQueueJobSucceededResultListAsyncWithHttpInfo (GetQueueJobInfoDto body, string queueId);
        /// <summary>
        /// Gets the job result of specific queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId"></param>
        /// <returns>Task of List&lt;JobResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<JobResultDto>> QueueGetQueueJobSucceededResultListAsync (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);

        /// <summary>
        /// Gets the job result of specific queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId"></param>
        /// <returns>Task of ApiResponse (List&lt;JobResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobResultDto>>> QueueGetQueueJobSucceededResultListAsyncWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId);
        /// <summary>
        /// This call returns all jobs of queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueGetQueueListAsync (GetQueueInfoDto body);

        /// <summary>
        /// This call returns all jobs of queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueGetQueueListAsyncWithHttpInfo (GetQueueInfoDto body);
        /// <summary>
        /// This call returns all jobs of queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueGetQueueListAsync (DateTime? dateFrom, string typeFullName, int? startItem, int? count);

        /// <summary>
        /// This call returns all jobs of queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueGetQueueListAsyncWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count);
        /// <summary>
        /// This call returns the counts of work item for a queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> QueueGetQueueWorkItemCountAsync (string queueId);

        /// <summary>
        /// This call returns the counts of work item for a queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> QueueGetQueueWorkItemCountAsyncWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns the counts how many work item jobs left
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> QueueGetQueueWorkItemLeftCountAsync (string queueId);

        /// <summary>
        /// This call returns the counts how many work item jobs left
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> QueueGetQueueWorkItemLeftCountAsyncWithHttpInfo (string queueId);
        /// <summary>
        /// This call returns a work job information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueJobInfoDto</returns>
        System.Threading.Tasks.Task<QueueJobInfoDto> QueueGetQueueWorkJobInfoAsync (string queueId);

        /// <summary>
        /// This call returns a work job information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueJobInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueJobInfoDto>> QueueGetQueueWorkJobInfoAsyncWithHttpInfo (string queueId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class QueueApi : IQueueApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueueApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueApi"/> class
        /// </summary>
        /// <returns></returns>
        public QueueApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QueueApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call checks if to delete a queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>bool?</returns>
        public bool? QueueAdminDeleteQueue (string queueId)
        {
             ApiResponse<bool?> localVarResponse = QueueAdminDeleteQueueWithHttpInfo(queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call checks if to delete a queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > QueueAdminDeleteQueueWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminDeleteQueue");

            var localVarPath = "/api/Queue/AdminQueue/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminDeleteQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if to delete a queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> QueueAdminDeleteQueueAsync (string queueId)
        {
             ApiResponse<bool?> localVarResponse = await QueueAdminDeleteQueueAsyncWithHttpInfo(queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call checks if to delete a queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> QueueAdminDeleteQueueAsyncWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminDeleteQueue");

            var localVarPath = "/api/Queue/AdminQueue/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminDeleteQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>List&lt;QueueAggregationInfoDto&gt;</returns>
        public List<QueueAggregationInfoDto> QueueAdminGetQueueAggregationList (GetQueueInfoDto body)
        {
             ApiResponse<List<QueueAggregationInfoDto>> localVarResponse = QueueAdminGetQueueAggregationListWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>ApiResponse of List&lt;QueueAggregationInfoDto&gt;</returns>
        public ApiResponse< List<QueueAggregationInfoDto> > QueueAdminGetQueueAggregationListWithHttpInfo (GetQueueInfoDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueAdminGetQueueAggregationList");

            var localVarPath = "/api/Queue/AdminGetQueueAggregatedList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueAggregationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueAggregationInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueAggregationInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueAggregationInfoDto>)));
        }

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of List&lt;QueueAggregationInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueAggregationInfoDto>> QueueAdminGetQueueAggregationListAsync (GetQueueInfoDto body)
        {
             ApiResponse<List<QueueAggregationInfoDto>> localVarResponse = await QueueAdminGetQueueAggregationListAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of ApiResponse (List&lt;QueueAggregationInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueAggregationInfoDto>>> QueueAdminGetQueueAggregationListAsyncWithHttpInfo (GetQueueInfoDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueAdminGetQueueAggregationList");

            var localVarPath = "/api/Queue/AdminGetQueueAggregatedList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueAggregationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueAggregationInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueAggregationInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueAggregationInfoDto>)));
        }

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>List&lt;QueueAggregationInfoDto&gt;</returns>
        public List<QueueAggregationInfoDto> QueueAdminGetQueueAggregationList (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
             ApiResponse<List<QueueAggregationInfoDto>> localVarResponse = QueueAdminGetQueueAggregationListWithHttpInfo(dateFrom, typeFullName, startItem, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of List&lt;QueueAggregationInfoDto&gt;</returns>
        public ApiResponse< List<QueueAggregationInfoDto> > QueueAdminGetQueueAggregationListWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling QueueApi->QueueAdminGetQueueAggregationList");
            // verify the required parameter 'typeFullName' is set
            if (typeFullName == null)
                throw new ApiException(400, "Missing required parameter 'typeFullName' when calling QueueApi->QueueAdminGetQueueAggregationList");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueAdminGetQueueAggregationList");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueAdminGetQueueAggregationList");

            var localVarPath = "/api/Queue/AdminGetQueueAggregatedList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarFormParams.Add("dateFrom", this.Configuration.ApiClient.ParameterToString(dateFrom)); // form parameter
            if (typeFullName != null) localVarFormParams.Add("typeFullName", this.Configuration.ApiClient.ParameterToString(typeFullName)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueAggregationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueAggregationInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueAggregationInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueAggregationInfoDto>)));
        }

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of List&lt;QueueAggregationInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueAggregationInfoDto>> QueueAdminGetQueueAggregationListAsync (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
             ApiResponse<List<QueueAggregationInfoDto>> localVarResponse = await QueueAdminGetQueueAggregationListAsyncWithHttpInfo(dateFrom, typeFullName, startItem, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the queue aggregated information list  (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (List&lt;QueueAggregationInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueAggregationInfoDto>>> QueueAdminGetQueueAggregationListAsyncWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling QueueApi->QueueAdminGetQueueAggregationList");
            // verify the required parameter 'typeFullName' is set
            if (typeFullName == null)
                throw new ApiException(400, "Missing required parameter 'typeFullName' when calling QueueApi->QueueAdminGetQueueAggregationList");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueAdminGetQueueAggregationList");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueAdminGetQueueAggregationList");

            var localVarPath = "/api/Queue/AdminGetQueueAggregatedList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarFormParams.Add("dateFrom", this.Configuration.ApiClient.ParameterToString(dateFrom)); // form parameter
            if (typeFullName != null) localVarFormParams.Add("typeFullName", this.Configuration.ApiClient.ParameterToString(typeFullName)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueAggregationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueAggregationInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueAggregationInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueAggregationInfoDto>)));
        }

        /// <summary>
        /// This call returns the specific queue aggregated information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueAggregationInfoDto</returns>
        public QueueAggregationInfoDto QueueAdminGetQueueAggregationList_0 (string queueId)
        {
             ApiResponse<QueueAggregationInfoDto> localVarResponse = QueueAdminGetQueueAggregationList_0WithHttpInfo(queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the specific queue aggregated information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueAggregationInfoDto</returns>
        public ApiResponse< QueueAggregationInfoDto > QueueAdminGetQueueAggregationList_0WithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminGetQueueAggregationList_0");

            var localVarPath = "/api/Queue/AdminQueueAggregated/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueAggregationList_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueAggregationInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueAggregationInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueAggregationInfoDto)));
        }

        /// <summary>
        /// This call returns the specific queue aggregated information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueAggregationInfoDto</returns>
        public async System.Threading.Tasks.Task<QueueAggregationInfoDto> QueueAdminGetQueueAggregationList_0Async (string queueId)
        {
             ApiResponse<QueueAggregationInfoDto> localVarResponse = await QueueAdminGetQueueAggregationList_0AsyncWithHttpInfo(queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the specific queue aggregated information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueAggregationInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueAggregationInfoDto>> QueueAdminGetQueueAggregationList_0AsyncWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminGetQueueAggregationList_0");

            var localVarPath = "/api/Queue/AdminQueueAggregated/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueAggregationList_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueAggregationInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueAggregationInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueAggregationInfoDto)));
        }

        /// <summary>
        /// This call returns the end job information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueJobInfoDto</returns>
        public QueueJobInfoDto QueueAdminGetQueueEndJobInfo (string queueId)
        {
             ApiResponse<QueueJobInfoDto> localVarResponse = QueueAdminGetQueueEndJobInfoWithHttpInfo(queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the end job information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueJobInfoDto</returns>
        public ApiResponse< QueueJobInfoDto > QueueAdminGetQueueEndJobInfoWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminGetQueueEndJobInfo");

            var localVarPath = "/api/Queue/AdminEndJobInfo/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueEndJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueJobInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueJobInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueJobInfoDto)));
        }

        /// <summary>
        /// This call returns the end job information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueJobInfoDto</returns>
        public async System.Threading.Tasks.Task<QueueJobInfoDto> QueueAdminGetQueueEndJobInfoAsync (string queueId)
        {
             ApiResponse<QueueJobInfoDto> localVarResponse = await QueueAdminGetQueueEndJobInfoAsyncWithHttpInfo(queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the end job information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueJobInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueJobInfoDto>> QueueAdminGetQueueEndJobInfoAsyncWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminGetQueueEndJobInfo");

            var localVarPath = "/api/Queue/AdminEndJobInfo/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueEndJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueJobInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueJobInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueJobInfoDto)));
        }

        /// <summary>
        /// This call returns the job information list (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        public List<QueueJobInfoDto> QueueAdminGetQueueJobInfo (GetQueueJobInfoDto body, string queueId)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = QueueAdminGetQueueJobInfoWithHttpInfo(body, queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the job information list (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        public ApiResponse< List<QueueJobInfoDto> > QueueAdminGetQueueJobInfoWithHttpInfo (GetQueueJobInfoDto body, string queueId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueAdminGetQueueJobInfo");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminGetQueueJobInfo");

            var localVarPath = "/api/Queue/AdminGetQueueJobInfoList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns the job information list (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueAdminGetQueueJobInfoAsync (GetQueueJobInfoDto body, string queueId)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = await QueueAdminGetQueueJobInfoAsyncWithHttpInfo(body, queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the job information list (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueAdminGetQueueJobInfoAsyncWithHttpInfo (GetQueueJobInfoDto body, string queueId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueAdminGetQueueJobInfo");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminGetQueueJobInfo");

            var localVarPath = "/api/Queue/AdminGetQueueJobInfoList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns the job information list (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        public List<QueueJobInfoDto> QueueAdminGetQueueJobInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = QueueAdminGetQueueJobInfoWithHttpInfo(jobStateEnum, queueMethod, startItem, count, queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the job information list (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        public ApiResponse< List<QueueJobInfoDto> > QueueAdminGetQueueJobInfoWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
            // verify the required parameter 'jobStateEnum' is set
            if (jobStateEnum == null)
                throw new ApiException(400, "Missing required parameter 'jobStateEnum' when calling QueueApi->QueueAdminGetQueueJobInfo");
            // verify the required parameter 'queueMethod' is set
            if (queueMethod == null)
                throw new ApiException(400, "Missing required parameter 'queueMethod' when calling QueueApi->QueueAdminGetQueueJobInfo");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueAdminGetQueueJobInfo");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueAdminGetQueueJobInfo");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminGetQueueJobInfo");

            var localVarPath = "/api/Queue/AdminGetQueueJobInfoList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (jobStateEnum != null) localVarFormParams.Add("jobStateEnum", this.Configuration.ApiClient.ParameterToString(jobStateEnum)); // form parameter
            if (queueMethod != null) localVarFormParams.Add("queueMethod", this.Configuration.ApiClient.ParameterToString(queueMethod)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns the job information list (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueAdminGetQueueJobInfoAsync (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = await QueueAdminGetQueueJobInfoAsyncWithHttpInfo(jobStateEnum, queueMethod, startItem, count, queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the job information list (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueAdminGetQueueJobInfoAsyncWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
            // verify the required parameter 'jobStateEnum' is set
            if (jobStateEnum == null)
                throw new ApiException(400, "Missing required parameter 'jobStateEnum' when calling QueueApi->QueueAdminGetQueueJobInfo");
            // verify the required parameter 'queueMethod' is set
            if (queueMethod == null)
                throw new ApiException(400, "Missing required parameter 'queueMethod' when calling QueueApi->QueueAdminGetQueueJobInfo");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueAdminGetQueueJobInfo");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueAdminGetQueueJobInfo");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminGetQueueJobInfo");

            var localVarPath = "/api/Queue/AdminGetQueueJobInfoList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (jobStateEnum != null) localVarFormParams.Add("jobStateEnum", this.Configuration.ApiClient.ParameterToString(jobStateEnum)); // form parameter
            if (queueMethod != null) localVarFormParams.Add("queueMethod", this.Configuration.ApiClient.ParameterToString(queueMethod)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns all queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        public List<QueueJobInfoDto> QueueAdminGetQueueList (GetQueueInfoDto body)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = QueueAdminGetQueueListWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        public ApiResponse< List<QueueJobInfoDto> > QueueAdminGetQueueListWithHttpInfo (GetQueueInfoDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueAdminGetQueueList");

            var localVarPath = "/api/Queue/AdminGetQueueList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns all queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueAdminGetQueueListAsync (GetQueueInfoDto body)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = await QueueAdminGetQueueListAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueAdminGetQueueListAsyncWithHttpInfo (GetQueueInfoDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueAdminGetQueueList");

            var localVarPath = "/api/Queue/AdminGetQueueList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns all queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        public List<QueueJobInfoDto> QueueAdminGetQueueList (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = QueueAdminGetQueueListWithHttpInfo(dateFrom, typeFullName, startItem, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        public ApiResponse< List<QueueJobInfoDto> > QueueAdminGetQueueListWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling QueueApi->QueueAdminGetQueueList");
            // verify the required parameter 'typeFullName' is set
            if (typeFullName == null)
                throw new ApiException(400, "Missing required parameter 'typeFullName' when calling QueueApi->QueueAdminGetQueueList");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueAdminGetQueueList");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueAdminGetQueueList");

            var localVarPath = "/api/Queue/AdminGetQueueList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarFormParams.Add("dateFrom", this.Configuration.ApiClient.ParameterToString(dateFrom)); // form parameter
            if (typeFullName != null) localVarFormParams.Add("typeFullName", this.Configuration.ApiClient.ParameterToString(typeFullName)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns all queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueAdminGetQueueListAsync (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = await QueueAdminGetQueueListAsyncWithHttpInfo(dateFrom, typeFullName, startItem, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all queue (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueAdminGetQueueListAsyncWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling QueueApi->QueueAdminGetQueueList");
            // verify the required parameter 'typeFullName' is set
            if (typeFullName == null)
                throw new ApiException(400, "Missing required parameter 'typeFullName' when calling QueueApi->QueueAdminGetQueueList");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueAdminGetQueueList");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueAdminGetQueueList");

            var localVarPath = "/api/Queue/AdminGetQueueList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarFormParams.Add("dateFrom", this.Configuration.ApiClient.ParameterToString(dateFrom)); // form parameter
            if (typeFullName != null) localVarFormParams.Add("typeFullName", this.Configuration.ApiClient.ParameterToString(typeFullName)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns a work job information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueJobInfoDto</returns>
        public QueueJobInfoDto QueueAdminGetQueueWorkJobInfo (string queueId)
        {
             ApiResponse<QueueJobInfoDto> localVarResponse = QueueAdminGetQueueWorkJobInfoWithHttpInfo(queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a work job information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueJobInfoDto</returns>
        public ApiResponse< QueueJobInfoDto > QueueAdminGetQueueWorkJobInfoWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminGetQueueWorkJobInfo");

            var localVarPath = "/api/Queue/AdminWorkJobInfo/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueWorkJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueJobInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueJobInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueJobInfoDto)));
        }

        /// <summary>
        /// This call returns a work job information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueJobInfoDto</returns>
        public async System.Threading.Tasks.Task<QueueJobInfoDto> QueueAdminGetQueueWorkJobInfoAsync (string queueId)
        {
             ApiResponse<QueueJobInfoDto> localVarResponse = await QueueAdminGetQueueWorkJobInfoAsyncWithHttpInfo(queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a work job information (administrator required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueJobInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueJobInfoDto>> QueueAdminGetQueueWorkJobInfoAsyncWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueAdminGetQueueWorkJobInfo");

            var localVarPath = "/api/Queue/AdminWorkJobInfo/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueAdminGetQueueWorkJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueJobInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueJobInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueJobInfoDto)));
        }

        /// <summary>
        /// This call checks if to delete a queue job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>bool?</returns>
        public bool? QueueDeleteJob (string jobId)
        {
             ApiResponse<bool?> localVarResponse = QueueDeleteJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call checks if to delete a queue job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > QueueDeleteJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling QueueApi->QueueDeleteJob");

            var localVarPath = "/api/Queue/Job/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueDeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if to delete a queue job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> QueueDeleteJobAsync (string jobId)
        {
             ApiResponse<bool?> localVarResponse = await QueueDeleteJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call checks if to delete a queue job 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> QueueDeleteJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling QueueApi->QueueDeleteJob");

            var localVarPath = "/api/Queue/Job/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueDeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if to delete a queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>bool?</returns>
        public bool? QueueDeleteQueue (string queueId)
        {
             ApiResponse<bool?> localVarResponse = QueueDeleteQueueWithHttpInfo(queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call checks if to delete a queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > QueueDeleteQueueWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueDeleteQueue");

            var localVarPath = "/api/Queue/Queue/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueDeleteQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if to delete a queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> QueueDeleteQueueAsync (string queueId)
        {
             ApiResponse<bool?> localVarResponse = await QueueDeleteQueueAsyncWithHttpInfo(queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call checks if to delete a queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> QueueDeleteQueueAsyncWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueDeleteQueue");

            var localVarPath = "/api/Queue/Queue/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueDeleteQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if to equeue a job is in state Scheduled or Failed 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>bool?</returns>
        public bool? QueueEnqueuedJob (string jobId)
        {
             ApiResponse<bool?> localVarResponse = QueueEnqueuedJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call checks if to equeue a job is in state Scheduled or Failed 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > QueueEnqueuedJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling QueueApi->QueueEnqueuedJob");

            var localVarPath = "/api/Queue/Enqueue/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueEnqueuedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks if to equeue a job is in state Scheduled or Failed 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> QueueEnqueuedJobAsync (string jobId)
        {
             ApiResponse<bool?> localVarResponse = await QueueEnqueuedJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call checks if to equeue a job is in state Scheduled or Failed 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> QueueEnqueuedJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling QueueApi->QueueEnqueuedJob");

            var localVarPath = "/api/Queue/Enqueue/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueEnqueuedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns a job info 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>QueueJobInfoDto</returns>
        public QueueJobInfoDto QueueGetJobInfo (string jobId)
        {
             ApiResponse<QueueJobInfoDto> localVarResponse = QueueGetJobInfoWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a job info 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>ApiResponse of QueueJobInfoDto</returns>
        public ApiResponse< QueueJobInfoDto > QueueGetJobInfoWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling QueueApi->QueueGetJobInfo");

            var localVarPath = "/api/Queue/JobInfo/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueJobInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueJobInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueJobInfoDto)));
        }

        /// <summary>
        /// This call returns a job info 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of QueueJobInfoDto</returns>
        public async System.Threading.Tasks.Task<QueueJobInfoDto> QueueGetJobInfoAsync (string jobId)
        {
             ApiResponse<QueueJobInfoDto> localVarResponse = await QueueGetJobInfoAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a job info 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job Identifier</param>
        /// <returns>Task of ApiResponse (QueueJobInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueJobInfoDto>> QueueGetJobInfoAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling QueueApi->QueueGetJobInfo");

            var localVarPath = "/api/Queue/JobInfo/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueJobInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueJobInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueJobInfoDto)));
        }

        /// <summary>
        /// This call returns the queue aggregated information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>List&lt;QueueAggregationInfoDto&gt;</returns>
        public List<QueueAggregationInfoDto> QueueGetQueueAggregationList (GetQueueInfoDto body)
        {
             ApiResponse<List<QueueAggregationInfoDto>> localVarResponse = QueueGetQueueAggregationListWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the queue aggregated information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>ApiResponse of List&lt;QueueAggregationInfoDto&gt;</returns>
        public ApiResponse< List<QueueAggregationInfoDto> > QueueGetQueueAggregationListWithHttpInfo (GetQueueInfoDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueGetQueueAggregationList");

            var localVarPath = "/api/Queue/GetQueueAggregatedList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueAggregationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueAggregationInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueAggregationInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueAggregationInfoDto>)));
        }

        /// <summary>
        /// This call returns the queue aggregated information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of List&lt;QueueAggregationInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueAggregationInfoDto>> QueueGetQueueAggregationListAsync (GetQueueInfoDto body)
        {
             ApiResponse<List<QueueAggregationInfoDto>> localVarResponse = await QueueGetQueueAggregationListAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the queue aggregated information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of ApiResponse (List&lt;QueueAggregationInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueAggregationInfoDto>>> QueueGetQueueAggregationListAsyncWithHttpInfo (GetQueueInfoDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueGetQueueAggregationList");

            var localVarPath = "/api/Queue/GetQueueAggregatedList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueAggregationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueAggregationInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueAggregationInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueAggregationInfoDto>)));
        }

        /// <summary>
        /// This call returns the queue aggregated information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>List&lt;QueueAggregationInfoDto&gt;</returns>
        public List<QueueAggregationInfoDto> QueueGetQueueAggregationList (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
             ApiResponse<List<QueueAggregationInfoDto>> localVarResponse = QueueGetQueueAggregationListWithHttpInfo(dateFrom, typeFullName, startItem, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the queue aggregated information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of List&lt;QueueAggregationInfoDto&gt;</returns>
        public ApiResponse< List<QueueAggregationInfoDto> > QueueGetQueueAggregationListWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling QueueApi->QueueGetQueueAggregationList");
            // verify the required parameter 'typeFullName' is set
            if (typeFullName == null)
                throw new ApiException(400, "Missing required parameter 'typeFullName' when calling QueueApi->QueueGetQueueAggregationList");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueGetQueueAggregationList");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueGetQueueAggregationList");

            var localVarPath = "/api/Queue/GetQueueAggregatedList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarFormParams.Add("dateFrom", this.Configuration.ApiClient.ParameterToString(dateFrom)); // form parameter
            if (typeFullName != null) localVarFormParams.Add("typeFullName", this.Configuration.ApiClient.ParameterToString(typeFullName)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueAggregationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueAggregationInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueAggregationInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueAggregationInfoDto>)));
        }

        /// <summary>
        /// This call returns the queue aggregated information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of List&lt;QueueAggregationInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueAggregationInfoDto>> QueueGetQueueAggregationListAsync (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
             ApiResponse<List<QueueAggregationInfoDto>> localVarResponse = await QueueGetQueueAggregationListAsyncWithHttpInfo(dateFrom, typeFullName, startItem, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the queue aggregated information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (List&lt;QueueAggregationInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueAggregationInfoDto>>> QueueGetQueueAggregationListAsyncWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling QueueApi->QueueGetQueueAggregationList");
            // verify the required parameter 'typeFullName' is set
            if (typeFullName == null)
                throw new ApiException(400, "Missing required parameter 'typeFullName' when calling QueueApi->QueueGetQueueAggregationList");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueGetQueueAggregationList");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueGetQueueAggregationList");

            var localVarPath = "/api/Queue/GetQueueAggregatedList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarFormParams.Add("dateFrom", this.Configuration.ApiClient.ParameterToString(dateFrom)); // form parameter
            if (typeFullName != null) localVarFormParams.Add("typeFullName", this.Configuration.ApiClient.ParameterToString(typeFullName)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueAggregationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueAggregationInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueAggregationInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueAggregationInfoDto>)));
        }

        /// <summary>
        /// This call returns the specific queue aggregated information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueAggregationInfoDto</returns>
        public QueueAggregationInfoDto QueueGetQueueAggregationList_0 (string queueId)
        {
             ApiResponse<QueueAggregationInfoDto> localVarResponse = QueueGetQueueAggregationList_0WithHttpInfo(queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the specific queue aggregated information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueAggregationInfoDto</returns>
        public ApiResponse< QueueAggregationInfoDto > QueueGetQueueAggregationList_0WithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueAggregationList_0");

            var localVarPath = "/api/Queue/QueueAggregated/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueAggregationList_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueAggregationInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueAggregationInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueAggregationInfoDto)));
        }

        /// <summary>
        /// This call returns the specific queue aggregated information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueAggregationInfoDto</returns>
        public async System.Threading.Tasks.Task<QueueAggregationInfoDto> QueueGetQueueAggregationList_0Async (string queueId)
        {
             ApiResponse<QueueAggregationInfoDto> localVarResponse = await QueueGetQueueAggregationList_0AsyncWithHttpInfo(queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the specific queue aggregated information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueAggregationInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueAggregationInfoDto>> QueueGetQueueAggregationList_0AsyncWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueAggregationList_0");

            var localVarPath = "/api/Queue/QueueAggregated/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueAggregationList_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueAggregationInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueAggregationInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueAggregationInfoDto)));
        }

        /// <summary>
        /// This call returns the specific queue aggregated status 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueAggregationStatusInfoDto</returns>
        public QueueAggregationStatusInfoDto QueueGetQueueAggregationStatusInfo (string queueId)
        {
             ApiResponse<QueueAggregationStatusInfoDto> localVarResponse = QueueGetQueueAggregationStatusInfoWithHttpInfo(queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the specific queue aggregated status 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueAggregationStatusInfoDto</returns>
        public ApiResponse< QueueAggregationStatusInfoDto > QueueGetQueueAggregationStatusInfoWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueAggregationStatusInfo");

            var localVarPath = "/api/Queue/QueueAggregationStatusInfo/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueAggregationStatusInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueAggregationStatusInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueAggregationStatusInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueAggregationStatusInfoDto)));
        }

        /// <summary>
        /// This call returns the specific queue aggregated status 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueAggregationStatusInfoDto</returns>
        public async System.Threading.Tasks.Task<QueueAggregationStatusInfoDto> QueueGetQueueAggregationStatusInfoAsync (string queueId)
        {
             ApiResponse<QueueAggregationStatusInfoDto> localVarResponse = await QueueGetQueueAggregationStatusInfoAsyncWithHttpInfo(queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the specific queue aggregated status 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueAggregationStatusInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueAggregationStatusInfoDto>> QueueGetQueueAggregationStatusInfoAsyncWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueAggregationStatusInfo");

            var localVarPath = "/api/Queue/QueueAggregationStatusInfo/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueAggregationStatusInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueAggregationStatusInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueAggregationStatusInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueAggregationStatusInfoDto)));
        }

        /// <summary>
        /// This call returns the end job information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueJobInfoDto</returns>
        public QueueJobInfoDto QueueGetQueueEndJobInfo (string queueId)
        {
             ApiResponse<QueueJobInfoDto> localVarResponse = QueueGetQueueEndJobInfoWithHttpInfo(queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the end job information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueJobInfoDto</returns>
        public ApiResponse< QueueJobInfoDto > QueueGetQueueEndJobInfoWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueEndJobInfo");

            var localVarPath = "/api/Queue/EndJobInfo/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueEndJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueJobInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueJobInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueJobInfoDto)));
        }

        /// <summary>
        /// This call returns the end job information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueJobInfoDto</returns>
        public async System.Threading.Tasks.Task<QueueJobInfoDto> QueueGetQueueEndJobInfoAsync (string queueId)
        {
             ApiResponse<QueueJobInfoDto> localVarResponse = await QueueGetQueueEndJobInfoAsyncWithHttpInfo(queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the end job information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueJobInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueJobInfoDto>> QueueGetQueueEndJobInfoAsyncWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueEndJobInfo");

            var localVarPath = "/api/Queue/EndJobInfo/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueEndJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueJobInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueJobInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueJobInfoDto)));
        }

        /// <summary>
        /// This call returns the job info information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        public List<QueueJobInfoDto> QueueGetQueueJobInfo (GetQueueJobInfoDto body, string queueId)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = QueueGetQueueJobInfoWithHttpInfo(body, queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the job info information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        public ApiResponse< List<QueueJobInfoDto> > QueueGetQueueJobInfoWithHttpInfo (GetQueueJobInfoDto body, string queueId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueGetQueueJobInfo");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueJobInfo");

            var localVarPath = "/api/Queue/GetQueueJobInfoList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns the job info information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueGetQueueJobInfoAsync (GetQueueJobInfoDto body, string queueId)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = await QueueGetQueueJobInfoAsyncWithHttpInfo(body, queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the job info information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Job Information</param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueGetQueueJobInfoAsyncWithHttpInfo (GetQueueJobInfoDto body, string queueId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueGetQueueJobInfo");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueJobInfo");

            var localVarPath = "/api/Queue/GetQueueJobInfoList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns the job info information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        public List<QueueJobInfoDto> QueueGetQueueJobInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = QueueGetQueueJobInfoWithHttpInfo(jobStateEnum, queueMethod, startItem, count, queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the job info information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        public ApiResponse< List<QueueJobInfoDto> > QueueGetQueueJobInfoWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
            // verify the required parameter 'jobStateEnum' is set
            if (jobStateEnum == null)
                throw new ApiException(400, "Missing required parameter 'jobStateEnum' when calling QueueApi->QueueGetQueueJobInfo");
            // verify the required parameter 'queueMethod' is set
            if (queueMethod == null)
                throw new ApiException(400, "Missing required parameter 'queueMethod' when calling QueueApi->QueueGetQueueJobInfo");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueGetQueueJobInfo");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueGetQueueJobInfo");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueJobInfo");

            var localVarPath = "/api/Queue/GetQueueJobInfoList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (jobStateEnum != null) localVarFormParams.Add("jobStateEnum", this.Configuration.ApiClient.ParameterToString(jobStateEnum)); // form parameter
            if (queueMethod != null) localVarFormParams.Add("queueMethod", this.Configuration.ApiClient.ParameterToString(queueMethod)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns the job info information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueGetQueueJobInfoAsync (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = await QueueGetQueueJobInfoAsyncWithHttpInfo(jobStateEnum, queueMethod, startItem, count, queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the job info information list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueGetQueueJobInfoAsyncWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
            // verify the required parameter 'jobStateEnum' is set
            if (jobStateEnum == null)
                throw new ApiException(400, "Missing required parameter 'jobStateEnum' when calling QueueApi->QueueGetQueueJobInfo");
            // verify the required parameter 'queueMethod' is set
            if (queueMethod == null)
                throw new ApiException(400, "Missing required parameter 'queueMethod' when calling QueueApi->QueueGetQueueJobInfo");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueGetQueueJobInfo");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueGetQueueJobInfo");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueJobInfo");

            var localVarPath = "/api/Queue/GetQueueJobInfoList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (jobStateEnum != null) localVarFormParams.Add("jobStateEnum", this.Configuration.ApiClient.ParameterToString(jobStateEnum)); // form parameter
            if (queueMethod != null) localVarFormParams.Add("queueMethod", this.Configuration.ApiClient.ParameterToString(queueMethod)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// Gets the job result of specific queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="queueId"></param>
        /// <returns>List&lt;JobResultDto&gt;</returns>
        public List<JobResultDto> QueueGetQueueJobSucceededResultList (GetQueueJobInfoDto body, string queueId)
        {
             ApiResponse<List<JobResultDto>> localVarResponse = QueueGetQueueJobSucceededResultListWithHttpInfo(body, queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the job result of specific queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="queueId"></param>
        /// <returns>ApiResponse of List&lt;JobResultDto&gt;</returns>
        public ApiResponse< List<JobResultDto> > QueueGetQueueJobSucceededResultListWithHttpInfo (GetQueueJobInfoDto body, string queueId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueGetQueueJobSucceededResultList");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueJobSucceededResultList");

            var localVarPath = "/api/Queue/GetQueueJobSucceededResultList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueJobSucceededResultList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobResultDto>)));
        }

        /// <summary>
        /// Gets the job result of specific queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="queueId"></param>
        /// <returns>Task of List&lt;JobResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobResultDto>> QueueGetQueueJobSucceededResultListAsync (GetQueueJobInfoDto body, string queueId)
        {
             ApiResponse<List<JobResultDto>> localVarResponse = await QueueGetQueueJobSucceededResultListAsyncWithHttpInfo(body, queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the job result of specific queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="queueId"></param>
        /// <returns>Task of ApiResponse (List&lt;JobResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobResultDto>>> QueueGetQueueJobSucceededResultListAsyncWithHttpInfo (GetQueueJobInfoDto body, string queueId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueGetQueueJobSucceededResultList");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueJobSucceededResultList");

            var localVarPath = "/api/Queue/GetQueueJobSucceededResultList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueJobSucceededResultList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobResultDto>)));
        }

        /// <summary>
        /// Gets the job result of specific queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId"></param>
        /// <returns>List&lt;JobResultDto&gt;</returns>
        public List<JobResultDto> QueueGetQueueJobSucceededResultList (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
             ApiResponse<List<JobResultDto>> localVarResponse = QueueGetQueueJobSucceededResultListWithHttpInfo(jobStateEnum, queueMethod, startItem, count, queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the job result of specific queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId"></param>
        /// <returns>ApiResponse of List&lt;JobResultDto&gt;</returns>
        public ApiResponse< List<JobResultDto> > QueueGetQueueJobSucceededResultListWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
            // verify the required parameter 'jobStateEnum' is set
            if (jobStateEnum == null)
                throw new ApiException(400, "Missing required parameter 'jobStateEnum' when calling QueueApi->QueueGetQueueJobSucceededResultList");
            // verify the required parameter 'queueMethod' is set
            if (queueMethod == null)
                throw new ApiException(400, "Missing required parameter 'queueMethod' when calling QueueApi->QueueGetQueueJobSucceededResultList");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueGetQueueJobSucceededResultList");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueGetQueueJobSucceededResultList");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueJobSucceededResultList");

            var localVarPath = "/api/Queue/GetQueueJobSucceededResultList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (jobStateEnum != null) localVarFormParams.Add("jobStateEnum", this.Configuration.ApiClient.ParameterToString(jobStateEnum)); // form parameter
            if (queueMethod != null) localVarFormParams.Add("queueMethod", this.Configuration.ApiClient.ParameterToString(queueMethod)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueJobSucceededResultList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobResultDto>)));
        }

        /// <summary>
        /// Gets the job result of specific queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId"></param>
        /// <returns>Task of List&lt;JobResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobResultDto>> QueueGetQueueJobSucceededResultListAsync (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
             ApiResponse<List<JobResultDto>> localVarResponse = await QueueGetQueueJobSucceededResultListAsyncWithHttpInfo(jobStateEnum, queueMethod, startItem, count, queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the job result of specific queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobStateEnum"></param>
        /// <param name="queueMethod"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <param name="queueId"></param>
        /// <returns>Task of ApiResponse (List&lt;JobResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobResultDto>>> QueueGetQueueJobSucceededResultListAsyncWithHttpInfo (int? jobStateEnum, int? queueMethod, int? startItem, int? count, string queueId)
        {
            // verify the required parameter 'jobStateEnum' is set
            if (jobStateEnum == null)
                throw new ApiException(400, "Missing required parameter 'jobStateEnum' when calling QueueApi->QueueGetQueueJobSucceededResultList");
            // verify the required parameter 'queueMethod' is set
            if (queueMethod == null)
                throw new ApiException(400, "Missing required parameter 'queueMethod' when calling QueueApi->QueueGetQueueJobSucceededResultList");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueGetQueueJobSucceededResultList");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueGetQueueJobSucceededResultList");
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueJobSucceededResultList");

            var localVarPath = "/api/Queue/GetQueueJobSucceededResultList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queueId", queueId)); // query parameter
            if (jobStateEnum != null) localVarFormParams.Add("jobStateEnum", this.Configuration.ApiClient.ParameterToString(jobStateEnum)); // form parameter
            if (queueMethod != null) localVarFormParams.Add("queueMethod", this.Configuration.ApiClient.ParameterToString(queueMethod)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueJobSucceededResultList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobResultDto>)));
        }

        /// <summary>
        /// This call returns all jobs of queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        public List<QueueJobInfoDto> QueueGetQueueList (GetQueueInfoDto body)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = QueueGetQueueListWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all jobs of queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        public ApiResponse< List<QueueJobInfoDto> > QueueGetQueueListWithHttpInfo (GetQueueInfoDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueGetQueueList");

            var localVarPath = "/api/Queue/GetQueueList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns all jobs of queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueGetQueueListAsync (GetQueueInfoDto body)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = await QueueGetQueueListAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all jobs of queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Queue information</param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueGetQueueListAsyncWithHttpInfo (GetQueueInfoDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueGetQueueList");

            var localVarPath = "/api/Queue/GetQueueList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns all jobs of queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>List&lt;QueueJobInfoDto&gt;</returns>
        public List<QueueJobInfoDto> QueueGetQueueList (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = QueueGetQueueListWithHttpInfo(dateFrom, typeFullName, startItem, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all jobs of queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of List&lt;QueueJobInfoDto&gt;</returns>
        public ApiResponse< List<QueueJobInfoDto> > QueueGetQueueListWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling QueueApi->QueueGetQueueList");
            // verify the required parameter 'typeFullName' is set
            if (typeFullName == null)
                throw new ApiException(400, "Missing required parameter 'typeFullName' when calling QueueApi->QueueGetQueueList");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueGetQueueList");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueGetQueueList");

            var localVarPath = "/api/Queue/GetQueueList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarFormParams.Add("dateFrom", this.Configuration.ApiClient.ParameterToString(dateFrom)); // form parameter
            if (typeFullName != null) localVarFormParams.Add("typeFullName", this.Configuration.ApiClient.ParameterToString(typeFullName)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns all jobs of queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of List&lt;QueueJobInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueueJobInfoDto>> QueueGetQueueListAsync (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
             ApiResponse<List<QueueJobInfoDto>> localVarResponse = await QueueGetQueueListAsyncWithHttpInfo(dateFrom, typeFullName, startItem, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all jobs of queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom"></param>
        /// <param name="typeFullName"></param>
        /// <param name="startItem"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (List&lt;QueueJobInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueueJobInfoDto>>> QueueGetQueueListAsyncWithHttpInfo (DateTime? dateFrom, string typeFullName, int? startItem, int? count)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling QueueApi->QueueGetQueueList");
            // verify the required parameter 'typeFullName' is set
            if (typeFullName == null)
                throw new ApiException(400, "Missing required parameter 'typeFullName' when calling QueueApi->QueueGetQueueList");
            // verify the required parameter 'startItem' is set
            if (startItem == null)
                throw new ApiException(400, "Missing required parameter 'startItem' when calling QueueApi->QueueGetQueueList");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling QueueApi->QueueGetQueueList");

            var localVarPath = "/api/Queue/GetQueueList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarFormParams.Add("dateFrom", this.Configuration.ApiClient.ParameterToString(dateFrom)); // form parameter
            if (typeFullName != null) localVarFormParams.Add("typeFullName", this.Configuration.ApiClient.ParameterToString(typeFullName)); // form parameter
            if (startItem != null) localVarFormParams.Add("startItem", this.Configuration.ApiClient.ParameterToString(startItem)); // form parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueueJobInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QueueJobInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueueJobInfoDto>)));
        }

        /// <summary>
        /// This call returns the counts of work item for a queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>int?</returns>
        public int? QueueGetQueueWorkItemCount (string queueId)
        {
             ApiResponse<int?> localVarResponse = QueueGetQueueWorkItemCountWithHttpInfo(queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the counts of work item for a queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > QueueGetQueueWorkItemCountWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueWorkItemCount");

            var localVarPath = "/api/Queue/WorkItemCount/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueWorkItemCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call returns the counts of work item for a queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> QueueGetQueueWorkItemCountAsync (string queueId)
        {
             ApiResponse<int?> localVarResponse = await QueueGetQueueWorkItemCountAsyncWithHttpInfo(queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the counts of work item for a queue 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> QueueGetQueueWorkItemCountAsyncWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueWorkItemCount");

            var localVarPath = "/api/Queue/WorkItemCount/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueWorkItemCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// This call returns the counts how many work item jobs left 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>long?</returns>
        public long? QueueGetQueueWorkItemLeftCount (string queueId)
        {
             ApiResponse<long?> localVarResponse = QueueGetQueueWorkItemLeftCountWithHttpInfo(queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the counts how many work item jobs left 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > QueueGetQueueWorkItemLeftCountWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueWorkItemLeftCount");

            var localVarPath = "/api/Queue/WorkItemLeftCount/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueWorkItemLeftCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// This call returns the counts how many work item jobs left 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> QueueGetQueueWorkItemLeftCountAsync (string queueId)
        {
             ApiResponse<long?> localVarResponse = await QueueGetQueueWorkItemLeftCountAsyncWithHttpInfo(queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the counts how many work item jobs left 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> QueueGetQueueWorkItemLeftCountAsyncWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueWorkItemLeftCount");

            var localVarPath = "/api/Queue/WorkItemLeftCount/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueWorkItemLeftCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// This call returns a work job information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>QueueJobInfoDto</returns>
        public QueueJobInfoDto QueueGetQueueWorkJobInfo (string queueId)
        {
             ApiResponse<QueueJobInfoDto> localVarResponse = QueueGetQueueWorkJobInfoWithHttpInfo(queueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a work job information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>ApiResponse of QueueJobInfoDto</returns>
        public ApiResponse< QueueJobInfoDto > QueueGetQueueWorkJobInfoWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueWorkJobInfo");

            var localVarPath = "/api/Queue/WorkJobInfo/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueWorkJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueJobInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueJobInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueJobInfoDto)));
        }

        /// <summary>
        /// This call returns a work job information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of QueueJobInfoDto</returns>
        public async System.Threading.Tasks.Task<QueueJobInfoDto> QueueGetQueueWorkJobInfoAsync (string queueId)
        {
             ApiResponse<QueueJobInfoDto> localVarResponse = await QueueGetQueueWorkJobInfoAsyncWithHttpInfo(queueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a work job information 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">Queue Identifier</param>
        /// <returns>Task of ApiResponse (QueueJobInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueJobInfoDto>> QueueGetQueueWorkJobInfoAsyncWithHttpInfo (string queueId)
        {
            // verify the required parameter 'queueId' is set
            if (queueId == null)
                throw new ApiException(400, "Missing required parameter 'queueId' when calling QueueApi->QueueGetQueueWorkJobInfo");

            var localVarPath = "/api/Queue/WorkJobInfo/{queueId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueId != null) localVarPathParams.Add("queueId", this.Configuration.ApiClient.ParameterToString(queueId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueGetQueueWorkJobInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueJobInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueueJobInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueJobInfoDto)));
        }

    }
}
