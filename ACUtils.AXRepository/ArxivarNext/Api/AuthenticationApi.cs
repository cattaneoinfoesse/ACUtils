/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns></returns>
        void AuthenticationDeleteLogonTicket (int? logonTicketId);

        /// <summary>
        /// Delete LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthenticationDeleteLogonTicketWithHttpInfo (int? logonTicketId);
        /// <summary>
        /// Delete LogonTicket (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns></returns>
        void AuthenticationDeleteLogonTicketAdmin (int? logonTicketId);

        /// <summary>
        /// Delete LogonTicket (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthenticationDeleteLogonTicketAdminWithHttpInfo (int? logonTicketId);
        /// <summary>
        /// This call returns the access token claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ClaimInfoDTO&gt;</returns>
        List<ClaimInfoDTO> AuthenticationGetAcecssTokenClaims ();

        /// <summary>
        /// This call returns the access token claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ClaimInfoDTO&gt;</returns>
        ApiResponse<List<ClaimInfoDTO>> AuthenticationGetAcecssTokenClaimsWithHttpInfo ();
        /// <summary>
        /// Get current user info context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>IdentityInfoDto</returns>
        IdentityInfoDto AuthenticationGetIdentityInfo ();

        /// <summary>
        /// Get current user info context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of IdentityInfoDto</returns>
        ApiResponse<IdentityInfoDto> AuthenticationGetIdentityInfoWithHttpInfo ();
        /// <summary>
        /// This call returns a specific logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>LogonProviderInfoDto</returns>
        LogonProviderInfoDto AuthenticationGetLogonProviderInfo (string id);

        /// <summary>
        /// This call returns a specific logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>ApiResponse of LogonProviderInfoDto</returns>
        ApiResponse<LogonProviderInfoDto> AuthenticationGetLogonProviderInfoWithHttpInfo (string id);
        /// <summary>
        /// This call returns the logon provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LogonProviderInfoDto&gt;</returns>
        List<LogonProviderInfoDto> AuthenticationGetLogonProviderInfoList ();

        /// <summary>
        /// This call returns the logon provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LogonProviderInfoDto&gt;</returns>
        ApiResponse<List<LogonProviderInfoDto>> AuthenticationGetLogonProviderInfoListWithHttpInfo ();
        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>AuthenticationTokenResponseDTO</returns>
        AuthenticationTokenResponseDTO AuthenticationGetLogonProviderRedirectUri (AuthenticationTokenImplicitRequestDTO body);

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenResponseDTO</returns>
        ApiResponse<AuthenticationTokenResponseDTO> AuthenticationGetLogonProviderRedirectUriWithHttpInfo (AuthenticationTokenImplicitRequestDTO body);
        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AuthenticationTokenResponseDTO</returns>
        AuthenticationTokenResponseDTO AuthenticationGetLogonProviderRedirectUri (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AuthenticationTokenResponseDTO</returns>
        ApiResponse<AuthenticationTokenResponseDTO> AuthenticationGetLogonProviderRedirectUriWithHttpInfo (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// Get LogonTicket list of all users. Included those no longer valid (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LogonTicketDto&gt;</returns>
        List<LogonTicketDto> AuthenticationGetLogonTicketAdmin ();

        /// <summary>
        /// Get LogonTicket list of all users. Included those no longer valid (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LogonTicketDto&gt;</returns>
        ApiResponse<List<LogonTicketDto>> AuthenticationGetLogonTicketAdminWithHttpInfo ();
        /// <summary>
        /// Get LogonTicket by ticket (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <returns>LogonTicketDto</returns>
        LogonTicketDto AuthenticationGetLogonTicketAdminByLogonTicket (string logonTicket);

        /// <summary>
        /// Get LogonTicket by ticket (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <returns>ApiResponse of LogonTicketDto</returns>
        ApiResponse<LogonTicketDto> AuthenticationGetLogonTicketAdminByLogonTicketWithHttpInfo (string logonTicket);
        /// <summary>
        /// Get valid LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LogonTicketDto&gt;</returns>
        List<LogonTicketDto> AuthenticationGetLogonTicketByUserRequestor ();

        /// <summary>
        /// Get valid LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LogonTicketDto&gt;</returns>
        ApiResponse<List<LogonTicketDto>> AuthenticationGetLogonTicketByUserRequestorWithHttpInfo ();
        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>AuthenticationTokenDTO</returns>
        AuthenticationTokenDTO AuthenticationGetToken (AuthenticationTokenRequestDTO body);

        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        ApiResponse<AuthenticationTokenDTO> AuthenticationGetTokenWithHttpInfo (AuthenticationTokenRequestDTO body);
        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AuthenticationTokenDTO</returns>
        AuthenticationTokenDTO AuthenticationGetToken (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        ApiResponse<AuthenticationTokenDTO> AuthenticationGetTokenWithHttpInfo (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// This call returns authentication token for Assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationTokenDTO</returns>
        AuthenticationTokenDTO AuthenticationGetTokenArxAssistant ();

        /// <summary>
        /// This call returns authentication token for Assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        ApiResponse<AuthenticationTokenDTO> AuthenticationGetTokenArxAssistantWithHttpInfo ();
        /// <summary>
        /// This call returns a new authentication token given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>AuthenticationTokenDTO</returns>
        AuthenticationTokenDTO AuthenticationGetTokenByLogonTicket (AuthenticationTokenByLogonTicketRequestDTO body);

        /// <summary>
        /// This call returns a new authentication token given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        ApiResponse<AuthenticationTokenDTO> AuthenticationGetTokenByLogonTicketWithHttpInfo (AuthenticationTokenByLogonTicketRequestDTO body);
        /// <summary>
        /// This call returns a new authentication token given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AuthenticationTokenDTO</returns>
        AuthenticationTokenDTO AuthenticationGetTokenByLogonTicket (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns a new authentication token given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        ApiResponse<AuthenticationTokenDTO> AuthenticationGetTokenByLogonTicketWithHttpInfo (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AccessTokenInfoDTO</returns>
        AccessTokenInfoDTO AuthenticationGetTokenInfoByLogonTicket (AuthenticationTokenByLogonTicketRequestDTO body);

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        ApiResponse<AccessTokenInfoDTO> AuthenticationGetTokenInfoByLogonTicketWithHttpInfo (AuthenticationTokenByLogonTicketRequestDTO body);
        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AccessTokenInfoDTO</returns>
        AccessTokenInfoDTO AuthenticationGetTokenInfoByLogonTicket (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        ApiResponse<AccessTokenInfoDTO> AuthenticationGetTokenInfoByLogonTicketWithHttpInfo (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>AccessTokenInfoDTO</returns>
        AccessTokenInfoDTO AuthenticationGetUserAuthenticationAccessTokenInfo (AuthenticationTokenRequestDTO body);

        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        ApiResponse<AccessTokenInfoDTO> AuthenticationGetUserAuthenticationAccessTokenInfoWithHttpInfo (AuthenticationTokenRequestDTO body);
        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AccessTokenInfoDTO</returns>
        AccessTokenInfoDTO AuthenticationGetUserAuthenticationAccessTokenInfo (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        ApiResponse<AccessTokenInfoDTO> AuthenticationGetUserAuthenticationAccessTokenInfoWithHttpInfo (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>AuthenticationTokenResponseDTO</returns>
        AuthenticationTokenResponseDTO AuthenticationGetWindowsLogonRedirectUri (AuthenticationTokenImplicitRequestDTO body);

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenResponseDTO</returns>
        ApiResponse<AuthenticationTokenResponseDTO> AuthenticationGetWindowsLogonRedirectUriWithHttpInfo (AuthenticationTokenImplicitRequestDTO body);
        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AuthenticationTokenResponseDTO</returns>
        AuthenticationTokenResponseDTO AuthenticationGetWindowsLogonRedirectUri (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AuthenticationTokenResponseDTO</returns>
        ApiResponse<AuthenticationTokenResponseDTO> AuthenticationGetWindowsLogonRedirectUriWithHttpInfo (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// Insert LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>LogonTicketDto</returns>
        LogonTicketDto AuthenticationInsertLogonTicket (LogonTicketRequestDto body);

        /// <summary>
        /// Insert LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LogonTicketDto</returns>
        ApiResponse<LogonTicketDto> AuthenticationInsertLogonTicketWithHttpInfo (LogonTicketRequestDto body);
        /// <summary>
        /// Insert LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="maxUseCount"></param>
        /// <param name="validTo"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="clientIpAddress"></param>
        /// <param name="scope"></param>
        /// <param name="lang"></param>
        /// <returns>LogonTicketDto</returns>
        LogonTicketDto AuthenticationInsertLogonTicket (int? userId, string impersonateExternalId, int? maxUseCount, DateTime? validTo, string clientId, string clientSecret, string clientIpAddress, string scope, string lang);

        /// <summary>
        /// Insert LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="maxUseCount"></param>
        /// <param name="validTo"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="clientIpAddress"></param>
        /// <param name="scope"></param>
        /// <param name="lang"></param>
        /// <returns>ApiResponse of LogonTicketDto</returns>
        ApiResponse<LogonTicketDto> AuthenticationInsertLogonTicketWithHttpInfo (int? userId, string impersonateExternalId, int? maxUseCount, DateTime? validTo, string clientId, string clientSecret, string clientIpAddress, string scope, string lang);
        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void AuthenticationPortalLogout (PortalLogoutRequestDto body);

        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthenticationPortalLogoutWithHttpInfo (PortalLogoutRequestDto body);
        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="userId"></param>
        /// <param name="ipAddress"></param>
        /// <returns></returns>
        void AuthenticationPortalLogout (string clientId, string userId, string ipAddress);

        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="userId"></param>
        /// <param name="ipAddress"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthenticationPortalLogoutWithHttpInfo (string clientId, string userId, string ipAddress);
        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication refresh</param>
        /// <returns>AuthenticationTokenDTO</returns>
        AuthenticationTokenDTO AuthenticationRefresh (RefreshTokenRequestDTO body);

        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication refresh</param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        ApiResponse<AuthenticationTokenDTO> AuthenticationRefreshWithHttpInfo (RefreshTokenRequestDTO body);
        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>AuthenticationTokenDTO</returns>
        AuthenticationTokenDTO AuthenticationRefresh (string clientId, string clientSecret, string refreshToken);

        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        ApiResponse<AuthenticationTokenDTO> AuthenticationRefreshWithHttpInfo (string clientId, string clientSecret, string refreshToken);
        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Authetication refresh token request</param>
        /// <returns>AccessTokenInfoDTO</returns>
        AccessTokenInfoDTO AuthenticationRefreshAuthenticationAccessTokenInfo (AuthenticationRefreshTokenRequestDTO body);

        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Authetication refresh token request</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        ApiResponse<AccessTokenInfoDTO> AuthenticationRefreshAuthenticationAccessTokenInfoWithHttpInfo (AuthenticationRefreshTokenRequestDTO body);
        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>AccessTokenInfoDTO</returns>
        AccessTokenInfoDTO AuthenticationRefreshAuthenticationAccessTokenInfo (string clientId, string clientSecret, string refreshToken);

        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        ApiResponse<AccessTokenInfoDTO> AuthenticationRefreshAuthenticationAccessTokenInfoWithHttpInfo (string clientId, string clientSecret, string refreshToken);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthenticationDeleteLogonTicketAsync (int? logonTicketId);

        /// <summary>
        /// Delete LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationDeleteLogonTicketAsyncWithHttpInfo (int? logonTicketId);
        /// <summary>
        /// Delete LogonTicket (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthenticationDeleteLogonTicketAdminAsync (int? logonTicketId);

        /// <summary>
        /// Delete LogonTicket (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationDeleteLogonTicketAdminAsyncWithHttpInfo (int? logonTicketId);
        /// <summary>
        /// This call returns the access token claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ClaimInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ClaimInfoDTO>> AuthenticationGetAcecssTokenClaimsAsync ();

        /// <summary>
        /// This call returns the access token claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ClaimInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClaimInfoDTO>>> AuthenticationGetAcecssTokenClaimsAsyncWithHttpInfo ();
        /// <summary>
        /// Get current user info context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of IdentityInfoDto</returns>
        System.Threading.Tasks.Task<IdentityInfoDto> AuthenticationGetIdentityInfoAsync ();

        /// <summary>
        /// Get current user info context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (IdentityInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityInfoDto>> AuthenticationGetIdentityInfoAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a specific logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of LogonProviderInfoDto</returns>
        System.Threading.Tasks.Task<LogonProviderInfoDto> AuthenticationGetLogonProviderInfoAsync (string id);

        /// <summary>
        /// This call returns a specific logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of ApiResponse (LogonProviderInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogonProviderInfoDto>> AuthenticationGetLogonProviderInfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// This call returns the logon provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LogonProviderInfoDto&gt;</returns>
        System.Threading.Tasks.Task<List<LogonProviderInfoDto>> AuthenticationGetLogonProviderInfoListAsync ();

        /// <summary>
        /// This call returns the logon provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LogonProviderInfoDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LogonProviderInfoDto>>> AuthenticationGetLogonProviderInfoListAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>Task of AuthenticationTokenResponseDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenResponseDTO> AuthenticationGetLogonProviderRedirectUriAsync (AuthenticationTokenImplicitRequestDTO body);

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenResponseDTO>> AuthenticationGetLogonProviderRedirectUriAsyncWithHttpInfo (AuthenticationTokenImplicitRequestDTO body);
        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AuthenticationTokenResponseDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenResponseDTO> AuthenticationGetLogonProviderRedirectUriAsync (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AuthenticationTokenResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenResponseDTO>> AuthenticationGetLogonProviderRedirectUriAsyncWithHttpInfo (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// Get LogonTicket list of all users. Included those no longer valid (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LogonTicketDto&gt;</returns>
        System.Threading.Tasks.Task<List<LogonTicketDto>> AuthenticationGetLogonTicketAdminAsync ();

        /// <summary>
        /// Get LogonTicket list of all users. Included those no longer valid (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LogonTicketDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LogonTicketDto>>> AuthenticationGetLogonTicketAdminAsyncWithHttpInfo ();
        /// <summary>
        /// Get LogonTicket by ticket (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <returns>Task of LogonTicketDto</returns>
        System.Threading.Tasks.Task<LogonTicketDto> AuthenticationGetLogonTicketAdminByLogonTicketAsync (string logonTicket);

        /// <summary>
        /// Get LogonTicket by ticket (admin required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <returns>Task of ApiResponse (LogonTicketDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogonTicketDto>> AuthenticationGetLogonTicketAdminByLogonTicketAsyncWithHttpInfo (string logonTicket);
        /// <summary>
        /// Get valid LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LogonTicketDto&gt;</returns>
        System.Threading.Tasks.Task<List<LogonTicketDto>> AuthenticationGetLogonTicketByUserRequestorAsync ();

        /// <summary>
        /// Get valid LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LogonTicketDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LogonTicketDto>>> AuthenticationGetLogonTicketByUserRequestorAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenAsync (AuthenticationTokenRequestDTO body);

        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenAsyncWithHttpInfo (AuthenticationTokenRequestDTO body);
        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenAsync (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns a new authentication token for a authentication request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenAsyncWithHttpInfo (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// This call returns authentication token for Assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenArxAssistantAsync ();

        /// <summary>
        /// This call returns authentication token for Assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenArxAssistantAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a new authentication token given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenByLogonTicketAsync (AuthenticationTokenByLogonTicketRequestDTO body);

        /// <summary>
        /// This call returns a new authentication token given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenByLogonTicketAsyncWithHttpInfo (AuthenticationTokenByLogonTicketRequestDTO body);
        /// <summary>
        /// This call returns a new authentication token given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenByLogonTicketAsync (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns a new authentication token given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenByLogonTicketAsyncWithHttpInfo (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationGetTokenInfoByLogonTicketAsync (AuthenticationTokenByLogonTicketRequestDTO body);

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationGetTokenInfoByLogonTicketAsyncWithHttpInfo (AuthenticationTokenByLogonTicketRequestDTO body);
        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationGetTokenInfoByLogonTicketAsync (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationGetTokenInfoByLogonTicketAsyncWithHttpInfo (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationGetUserAuthenticationAccessTokenInfoAsync (AuthenticationTokenRequestDTO body);

        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationGetUserAuthenticationAccessTokenInfoAsyncWithHttpInfo (AuthenticationTokenRequestDTO body);
        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationGetUserAuthenticationAccessTokenInfoAsync (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns a decoded authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationGetUserAuthenticationAccessTokenInfoAsyncWithHttpInfo (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>Task of AuthenticationTokenResponseDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenResponseDTO> AuthenticationGetWindowsLogonRedirectUriAsync (AuthenticationTokenImplicitRequestDTO body);

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenResponseDTO>> AuthenticationGetWindowsLogonRedirectUriAsyncWithHttpInfo (AuthenticationTokenImplicitRequestDTO body);
        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AuthenticationTokenResponseDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenResponseDTO> AuthenticationGetWindowsLogonRedirectUriAsync (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AuthenticationTokenResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenResponseDTO>> AuthenticationGetWindowsLogonRedirectUriAsyncWithHttpInfo (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress);
        /// <summary>
        /// Insert LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of LogonTicketDto</returns>
        System.Threading.Tasks.Task<LogonTicketDto> AuthenticationInsertLogonTicketAsync (LogonTicketRequestDto body);

        /// <summary>
        /// Insert LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (LogonTicketDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogonTicketDto>> AuthenticationInsertLogonTicketAsyncWithHttpInfo (LogonTicketRequestDto body);
        /// <summary>
        /// Insert LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="maxUseCount"></param>
        /// <param name="validTo"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="clientIpAddress"></param>
        /// <param name="scope"></param>
        /// <param name="lang"></param>
        /// <returns>Task of LogonTicketDto</returns>
        System.Threading.Tasks.Task<LogonTicketDto> AuthenticationInsertLogonTicketAsync (int? userId, string impersonateExternalId, int? maxUseCount, DateTime? validTo, string clientId, string clientSecret, string clientIpAddress, string scope, string lang);

        /// <summary>
        /// Insert LogonTicket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="maxUseCount"></param>
        /// <param name="validTo"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="clientIpAddress"></param>
        /// <param name="scope"></param>
        /// <param name="lang"></param>
        /// <returns>Task of ApiResponse (LogonTicketDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogonTicketDto>> AuthenticationInsertLogonTicketAsyncWithHttpInfo (int? userId, string impersonateExternalId, int? maxUseCount, DateTime? validTo, string clientId, string clientSecret, string clientIpAddress, string scope, string lang);
        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthenticationPortalLogoutAsync (PortalLogoutRequestDto body);

        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationPortalLogoutAsyncWithHttpInfo (PortalLogoutRequestDto body);
        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="userId"></param>
        /// <param name="ipAddress"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthenticationPortalLogoutAsync (string clientId, string userId, string ipAddress);

        /// <summary>
        /// Portal logout audit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="userId"></param>
        /// <param name="ipAddress"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationPortalLogoutAsyncWithHttpInfo (string clientId, string userId, string ipAddress);
        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication refresh</param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationRefreshAsync (RefreshTokenRequestDTO body);

        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication refresh</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationRefreshAsyncWithHttpInfo (RefreshTokenRequestDTO body);
        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationRefreshAsync (string clientId, string clientSecret, string refreshToken);

        /// <summary>
        /// This call returns a new authentication token by a refresh token string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationRefreshAsyncWithHttpInfo (string clientId, string clientSecret, string refreshToken);
        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Authetication refresh token request</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationRefreshAuthenticationAccessTokenInfoAsync (AuthenticationRefreshTokenRequestDTO body);

        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Authetication refresh token request</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationRefreshAuthenticationAccessTokenInfoAsyncWithHttpInfo (AuthenticationRefreshTokenRequestDTO body);
        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationRefreshAuthenticationAccessTokenInfoAsync (string clientId, string clientSecret, string refreshToken);

        /// <summary>
        /// This call refreshes and decodes authentication token for user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationRefreshAuthenticationAccessTokenInfoAsyncWithHttpInfo (string clientId, string clientSecret, string refreshToken);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AuthenticationApi : IAuthenticationApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns></returns>
        public void AuthenticationDeleteLogonTicket (int? logonTicketId)
        {
             AuthenticationDeleteLogonTicketWithHttpInfo(logonTicketId);
        }

        /// <summary>
        /// Delete LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthenticationDeleteLogonTicketWithHttpInfo (int? logonTicketId)
        {
            // verify the required parameter 'logonTicketId' is set
            if (logonTicketId == null)
                throw new ApiException(400, "Missing required parameter 'logonTicketId' when calling AuthenticationApi->AuthenticationDeleteLogonTicket");

            var localVarPath = "/api/Authentication/logonTicket/{logonTicketId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logonTicketId != null) localVarPathParams.Add("logonTicketId", this.Configuration.ApiClient.ParameterToString(logonTicketId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationDeleteLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthenticationDeleteLogonTicketAsync (int? logonTicketId)
        {
             await AuthenticationDeleteLogonTicketAsyncWithHttpInfo(logonTicketId);

        }

        /// <summary>
        /// Delete LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationDeleteLogonTicketAsyncWithHttpInfo (int? logonTicketId)
        {
            // verify the required parameter 'logonTicketId' is set
            if (logonTicketId == null)
                throw new ApiException(400, "Missing required parameter 'logonTicketId' when calling AuthenticationApi->AuthenticationDeleteLogonTicket");

            var localVarPath = "/api/Authentication/logonTicket/{logonTicketId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logonTicketId != null) localVarPathParams.Add("logonTicketId", this.Configuration.ApiClient.ParameterToString(logonTicketId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationDeleteLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete LogonTicket (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns></returns>
        public void AuthenticationDeleteLogonTicketAdmin (int? logonTicketId)
        {
             AuthenticationDeleteLogonTicketAdminWithHttpInfo(logonTicketId);
        }

        /// <summary>
        /// Delete LogonTicket (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthenticationDeleteLogonTicketAdminWithHttpInfo (int? logonTicketId)
        {
            // verify the required parameter 'logonTicketId' is set
            if (logonTicketId == null)
                throw new ApiException(400, "Missing required parameter 'logonTicketId' when calling AuthenticationApi->AuthenticationDeleteLogonTicketAdmin");

            var localVarPath = "/api/Authentication/logonTicket/admin/{logonTicketId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logonTicketId != null) localVarPathParams.Add("logonTicketId", this.Configuration.ApiClient.ParameterToString(logonTicketId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationDeleteLogonTicketAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete LogonTicket (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthenticationDeleteLogonTicketAdminAsync (int? logonTicketId)
        {
             await AuthenticationDeleteLogonTicketAdminAsyncWithHttpInfo(logonTicketId);

        }

        /// <summary>
        /// Delete LogonTicket (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicketId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationDeleteLogonTicketAdminAsyncWithHttpInfo (int? logonTicketId)
        {
            // verify the required parameter 'logonTicketId' is set
            if (logonTicketId == null)
                throw new ApiException(400, "Missing required parameter 'logonTicketId' when calling AuthenticationApi->AuthenticationDeleteLogonTicketAdmin");

            var localVarPath = "/api/Authentication/logonTicket/admin/{logonTicketId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logonTicketId != null) localVarPathParams.Add("logonTicketId", this.Configuration.ApiClient.ParameterToString(logonTicketId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationDeleteLogonTicketAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns the access token claims 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ClaimInfoDTO&gt;</returns>
        public List<ClaimInfoDTO> AuthenticationGetAcecssTokenClaims ()
        {
             ApiResponse<List<ClaimInfoDTO>> localVarResponse = AuthenticationGetAcecssTokenClaimsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the access token claims 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ClaimInfoDTO&gt;</returns>
        public ApiResponse< List<ClaimInfoDTO> > AuthenticationGetAcecssTokenClaimsWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/AcecssTokenClaims";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetAcecssTokenClaims", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ClaimInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ClaimInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ClaimInfoDTO>)));
        }

        /// <summary>
        /// This call returns the access token claims 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ClaimInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClaimInfoDTO>> AuthenticationGetAcecssTokenClaimsAsync ()
        {
             ApiResponse<List<ClaimInfoDTO>> localVarResponse = await AuthenticationGetAcecssTokenClaimsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the access token claims 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ClaimInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ClaimInfoDTO>>> AuthenticationGetAcecssTokenClaimsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/AcecssTokenClaims";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetAcecssTokenClaims", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ClaimInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ClaimInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ClaimInfoDTO>)));
        }

        /// <summary>
        /// Get current user info context 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>IdentityInfoDto</returns>
        public IdentityInfoDto AuthenticationGetIdentityInfo ()
        {
             ApiResponse<IdentityInfoDto> localVarResponse = AuthenticationGetIdentityInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current user info context 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of IdentityInfoDto</returns>
        public ApiResponse< IdentityInfoDto > AuthenticationGetIdentityInfoWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/identityInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetIdentityInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IdentityInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityInfoDto)));
        }

        /// <summary>
        /// Get current user info context 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of IdentityInfoDto</returns>
        public async System.Threading.Tasks.Task<IdentityInfoDto> AuthenticationGetIdentityInfoAsync ()
        {
             ApiResponse<IdentityInfoDto> localVarResponse = await AuthenticationGetIdentityInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current user info context 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (IdentityInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityInfoDto>> AuthenticationGetIdentityInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/identityInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetIdentityInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IdentityInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityInfoDto)));
        }

        /// <summary>
        /// This call returns a specific logon provider by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>LogonProviderInfoDto</returns>
        public LogonProviderInfoDto AuthenticationGetLogonProviderInfo (string id)
        {
             ApiResponse<LogonProviderInfoDto> localVarResponse = AuthenticationGetLogonProviderInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a specific logon provider by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>ApiResponse of LogonProviderInfoDto</returns>
        public ApiResponse< LogonProviderInfoDto > AuthenticationGetLogonProviderInfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuthenticationApi->AuthenticationGetLogonProviderInfo");

            var localVarPath = "/api/Authentication/logonProvider/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogonProviderInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderInfoDto)));
        }

        /// <summary>
        /// This call returns a specific logon provider by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of LogonProviderInfoDto</returns>
        public async System.Threading.Tasks.Task<LogonProviderInfoDto> AuthenticationGetLogonProviderInfoAsync (string id)
        {
             ApiResponse<LogonProviderInfoDto> localVarResponse = await AuthenticationGetLogonProviderInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a specific logon provider by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of ApiResponse (LogonProviderInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogonProviderInfoDto>> AuthenticationGetLogonProviderInfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuthenticationApi->AuthenticationGetLogonProviderInfo");

            var localVarPath = "/api/Authentication/logonProvider/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogonProviderInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderInfoDto)));
        }

        /// <summary>
        /// This call returns the logon provider list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LogonProviderInfoDto&gt;</returns>
        public List<LogonProviderInfoDto> AuthenticationGetLogonProviderInfoList ()
        {
             ApiResponse<List<LogonProviderInfoDto>> localVarResponse = AuthenticationGetLogonProviderInfoListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the logon provider list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LogonProviderInfoDto&gt;</returns>
        public ApiResponse< List<LogonProviderInfoDto> > AuthenticationGetLogonProviderInfoListWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/logonProviderList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderInfoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonProviderInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LogonProviderInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonProviderInfoDto>)));
        }

        /// <summary>
        /// This call returns the logon provider list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LogonProviderInfoDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<LogonProviderInfoDto>> AuthenticationGetLogonProviderInfoListAsync ()
        {
             ApiResponse<List<LogonProviderInfoDto>> localVarResponse = await AuthenticationGetLogonProviderInfoListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the logon provider list 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LogonProviderInfoDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LogonProviderInfoDto>>> AuthenticationGetLogonProviderInfoListAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/logonProviderList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderInfoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonProviderInfoDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LogonProviderInfoDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonProviderInfoDto>)));
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>AuthenticationTokenResponseDTO</returns>
        public AuthenticationTokenResponseDTO AuthenticationGetLogonProviderRedirectUri (AuthenticationTokenImplicitRequestDTO body)
        {
             ApiResponse<AuthenticationTokenResponseDTO> localVarResponse = AuthenticationGetLogonProviderRedirectUriWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenResponseDTO</returns>
        public ApiResponse< AuthenticationTokenResponseDTO > AuthenticationGetLogonProviderRedirectUriWithHttpInfo (AuthenticationTokenImplicitRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");

            var localVarPath = "/api/Authentication/getLogonProviderRedirectUri";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenResponseDTO)));
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>Task of AuthenticationTokenResponseDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenResponseDTO> AuthenticationGetLogonProviderRedirectUriAsync (AuthenticationTokenImplicitRequestDTO body)
        {
             ApiResponse<AuthenticationTokenResponseDTO> localVarResponse = await AuthenticationGetLogonProviderRedirectUriAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenResponseDTO>> AuthenticationGetLogonProviderRedirectUriAsyncWithHttpInfo (AuthenticationTokenImplicitRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");

            var localVarPath = "/api/Authentication/getLogonProviderRedirectUri";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenResponseDTO)));
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AuthenticationTokenResponseDTO</returns>
        public AuthenticationTokenResponseDTO AuthenticationGetLogonProviderRedirectUri (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AuthenticationTokenResponseDTO> localVarResponse = AuthenticationGetLogonProviderRedirectUriWithHttpInfo(clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AuthenticationTokenResponseDTO</returns>
        public ApiResponse< AuthenticationTokenResponseDTO > AuthenticationGetLogonProviderRedirectUriWithHttpInfo (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");

            var localVarPath = "/api/Authentication/getLogonProviderRedirectUri";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenResponseDTO)));
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AuthenticationTokenResponseDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenResponseDTO> AuthenticationGetLogonProviderRedirectUriAsync (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AuthenticationTokenResponseDTO> localVarResponse = await AuthenticationGetLogonProviderRedirectUriAsyncWithHttpInfo(clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit logon provider authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AuthenticationTokenResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenResponseDTO>> AuthenticationGetLogonProviderRedirectUriAsyncWithHttpInfo (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetLogonProviderRedirectUri");

            var localVarPath = "/api/Authentication/getLogonProviderRedirectUri";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonProviderRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenResponseDTO)));
        }

        /// <summary>
        /// Get LogonTicket list of all users. Included those no longer valid (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LogonTicketDto&gt;</returns>
        public List<LogonTicketDto> AuthenticationGetLogonTicketAdmin ()
        {
             ApiResponse<List<LogonTicketDto>> localVarResponse = AuthenticationGetLogonTicketAdminWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get LogonTicket list of all users. Included those no longer valid (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LogonTicketDto&gt;</returns>
        public ApiResponse< List<LogonTicketDto> > AuthenticationGetLogonTicketAdminWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/logonTicket/admin/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonTicketAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonTicketDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LogonTicketDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonTicketDto>)));
        }

        /// <summary>
        /// Get LogonTicket list of all users. Included those no longer valid (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LogonTicketDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<LogonTicketDto>> AuthenticationGetLogonTicketAdminAsync ()
        {
             ApiResponse<List<LogonTicketDto>> localVarResponse = await AuthenticationGetLogonTicketAdminAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get LogonTicket list of all users. Included those no longer valid (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LogonTicketDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LogonTicketDto>>> AuthenticationGetLogonTicketAdminAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/logonTicket/admin/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonTicketAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonTicketDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LogonTicketDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonTicketDto>)));
        }

        /// <summary>
        /// Get LogonTicket by ticket (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <returns>LogonTicketDto</returns>
        public LogonTicketDto AuthenticationGetLogonTicketAdminByLogonTicket (string logonTicket)
        {
             ApiResponse<LogonTicketDto> localVarResponse = AuthenticationGetLogonTicketAdminByLogonTicketWithHttpInfo(logonTicket);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get LogonTicket by ticket (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <returns>ApiResponse of LogonTicketDto</returns>
        public ApiResponse< LogonTicketDto > AuthenticationGetLogonTicketAdminByLogonTicketWithHttpInfo (string logonTicket)
        {
            // verify the required parameter 'logonTicket' is set
            if (logonTicket == null)
                throw new ApiException(400, "Missing required parameter 'logonTicket' when calling AuthenticationApi->AuthenticationGetLogonTicketAdminByLogonTicket");

            var localVarPath = "/api/Authentication/logonTicket/admin/{logonTicket}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logonTicket != null) localVarPathParams.Add("logonTicket", this.Configuration.ApiClient.ParameterToString(logonTicket)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonTicketAdminByLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonTicketDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogonTicketDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonTicketDto)));
        }

        /// <summary>
        /// Get LogonTicket by ticket (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <returns>Task of LogonTicketDto</returns>
        public async System.Threading.Tasks.Task<LogonTicketDto> AuthenticationGetLogonTicketAdminByLogonTicketAsync (string logonTicket)
        {
             ApiResponse<LogonTicketDto> localVarResponse = await AuthenticationGetLogonTicketAdminByLogonTicketAsyncWithHttpInfo(logonTicket);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get LogonTicket by ticket (admin required) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <returns>Task of ApiResponse (LogonTicketDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogonTicketDto>> AuthenticationGetLogonTicketAdminByLogonTicketAsyncWithHttpInfo (string logonTicket)
        {
            // verify the required parameter 'logonTicket' is set
            if (logonTicket == null)
                throw new ApiException(400, "Missing required parameter 'logonTicket' when calling AuthenticationApi->AuthenticationGetLogonTicketAdminByLogonTicket");

            var localVarPath = "/api/Authentication/logonTicket/admin/{logonTicket}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logonTicket != null) localVarPathParams.Add("logonTicket", this.Configuration.ApiClient.ParameterToString(logonTicket)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonTicketAdminByLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonTicketDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogonTicketDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonTicketDto)));
        }

        /// <summary>
        /// Get valid LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LogonTicketDto&gt;</returns>
        public List<LogonTicketDto> AuthenticationGetLogonTicketByUserRequestor ()
        {
             ApiResponse<List<LogonTicketDto>> localVarResponse = AuthenticationGetLogonTicketByUserRequestorWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get valid LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LogonTicketDto&gt;</returns>
        public ApiResponse< List<LogonTicketDto> > AuthenticationGetLogonTicketByUserRequestorWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/logonTicket/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonTicketByUserRequestor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonTicketDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LogonTicketDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonTicketDto>)));
        }

        /// <summary>
        /// Get valid LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LogonTicketDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<LogonTicketDto>> AuthenticationGetLogonTicketByUserRequestorAsync ()
        {
             ApiResponse<List<LogonTicketDto>> localVarResponse = await AuthenticationGetLogonTicketByUserRequestorAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get valid LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LogonTicketDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LogonTicketDto>>> AuthenticationGetLogonTicketByUserRequestorAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/logonTicket/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetLogonTicketByUserRequestor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonTicketDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LogonTicketDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonTicketDto>)));
        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>AuthenticationTokenDTO</returns>
        public AuthenticationTokenDTO AuthenticationGetToken (AuthenticationTokenRequestDTO body)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = AuthenticationGetTokenWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        public ApiResponse< AuthenticationTokenDTO > AuthenticationGetTokenWithHttpInfo (AuthenticationTokenRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetToken");

            var localVarPath = "/api/Authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenAsync (AuthenticationTokenRequestDTO body)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = await AuthenticationGetTokenAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenAsyncWithHttpInfo (AuthenticationTokenRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetToken");

            var localVarPath = "/api/Authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AuthenticationTokenDTO</returns>
        public AuthenticationTokenDTO AuthenticationGetToken (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = AuthenticationGetTokenWithHttpInfo(username, password, clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        public ApiResponse< AuthenticationTokenDTO > AuthenticationGetTokenWithHttpInfo (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetToken");

            var localVarPath = "/api/Authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenAsync (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = await AuthenticationGetTokenAsyncWithHttpInfo(username, password, clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new authentication token for a authentication request 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenAsyncWithHttpInfo (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetToken");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetToken");

            var localVarPath = "/api/Authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns authentication token for Assistant 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationTokenDTO</returns>
        public AuthenticationTokenDTO AuthenticationGetTokenArxAssistant ()
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = AuthenticationGetTokenArxAssistantWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns authentication token for Assistant 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        public ApiResponse< AuthenticationTokenDTO > AuthenticationGetTokenArxAssistantWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/getTokenArxAssistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenArxAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns authentication token for Assistant 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenArxAssistantAsync ()
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = await AuthenticationGetTokenArxAssistantAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns authentication token for Assistant 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenArxAssistantAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Authentication/getTokenArxAssistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenArxAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>AuthenticationTokenDTO</returns>
        public AuthenticationTokenDTO AuthenticationGetTokenByLogonTicket (AuthenticationTokenByLogonTicketRequestDTO body)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = AuthenticationGetTokenByLogonTicketWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new authentication token given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        public ApiResponse< AuthenticationTokenDTO > AuthenticationGetTokenByLogonTicketWithHttpInfo (AuthenticationTokenByLogonTicketRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");

            var localVarPath = "/api/Authentication/getTokenByLogonTicket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenByLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenByLogonTicketAsync (AuthenticationTokenByLogonTicketRequestDTO body)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = await AuthenticationGetTokenByLogonTicketAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new authentication token given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenByLogonTicketAsyncWithHttpInfo (AuthenticationTokenByLogonTicketRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");

            var localVarPath = "/api/Authentication/getTokenByLogonTicket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenByLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AuthenticationTokenDTO</returns>
        public AuthenticationTokenDTO AuthenticationGetTokenByLogonTicket (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = AuthenticationGetTokenByLogonTicketWithHttpInfo(logonTicket, clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new authentication token given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        public ApiResponse< AuthenticationTokenDTO > AuthenticationGetTokenByLogonTicketWithHttpInfo (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'logonTicket' is set
            if (logonTicket == null)
                throw new ApiException(400, "Missing required parameter 'logonTicket' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");

            var localVarPath = "/api/Authentication/getTokenByLogonTicket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logonTicket != null) localVarFormParams.Add("logonTicket", this.Configuration.ApiClient.ParameterToString(logonTicket)); // form parameter
            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenByLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationGetTokenByLogonTicketAsync (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = await AuthenticationGetTokenByLogonTicketAsyncWithHttpInfo(logonTicket, clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new authentication token given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationGetTokenByLogonTicketAsyncWithHttpInfo (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'logonTicket' is set
            if (logonTicket == null)
                throw new ApiException(400, "Missing required parameter 'logonTicket' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetTokenByLogonTicket");

            var localVarPath = "/api/Authentication/getTokenByLogonTicket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logonTicket != null) localVarFormParams.Add("logonTicket", this.Configuration.ApiClient.ParameterToString(logonTicket)); // form parameter
            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenByLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AccessTokenInfoDTO</returns>
        public AccessTokenInfoDTO AuthenticationGetTokenInfoByLogonTicket (AuthenticationTokenByLogonTicketRequestDTO body)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = AuthenticationGetTokenInfoByLogonTicketWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        public ApiResponse< AccessTokenInfoDTO > AuthenticationGetTokenInfoByLogonTicketWithHttpInfo (AuthenticationTokenByLogonTicketRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");

            var localVarPath = "/api/Authentication/getTokenInfoByLogonTicket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenInfoByLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        public async System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationGetTokenInfoByLogonTicketAsync (AuthenticationTokenByLogonTicketRequestDTO body)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = await AuthenticationGetTokenInfoByLogonTicketAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationGetTokenInfoByLogonTicketAsyncWithHttpInfo (AuthenticationTokenByLogonTicketRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");

            var localVarPath = "/api/Authentication/getTokenInfoByLogonTicket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenInfoByLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AccessTokenInfoDTO</returns>
        public AccessTokenInfoDTO AuthenticationGetTokenInfoByLogonTicket (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = AuthenticationGetTokenInfoByLogonTicketWithHttpInfo(logonTicket, clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        public ApiResponse< AccessTokenInfoDTO > AuthenticationGetTokenInfoByLogonTicketWithHttpInfo (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'logonTicket' is set
            if (logonTicket == null)
                throw new ApiException(400, "Missing required parameter 'logonTicket' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");

            var localVarPath = "/api/Authentication/getTokenInfoByLogonTicket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logonTicket != null) localVarFormParams.Add("logonTicket", this.Configuration.ApiClient.ParameterToString(logonTicket)); // form parameter
            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenInfoByLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        public async System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationGetTokenInfoByLogonTicketAsync (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = await AuthenticationGetTokenInfoByLogonTicketAsyncWithHttpInfo(logonTicket, clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new authentication token with info given a logon ticket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logonTicket"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationGetTokenInfoByLogonTicketAsyncWithHttpInfo (string logonTicket, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'logonTicket' is set
            if (logonTicket == null)
                throw new ApiException(400, "Missing required parameter 'logonTicket' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetTokenInfoByLogonTicket");

            var localVarPath = "/api/Authentication/getTokenInfoByLogonTicket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logonTicket != null) localVarFormParams.Add("logonTicket", this.Configuration.ApiClient.ParameterToString(logonTicket)); // form parameter
            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetTokenInfoByLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>AccessTokenInfoDTO</returns>
        public AccessTokenInfoDTO AuthenticationGetUserAuthenticationAccessTokenInfo (AuthenticationTokenRequestDTO body)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = AuthenticationGetUserAuthenticationAccessTokenInfoWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        public ApiResponse< AccessTokenInfoDTO > AuthenticationGetUserAuthenticationAccessTokenInfoWithHttpInfo (AuthenticationTokenRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/getUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetUserAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        public async System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationGetUserAuthenticationAccessTokenInfoAsync (AuthenticationTokenRequestDTO body)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = await AuthenticationGetUserAuthenticationAccessTokenInfoAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationGetUserAuthenticationAccessTokenInfoAsyncWithHttpInfo (AuthenticationTokenRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/getUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetUserAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AccessTokenInfoDTO</returns>
        public AccessTokenInfoDTO AuthenticationGetUserAuthenticationAccessTokenInfo (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = AuthenticationGetUserAuthenticationAccessTokenInfoWithHttpInfo(username, password, clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        public ApiResponse< AccessTokenInfoDTO > AuthenticationGetUserAuthenticationAccessTokenInfoWithHttpInfo (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/getUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetUserAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        public async System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationGetUserAuthenticationAccessTokenInfoAsync (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = await AuthenticationGetUserAuthenticationAccessTokenInfoAsyncWithHttpInfo(username, password, clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a decoded authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationGetUserAuthenticationAccessTokenInfoAsyncWithHttpInfo (string username, string password, string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetUserAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/getUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetUserAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>AuthenticationTokenResponseDTO</returns>
        public AuthenticationTokenResponseDTO AuthenticationGetWindowsLogonRedirectUri (AuthenticationTokenImplicitRequestDTO body)
        {
             ApiResponse<AuthenticationTokenResponseDTO> localVarResponse = AuthenticationGetWindowsLogonRedirectUriWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>ApiResponse of AuthenticationTokenResponseDTO</returns>
        public ApiResponse< AuthenticationTokenResponseDTO > AuthenticationGetWindowsLogonRedirectUriWithHttpInfo (AuthenticationTokenImplicitRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");

            var localVarPath = "/api/Authentication/getWindowsLogonRedirectUri";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetWindowsLogonRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenResponseDTO)));
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>Task of AuthenticationTokenResponseDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenResponseDTO> AuthenticationGetWindowsLogonRedirectUriAsync (AuthenticationTokenImplicitRequestDTO body)
        {
             ApiResponse<AuthenticationTokenResponseDTO> localVarResponse = await AuthenticationGetWindowsLogonRedirectUriAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for implicit authentication</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenResponseDTO>> AuthenticationGetWindowsLogonRedirectUriAsyncWithHttpInfo (AuthenticationTokenImplicitRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");

            var localVarPath = "/api/Authentication/getWindowsLogonRedirectUri";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetWindowsLogonRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenResponseDTO)));
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>AuthenticationTokenResponseDTO</returns>
        public AuthenticationTokenResponseDTO AuthenticationGetWindowsLogonRedirectUri (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AuthenticationTokenResponseDTO> localVarResponse = AuthenticationGetWindowsLogonRedirectUriWithHttpInfo(clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>ApiResponse of AuthenticationTokenResponseDTO</returns>
        public ApiResponse< AuthenticationTokenResponseDTO > AuthenticationGetWindowsLogonRedirectUriWithHttpInfo (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");

            var localVarPath = "/api/Authentication/getWindowsLogonRedirectUri";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetWindowsLogonRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenResponseDTO)));
        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of AuthenticationTokenResponseDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenResponseDTO> AuthenticationGetWindowsLogonRedirectUriAsync (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
             ApiResponse<AuthenticationTokenResponseDTO> localVarResponse = await AuthenticationGetWindowsLogonRedirectUriAsyncWithHttpInfo(clientId, clientSecret, logonProviderId, impersonateUserId, impersonateExternalId, clientVersion, machineKey, languageCultureName, successRedirectUri, scopeList, clientIpAddress);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the provides logon redirect uri for implicit windows authentication 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="logonProviderId"></param>
        /// <param name="impersonateUserId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="clientVersion"></param>
        /// <param name="machineKey"></param>
        /// <param name="languageCultureName"></param>
        /// <param name="successRedirectUri"></param>
        /// <param name="scopeList"></param>
        /// <param name="clientIpAddress"></param>
        /// <returns>Task of ApiResponse (AuthenticationTokenResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenResponseDTO>> AuthenticationGetWindowsLogonRedirectUriAsyncWithHttpInfo (string clientId, string clientSecret, string logonProviderId, int? impersonateUserId, string impersonateExternalId, string clientVersion, string machineKey, string languageCultureName, string successRedirectUri, List<string> scopeList, string clientIpAddress)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'logonProviderId' is set
            if (logonProviderId == null)
                throw new ApiException(400, "Missing required parameter 'logonProviderId' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'impersonateUserId' is set
            if (impersonateUserId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateUserId' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'clientVersion' is set
            if (clientVersion == null)
                throw new ApiException(400, "Missing required parameter 'clientVersion' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'machineKey' is set
            if (machineKey == null)
                throw new ApiException(400, "Missing required parameter 'machineKey' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'languageCultureName' is set
            if (languageCultureName == null)
                throw new ApiException(400, "Missing required parameter 'languageCultureName' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'successRedirectUri' is set
            if (successRedirectUri == null)
                throw new ApiException(400, "Missing required parameter 'successRedirectUri' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'scopeList' is set
            if (scopeList == null)
                throw new ApiException(400, "Missing required parameter 'scopeList' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationGetWindowsLogonRedirectUri");

            var localVarPath = "/api/Authentication/getWindowsLogonRedirectUri";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (logonProviderId != null) localVarFormParams.Add("logonProviderId", this.Configuration.ApiClient.ParameterToString(logonProviderId)); // form parameter
            if (impersonateUserId != null) localVarFormParams.Add("impersonateUserId", this.Configuration.ApiClient.ParameterToString(impersonateUserId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (clientVersion != null) localVarFormParams.Add("clientVersion", this.Configuration.ApiClient.ParameterToString(clientVersion)); // form parameter
            if (machineKey != null) localVarFormParams.Add("machineKey", this.Configuration.ApiClient.ParameterToString(machineKey)); // form parameter
            if (languageCultureName != null) localVarFormParams.Add("languageCultureName", this.Configuration.ApiClient.ParameterToString(languageCultureName)); // form parameter
            if (successRedirectUri != null) localVarFormParams.Add("successRedirectUri", this.Configuration.ApiClient.ParameterToString(successRedirectUri)); // form parameter
            if (scopeList != null) localVarFormParams.Add("scopeList", this.Configuration.ApiClient.ParameterToString(scopeList)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationGetWindowsLogonRedirectUri", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenResponseDTO)));
        }

        /// <summary>
        /// Insert LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>LogonTicketDto</returns>
        public LogonTicketDto AuthenticationInsertLogonTicket (LogonTicketRequestDto body)
        {
             ApiResponse<LogonTicketDto> localVarResponse = AuthenticationInsertLogonTicketWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LogonTicketDto</returns>
        public ApiResponse< LogonTicketDto > AuthenticationInsertLogonTicketWithHttpInfo (LogonTicketRequestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationInsertLogonTicket");

            var localVarPath = "/api/Authentication/logonTicket/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationInsertLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonTicketDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogonTicketDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonTicketDto)));
        }

        /// <summary>
        /// Insert LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of LogonTicketDto</returns>
        public async System.Threading.Tasks.Task<LogonTicketDto> AuthenticationInsertLogonTicketAsync (LogonTicketRequestDto body)
        {
             ApiResponse<LogonTicketDto> localVarResponse = await AuthenticationInsertLogonTicketAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (LogonTicketDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogonTicketDto>> AuthenticationInsertLogonTicketAsyncWithHttpInfo (LogonTicketRequestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationInsertLogonTicket");

            var localVarPath = "/api/Authentication/logonTicket/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationInsertLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonTicketDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogonTicketDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonTicketDto)));
        }

        /// <summary>
        /// Insert LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="maxUseCount"></param>
        /// <param name="validTo"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="clientIpAddress"></param>
        /// <param name="scope"></param>
        /// <param name="lang"></param>
        /// <returns>LogonTicketDto</returns>
        public LogonTicketDto AuthenticationInsertLogonTicket (int? userId, string impersonateExternalId, int? maxUseCount, DateTime? validTo, string clientId, string clientSecret, string clientIpAddress, string scope, string lang)
        {
             ApiResponse<LogonTicketDto> localVarResponse = AuthenticationInsertLogonTicketWithHttpInfo(userId, impersonateExternalId, maxUseCount, validTo, clientId, clientSecret, clientIpAddress, scope, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="maxUseCount"></param>
        /// <param name="validTo"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="clientIpAddress"></param>
        /// <param name="scope"></param>
        /// <param name="lang"></param>
        /// <returns>ApiResponse of LogonTicketDto</returns>
        public ApiResponse< LogonTicketDto > AuthenticationInsertLogonTicketWithHttpInfo (int? userId, string impersonateExternalId, int? maxUseCount, DateTime? validTo, string clientId, string clientSecret, string clientIpAddress, string scope, string lang)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'maxUseCount' is set
            if (maxUseCount == null)
                throw new ApiException(400, "Missing required parameter 'maxUseCount' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'validTo' is set
            if (validTo == null)
                throw new ApiException(400, "Missing required parameter 'validTo' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'lang' is set
            if (lang == null)
                throw new ApiException(400, "Missing required parameter 'lang' when calling AuthenticationApi->AuthenticationInsertLogonTicket");

            var localVarPath = "/api/Authentication/logonTicket/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (maxUseCount != null) localVarFormParams.Add("maxUseCount", this.Configuration.ApiClient.ParameterToString(maxUseCount)); // form parameter
            if (validTo != null) localVarFormParams.Add("validTo", this.Configuration.ApiClient.ParameterToString(validTo)); // form parameter
            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            if (scope != null) localVarFormParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // form parameter
            if (lang != null) localVarFormParams.Add("lang", this.Configuration.ApiClient.ParameterToString(lang)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationInsertLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonTicketDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogonTicketDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonTicketDto)));
        }

        /// <summary>
        /// Insert LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="maxUseCount"></param>
        /// <param name="validTo"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="clientIpAddress"></param>
        /// <param name="scope"></param>
        /// <param name="lang"></param>
        /// <returns>Task of LogonTicketDto</returns>
        public async System.Threading.Tasks.Task<LogonTicketDto> AuthenticationInsertLogonTicketAsync (int? userId, string impersonateExternalId, int? maxUseCount, DateTime? validTo, string clientId, string clientSecret, string clientIpAddress, string scope, string lang)
        {
             ApiResponse<LogonTicketDto> localVarResponse = await AuthenticationInsertLogonTicketAsyncWithHttpInfo(userId, impersonateExternalId, maxUseCount, validTo, clientId, clientSecret, clientIpAddress, scope, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert LogonTicket 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="impersonateExternalId"></param>
        /// <param name="maxUseCount"></param>
        /// <param name="validTo"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="clientIpAddress"></param>
        /// <param name="scope"></param>
        /// <param name="lang"></param>
        /// <returns>Task of ApiResponse (LogonTicketDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogonTicketDto>> AuthenticationInsertLogonTicketAsyncWithHttpInfo (int? userId, string impersonateExternalId, int? maxUseCount, DateTime? validTo, string clientId, string clientSecret, string clientIpAddress, string scope, string lang)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'impersonateExternalId' is set
            if (impersonateExternalId == null)
                throw new ApiException(400, "Missing required parameter 'impersonateExternalId' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'maxUseCount' is set
            if (maxUseCount == null)
                throw new ApiException(400, "Missing required parameter 'maxUseCount' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'validTo' is set
            if (validTo == null)
                throw new ApiException(400, "Missing required parameter 'validTo' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'clientIpAddress' is set
            if (clientIpAddress == null)
                throw new ApiException(400, "Missing required parameter 'clientIpAddress' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AuthenticationApi->AuthenticationInsertLogonTicket");
            // verify the required parameter 'lang' is set
            if (lang == null)
                throw new ApiException(400, "Missing required parameter 'lang' when calling AuthenticationApi->AuthenticationInsertLogonTicket");

            var localVarPath = "/api/Authentication/logonTicket/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (impersonateExternalId != null) localVarFormParams.Add("impersonateExternalId", this.Configuration.ApiClient.ParameterToString(impersonateExternalId)); // form parameter
            if (maxUseCount != null) localVarFormParams.Add("maxUseCount", this.Configuration.ApiClient.ParameterToString(maxUseCount)); // form parameter
            if (validTo != null) localVarFormParams.Add("validTo", this.Configuration.ApiClient.ParameterToString(validTo)); // form parameter
            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (clientIpAddress != null) localVarFormParams.Add("clientIpAddress", this.Configuration.ApiClient.ParameterToString(clientIpAddress)); // form parameter
            if (scope != null) localVarFormParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // form parameter
            if (lang != null) localVarFormParams.Add("lang", this.Configuration.ApiClient.ParameterToString(lang)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationInsertLogonTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonTicketDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogonTicketDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonTicketDto)));
        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void AuthenticationPortalLogout (PortalLogoutRequestDto body)
        {
             AuthenticationPortalLogoutWithHttpInfo(body);
        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthenticationPortalLogoutWithHttpInfo (PortalLogoutRequestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationPortalLogout");

            var localVarPath = "/api/Authentication/PortalLogout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationPortalLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthenticationPortalLogoutAsync (PortalLogoutRequestDto body)
        {
             await AuthenticationPortalLogoutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationPortalLogoutAsyncWithHttpInfo (PortalLogoutRequestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationPortalLogout");

            var localVarPath = "/api/Authentication/PortalLogout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationPortalLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="userId"></param>
        /// <param name="ipAddress"></param>
        /// <returns></returns>
        public void AuthenticationPortalLogout (string clientId, string userId, string ipAddress)
        {
             AuthenticationPortalLogoutWithHttpInfo(clientId, userId, ipAddress);
        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="userId"></param>
        /// <param name="ipAddress"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthenticationPortalLogoutWithHttpInfo (string clientId, string userId, string ipAddress)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationPortalLogout");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthenticationApi->AuthenticationPortalLogout");
            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipAddress' when calling AuthenticationApi->AuthenticationPortalLogout");

            var localVarPath = "/api/Authentication/PortalLogout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (ipAddress != null) localVarFormParams.Add("ipAddress", this.Configuration.ApiClient.ParameterToString(ipAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationPortalLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="userId"></param>
        /// <param name="ipAddress"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthenticationPortalLogoutAsync (string clientId, string userId, string ipAddress)
        {
             await AuthenticationPortalLogoutAsyncWithHttpInfo(clientId, userId, ipAddress);

        }

        /// <summary>
        /// Portal logout audit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="userId"></param>
        /// <param name="ipAddress"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationPortalLogoutAsyncWithHttpInfo (string clientId, string userId, string ipAddress)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationPortalLogout");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthenticationApi->AuthenticationPortalLogout");
            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipAddress' when calling AuthenticationApi->AuthenticationPortalLogout");

            var localVarPath = "/api/Authentication/PortalLogout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (ipAddress != null) localVarFormParams.Add("ipAddress", this.Configuration.ApiClient.ParameterToString(ipAddress)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationPortalLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication refresh</param>
        /// <returns>AuthenticationTokenDTO</returns>
        public AuthenticationTokenDTO AuthenticationRefresh (RefreshTokenRequestDTO body)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = AuthenticationRefreshWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication refresh</param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        public ApiResponse< AuthenticationTokenDTO > AuthenticationRefreshWithHttpInfo (RefreshTokenRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationRefresh");

            var localVarPath = "/api/Authentication/refreshtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication refresh</param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationRefreshAsync (RefreshTokenRequestDTO body)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = await AuthenticationRefreshAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Token request for authentication refresh</param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationRefreshAsyncWithHttpInfo (RefreshTokenRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationRefresh");

            var localVarPath = "/api/Authentication/refreshtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>AuthenticationTokenDTO</returns>
        public AuthenticationTokenDTO AuthenticationRefresh (string clientId, string clientSecret, string refreshToken)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = AuthenticationRefreshWithHttpInfo(clientId, clientSecret, refreshToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>ApiResponse of AuthenticationTokenDTO</returns>
        public ApiResponse< AuthenticationTokenDTO > AuthenticationRefreshWithHttpInfo (string clientId, string clientSecret, string refreshToken)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationRefresh");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationRefresh");
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling AuthenticationApi->AuthenticationRefresh");

            var localVarPath = "/api/Authentication/refreshtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refreshToken", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>Task of AuthenticationTokenDTO</returns>
        public async System.Threading.Tasks.Task<AuthenticationTokenDTO> AuthenticationRefreshAsync (string clientId, string clientSecret, string refreshToken)
        {
             ApiResponse<AuthenticationTokenDTO> localVarResponse = await AuthenticationRefreshAsyncWithHttpInfo(clientId, clientSecret, refreshToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a new authentication token by a refresh token string 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>Task of ApiResponse (AuthenticationTokenDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationTokenDTO>> AuthenticationRefreshAsyncWithHttpInfo (string clientId, string clientSecret, string refreshToken)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationRefresh");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationRefresh");
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling AuthenticationApi->AuthenticationRefresh");

            var localVarPath = "/api/Authentication/refreshtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refreshToken", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationTokenDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationTokenDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationTokenDTO)));
        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Authetication refresh token request</param>
        /// <returns>AccessTokenInfoDTO</returns>
        public AccessTokenInfoDTO AuthenticationRefreshAuthenticationAccessTokenInfo (AuthenticationRefreshTokenRequestDTO body)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = AuthenticationRefreshAuthenticationAccessTokenInfoWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Authetication refresh token request</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        public ApiResponse< AccessTokenInfoDTO > AuthenticationRefreshAuthenticationAccessTokenInfoWithHttpInfo (AuthenticationRefreshTokenRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationRefreshAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/refreshUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefreshAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Authetication refresh token request</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        public async System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationRefreshAuthenticationAccessTokenInfoAsync (AuthenticationRefreshTokenRequestDTO body)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = await AuthenticationRefreshAuthenticationAccessTokenInfoAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Authetication refresh token request</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationRefreshAuthenticationAccessTokenInfoAsyncWithHttpInfo (AuthenticationRefreshTokenRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthenticationApi->AuthenticationRefreshAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/refreshUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefreshAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>AccessTokenInfoDTO</returns>
        public AccessTokenInfoDTO AuthenticationRefreshAuthenticationAccessTokenInfo (string clientId, string clientSecret, string refreshToken)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = AuthenticationRefreshAuthenticationAccessTokenInfoWithHttpInfo(clientId, clientSecret, refreshToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        public ApiResponse< AccessTokenInfoDTO > AuthenticationRefreshAuthenticationAccessTokenInfoWithHttpInfo (string clientId, string clientSecret, string refreshToken)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationRefreshAuthenticationAccessTokenInfo");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationRefreshAuthenticationAccessTokenInfo");
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling AuthenticationApi->AuthenticationRefreshAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/refreshUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refreshToken", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefreshAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        public async System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationRefreshAuthenticationAccessTokenInfoAsync (string clientId, string clientSecret, string refreshToken)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = await AuthenticationRefreshAuthenticationAccessTokenInfoAsyncWithHttpInfo(clientId, clientSecret, refreshToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call refreshes and decodes authentication token for user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="refreshToken"></param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationRefreshAuthenticationAccessTokenInfoAsyncWithHttpInfo (string clientId, string clientSecret, string refreshToken)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->AuthenticationRefreshAuthenticationAccessTokenInfo");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AuthenticationApi->AuthenticationRefreshAuthenticationAccessTokenInfo");
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling AuthenticationApi->AuthenticationRefreshAuthenticationAccessTokenInfo");

            var localVarPath = "/api/Authentication/refreshUserAuthenticationAccessTokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarFormParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("clientSecret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refreshToken", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationRefreshAuthenticationAccessTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

    }
}
