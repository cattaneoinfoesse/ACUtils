/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBindersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call adds specified profiles to a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for insert profiles into the binder</param>
        /// <returns></returns>
        void BindersAddProfilesToBinder (BinderProfilesInsertRequest body);

        /// <summary>
        /// This call adds specified profiles to a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for insert profiles into the binder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersAddProfilesToBinderWithHttpInfo (BinderProfilesInsertRequest body);
        /// <summary>
        /// This call adds specified profiles to a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns></returns>
        void BindersAddProfilesToBinder (List<int?> profilesIds, int? binderId);

        /// <summary>
        /// This call adds specified profiles to a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersAddProfilesToBinderWithHttpInfo (List<int?> profilesIds, int? binderId);
        /// <summary>
        /// This call updates the possible values for a combo custom binder field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update values request</param>
        /// <returns></returns>
        void BindersBinderComboValues (BinderComboValuesUpdateRequest body);

        /// <summary>
        /// This call updates the possible values for a combo custom binder field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update values request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersBinderComboValuesWithHttpInfo (BinderComboValuesUpdateRequest body);
        /// <summary>
        /// This call updates the possible values for a combo custom binder field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="values"></param>
        /// <param name="binderComboCustomFieldId"></param>
        /// <returns></returns>
        void BindersBinderComboValues (List<string> values, int? binderComboCustomFieldId);

        /// <summary>
        /// This call updates the possible values for a combo custom binder field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="values"></param>
        /// <param name="binderComboCustomFieldId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersBinderComboValuesWithHttpInfo (List<string> values, int? binderComboCustomFieldId);
        /// <summary>
        /// This call updates custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        List<FieldBaseDTO> BindersBinderCustomFieldsTranslations (BinderTypeCustomFieldUpdateRequest body);

        /// <summary>
        /// This call updates custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        ApiResponse<List<FieldBaseDTO>> BindersBinderCustomFieldsTranslationsWithHttpInfo (BinderTypeCustomFieldUpdateRequest body);
        /// <summary>
        /// This call updates custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="bynderTypeId"></param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        List<FieldBaseDTO> BindersBinderCustomFieldsTranslations (List<FieldBaseDTO> fields, int? bynderTypeId);

        /// <summary>
        /// This call updates custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="bynderTypeId"></param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        ApiResponse<List<FieldBaseDTO>> BindersBinderCustomFieldsTranslationsWithHttpInfo (List<FieldBaseDTO> fields, int? bynderTypeId);
        /// <summary>
        /// This call updates translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request object</param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns></returns>
        void BindersBinderCustomFieldsTranslations_0 (UpdateFieldTranslationRequest body, int? customFieldId);

        /// <summary>
        /// This call updates translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request object</param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersBinderCustomFieldsTranslations_0WithHttpInfo (UpdateFieldTranslationRequest body, int? customFieldId);
        /// <summary>
        /// This call updates translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translations"></param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns></returns>
        void BindersBinderCustomFieldsTranslations_0 (List<FieldTranslation> translations, int? customFieldId);

        /// <summary>
        /// This call updates translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translations"></param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersBinderCustomFieldsTranslations_0WithHttpInfo (List<FieldTranslation> translations, int? customFieldId);
        /// <summary>
        /// This call returns if the connected user can insert a new binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? BindersCanInsertNewBinderType ();

        /// <summary>
        /// This call returns if the connected user can insert a new binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> BindersCanInsertNewBinderTypeWithHttpInfo ();
        /// <summary>
        /// This call creates delete a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">Identifier of the binder type to delete</param>
        /// <returns></returns>
        void BindersDeleteBinderType (int? binderTypeId);

        /// <summary>
        /// This call creates delete a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">Identifier of the binder type to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersDeleteBinderTypeWithHttpInfo (int? binderTypeId);
        /// <summary>
        /// This call deletes a binder by the identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">Identifier of the binder to delete</param>
        /// <returns></returns>
        void BindersDeleteById (int? binderId);

        /// <summary>
        /// This call deletes a binder by the identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">Identifier of the binder to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersDeleteByIdWithHttpInfo (int? binderId);
        /// <summary>
        /// This call returns the possible combo value of a binder combo custom field by field id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comboFieldId">The identifier of a binder combo custom field</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> BindersGetBinderComboValues (int? comboFieldId);

        /// <summary>
        /// This call returns the possible combo value of a binder combo custom field by field id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comboFieldId">The identifier of a binder combo custom field</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> BindersGetBinderComboValuesWithHttpInfo (int? comboFieldId);
        /// <summary>
        /// This call returns the custom fields by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        List<FieldBaseDTO> BindersGetBinderCustomFields (int? binderType);

        /// <summary>
        /// This call returns the custom fields by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        ApiResponse<List<FieldBaseDTO>> BindersGetBinderCustomFieldsWithHttpInfo (int? binderType);
        /// <summary>
        /// This call returns translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Identifier of the custm field</param>
        /// <returns>List&lt;FieldTranslation&gt;</returns>
        List<FieldTranslation> BindersGetBinderCustomFieldsTranslations (int? customFieldId);

        /// <summary>
        /// This call returns translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Identifier of the custm field</param>
        /// <returns>ApiResponse of List&lt;FieldTranslation&gt;</returns>
        ApiResponse<List<FieldTranslation>> BindersGetBinderCustomFieldsTranslationsWithHttpInfo (int? customFieldId);
        /// <summary>
        /// This call returns the users permissions for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>PermissionsDTO</returns>
        PermissionsDTO BindersGetBinderPermission (int? binderId);

        /// <summary>
        /// This call returns the users permissions for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        ApiResponse<PermissionsDTO> BindersGetBinderPermissionWithHttpInfo (int? binderId);
        /// <summary>
        /// This call returns the possible states for binder visualization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BinderStateDto&gt;</returns>
        List<BinderStateDto> BindersGetBinderStateForVisualization ();

        /// <summary>
        /// This call returns the possible states for binder visualization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BinderStateDto&gt;</returns>
        ApiResponse<List<BinderStateDto>> BindersGetBinderStateForVisualizationWithHttpInfo ();
        /// <summary>
        /// This call returns the possible states for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BinderStateDto&gt;</returns>
        List<BinderStateDto> BindersGetBinderStates ();

        /// <summary>
        /// This call returns the possible states for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BinderStateDto&gt;</returns>
        ApiResponse<List<BinderStateDto>> BindersGetBinderStatesWithHttpInfo ();
        /// <summary>
        /// This call returns a binder type by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>BinderTypeDTO</returns>
        BinderTypeDTO BindersGetBinderTypeById (int? binderTypeId);

        /// <summary>
        /// This call returns a binder type by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>ApiResponse of BinderTypeDTO</returns>
        ApiResponse<BinderTypeDTO> BindersGetBinderTypeByIdWithHttpInfo (int? binderTypeId);
        /// <summary>
        /// This call returns the permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>PermissionsDTO</returns>
        PermissionsDTO BindersGetBinderTypePermission (int? binderTypeId);

        /// <summary>
        /// This call returns the permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        ApiResponse<PermissionsDTO> BindersGetBinderTypePermissionWithHttpInfo (int? binderTypeId);
        /// <summary>
        /// This call returns the binder custom fields by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        List<FieldBaseDTO> BindersGetBindersFieldsByType (int? binderType);

        /// <summary>
        /// This call returns the binder custom fields by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        ApiResponse<List<FieldBaseDTO>> BindersGetBindersFieldsByTypeWithHttpInfo (int? binderType);
        /// <summary>
        /// This call search a binder by the given identifiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifiers filter</param>
        /// <returns>BinderDTO</returns>
        BinderDTO BindersGetById (int? id);

        /// <summary>
        /// This call search a binder by the given identifiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifiers filter</param>
        /// <returns>ApiResponse of BinderDTO</returns>
        ApiResponse<BinderDTO> BindersGetByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call search a binder by the given identifiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The identifiers filter</param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        List<BinderDTO> BindersGetByIds (List<int?> body);

        /// <summary>
        /// This call search a binder by the given identifiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The identifiers filter</param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        ApiResponse<List<BinderDTO>> BindersGetByIdsWithHttpInfo (List<int?> body);
        /// <summary>
        /// This call search a binder by the given number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number filter</param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        List<BinderDTO> BindersGetByNumero (string number);

        /// <summary>
        /// This call search a binder by the given number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number filter</param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        ApiResponse<List<BinderDTO>> BindersGetByNumeroWithHttpInfo (string number);
        /// <summary>
        /// This call search a binder by the given number
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Binders?number&#x3D;{number}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numero">The number filter</param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        List<BinderDTO> BindersGetByNumeroOld (string numero);

        /// <summary>
        /// This call search a binder by the given number
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Binders?number&#x3D;{number}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numero">The number filter</param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        ApiResponse<List<BinderDTO>> BindersGetByNumeroOldWithHttpInfo (string numero);
        /// <summary>
        /// This call retrieve binders of the given type and state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Binders type filter</param>
        /// <param name="state">Binder state filter</param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        List<BinderDTO> BindersGetByTypeAndState (int? type, int? state);

        /// <summary>
        /// This call retrieve binders of the given type and state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Binders type filter</param>
        /// <param name="state">Binder state filter</param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        ApiResponse<List<BinderDTO>> BindersGetByTypeAndStateWithHttpInfo (int? type, int? state);
        /// <summary>
        /// This call returns the types of binders available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BinderTypeDTO&gt;</returns>
        List<BinderTypeDTO> BindersGetTypesOfPratiche ();

        /// <summary>
        /// This call returns the types of binders available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BinderTypeDTO&gt;</returns>
        ApiResponse<List<BinderTypeDTO>> BindersGetTypesOfPraticheWithHttpInfo ();
        /// <summary>
        /// This call returns the default type and state for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BinderUserDefaultTypeAndStateDto</returns>
        BinderUserDefaultTypeAndStateDto BindersGetUserDefaultTypeAndStateSelection ();

        /// <summary>
        /// This call returns the default type and state for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BinderUserDefaultTypeAndStateDto</returns>
        ApiResponse<BinderUserDefaultTypeAndStateDto> BindersGetUserDefaultTypeAndStateSelectionWithHttpInfo ();
        /// <summary>
        /// This call adds new binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BinderDTO</returns>
        BinderDTO BindersInsertNewBinder (BinderDTO body = null);

        /// <summary>
        /// This call adds new binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BinderDTO</returns>
        ApiResponse<BinderDTO> BindersInsertNewBinderWithHttpInfo (BinderDTO body = null);
        /// <summary>
        /// This call creates new binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BinderTypeDTO</returns>
        BinderTypeDTO BindersInsertNewBinderType (BinderTypeDTO body = null);

        /// <summary>
        /// This call creates new binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BinderTypeDTO</returns>
        ApiResponse<BinderTypeDTO> BindersInsertNewBinderTypeWithHttpInfo (BinderTypeDTO body = null);
        /// <summary>
        /// This call removes specified profiles from a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for remove profiles into the binder</param>
        /// <returns></returns>
        void BindersRemoveProfilesFromBinder (BinderProfilesRemoveRequest body);

        /// <summary>
        /// This call removes specified profiles from a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for remove profiles into the binder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersRemoveProfilesFromBinderWithHttpInfo (BinderProfilesRemoveRequest body);
        /// <summary>
        /// This call removes specified profiles from a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns></returns>
        void BindersRemoveProfilesFromBinder (List<int?> profilesIds, int? binderId);

        /// <summary>
        /// This call removes specified profiles from a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersRemoveProfilesFromBinderWithHttpInfo (List<int?> profilesIds, int? binderId);
        /// <summary>
        /// This call updates permission for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns></returns>
        void BindersSetBinderPermission (PermissionsDTO body, int? binderId);

        /// <summary>
        /// This call updates permission for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersSetBinderPermissionWithHttpInfo (PermissionsDTO body, int? binderId);
        /// <summary>
        /// This call updates permission for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns></returns>
        void BindersSetBinderPermission (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderId);

        /// <summary>
        /// This call updates permission for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersSetBinderPermissionWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderId);
        /// <summary>
        /// This call updates permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns></returns>
        void BindersSetBinderTypePermission (BinderPermissionsDTO body, int? binderTypeId);

        /// <summary>
        /// This call updates permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersSetBinderTypePermissionWithHttpInfo (BinderPermissionsDTO body, int? binderTypeId);
        /// <summary>
        /// This call updates permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spread"></param>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns></returns>
        void BindersSetBinderTypePermission (bool? spread, List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderTypeId);

        /// <summary>
        /// This call updates permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spread"></param>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersSetBinderTypePermissionWithHttpInfo (bool? spread, List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderTypeId);
        /// <summary>
        /// This call saves the user binder type and state default
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new default for the user</param>
        /// <returns></returns>
        void BindersSetUserDefaultTypeAndStateSelection (BinderUserDefaultTypeAndStateDto body);

        /// <summary>
        /// This call saves the user binder type and state default
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new default for the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersSetUserDefaultTypeAndStateSelectionWithHttpInfo (BinderUserDefaultTypeAndStateDto body);
        /// <summary>
        /// This call saves the user binder type and state default
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defaultBinderType"></param>
        /// <param name="defaultBinderState"></param>
        /// <returns></returns>
        void BindersSetUserDefaultTypeAndStateSelection (int? defaultBinderType, int? defaultBinderState);

        /// <summary>
        /// This call saves the user binder type and state default
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defaultBinderType"></param>
        /// <param name="defaultBinderState"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BindersSetUserDefaultTypeAndStateSelectionWithHttpInfo (int? defaultBinderType, int? defaultBinderState);
        /// <summary>
        /// This call updates all binder values, also custom fields, by binder identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The identifier of the binder</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BinderDTO</returns>
        BinderDTO BindersUpdateBinderById (int? binderId, BinderDTO body = null);

        /// <summary>
        /// This call updates all binder values, also custom fields, by binder identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The identifier of the binder</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BinderDTO</returns>
        ApiResponse<BinderDTO> BindersUpdateBinderByIdWithHttpInfo (int? binderId, BinderDTO body = null);
        /// <summary>
        /// This call updates a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BinderTypeDTO</returns>
        BinderTypeDTO BindersUpdateBinderTypeById (BinderTypeDTO body = null);

        /// <summary>
        /// This call updates a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BinderTypeDTO</returns>
        ApiResponse<BinderTypeDTO> BindersUpdateBinderTypeByIdWithHttpInfo (BinderTypeDTO body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call adds specified profiles to a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for insert profiles into the binder</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersAddProfilesToBinderAsync (BinderProfilesInsertRequest body);

        /// <summary>
        /// This call adds specified profiles to a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for insert profiles into the binder</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersAddProfilesToBinderAsyncWithHttpInfo (BinderProfilesInsertRequest body);
        /// <summary>
        /// This call adds specified profiles to a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersAddProfilesToBinderAsync (List<int?> profilesIds, int? binderId);

        /// <summary>
        /// This call adds specified profiles to a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersAddProfilesToBinderAsyncWithHttpInfo (List<int?> profilesIds, int? binderId);
        /// <summary>
        /// This call updates the possible values for a combo custom binder field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update values request</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersBinderComboValuesAsync (BinderComboValuesUpdateRequest body);

        /// <summary>
        /// This call updates the possible values for a combo custom binder field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update values request</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersBinderComboValuesAsyncWithHttpInfo (BinderComboValuesUpdateRequest body);
        /// <summary>
        /// This call updates the possible values for a combo custom binder field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="values"></param>
        /// <param name="binderComboCustomFieldId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersBinderComboValuesAsync (List<string> values, int? binderComboCustomFieldId);

        /// <summary>
        /// This call updates the possible values for a combo custom binder field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="values"></param>
        /// <param name="binderComboCustomFieldId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersBinderComboValuesAsyncWithHttpInfo (List<string> values, int? binderComboCustomFieldId);
        /// <summary>
        /// This call updates custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldBaseDTO>> BindersBinderCustomFieldsTranslationsAsync (BinderTypeCustomFieldUpdateRequest body);

        /// <summary>
        /// This call updates custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> BindersBinderCustomFieldsTranslationsAsyncWithHttpInfo (BinderTypeCustomFieldUpdateRequest body);
        /// <summary>
        /// This call updates custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="bynderTypeId"></param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldBaseDTO>> BindersBinderCustomFieldsTranslationsAsync (List<FieldBaseDTO> fields, int? bynderTypeId);

        /// <summary>
        /// This call updates custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="bynderTypeId"></param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> BindersBinderCustomFieldsTranslationsAsyncWithHttpInfo (List<FieldBaseDTO> fields, int? bynderTypeId);
        /// <summary>
        /// This call updates translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request object</param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersBinderCustomFieldsTranslations_0Async (UpdateFieldTranslationRequest body, int? customFieldId);

        /// <summary>
        /// This call updates translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request object</param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersBinderCustomFieldsTranslations_0AsyncWithHttpInfo (UpdateFieldTranslationRequest body, int? customFieldId);
        /// <summary>
        /// This call updates translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translations"></param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersBinderCustomFieldsTranslations_0Async (List<FieldTranslation> translations, int? customFieldId);

        /// <summary>
        /// This call updates translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translations"></param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersBinderCustomFieldsTranslations_0AsyncWithHttpInfo (List<FieldTranslation> translations, int? customFieldId);
        /// <summary>
        /// This call returns if the connected user can insert a new binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> BindersCanInsertNewBinderTypeAsync ();

        /// <summary>
        /// This call returns if the connected user can insert a new binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> BindersCanInsertNewBinderTypeAsyncWithHttpInfo ();
        /// <summary>
        /// This call creates delete a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">Identifier of the binder type to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersDeleteBinderTypeAsync (int? binderTypeId);

        /// <summary>
        /// This call creates delete a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">Identifier of the binder type to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersDeleteBinderTypeAsyncWithHttpInfo (int? binderTypeId);
        /// <summary>
        /// This call deletes a binder by the identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">Identifier of the binder to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersDeleteByIdAsync (int? binderId);

        /// <summary>
        /// This call deletes a binder by the identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">Identifier of the binder to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersDeleteByIdAsyncWithHttpInfo (int? binderId);
        /// <summary>
        /// This call returns the possible combo value of a binder combo custom field by field id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comboFieldId">The identifier of a binder combo custom field</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> BindersGetBinderComboValuesAsync (int? comboFieldId);

        /// <summary>
        /// This call returns the possible combo value of a binder combo custom field by field id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comboFieldId">The identifier of a binder combo custom field</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> BindersGetBinderComboValuesAsyncWithHttpInfo (int? comboFieldId);
        /// <summary>
        /// This call returns the custom fields by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldBaseDTO>> BindersGetBinderCustomFieldsAsync (int? binderType);

        /// <summary>
        /// This call returns the custom fields by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> BindersGetBinderCustomFieldsAsyncWithHttpInfo (int? binderType);
        /// <summary>
        /// This call returns translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Identifier of the custm field</param>
        /// <returns>Task of List&lt;FieldTranslation&gt;</returns>
        System.Threading.Tasks.Task<List<FieldTranslation>> BindersGetBinderCustomFieldsTranslationsAsync (int? customFieldId);

        /// <summary>
        /// This call returns translation custom field for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Identifier of the custm field</param>
        /// <returns>Task of ApiResponse (List&lt;FieldTranslation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldTranslation>>> BindersGetBinderCustomFieldsTranslationsAsyncWithHttpInfo (int? customFieldId);
        /// <summary>
        /// This call returns the users permissions for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of PermissionsDTO</returns>
        System.Threading.Tasks.Task<PermissionsDTO> BindersGetBinderPermissionAsync (int? binderId);

        /// <summary>
        /// This call returns the users permissions for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> BindersGetBinderPermissionAsyncWithHttpInfo (int? binderId);
        /// <summary>
        /// This call returns the possible states for binder visualization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BinderStateDto&gt;</returns>
        System.Threading.Tasks.Task<List<BinderStateDto>> BindersGetBinderStateForVisualizationAsync ();

        /// <summary>
        /// This call returns the possible states for binder visualization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BinderStateDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinderStateDto>>> BindersGetBinderStateForVisualizationAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the possible states for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BinderStateDto&gt;</returns>
        System.Threading.Tasks.Task<List<BinderStateDto>> BindersGetBinderStatesAsync ();

        /// <summary>
        /// This call returns the possible states for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BinderStateDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinderStateDto>>> BindersGetBinderStatesAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a binder type by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>Task of BinderTypeDTO</returns>
        System.Threading.Tasks.Task<BinderTypeDTO> BindersGetBinderTypeByIdAsync (int? binderTypeId);

        /// <summary>
        /// This call returns a binder type by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>Task of ApiResponse (BinderTypeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BinderTypeDTO>> BindersGetBinderTypeByIdAsyncWithHttpInfo (int? binderTypeId);
        /// <summary>
        /// This call returns the permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of PermissionsDTO</returns>
        System.Threading.Tasks.Task<PermissionsDTO> BindersGetBinderTypePermissionAsync (int? binderTypeId);

        /// <summary>
        /// This call returns the permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> BindersGetBinderTypePermissionAsyncWithHttpInfo (int? binderTypeId);
        /// <summary>
        /// This call returns the binder custom fields by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FieldBaseDTO>> BindersGetBindersFieldsByTypeAsync (int? binderType);

        /// <summary>
        /// This call returns the binder custom fields by binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> BindersGetBindersFieldsByTypeAsyncWithHttpInfo (int? binderType);
        /// <summary>
        /// This call search a binder by the given identifiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifiers filter</param>
        /// <returns>Task of BinderDTO</returns>
        System.Threading.Tasks.Task<BinderDTO> BindersGetByIdAsync (int? id);

        /// <summary>
        /// This call search a binder by the given identifiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifiers filter</param>
        /// <returns>Task of ApiResponse (BinderDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BinderDTO>> BindersGetByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call search a binder by the given identifiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The identifiers filter</param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BinderDTO>> BindersGetByIdsAsync (List<int?> body);

        /// <summary>
        /// This call search a binder by the given identifiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The identifiers filter</param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BindersGetByIdsAsyncWithHttpInfo (List<int?> body);
        /// <summary>
        /// This call search a binder by the given number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number filter</param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BinderDTO>> BindersGetByNumeroAsync (string number);

        /// <summary>
        /// This call search a binder by the given number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number filter</param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BindersGetByNumeroAsyncWithHttpInfo (string number);
        /// <summary>
        /// This call search a binder by the given number
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Binders?number&#x3D;{number}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numero">The number filter</param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BinderDTO>> BindersGetByNumeroOldAsync (string numero);

        /// <summary>
        /// This call search a binder by the given number
        /// </summary>
        /// <remarks>
        /// This method is deprecated. Use api/Binders?number&#x3D;{number}
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numero">The number filter</param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BindersGetByNumeroOldAsyncWithHttpInfo (string numero);
        /// <summary>
        /// This call retrieve binders of the given type and state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Binders type filter</param>
        /// <param name="state">Binder state filter</param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BinderDTO>> BindersGetByTypeAndStateAsync (int? type, int? state);

        /// <summary>
        /// This call retrieve binders of the given type and state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Binders type filter</param>
        /// <param name="state">Binder state filter</param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BindersGetByTypeAndStateAsyncWithHttpInfo (int? type, int? state);
        /// <summary>
        /// This call returns the types of binders available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BinderTypeDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BinderTypeDTO>> BindersGetTypesOfPraticheAsync ();

        /// <summary>
        /// This call returns the types of binders available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BinderTypeDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinderTypeDTO>>> BindersGetTypesOfPraticheAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the default type and state for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BinderUserDefaultTypeAndStateDto</returns>
        System.Threading.Tasks.Task<BinderUserDefaultTypeAndStateDto> BindersGetUserDefaultTypeAndStateSelectionAsync ();

        /// <summary>
        /// This call returns the default type and state for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BinderUserDefaultTypeAndStateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BinderUserDefaultTypeAndStateDto>> BindersGetUserDefaultTypeAndStateSelectionAsyncWithHttpInfo ();
        /// <summary>
        /// This call adds new binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BinderDTO</returns>
        System.Threading.Tasks.Task<BinderDTO> BindersInsertNewBinderAsync (BinderDTO body = null);

        /// <summary>
        /// This call adds new binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BinderDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BinderDTO>> BindersInsertNewBinderAsyncWithHttpInfo (BinderDTO body = null);
        /// <summary>
        /// This call creates new binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BinderTypeDTO</returns>
        System.Threading.Tasks.Task<BinderTypeDTO> BindersInsertNewBinderTypeAsync (BinderTypeDTO body = null);

        /// <summary>
        /// This call creates new binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BinderTypeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BinderTypeDTO>> BindersInsertNewBinderTypeAsyncWithHttpInfo (BinderTypeDTO body = null);
        /// <summary>
        /// This call removes specified profiles from a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for remove profiles into the binder</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersRemoveProfilesFromBinderAsync (BinderProfilesRemoveRequest body);

        /// <summary>
        /// This call removes specified profiles from a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for remove profiles into the binder</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersRemoveProfilesFromBinderAsyncWithHttpInfo (BinderProfilesRemoveRequest body);
        /// <summary>
        /// This call removes specified profiles from a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersRemoveProfilesFromBinderAsync (List<int?> profilesIds, int? binderId);

        /// <summary>
        /// This call removes specified profiles from a binder container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersRemoveProfilesFromBinderAsyncWithHttpInfo (List<int?> profilesIds, int? binderId);
        /// <summary>
        /// This call updates permission for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersSetBinderPermissionAsync (PermissionsDTO body, int? binderId);

        /// <summary>
        /// This call updates permission for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetBinderPermissionAsyncWithHttpInfo (PermissionsDTO body, int? binderId);
        /// <summary>
        /// This call updates permission for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersSetBinderPermissionAsync (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderId);

        /// <summary>
        /// This call updates permission for a binder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetBinderPermissionAsyncWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderId);
        /// <summary>
        /// This call updates permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersSetBinderTypePermissionAsync (BinderPermissionsDTO body, int? binderTypeId);

        /// <summary>
        /// This call updates permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetBinderTypePermissionAsyncWithHttpInfo (BinderPermissionsDTO body, int? binderTypeId);
        /// <summary>
        /// This call updates permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spread"></param>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersSetBinderTypePermissionAsync (bool? spread, List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderTypeId);

        /// <summary>
        /// This call updates permission for a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spread"></param>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetBinderTypePermissionAsyncWithHttpInfo (bool? spread, List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderTypeId);
        /// <summary>
        /// This call saves the user binder type and state default
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new default for the user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersSetUserDefaultTypeAndStateSelectionAsync (BinderUserDefaultTypeAndStateDto body);

        /// <summary>
        /// This call saves the user binder type and state default
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new default for the user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetUserDefaultTypeAndStateSelectionAsyncWithHttpInfo (BinderUserDefaultTypeAndStateDto body);
        /// <summary>
        /// This call saves the user binder type and state default
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defaultBinderType"></param>
        /// <param name="defaultBinderState"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BindersSetUserDefaultTypeAndStateSelectionAsync (int? defaultBinderType, int? defaultBinderState);

        /// <summary>
        /// This call saves the user binder type and state default
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defaultBinderType"></param>
        /// <param name="defaultBinderState"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetUserDefaultTypeAndStateSelectionAsyncWithHttpInfo (int? defaultBinderType, int? defaultBinderState);
        /// <summary>
        /// This call updates all binder values, also custom fields, by binder identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The identifier of the binder</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BinderDTO</returns>
        System.Threading.Tasks.Task<BinderDTO> BindersUpdateBinderByIdAsync (int? binderId, BinderDTO body = null);

        /// <summary>
        /// This call updates all binder values, also custom fields, by binder identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The identifier of the binder</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BinderDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BinderDTO>> BindersUpdateBinderByIdAsyncWithHttpInfo (int? binderId, BinderDTO body = null);
        /// <summary>
        /// This call updates a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BinderTypeDTO</returns>
        System.Threading.Tasks.Task<BinderTypeDTO> BindersUpdateBinderTypeByIdAsync (BinderTypeDTO body = null);

        /// <summary>
        /// This call updates a binder type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BinderTypeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BinderTypeDTO>> BindersUpdateBinderTypeByIdAsyncWithHttpInfo (BinderTypeDTO body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BindersApi : IBindersApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BindersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BindersApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BindersApi"/> class
        /// </summary>
        /// <returns></returns>
        public BindersApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BindersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BindersApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call adds specified profiles to a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for insert profiles into the binder</param>
        /// <returns></returns>
        public void BindersAddProfilesToBinder (BinderProfilesInsertRequest body)
        {
             BindersAddProfilesToBinderWithHttpInfo(body);
        }

        /// <summary>
        /// This call adds specified profiles to a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for insert profiles into the binder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersAddProfilesToBinderWithHttpInfo (BinderProfilesInsertRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersAddProfilesToBinder");

            var localVarPath = "/api/Binders/addprofiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersAddProfilesToBinder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call adds specified profiles to a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for insert profiles into the binder</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersAddProfilesToBinderAsync (BinderProfilesInsertRequest body)
        {
             await BindersAddProfilesToBinderAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call adds specified profiles to a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for insert profiles into the binder</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersAddProfilesToBinderAsyncWithHttpInfo (BinderProfilesInsertRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersAddProfilesToBinder");

            var localVarPath = "/api/Binders/addprofiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersAddProfilesToBinder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call adds specified profiles to a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns></returns>
        public void BindersAddProfilesToBinder (List<int?> profilesIds, int? binderId)
        {
             BindersAddProfilesToBinderWithHttpInfo(profilesIds, binderId);
        }

        /// <summary>
        /// This call adds specified profiles to a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersAddProfilesToBinderWithHttpInfo (List<int?> profilesIds, int? binderId)
        {
            // verify the required parameter 'profilesIds' is set
            if (profilesIds == null)
                throw new ApiException(400, "Missing required parameter 'profilesIds' when calling BindersApi->BindersAddProfilesToBinder");
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersAddProfilesToBinder");

            var localVarPath = "/api/Binders/addprofiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profilesIds != null) localVarFormParams.Add("profilesIds", this.Configuration.ApiClient.ParameterToString(profilesIds)); // form parameter
            if (binderId != null) localVarFormParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersAddProfilesToBinder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call adds specified profiles to a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersAddProfilesToBinderAsync (List<int?> profilesIds, int? binderId)
        {
             await BindersAddProfilesToBinderAsyncWithHttpInfo(profilesIds, binderId);

        }

        /// <summary>
        /// This call adds specified profiles to a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersAddProfilesToBinderAsyncWithHttpInfo (List<int?> profilesIds, int? binderId)
        {
            // verify the required parameter 'profilesIds' is set
            if (profilesIds == null)
                throw new ApiException(400, "Missing required parameter 'profilesIds' when calling BindersApi->BindersAddProfilesToBinder");
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersAddProfilesToBinder");

            var localVarPath = "/api/Binders/addprofiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profilesIds != null) localVarFormParams.Add("profilesIds", this.Configuration.ApiClient.ParameterToString(profilesIds)); // form parameter
            if (binderId != null) localVarFormParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersAddProfilesToBinder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the possible values for a combo custom binder field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update values request</param>
        /// <returns></returns>
        public void BindersBinderComboValues (BinderComboValuesUpdateRequest body)
        {
             BindersBinderComboValuesWithHttpInfo(body);
        }

        /// <summary>
        /// This call updates the possible values for a combo custom binder field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update values request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersBinderComboValuesWithHttpInfo (BinderComboValuesUpdateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersBinderComboValues");

            var localVarPath = "/api/Binders/combofieldvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderComboValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the possible values for a combo custom binder field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update values request</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersBinderComboValuesAsync (BinderComboValuesUpdateRequest body)
        {
             await BindersBinderComboValuesAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call updates the possible values for a combo custom binder field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update values request</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersBinderComboValuesAsyncWithHttpInfo (BinderComboValuesUpdateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersBinderComboValues");

            var localVarPath = "/api/Binders/combofieldvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderComboValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the possible values for a combo custom binder field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="values"></param>
        /// <param name="binderComboCustomFieldId"></param>
        /// <returns></returns>
        public void BindersBinderComboValues (List<string> values, int? binderComboCustomFieldId)
        {
             BindersBinderComboValuesWithHttpInfo(values, binderComboCustomFieldId);
        }

        /// <summary>
        /// This call updates the possible values for a combo custom binder field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="values"></param>
        /// <param name="binderComboCustomFieldId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersBinderComboValuesWithHttpInfo (List<string> values, int? binderComboCustomFieldId)
        {
            // verify the required parameter 'values' is set
            if (values == null)
                throw new ApiException(400, "Missing required parameter 'values' when calling BindersApi->BindersBinderComboValues");
            // verify the required parameter 'binderComboCustomFieldId' is set
            if (binderComboCustomFieldId == null)
                throw new ApiException(400, "Missing required parameter 'binderComboCustomFieldId' when calling BindersApi->BindersBinderComboValues");

            var localVarPath = "/api/Binders/combofieldvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (values != null) localVarFormParams.Add("values", this.Configuration.ApiClient.ParameterToString(values)); // form parameter
            if (binderComboCustomFieldId != null) localVarFormParams.Add("binderComboCustomFieldId", this.Configuration.ApiClient.ParameterToString(binderComboCustomFieldId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderComboValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the possible values for a combo custom binder field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="values"></param>
        /// <param name="binderComboCustomFieldId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersBinderComboValuesAsync (List<string> values, int? binderComboCustomFieldId)
        {
             await BindersBinderComboValuesAsyncWithHttpInfo(values, binderComboCustomFieldId);

        }

        /// <summary>
        /// This call updates the possible values for a combo custom binder field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="values"></param>
        /// <param name="binderComboCustomFieldId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersBinderComboValuesAsyncWithHttpInfo (List<string> values, int? binderComboCustomFieldId)
        {
            // verify the required parameter 'values' is set
            if (values == null)
                throw new ApiException(400, "Missing required parameter 'values' when calling BindersApi->BindersBinderComboValues");
            // verify the required parameter 'binderComboCustomFieldId' is set
            if (binderComboCustomFieldId == null)
                throw new ApiException(400, "Missing required parameter 'binderComboCustomFieldId' when calling BindersApi->BindersBinderComboValues");

            var localVarPath = "/api/Binders/combofieldvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (values != null) localVarFormParams.Add("values", this.Configuration.ApiClient.ParameterToString(values)); // form parameter
            if (binderComboCustomFieldId != null) localVarFormParams.Add("binderComboCustomFieldId", this.Configuration.ApiClient.ParameterToString(binderComboCustomFieldId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderComboValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        public List<FieldBaseDTO> BindersBinderCustomFieldsTranslations (BinderTypeCustomFieldUpdateRequest body)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = BindersBinderCustomFieldsTranslationsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        public ApiResponse< List<FieldBaseDTO> > BindersBinderCustomFieldsTranslationsWithHttpInfo (BinderTypeCustomFieldUpdateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersBinderCustomFieldsTranslations");

            var localVarPath = "/api/Binders/customfieldsbytype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderCustomFieldsTranslations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call updates custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldBaseDTO>> BindersBinderCustomFieldsTranslationsAsync (BinderTypeCustomFieldUpdateRequest body)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = await BindersBinderCustomFieldsTranslationsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> BindersBinderCustomFieldsTranslationsAsyncWithHttpInfo (BinderTypeCustomFieldUpdateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersBinderCustomFieldsTranslations");

            var localVarPath = "/api/Binders/customfieldsbytype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderCustomFieldsTranslations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call updates custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="bynderTypeId"></param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        public List<FieldBaseDTO> BindersBinderCustomFieldsTranslations (List<FieldBaseDTO> fields, int? bynderTypeId)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = BindersBinderCustomFieldsTranslationsWithHttpInfo(fields, bynderTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="bynderTypeId"></param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        public ApiResponse< List<FieldBaseDTO> > BindersBinderCustomFieldsTranslationsWithHttpInfo (List<FieldBaseDTO> fields, int? bynderTypeId)
        {
            // verify the required parameter 'fields' is set
            if (fields == null)
                throw new ApiException(400, "Missing required parameter 'fields' when calling BindersApi->BindersBinderCustomFieldsTranslations");
            // verify the required parameter 'bynderTypeId' is set
            if (bynderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'bynderTypeId' when calling BindersApi->BindersBinderCustomFieldsTranslations");

            var localVarPath = "/api/Binders/customfieldsbytype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarFormParams.Add("fields", this.Configuration.ApiClient.ParameterToString(fields)); // form parameter
            if (bynderTypeId != null) localVarFormParams.Add("bynderTypeId", this.Configuration.ApiClient.ParameterToString(bynderTypeId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderCustomFieldsTranslations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call updates custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="bynderTypeId"></param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldBaseDTO>> BindersBinderCustomFieldsTranslationsAsync (List<FieldBaseDTO> fields, int? bynderTypeId)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = await BindersBinderCustomFieldsTranslationsAsyncWithHttpInfo(fields, bynderTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"></param>
        /// <param name="bynderTypeId"></param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> BindersBinderCustomFieldsTranslationsAsyncWithHttpInfo (List<FieldBaseDTO> fields, int? bynderTypeId)
        {
            // verify the required parameter 'fields' is set
            if (fields == null)
                throw new ApiException(400, "Missing required parameter 'fields' when calling BindersApi->BindersBinderCustomFieldsTranslations");
            // verify the required parameter 'bynderTypeId' is set
            if (bynderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'bynderTypeId' when calling BindersApi->BindersBinderCustomFieldsTranslations");

            var localVarPath = "/api/Binders/customfieldsbytype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarFormParams.Add("fields", this.Configuration.ApiClient.ParameterToString(fields)); // form parameter
            if (bynderTypeId != null) localVarFormParams.Add("bynderTypeId", this.Configuration.ApiClient.ParameterToString(bynderTypeId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderCustomFieldsTranslations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call updates translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request object</param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns></returns>
        public void BindersBinderCustomFieldsTranslations_0 (UpdateFieldTranslationRequest body, int? customFieldId)
        {
             BindersBinderCustomFieldsTranslations_0WithHttpInfo(body, customFieldId);
        }

        /// <summary>
        /// This call updates translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request object</param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersBinderCustomFieldsTranslations_0WithHttpInfo (UpdateFieldTranslationRequest body, int? customFieldId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersBinderCustomFieldsTranslations_0");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling BindersApi->BindersBinderCustomFieldsTranslations_0");

            var localVarPath = "/api/Binders/customFieldsTranslations/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderCustomFieldsTranslations_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request object</param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersBinderCustomFieldsTranslations_0Async (UpdateFieldTranslationRequest body, int? customFieldId)
        {
             await BindersBinderCustomFieldsTranslations_0AsyncWithHttpInfo(body, customFieldId);

        }

        /// <summary>
        /// This call updates translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The update custom fields request object</param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersBinderCustomFieldsTranslations_0AsyncWithHttpInfo (UpdateFieldTranslationRequest body, int? customFieldId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersBinderCustomFieldsTranslations_0");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling BindersApi->BindersBinderCustomFieldsTranslations_0");

            var localVarPath = "/api/Binders/customFieldsTranslations/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderCustomFieldsTranslations_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translations"></param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns></returns>
        public void BindersBinderCustomFieldsTranslations_0 (List<FieldTranslation> translations, int? customFieldId)
        {
             BindersBinderCustomFieldsTranslations_0WithHttpInfo(translations, customFieldId);
        }

        /// <summary>
        /// This call updates translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translations"></param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersBinderCustomFieldsTranslations_0WithHttpInfo (List<FieldTranslation> translations, int? customFieldId)
        {
            // verify the required parameter 'translations' is set
            if (translations == null)
                throw new ApiException(400, "Missing required parameter 'translations' when calling BindersApi->BindersBinderCustomFieldsTranslations_0");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling BindersApi->BindersBinderCustomFieldsTranslations_0");

            var localVarPath = "/api/Binders/customFieldsTranslations/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (translations != null) localVarFormParams.Add("translations", this.Configuration.ApiClient.ParameterToString(translations)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderCustomFieldsTranslations_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translations"></param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersBinderCustomFieldsTranslations_0Async (List<FieldTranslation> translations, int? customFieldId)
        {
             await BindersBinderCustomFieldsTranslations_0AsyncWithHttpInfo(translations, customFieldId);

        }

        /// <summary>
        /// This call updates translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translations"></param>
        /// <param name="customFieldId">customFieldId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersBinderCustomFieldsTranslations_0AsyncWithHttpInfo (List<FieldTranslation> translations, int? customFieldId)
        {
            // verify the required parameter 'translations' is set
            if (translations == null)
                throw new ApiException(400, "Missing required parameter 'translations' when calling BindersApi->BindersBinderCustomFieldsTranslations_0");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling BindersApi->BindersBinderCustomFieldsTranslations_0");

            var localVarPath = "/api/Binders/customFieldsTranslations/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (translations != null) localVarFormParams.Add("translations", this.Configuration.ApiClient.ParameterToString(translations)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersBinderCustomFieldsTranslations_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns if the connected user can insert a new binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? BindersCanInsertNewBinderType ()
        {
             ApiResponse<bool?> localVarResponse = BindersCanInsertNewBinderTypeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns if the connected user can insert a new binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > BindersCanInsertNewBinderTypeWithHttpInfo ()
        {

            var localVarPath = "/api/Binders/CanInsertNewType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersCanInsertNewBinderType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns if the connected user can insert a new binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> BindersCanInsertNewBinderTypeAsync ()
        {
             ApiResponse<bool?> localVarResponse = await BindersCanInsertNewBinderTypeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns if the connected user can insert a new binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> BindersCanInsertNewBinderTypeAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Binders/CanInsertNewType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersCanInsertNewBinderType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call creates delete a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">Identifier of the binder type to delete</param>
        /// <returns></returns>
        public void BindersDeleteBinderType (int? binderTypeId)
        {
             BindersDeleteBinderTypeWithHttpInfo(binderTypeId);
        }

        /// <summary>
        /// This call creates delete a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">Identifier of the binder type to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersDeleteBinderTypeWithHttpInfo (int? binderTypeId)
        {
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BindersApi->BindersDeleteBinderType");

            var localVarPath = "/api/Binders/type/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersDeleteBinderType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call creates delete a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">Identifier of the binder type to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersDeleteBinderTypeAsync (int? binderTypeId)
        {
             await BindersDeleteBinderTypeAsyncWithHttpInfo(binderTypeId);

        }

        /// <summary>
        /// This call creates delete a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">Identifier of the binder type to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersDeleteBinderTypeAsyncWithHttpInfo (int? binderTypeId)
        {
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BindersApi->BindersDeleteBinderType");

            var localVarPath = "/api/Binders/type/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersDeleteBinderType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a binder by the identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">Identifier of the binder to delete</param>
        /// <returns></returns>
        public void BindersDeleteById (int? binderId)
        {
             BindersDeleteByIdWithHttpInfo(binderId);
        }

        /// <summary>
        /// This call deletes a binder by the identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">Identifier of the binder to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersDeleteByIdWithHttpInfo (int? binderId)
        {
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersDeleteById");

            var localVarPath = "/api/Binders/{binderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderId != null) localVarPathParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a binder by the identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">Identifier of the binder to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersDeleteByIdAsync (int? binderId)
        {
             await BindersDeleteByIdAsyncWithHttpInfo(binderId);

        }

        /// <summary>
        /// This call deletes a binder by the identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">Identifier of the binder to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersDeleteByIdAsyncWithHttpInfo (int? binderId)
        {
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersDeleteById");

            var localVarPath = "/api/Binders/{binderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderId != null) localVarPathParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns the possible combo value of a binder combo custom field by field id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comboFieldId">The identifier of a binder combo custom field</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> BindersGetBinderComboValues (int? comboFieldId)
        {
             ApiResponse<List<string>> localVarResponse = BindersGetBinderComboValuesWithHttpInfo(comboFieldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possible combo value of a binder combo custom field by field id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comboFieldId">The identifier of a binder combo custom field</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > BindersGetBinderComboValuesWithHttpInfo (int? comboFieldId)
        {
            // verify the required parameter 'comboFieldId' is set
            if (comboFieldId == null)
                throw new ApiException(400, "Missing required parameter 'comboFieldId' when calling BindersApi->BindersGetBinderComboValues");

            var localVarPath = "/api/Binders/combofieldvalues/{comboFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (comboFieldId != null) localVarPathParams.Add("comboFieldId", this.Configuration.ApiClient.ParameterToString(comboFieldId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderComboValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// This call returns the possible combo value of a binder combo custom field by field id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comboFieldId">The identifier of a binder combo custom field</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> BindersGetBinderComboValuesAsync (int? comboFieldId)
        {
             ApiResponse<List<string>> localVarResponse = await BindersGetBinderComboValuesAsyncWithHttpInfo(comboFieldId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possible combo value of a binder combo custom field by field id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comboFieldId">The identifier of a binder combo custom field</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> BindersGetBinderComboValuesAsyncWithHttpInfo (int? comboFieldId)
        {
            // verify the required parameter 'comboFieldId' is set
            if (comboFieldId == null)
                throw new ApiException(400, "Missing required parameter 'comboFieldId' when calling BindersApi->BindersGetBinderComboValues");

            var localVarPath = "/api/Binders/combofieldvalues/{comboFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (comboFieldId != null) localVarPathParams.Add("comboFieldId", this.Configuration.ApiClient.ParameterToString(comboFieldId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderComboValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// This call returns the custom fields by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        public List<FieldBaseDTO> BindersGetBinderCustomFields (int? binderType)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = BindersGetBinderCustomFieldsWithHttpInfo(binderType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the custom fields by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        public ApiResponse< List<FieldBaseDTO> > BindersGetBinderCustomFieldsWithHttpInfo (int? binderType)
        {
            // verify the required parameter 'binderType' is set
            if (binderType == null)
                throw new ApiException(400, "Missing required parameter 'binderType' when calling BindersApi->BindersGetBinderCustomFields");

            var localVarPath = "/api/Binders/customfieldsbytype/{binderType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderType != null) localVarPathParams.Add("binderType", this.Configuration.ApiClient.ParameterToString(binderType)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call returns the custom fields by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldBaseDTO>> BindersGetBinderCustomFieldsAsync (int? binderType)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = await BindersGetBinderCustomFieldsAsyncWithHttpInfo(binderType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the custom fields by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> BindersGetBinderCustomFieldsAsyncWithHttpInfo (int? binderType)
        {
            // verify the required parameter 'binderType' is set
            if (binderType == null)
                throw new ApiException(400, "Missing required parameter 'binderType' when calling BindersApi->BindersGetBinderCustomFields");

            var localVarPath = "/api/Binders/customfieldsbytype/{binderType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderType != null) localVarPathParams.Add("binderType", this.Configuration.ApiClient.ParameterToString(binderType)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call returns translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Identifier of the custm field</param>
        /// <returns>List&lt;FieldTranslation&gt;</returns>
        public List<FieldTranslation> BindersGetBinderCustomFieldsTranslations (int? customFieldId)
        {
             ApiResponse<List<FieldTranslation>> localVarResponse = BindersGetBinderCustomFieldsTranslationsWithHttpInfo(customFieldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Identifier of the custm field</param>
        /// <returns>ApiResponse of List&lt;FieldTranslation&gt;</returns>
        public ApiResponse< List<FieldTranslation> > BindersGetBinderCustomFieldsTranslationsWithHttpInfo (int? customFieldId)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling BindersApi->BindersGetBinderCustomFieldsTranslations");

            var localVarPath = "/api/Binders/customFieldsTranslations/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderCustomFieldsTranslations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldTranslation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldTranslation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldTranslation>)));
        }

        /// <summary>
        /// This call returns translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Identifier of the custm field</param>
        /// <returns>Task of List&lt;FieldTranslation&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldTranslation>> BindersGetBinderCustomFieldsTranslationsAsync (int? customFieldId)
        {
             ApiResponse<List<FieldTranslation>> localVarResponse = await BindersGetBinderCustomFieldsTranslationsAsyncWithHttpInfo(customFieldId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns translation custom field for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Identifier of the custm field</param>
        /// <returns>Task of ApiResponse (List&lt;FieldTranslation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldTranslation>>> BindersGetBinderCustomFieldsTranslationsAsyncWithHttpInfo (int? customFieldId)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling BindersApi->BindersGetBinderCustomFieldsTranslations");

            var localVarPath = "/api/Binders/customFieldsTranslations/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderCustomFieldsTranslations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldTranslation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldTranslation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldTranslation>)));
        }

        /// <summary>
        /// This call returns the users permissions for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>PermissionsDTO</returns>
        public PermissionsDTO BindersGetBinderPermission (int? binderId)
        {
             ApiResponse<PermissionsDTO> localVarResponse = BindersGetBinderPermissionWithHttpInfo(binderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the users permissions for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        public ApiResponse< PermissionsDTO > BindersGetBinderPermissionWithHttpInfo (int? binderId)
        {
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersGetBinderPermission");

            var localVarPath = "/api/Binders/binderpermission/{binderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderId != null) localVarPathParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call returns the users permissions for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of PermissionsDTO</returns>
        public async System.Threading.Tasks.Task<PermissionsDTO> BindersGetBinderPermissionAsync (int? binderId)
        {
             ApiResponse<PermissionsDTO> localVarResponse = await BindersGetBinderPermissionAsyncWithHttpInfo(binderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the users permissions for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> BindersGetBinderPermissionAsyncWithHttpInfo (int? binderId)
        {
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersGetBinderPermission");

            var localVarPath = "/api/Binders/binderpermission/{binderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderId != null) localVarPathParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call returns the possible states for binder visualization 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BinderStateDto&gt;</returns>
        public List<BinderStateDto> BindersGetBinderStateForVisualization ()
        {
             ApiResponse<List<BinderStateDto>> localVarResponse = BindersGetBinderStateForVisualizationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possible states for binder visualization 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BinderStateDto&gt;</returns>
        public ApiResponse< List<BinderStateDto> > BindersGetBinderStateForVisualizationWithHttpInfo ()
        {

            var localVarPath = "/api/Binders/visualizationstates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderStateForVisualization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderStateDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderStateDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderStateDto>)));
        }

        /// <summary>
        /// This call returns the possible states for binder visualization 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BinderStateDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinderStateDto>> BindersGetBinderStateForVisualizationAsync ()
        {
             ApiResponse<List<BinderStateDto>> localVarResponse = await BindersGetBinderStateForVisualizationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possible states for binder visualization 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BinderStateDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinderStateDto>>> BindersGetBinderStateForVisualizationAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Binders/visualizationstates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderStateForVisualization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderStateDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderStateDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderStateDto>)));
        }

        /// <summary>
        /// This call returns the possible states for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BinderStateDto&gt;</returns>
        public List<BinderStateDto> BindersGetBinderStates ()
        {
             ApiResponse<List<BinderStateDto>> localVarResponse = BindersGetBinderStatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possible states for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BinderStateDto&gt;</returns>
        public ApiResponse< List<BinderStateDto> > BindersGetBinderStatesWithHttpInfo ()
        {

            var localVarPath = "/api/Binders/states";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderStateDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderStateDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderStateDto>)));
        }

        /// <summary>
        /// This call returns the possible states for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BinderStateDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinderStateDto>> BindersGetBinderStatesAsync ()
        {
             ApiResponse<List<BinderStateDto>> localVarResponse = await BindersGetBinderStatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possible states for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BinderStateDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinderStateDto>>> BindersGetBinderStatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Binders/states";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderStateDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderStateDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderStateDto>)));
        }

        /// <summary>
        /// This call returns a binder type by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>BinderTypeDTO</returns>
        public BinderTypeDTO BindersGetBinderTypeById (int? binderTypeId)
        {
             ApiResponse<BinderTypeDTO> localVarResponse = BindersGetBinderTypeByIdWithHttpInfo(binderTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a binder type by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>ApiResponse of BinderTypeDTO</returns>
        public ApiResponse< BinderTypeDTO > BindersGetBinderTypeByIdWithHttpInfo (int? binderTypeId)
        {
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BindersApi->BindersGetBinderTypeById");

            var localVarPath = "/api/Binders/type/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderTypeDTO)));
        }

        /// <summary>
        /// This call returns a binder type by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>Task of BinderTypeDTO</returns>
        public async System.Threading.Tasks.Task<BinderTypeDTO> BindersGetBinderTypeByIdAsync (int? binderTypeId)
        {
             ApiResponse<BinderTypeDTO> localVarResponse = await BindersGetBinderTypeByIdAsyncWithHttpInfo(binderTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a binder type by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The identifier of the binder type</param>
        /// <returns>Task of ApiResponse (BinderTypeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BinderTypeDTO>> BindersGetBinderTypeByIdAsyncWithHttpInfo (int? binderTypeId)
        {
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BindersApi->BindersGetBinderTypeById");

            var localVarPath = "/api/Binders/type/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderTypeDTO)));
        }

        /// <summary>
        /// This call returns the permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>PermissionsDTO</returns>
        public PermissionsDTO BindersGetBinderTypePermission (int? binderTypeId)
        {
             ApiResponse<PermissionsDTO> localVarResponse = BindersGetBinderTypePermissionWithHttpInfo(binderTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        public ApiResponse< PermissionsDTO > BindersGetBinderTypePermissionWithHttpInfo (int? binderTypeId)
        {
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BindersApi->BindersGetBinderTypePermission");

            var localVarPath = "/api/Binders/bindertypepermission/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderTypePermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call returns the permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of PermissionsDTO</returns>
        public async System.Threading.Tasks.Task<PermissionsDTO> BindersGetBinderTypePermissionAsync (int? binderTypeId)
        {
             ApiResponse<PermissionsDTO> localVarResponse = await BindersGetBinderTypePermissionAsyncWithHttpInfo(binderTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> BindersGetBinderTypePermissionAsyncWithHttpInfo (int? binderTypeId)
        {
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BindersApi->BindersGetBinderTypePermission");

            var localVarPath = "/api/Binders/bindertypepermission/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBinderTypePermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call returns the binder custom fields by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>List&lt;FieldBaseDTO&gt;</returns>
        public List<FieldBaseDTO> BindersGetBindersFieldsByType (int? binderType)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = BindersGetBindersFieldsByTypeWithHttpInfo(binderType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the binder custom fields by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>ApiResponse of List&lt;FieldBaseDTO&gt;</returns>
        public ApiResponse< List<FieldBaseDTO> > BindersGetBindersFieldsByTypeWithHttpInfo (int? binderType)
        {
            // verify the required parameter 'binderType' is set
            if (binderType == null)
                throw new ApiException(400, "Missing required parameter 'binderType' when calling BindersApi->BindersGetBindersFieldsByType");

            var localVarPath = "/api/Binders/binderfields/{binderType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderType != null) localVarPathParams.Add("binderType", this.Configuration.ApiClient.ParameterToString(binderType)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBindersFieldsByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call returns the binder custom fields by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>Task of List&lt;FieldBaseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldBaseDTO>> BindersGetBindersFieldsByTypeAsync (int? binderType)
        {
             ApiResponse<List<FieldBaseDTO>> localVarResponse = await BindersGetBindersFieldsByTypeAsyncWithHttpInfo(binderType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the binder custom fields by binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderType">Binder type identifier</param>
        /// <returns>Task of ApiResponse (List&lt;FieldBaseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldBaseDTO>>> BindersGetBindersFieldsByTypeAsyncWithHttpInfo (int? binderType)
        {
            // verify the required parameter 'binderType' is set
            if (binderType == null)
                throw new ApiException(400, "Missing required parameter 'binderType' when calling BindersApi->BindersGetBindersFieldsByType");

            var localVarPath = "/api/Binders/binderfields/{binderType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderType != null) localVarPathParams.Add("binderType", this.Configuration.ApiClient.ParameterToString(binderType)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetBindersFieldsByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldBaseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldBaseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldBaseDTO>)));
        }

        /// <summary>
        /// This call search a binder by the given identifiers 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifiers filter</param>
        /// <returns>BinderDTO</returns>
        public BinderDTO BindersGetById (int? id)
        {
             ApiResponse<BinderDTO> localVarResponse = BindersGetByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call search a binder by the given identifiers 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifiers filter</param>
        /// <returns>ApiResponse of BinderDTO</returns>
        public ApiResponse< BinderDTO > BindersGetByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BindersApi->BindersGetById");

            var localVarPath = "/api/Binders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderDTO)));
        }

        /// <summary>
        /// This call search a binder by the given identifiers 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifiers filter</param>
        /// <returns>Task of BinderDTO</returns>
        public async System.Threading.Tasks.Task<BinderDTO> BindersGetByIdAsync (int? id)
        {
             ApiResponse<BinderDTO> localVarResponse = await BindersGetByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call search a binder by the given identifiers 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifiers filter</param>
        /// <returns>Task of ApiResponse (BinderDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BinderDTO>> BindersGetByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BindersApi->BindersGetById");

            var localVarPath = "/api/Binders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderDTO)));
        }

        /// <summary>
        /// This call search a binder by the given identifiers 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The identifiers filter</param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        public List<BinderDTO> BindersGetByIds (List<int?> body)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = BindersGetByIdsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call search a binder by the given identifiers 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The identifiers filter</param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        public ApiResponse< List<BinderDTO> > BindersGetByIdsWithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersGetByIds");

            var localVarPath = "/api/Binders/getByIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call search a binder by the given identifiers 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The identifiers filter</param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinderDTO>> BindersGetByIdsAsync (List<int?> body)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = await BindersGetByIdsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call search a binder by the given identifiers 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The identifiers filter</param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BindersGetByIdsAsyncWithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersGetByIds");

            var localVarPath = "/api/Binders/getByIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call search a binder by the given number 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number filter</param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        public List<BinderDTO> BindersGetByNumero (string number)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = BindersGetByNumeroWithHttpInfo(number);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call search a binder by the given number 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number filter</param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        public ApiResponse< List<BinderDTO> > BindersGetByNumeroWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BindersApi->BindersGetByNumero");

            var localVarPath = "/api/Binders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "number", number)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetByNumero", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call search a binder by the given number 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number filter</param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinderDTO>> BindersGetByNumeroAsync (string number)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = await BindersGetByNumeroAsyncWithHttpInfo(number);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call search a binder by the given number 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number filter</param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BindersGetByNumeroAsyncWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling BindersApi->BindersGetByNumero");

            var localVarPath = "/api/Binders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "number", number)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetByNumero", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call search a binder by the given number This method is deprecated. Use api/Binders?number&#x3D;{number}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numero">The number filter</param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        public List<BinderDTO> BindersGetByNumeroOld (string numero)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = BindersGetByNumeroOldWithHttpInfo(numero);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call search a binder by the given number This method is deprecated. Use api/Binders?number&#x3D;{number}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numero">The number filter</param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        public ApiResponse< List<BinderDTO> > BindersGetByNumeroOldWithHttpInfo (string numero)
        {
            // verify the required parameter 'numero' is set
            if (numero == null)
                throw new ApiException(400, "Missing required parameter 'numero' when calling BindersApi->BindersGetByNumeroOld");

            var localVarPath = "/api/Binders/number/{numero}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numero != null) localVarPathParams.Add("numero", this.Configuration.ApiClient.ParameterToString(numero)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetByNumeroOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call search a binder by the given number This method is deprecated. Use api/Binders?number&#x3D;{number}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numero">The number filter</param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinderDTO>> BindersGetByNumeroOldAsync (string numero)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = await BindersGetByNumeroOldAsyncWithHttpInfo(numero);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call search a binder by the given number This method is deprecated. Use api/Binders?number&#x3D;{number}
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numero">The number filter</param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BindersGetByNumeroOldAsyncWithHttpInfo (string numero)
        {
            // verify the required parameter 'numero' is set
            if (numero == null)
                throw new ApiException(400, "Missing required parameter 'numero' when calling BindersApi->BindersGetByNumeroOld");

            var localVarPath = "/api/Binders/number/{numero}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numero != null) localVarPathParams.Add("numero", this.Configuration.ApiClient.ParameterToString(numero)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetByNumeroOld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call retrieve binders of the given type and state 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Binders type filter</param>
        /// <param name="state">Binder state filter</param>
        /// <returns>List&lt;BinderDTO&gt;</returns>
        public List<BinderDTO> BindersGetByTypeAndState (int? type, int? state)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = BindersGetByTypeAndStateWithHttpInfo(type, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve binders of the given type and state 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Binders type filter</param>
        /// <param name="state">Binder state filter</param>
        /// <returns>ApiResponse of List&lt;BinderDTO&gt;</returns>
        public ApiResponse< List<BinderDTO> > BindersGetByTypeAndStateWithHttpInfo (int? type, int? state)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BindersApi->BindersGetByTypeAndState");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling BindersApi->BindersGetByTypeAndState");

            var localVarPath = "/api/Binders/{type}/{state}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetByTypeAndState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call retrieve binders of the given type and state 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Binders type filter</param>
        /// <param name="state">Binder state filter</param>
        /// <returns>Task of List&lt;BinderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinderDTO>> BindersGetByTypeAndStateAsync (int? type, int? state)
        {
             ApiResponse<List<BinderDTO>> localVarResponse = await BindersGetByTypeAndStateAsyncWithHttpInfo(type, state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve binders of the given type and state 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Binders type filter</param>
        /// <param name="state">Binder state filter</param>
        /// <returns>Task of ApiResponse (List&lt;BinderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinderDTO>>> BindersGetByTypeAndStateAsyncWithHttpInfo (int? type, int? state)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BindersApi->BindersGetByTypeAndState");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling BindersApi->BindersGetByTypeAndState");

            var localVarPath = "/api/Binders/{type}/{state}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetByTypeAndState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderDTO>)));
        }

        /// <summary>
        /// This call returns the types of binders available 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BinderTypeDTO&gt;</returns>
        public List<BinderTypeDTO> BindersGetTypesOfPratiche ()
        {
             ApiResponse<List<BinderTypeDTO>> localVarResponse = BindersGetTypesOfPraticheWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the types of binders available 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BinderTypeDTO&gt;</returns>
        public ApiResponse< List<BinderTypeDTO> > BindersGetTypesOfPraticheWithHttpInfo ()
        {

            var localVarPath = "/api/Binders/Type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetTypesOfPratiche", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderTypeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderTypeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderTypeDTO>)));
        }

        /// <summary>
        /// This call returns the types of binders available 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BinderTypeDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinderTypeDTO>> BindersGetTypesOfPraticheAsync ()
        {
             ApiResponse<List<BinderTypeDTO>> localVarResponse = await BindersGetTypesOfPraticheAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the types of binders available 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BinderTypeDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinderTypeDTO>>> BindersGetTypesOfPraticheAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Binders/Type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetTypesOfPratiche", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinderTypeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BinderTypeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinderTypeDTO>)));
        }

        /// <summary>
        /// This call returns the default type and state for the user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BinderUserDefaultTypeAndStateDto</returns>
        public BinderUserDefaultTypeAndStateDto BindersGetUserDefaultTypeAndStateSelection ()
        {
             ApiResponse<BinderUserDefaultTypeAndStateDto> localVarResponse = BindersGetUserDefaultTypeAndStateSelectionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the default type and state for the user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BinderUserDefaultTypeAndStateDto</returns>
        public ApiResponse< BinderUserDefaultTypeAndStateDto > BindersGetUserDefaultTypeAndStateSelectionWithHttpInfo ()
        {

            var localVarPath = "/api/Binders/defaulttypeandstate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetUserDefaultTypeAndStateSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderUserDefaultTypeAndStateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderUserDefaultTypeAndStateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderUserDefaultTypeAndStateDto)));
        }

        /// <summary>
        /// This call returns the default type and state for the user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BinderUserDefaultTypeAndStateDto</returns>
        public async System.Threading.Tasks.Task<BinderUserDefaultTypeAndStateDto> BindersGetUserDefaultTypeAndStateSelectionAsync ()
        {
             ApiResponse<BinderUserDefaultTypeAndStateDto> localVarResponse = await BindersGetUserDefaultTypeAndStateSelectionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the default type and state for the user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BinderUserDefaultTypeAndStateDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BinderUserDefaultTypeAndStateDto>> BindersGetUserDefaultTypeAndStateSelectionAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Binders/defaulttypeandstate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersGetUserDefaultTypeAndStateSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderUserDefaultTypeAndStateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderUserDefaultTypeAndStateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderUserDefaultTypeAndStateDto)));
        }

        /// <summary>
        /// This call adds new binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BinderDTO</returns>
        public BinderDTO BindersInsertNewBinder (BinderDTO body = null)
        {
             ApiResponse<BinderDTO> localVarResponse = BindersInsertNewBinderWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds new binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BinderDTO</returns>
        public ApiResponse< BinderDTO > BindersInsertNewBinderWithHttpInfo (BinderDTO body = null)
        {

            var localVarPath = "/api/Binders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersInsertNewBinder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderDTO)));
        }

        /// <summary>
        /// This call adds new binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BinderDTO</returns>
        public async System.Threading.Tasks.Task<BinderDTO> BindersInsertNewBinderAsync (BinderDTO body = null)
        {
             ApiResponse<BinderDTO> localVarResponse = await BindersInsertNewBinderAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds new binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BinderDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BinderDTO>> BindersInsertNewBinderAsyncWithHttpInfo (BinderDTO body = null)
        {

            var localVarPath = "/api/Binders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersInsertNewBinder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderDTO)));
        }

        /// <summary>
        /// This call creates new binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BinderTypeDTO</returns>
        public BinderTypeDTO BindersInsertNewBinderType (BinderTypeDTO body = null)
        {
             ApiResponse<BinderTypeDTO> localVarResponse = BindersInsertNewBinderTypeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call creates new binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BinderTypeDTO</returns>
        public ApiResponse< BinderTypeDTO > BindersInsertNewBinderTypeWithHttpInfo (BinderTypeDTO body = null)
        {

            var localVarPath = "/api/Binders/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersInsertNewBinderType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderTypeDTO)));
        }

        /// <summary>
        /// This call creates new binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BinderTypeDTO</returns>
        public async System.Threading.Tasks.Task<BinderTypeDTO> BindersInsertNewBinderTypeAsync (BinderTypeDTO body = null)
        {
             ApiResponse<BinderTypeDTO> localVarResponse = await BindersInsertNewBinderTypeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call creates new binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BinderTypeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BinderTypeDTO>> BindersInsertNewBinderTypeAsyncWithHttpInfo (BinderTypeDTO body = null)
        {

            var localVarPath = "/api/Binders/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersInsertNewBinderType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderTypeDTO)));
        }

        /// <summary>
        /// This call removes specified profiles from a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for remove profiles into the binder</param>
        /// <returns></returns>
        public void BindersRemoveProfilesFromBinder (BinderProfilesRemoveRequest body)
        {
             BindersRemoveProfilesFromBinderWithHttpInfo(body);
        }

        /// <summary>
        /// This call removes specified profiles from a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for remove profiles into the binder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersRemoveProfilesFromBinderWithHttpInfo (BinderProfilesRemoveRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersRemoveProfilesFromBinder");

            var localVarPath = "/api/Binders/removeprofiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersRemoveProfilesFromBinder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call removes specified profiles from a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for remove profiles into the binder</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersRemoveProfilesFromBinderAsync (BinderProfilesRemoveRequest body)
        {
             await BindersRemoveProfilesFromBinderAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call removes specified profiles from a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request for remove profiles into the binder</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersRemoveProfilesFromBinderAsyncWithHttpInfo (BinderProfilesRemoveRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersRemoveProfilesFromBinder");

            var localVarPath = "/api/Binders/removeprofiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersRemoveProfilesFromBinder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call removes specified profiles from a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns></returns>
        public void BindersRemoveProfilesFromBinder (List<int?> profilesIds, int? binderId)
        {
             BindersRemoveProfilesFromBinderWithHttpInfo(profilesIds, binderId);
        }

        /// <summary>
        /// This call removes specified profiles from a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersRemoveProfilesFromBinderWithHttpInfo (List<int?> profilesIds, int? binderId)
        {
            // verify the required parameter 'profilesIds' is set
            if (profilesIds == null)
                throw new ApiException(400, "Missing required parameter 'profilesIds' when calling BindersApi->BindersRemoveProfilesFromBinder");
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersRemoveProfilesFromBinder");

            var localVarPath = "/api/Binders/removeprofiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profilesIds != null) localVarFormParams.Add("profilesIds", this.Configuration.ApiClient.ParameterToString(profilesIds)); // form parameter
            if (binderId != null) localVarFormParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersRemoveProfilesFromBinder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call removes specified profiles from a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersRemoveProfilesFromBinderAsync (List<int?> profilesIds, int? binderId)
        {
             await BindersRemoveProfilesFromBinderAsyncWithHttpInfo(profilesIds, binderId);

        }

        /// <summary>
        /// This call removes specified profiles from a binder container 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profilesIds"></param>
        /// <param name="binderId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersRemoveProfilesFromBinderAsyncWithHttpInfo (List<int?> profilesIds, int? binderId)
        {
            // verify the required parameter 'profilesIds' is set
            if (profilesIds == null)
                throw new ApiException(400, "Missing required parameter 'profilesIds' when calling BindersApi->BindersRemoveProfilesFromBinder");
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersRemoveProfilesFromBinder");

            var localVarPath = "/api/Binders/removeprofiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profilesIds != null) localVarFormParams.Add("profilesIds", this.Configuration.ApiClient.ParameterToString(profilesIds)); // form parameter
            if (binderId != null) localVarFormParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersRemoveProfilesFromBinder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns></returns>
        public void BindersSetBinderPermission (PermissionsDTO body, int? binderId)
        {
             BindersSetBinderPermissionWithHttpInfo(body, binderId);
        }

        /// <summary>
        /// This call updates permission for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersSetBinderPermissionWithHttpInfo (PermissionsDTO body, int? binderId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersSetBinderPermission");
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersSetBinderPermission");

            var localVarPath = "/api/Binders/binderpermission/{binderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderId != null) localVarPathParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetBinderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersSetBinderPermissionAsync (PermissionsDTO body, int? binderId)
        {
             await BindersSetBinderPermissionAsyncWithHttpInfo(body, binderId);

        }

        /// <summary>
        /// This call updates permission for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetBinderPermissionAsyncWithHttpInfo (PermissionsDTO body, int? binderId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersSetBinderPermission");
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersSetBinderPermission");

            var localVarPath = "/api/Binders/binderpermission/{binderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderId != null) localVarPathParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetBinderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns></returns>
        public void BindersSetBinderPermission (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderId)
        {
             BindersSetBinderPermissionWithHttpInfo(usersPermissions, permissionsProperties, binderId);
        }

        /// <summary>
        /// This call updates permission for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersSetBinderPermissionWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderId)
        {
            // verify the required parameter 'usersPermissions' is set
            if (usersPermissions == null)
                throw new ApiException(400, "Missing required parameter 'usersPermissions' when calling BindersApi->BindersSetBinderPermission");
            // verify the required parameter 'permissionsProperties' is set
            if (permissionsProperties == null)
                throw new ApiException(400, "Missing required parameter 'permissionsProperties' when calling BindersApi->BindersSetBinderPermission");
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersSetBinderPermission");

            var localVarPath = "/api/Binders/binderpermission/{binderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderId != null) localVarPathParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // path parameter
            if (usersPermissions != null) localVarFormParams.Add("usersPermissions", this.Configuration.ApiClient.ParameterToString(usersPermissions)); // form parameter
            if (permissionsProperties != null) localVarFormParams.Add("permissionsProperties", this.Configuration.ApiClient.ParameterToString(permissionsProperties)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetBinderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersSetBinderPermissionAsync (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderId)
        {
             await BindersSetBinderPermissionAsyncWithHttpInfo(usersPermissions, permissionsProperties, binderId);

        }

        /// <summary>
        /// This call updates permission for a binder 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderId">The binder identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetBinderPermissionAsyncWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderId)
        {
            // verify the required parameter 'usersPermissions' is set
            if (usersPermissions == null)
                throw new ApiException(400, "Missing required parameter 'usersPermissions' when calling BindersApi->BindersSetBinderPermission");
            // verify the required parameter 'permissionsProperties' is set
            if (permissionsProperties == null)
                throw new ApiException(400, "Missing required parameter 'permissionsProperties' when calling BindersApi->BindersSetBinderPermission");
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersSetBinderPermission");

            var localVarPath = "/api/Binders/binderpermission/{binderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderId != null) localVarPathParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // path parameter
            if (usersPermissions != null) localVarFormParams.Add("usersPermissions", this.Configuration.ApiClient.ParameterToString(usersPermissions)); // form parameter
            if (permissionsProperties != null) localVarFormParams.Add("permissionsProperties", this.Configuration.ApiClient.ParameterToString(permissionsProperties)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetBinderPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns></returns>
        public void BindersSetBinderTypePermission (BinderPermissionsDTO body, int? binderTypeId)
        {
             BindersSetBinderTypePermissionWithHttpInfo(body, binderTypeId);
        }

        /// <summary>
        /// This call updates permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersSetBinderTypePermissionWithHttpInfo (BinderPermissionsDTO body, int? binderTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersSetBinderTypePermission");
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BindersApi->BindersSetBinderTypePermission");

            var localVarPath = "/api/Binders/bindertypepermission/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetBinderTypePermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersSetBinderTypePermissionAsync (BinderPermissionsDTO body, int? binderTypeId)
        {
             await BindersSetBinderTypePermissionAsyncWithHttpInfo(body, binderTypeId);

        }

        /// <summary>
        /// This call updates permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The permissions data</param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetBinderTypePermissionAsyncWithHttpInfo (BinderPermissionsDTO body, int? binderTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersSetBinderTypePermission");
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BindersApi->BindersSetBinderTypePermission");

            var localVarPath = "/api/Binders/bindertypepermission/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetBinderTypePermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spread"></param>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns></returns>
        public void BindersSetBinderTypePermission (bool? spread, List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderTypeId)
        {
             BindersSetBinderTypePermissionWithHttpInfo(spread, usersPermissions, permissionsProperties, binderTypeId);
        }

        /// <summary>
        /// This call updates permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spread"></param>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersSetBinderTypePermissionWithHttpInfo (bool? spread, List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderTypeId)
        {
            // verify the required parameter 'spread' is set
            if (spread == null)
                throw new ApiException(400, "Missing required parameter 'spread' when calling BindersApi->BindersSetBinderTypePermission");
            // verify the required parameter 'usersPermissions' is set
            if (usersPermissions == null)
                throw new ApiException(400, "Missing required parameter 'usersPermissions' when calling BindersApi->BindersSetBinderTypePermission");
            // verify the required parameter 'permissionsProperties' is set
            if (permissionsProperties == null)
                throw new ApiException(400, "Missing required parameter 'permissionsProperties' when calling BindersApi->BindersSetBinderTypePermission");
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BindersApi->BindersSetBinderTypePermission");

            var localVarPath = "/api/Binders/bindertypepermission/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            if (spread != null) localVarFormParams.Add("spread", this.Configuration.ApiClient.ParameterToString(spread)); // form parameter
            if (usersPermissions != null) localVarFormParams.Add("usersPermissions", this.Configuration.ApiClient.ParameterToString(usersPermissions)); // form parameter
            if (permissionsProperties != null) localVarFormParams.Add("permissionsProperties", this.Configuration.ApiClient.ParameterToString(permissionsProperties)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetBinderTypePermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spread"></param>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersSetBinderTypePermissionAsync (bool? spread, List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderTypeId)
        {
             await BindersSetBinderTypePermissionAsyncWithHttpInfo(spread, usersPermissions, permissionsProperties, binderTypeId);

        }

        /// <summary>
        /// This call updates permission for a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spread"></param>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="binderTypeId">The binder type identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetBinderTypePermissionAsyncWithHttpInfo (bool? spread, List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? binderTypeId)
        {
            // verify the required parameter 'spread' is set
            if (spread == null)
                throw new ApiException(400, "Missing required parameter 'spread' when calling BindersApi->BindersSetBinderTypePermission");
            // verify the required parameter 'usersPermissions' is set
            if (usersPermissions == null)
                throw new ApiException(400, "Missing required parameter 'usersPermissions' when calling BindersApi->BindersSetBinderTypePermission");
            // verify the required parameter 'permissionsProperties' is set
            if (permissionsProperties == null)
                throw new ApiException(400, "Missing required parameter 'permissionsProperties' when calling BindersApi->BindersSetBinderTypePermission");
            // verify the required parameter 'binderTypeId' is set
            if (binderTypeId == null)
                throw new ApiException(400, "Missing required parameter 'binderTypeId' when calling BindersApi->BindersSetBinderTypePermission");

            var localVarPath = "/api/Binders/bindertypepermission/{binderTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderTypeId != null) localVarPathParams.Add("binderTypeId", this.Configuration.ApiClient.ParameterToString(binderTypeId)); // path parameter
            if (spread != null) localVarFormParams.Add("spread", this.Configuration.ApiClient.ParameterToString(spread)); // form parameter
            if (usersPermissions != null) localVarFormParams.Add("usersPermissions", this.Configuration.ApiClient.ParameterToString(usersPermissions)); // form parameter
            if (permissionsProperties != null) localVarFormParams.Add("permissionsProperties", this.Configuration.ApiClient.ParameterToString(permissionsProperties)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetBinderTypePermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call saves the user binder type and state default 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new default for the user</param>
        /// <returns></returns>
        public void BindersSetUserDefaultTypeAndStateSelection (BinderUserDefaultTypeAndStateDto body)
        {
             BindersSetUserDefaultTypeAndStateSelectionWithHttpInfo(body);
        }

        /// <summary>
        /// This call saves the user binder type and state default 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new default for the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersSetUserDefaultTypeAndStateSelectionWithHttpInfo (BinderUserDefaultTypeAndStateDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersSetUserDefaultTypeAndStateSelection");

            var localVarPath = "/api/Binders/defaulttypeandstate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetUserDefaultTypeAndStateSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call saves the user binder type and state default 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new default for the user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersSetUserDefaultTypeAndStateSelectionAsync (BinderUserDefaultTypeAndStateDto body)
        {
             await BindersSetUserDefaultTypeAndStateSelectionAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call saves the user binder type and state default 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new default for the user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetUserDefaultTypeAndStateSelectionAsyncWithHttpInfo (BinderUserDefaultTypeAndStateDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BindersApi->BindersSetUserDefaultTypeAndStateSelection");

            var localVarPath = "/api/Binders/defaulttypeandstate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetUserDefaultTypeAndStateSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call saves the user binder type and state default 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defaultBinderType"></param>
        /// <param name="defaultBinderState"></param>
        /// <returns></returns>
        public void BindersSetUserDefaultTypeAndStateSelection (int? defaultBinderType, int? defaultBinderState)
        {
             BindersSetUserDefaultTypeAndStateSelectionWithHttpInfo(defaultBinderType, defaultBinderState);
        }

        /// <summary>
        /// This call saves the user binder type and state default 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defaultBinderType"></param>
        /// <param name="defaultBinderState"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BindersSetUserDefaultTypeAndStateSelectionWithHttpInfo (int? defaultBinderType, int? defaultBinderState)
        {
            // verify the required parameter 'defaultBinderType' is set
            if (defaultBinderType == null)
                throw new ApiException(400, "Missing required parameter 'defaultBinderType' when calling BindersApi->BindersSetUserDefaultTypeAndStateSelection");
            // verify the required parameter 'defaultBinderState' is set
            if (defaultBinderState == null)
                throw new ApiException(400, "Missing required parameter 'defaultBinderState' when calling BindersApi->BindersSetUserDefaultTypeAndStateSelection");

            var localVarPath = "/api/Binders/defaulttypeandstate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (defaultBinderType != null) localVarFormParams.Add("defaultBinderType", this.Configuration.ApiClient.ParameterToString(defaultBinderType)); // form parameter
            if (defaultBinderState != null) localVarFormParams.Add("defaultBinderState", this.Configuration.ApiClient.ParameterToString(defaultBinderState)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetUserDefaultTypeAndStateSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call saves the user binder type and state default 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defaultBinderType"></param>
        /// <param name="defaultBinderState"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BindersSetUserDefaultTypeAndStateSelectionAsync (int? defaultBinderType, int? defaultBinderState)
        {
             await BindersSetUserDefaultTypeAndStateSelectionAsyncWithHttpInfo(defaultBinderType, defaultBinderState);

        }

        /// <summary>
        /// This call saves the user binder type and state default 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="defaultBinderType"></param>
        /// <param name="defaultBinderState"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BindersSetUserDefaultTypeAndStateSelectionAsyncWithHttpInfo (int? defaultBinderType, int? defaultBinderState)
        {
            // verify the required parameter 'defaultBinderType' is set
            if (defaultBinderType == null)
                throw new ApiException(400, "Missing required parameter 'defaultBinderType' when calling BindersApi->BindersSetUserDefaultTypeAndStateSelection");
            // verify the required parameter 'defaultBinderState' is set
            if (defaultBinderState == null)
                throw new ApiException(400, "Missing required parameter 'defaultBinderState' when calling BindersApi->BindersSetUserDefaultTypeAndStateSelection");

            var localVarPath = "/api/Binders/defaulttypeandstate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (defaultBinderType != null) localVarFormParams.Add("defaultBinderType", this.Configuration.ApiClient.ParameterToString(defaultBinderType)); // form parameter
            if (defaultBinderState != null) localVarFormParams.Add("defaultBinderState", this.Configuration.ApiClient.ParameterToString(defaultBinderState)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersSetUserDefaultTypeAndStateSelection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates all binder values, also custom fields, by binder identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The identifier of the binder</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BinderDTO</returns>
        public BinderDTO BindersUpdateBinderById (int? binderId, BinderDTO body = null)
        {
             ApiResponse<BinderDTO> localVarResponse = BindersUpdateBinderByIdWithHttpInfo(binderId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates all binder values, also custom fields, by binder identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The identifier of the binder</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BinderDTO</returns>
        public ApiResponse< BinderDTO > BindersUpdateBinderByIdWithHttpInfo (int? binderId, BinderDTO body = null)
        {
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersUpdateBinderById");

            var localVarPath = "/api/Binders/{binderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderId != null) localVarPathParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersUpdateBinderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderDTO)));
        }

        /// <summary>
        /// This call updates all binder values, also custom fields, by binder identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The identifier of the binder</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BinderDTO</returns>
        public async System.Threading.Tasks.Task<BinderDTO> BindersUpdateBinderByIdAsync (int? binderId, BinderDTO body = null)
        {
             ApiResponse<BinderDTO> localVarResponse = await BindersUpdateBinderByIdAsyncWithHttpInfo(binderId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates all binder values, also custom fields, by binder identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="binderId">The identifier of the binder</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BinderDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BinderDTO>> BindersUpdateBinderByIdAsyncWithHttpInfo (int? binderId, BinderDTO body = null)
        {
            // verify the required parameter 'binderId' is set
            if (binderId == null)
                throw new ApiException(400, "Missing required parameter 'binderId' when calling BindersApi->BindersUpdateBinderById");

            var localVarPath = "/api/Binders/{binderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binderId != null) localVarPathParams.Add("binderId", this.Configuration.ApiClient.ParameterToString(binderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersUpdateBinderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderDTO)));
        }

        /// <summary>
        /// This call updates a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BinderTypeDTO</returns>
        public BinderTypeDTO BindersUpdateBinderTypeById (BinderTypeDTO body = null)
        {
             ApiResponse<BinderTypeDTO> localVarResponse = BindersUpdateBinderTypeByIdWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BinderTypeDTO</returns>
        public ApiResponse< BinderTypeDTO > BindersUpdateBinderTypeByIdWithHttpInfo (BinderTypeDTO body = null)
        {

            var localVarPath = "/api/Binders/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersUpdateBinderTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderTypeDTO)));
        }

        /// <summary>
        /// This call updates a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BinderTypeDTO</returns>
        public async System.Threading.Tasks.Task<BinderTypeDTO> BindersUpdateBinderTypeByIdAsync (BinderTypeDTO body = null)
        {
             ApiResponse<BinderTypeDTO> localVarResponse = await BindersUpdateBinderTypeByIdAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a binder type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BinderTypeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BinderTypeDTO>> BindersUpdateBinderTypeByIdAsyncWithHttpInfo (BinderTypeDTO body = null)
        {

            var localVarPath = "/api/Binders/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BindersUpdateBinderTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BinderTypeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BinderTypeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinderTypeDTO)));
        }

    }
}
