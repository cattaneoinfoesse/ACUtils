/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMailV2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call allows to check mail connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>bool?</returns>
        bool? MailV2CheckMailConnection (MailServerSettingsDTO mailServerSettings);

        /// <summary>
        /// This call allows to check mail connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> MailV2CheckMailConnectionWithHttpInfo (MailServerSettingsDTO mailServerSettings);
        /// <summary>
        /// This call deletes a email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns></returns>
        void MailV2DeleteMessage (int? dmMsgId);

        /// <summary>
        /// This call deletes a email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MailV2DeleteMessageWithHttpInfo (int? dmMsgId);
        /// <summary>
        /// This call builds the redirect url used to perform the authentication/authorization to an external provider (Microsoft / Google)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestDto"></param>
        /// <returns>ExternalAuthRedirectUrlResponseDTO</returns>
        ExternalAuthRedirectUrlResponseDTO MailV2GetExternalAuthRedirectUrl (ExternalAuthRedirectUrlRequestDTO requestDto);

        /// <summary>
        /// This call builds the redirect url used to perform the authentication/authorization to an external provider (Microsoft / Google)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestDto"></param>
        /// <returns>ApiResponse of ExternalAuthRedirectUrlResponseDTO</returns>
        ApiResponse<ExternalAuthRedirectUrlResponseDTO> MailV2GetExternalAuthRedirectUrlWithHttpInfo (ExternalAuthRedirectUrlRequestDTO requestDto);
        /// <summary>
        /// This call returns IMAP folders by account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">Mail account identifier</param>
        /// <returns>List&lt;MailBoxFolderDTO&gt;</returns>
        List<MailBoxFolderDTO> MailV2GetImapMailBoxStructureByAccount (int? mailAccountId);

        /// <summary>
        /// This call returns IMAP folders by account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">Mail account identifier</param>
        /// <returns>ApiResponse of List&lt;MailBoxFolderDTO&gt;</returns>
        ApiResponse<List<MailBoxFolderDTO>> MailV2GetImapMailBoxStructureByAccountWithHttpInfo (int? mailAccountId);
        /// <summary>
        /// This call returns IMAP folders by settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>List&lt;MailBoxFolderDTO&gt;</returns>
        List<MailBoxFolderDTO> MailV2GetImapMailBoxStructureBySettings (MailServerSettingsDTO mailServerSettings);

        /// <summary>
        /// This call returns IMAP folders by settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>ApiResponse of List&lt;MailBoxFolderDTO&gt;</returns>
        ApiResponse<List<MailBoxFolderDTO>> MailV2GetImapMailBoxStructureBySettingsWithHttpInfo (MailServerSettingsDTO mailServerSettings);
        /// <summary>
        /// Get mail plugin configuration parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MailPluginConfigurationDTO</returns>
        MailPluginConfigurationDTO MailV2GetMailPluginConfiguration ();

        /// <summary>
        /// Get mail plugin configuration parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MailPluginConfigurationDTO</returns>
        ApiResponse<MailPluginConfigurationDTO> MailV2GetMailPluginConfigurationWithHttpInfo ();
        /// <summary>
        /// This call returns mail system variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  0: Imap  1: Smtp  2: Pop3 </param>
        /// <returns>List&lt;KeyValueDTO&gt;</returns>
        List<KeyValueDTO> MailV2GetMailSystemVariables (int? type);

        /// <summary>
        /// This call returns mail system variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  0: Imap  1: Smtp  2: Pop3 </param>
        /// <returns>ApiResponse of List&lt;KeyValueDTO&gt;</returns>
        ApiResponse<List<KeyValueDTO>> MailV2GetMailSystemVariablesWithHttpInfo (int? type);
        /// <summary>
        /// This call resends a email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns></returns>
        void MailV2ReSendMessage (int? dmMsgId);

        /// <summary>
        /// This call resends a email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MailV2ReSendMessageWithHttpInfo (int? dmMsgId);
        /// <summary>
        /// This call saves a new draft message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>SaveMailRequestDTO</returns>
        SaveMailRequestDTO MailV2SaveMessage (SaveMailRequestDTO requestdto = null);

        /// <summary>
        /// This call saves a new draft message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>ApiResponse of SaveMailRequestDTO</returns>
        ApiResponse<SaveMailRequestDTO> MailV2SaveMessageWithHttpInfo (SaveMailRequestDTO requestdto = null);
        /// <summary>
        /// This call sends a new email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>MailOutDTO</returns>
        MailOutDTO MailV2SendMessage (SendMailRequestDTO requestdto = null);

        /// <summary>
        /// This call sends a new email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>ApiResponse of MailOutDTO</returns>
        ApiResponse<MailOutDTO> MailV2SendMessageWithHttpInfo (SendMailRequestDTO requestdto = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call allows to check mail connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> MailV2CheckMailConnectionAsync (MailServerSettingsDTO mailServerSettings);

        /// <summary>
        /// This call allows to check mail connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> MailV2CheckMailConnectionAsyncWithHttpInfo (MailServerSettingsDTO mailServerSettings);
        /// <summary>
        /// This call deletes a email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MailV2DeleteMessageAsync (int? dmMsgId);

        /// <summary>
        /// This call deletes a email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MailV2DeleteMessageAsyncWithHttpInfo (int? dmMsgId);
        /// <summary>
        /// This call builds the redirect url used to perform the authentication/authorization to an external provider (Microsoft / Google)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestDto"></param>
        /// <returns>Task of ExternalAuthRedirectUrlResponseDTO</returns>
        System.Threading.Tasks.Task<ExternalAuthRedirectUrlResponseDTO> MailV2GetExternalAuthRedirectUrlAsync (ExternalAuthRedirectUrlRequestDTO requestDto);

        /// <summary>
        /// This call builds the redirect url used to perform the authentication/authorization to an external provider (Microsoft / Google)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestDto"></param>
        /// <returns>Task of ApiResponse (ExternalAuthRedirectUrlResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalAuthRedirectUrlResponseDTO>> MailV2GetExternalAuthRedirectUrlAsyncWithHttpInfo (ExternalAuthRedirectUrlRequestDTO requestDto);
        /// <summary>
        /// This call returns IMAP folders by account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">Mail account identifier</param>
        /// <returns>Task of List&lt;MailBoxFolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MailBoxFolderDTO>> MailV2GetImapMailBoxStructureByAccountAsync (int? mailAccountId);

        /// <summary>
        /// This call returns IMAP folders by account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">Mail account identifier</param>
        /// <returns>Task of ApiResponse (List&lt;MailBoxFolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MailBoxFolderDTO>>> MailV2GetImapMailBoxStructureByAccountAsyncWithHttpInfo (int? mailAccountId);
        /// <summary>
        /// This call returns IMAP folders by settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>Task of List&lt;MailBoxFolderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MailBoxFolderDTO>> MailV2GetImapMailBoxStructureBySettingsAsync (MailServerSettingsDTO mailServerSettings);

        /// <summary>
        /// This call returns IMAP folders by settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>Task of ApiResponse (List&lt;MailBoxFolderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MailBoxFolderDTO>>> MailV2GetImapMailBoxStructureBySettingsAsyncWithHttpInfo (MailServerSettingsDTO mailServerSettings);
        /// <summary>
        /// Get mail plugin configuration parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MailPluginConfigurationDTO</returns>
        System.Threading.Tasks.Task<MailPluginConfigurationDTO> MailV2GetMailPluginConfigurationAsync ();

        /// <summary>
        /// Get mail plugin configuration parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MailPluginConfigurationDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailPluginConfigurationDTO>> MailV2GetMailPluginConfigurationAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns mail system variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  0: Imap  1: Smtp  2: Pop3 </param>
        /// <returns>Task of List&lt;KeyValueDTO&gt;</returns>
        System.Threading.Tasks.Task<List<KeyValueDTO>> MailV2GetMailSystemVariablesAsync (int? type);

        /// <summary>
        /// This call returns mail system variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  0: Imap  1: Smtp  2: Pop3 </param>
        /// <returns>Task of ApiResponse (List&lt;KeyValueDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeyValueDTO>>> MailV2GetMailSystemVariablesAsyncWithHttpInfo (int? type);
        /// <summary>
        /// This call resends a email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MailV2ReSendMessageAsync (int? dmMsgId);

        /// <summary>
        /// This call resends a email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MailV2ReSendMessageAsyncWithHttpInfo (int? dmMsgId);
        /// <summary>
        /// This call saves a new draft message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>Task of SaveMailRequestDTO</returns>
        System.Threading.Tasks.Task<SaveMailRequestDTO> MailV2SaveMessageAsync (SaveMailRequestDTO requestdto = null);

        /// <summary>
        /// This call saves a new draft message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveMailRequestDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveMailRequestDTO>> MailV2SaveMessageAsyncWithHttpInfo (SaveMailRequestDTO requestdto = null);
        /// <summary>
        /// This call sends a new email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>Task of MailOutDTO</returns>
        System.Threading.Tasks.Task<MailOutDTO> MailV2SendMessageAsync (SendMailRequestDTO requestdto = null);

        /// <summary>
        /// This call sends a new email message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>Task of ApiResponse (MailOutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailOutDTO>> MailV2SendMessageAsyncWithHttpInfo (SendMailRequestDTO requestdto = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MailV2Api : IMailV2Api
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MailV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public MailV2Api(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MailV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MailV2Api(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call allows to check mail connection 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>bool?</returns>
        public bool? MailV2CheckMailConnection (MailServerSettingsDTO mailServerSettings)
        {
             ApiResponse<bool?> localVarResponse = MailV2CheckMailConnectionWithHttpInfo(mailServerSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to check mail connection 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > MailV2CheckMailConnectionWithHttpInfo (MailServerSettingsDTO mailServerSettings)
        {
            // verify the required parameter 'mailServerSettings' is set
            if (mailServerSettings == null)
                throw new ApiException(400, "Missing required parameter 'mailServerSettings' when calling MailV2Api->MailV2CheckMailConnection");

            var localVarPath = "/api/v2/Mail/CheckMailConnection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailServerSettings != null && mailServerSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailServerSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailServerSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2CheckMailConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call allows to check mail connection 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> MailV2CheckMailConnectionAsync (MailServerSettingsDTO mailServerSettings)
        {
             ApiResponse<bool?> localVarResponse = await MailV2CheckMailConnectionAsyncWithHttpInfo(mailServerSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to check mail connection 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> MailV2CheckMailConnectionAsyncWithHttpInfo (MailServerSettingsDTO mailServerSettings)
        {
            // verify the required parameter 'mailServerSettings' is set
            if (mailServerSettings == null)
                throw new ApiException(400, "Missing required parameter 'mailServerSettings' when calling MailV2Api->MailV2CheckMailConnection");

            var localVarPath = "/api/v2/Mail/CheckMailConnection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailServerSettings != null && mailServerSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailServerSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailServerSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2CheckMailConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call deletes a email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns></returns>
        public void MailV2DeleteMessage (int? dmMsgId)
        {
             MailV2DeleteMessageWithHttpInfo(dmMsgId);
        }

        /// <summary>
        /// This call deletes a email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MailV2DeleteMessageWithHttpInfo (int? dmMsgId)
        {
            // verify the required parameter 'dmMsgId' is set
            if (dmMsgId == null)
                throw new ApiException(400, "Missing required parameter 'dmMsgId' when calling MailV2Api->MailV2DeleteMessage");

            var localVarPath = "/api/MailV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmMsgId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dmMsgId", dmMsgId)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2DeleteMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MailV2DeleteMessageAsync (int? dmMsgId)
        {
             await MailV2DeleteMessageAsyncWithHttpInfo(dmMsgId);

        }

        /// <summary>
        /// This call deletes a email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MailV2DeleteMessageAsyncWithHttpInfo (int? dmMsgId)
        {
            // verify the required parameter 'dmMsgId' is set
            if (dmMsgId == null)
                throw new ApiException(400, "Missing required parameter 'dmMsgId' when calling MailV2Api->MailV2DeleteMessage");

            var localVarPath = "/api/MailV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmMsgId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dmMsgId", dmMsgId)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2DeleteMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call builds the redirect url used to perform the authentication/authorization to an external provider (Microsoft / Google) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestDto"></param>
        /// <returns>ExternalAuthRedirectUrlResponseDTO</returns>
        public ExternalAuthRedirectUrlResponseDTO MailV2GetExternalAuthRedirectUrl (ExternalAuthRedirectUrlRequestDTO requestDto)
        {
             ApiResponse<ExternalAuthRedirectUrlResponseDTO> localVarResponse = MailV2GetExternalAuthRedirectUrlWithHttpInfo(requestDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call builds the redirect url used to perform the authentication/authorization to an external provider (Microsoft / Google) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestDto"></param>
        /// <returns>ApiResponse of ExternalAuthRedirectUrlResponseDTO</returns>
        public ApiResponse< ExternalAuthRedirectUrlResponseDTO > MailV2GetExternalAuthRedirectUrlWithHttpInfo (ExternalAuthRedirectUrlRequestDTO requestDto)
        {
            // verify the required parameter 'requestDto' is set
            if (requestDto == null)
                throw new ApiException(400, "Missing required parameter 'requestDto' when calling MailV2Api->MailV2GetExternalAuthRedirectUrl");

            var localVarPath = "/api/v2/Mail/auth/redirect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestDto != null && requestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2GetExternalAuthRedirectUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAuthRedirectUrlResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalAuthRedirectUrlResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAuthRedirectUrlResponseDTO)));
        }

        /// <summary>
        /// This call builds the redirect url used to perform the authentication/authorization to an external provider (Microsoft / Google) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestDto"></param>
        /// <returns>Task of ExternalAuthRedirectUrlResponseDTO</returns>
        public async System.Threading.Tasks.Task<ExternalAuthRedirectUrlResponseDTO> MailV2GetExternalAuthRedirectUrlAsync (ExternalAuthRedirectUrlRequestDTO requestDto)
        {
             ApiResponse<ExternalAuthRedirectUrlResponseDTO> localVarResponse = await MailV2GetExternalAuthRedirectUrlAsyncWithHttpInfo(requestDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call builds the redirect url used to perform the authentication/authorization to an external provider (Microsoft / Google) 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestDto"></param>
        /// <returns>Task of ApiResponse (ExternalAuthRedirectUrlResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalAuthRedirectUrlResponseDTO>> MailV2GetExternalAuthRedirectUrlAsyncWithHttpInfo (ExternalAuthRedirectUrlRequestDTO requestDto)
        {
            // verify the required parameter 'requestDto' is set
            if (requestDto == null)
                throw new ApiException(400, "Missing required parameter 'requestDto' when calling MailV2Api->MailV2GetExternalAuthRedirectUrl");

            var localVarPath = "/api/v2/Mail/auth/redirect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestDto != null && requestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2GetExternalAuthRedirectUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAuthRedirectUrlResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalAuthRedirectUrlResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAuthRedirectUrlResponseDTO)));
        }

        /// <summary>
        /// This call returns IMAP folders by account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">Mail account identifier</param>
        /// <returns>List&lt;MailBoxFolderDTO&gt;</returns>
        public List<MailBoxFolderDTO> MailV2GetImapMailBoxStructureByAccount (int? mailAccountId)
        {
             ApiResponse<List<MailBoxFolderDTO>> localVarResponse = MailV2GetImapMailBoxStructureByAccountWithHttpInfo(mailAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns IMAP folders by account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">Mail account identifier</param>
        /// <returns>ApiResponse of List&lt;MailBoxFolderDTO&gt;</returns>
        public ApiResponse< List<MailBoxFolderDTO> > MailV2GetImapMailBoxStructureByAccountWithHttpInfo (int? mailAccountId)
        {
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling MailV2Api->MailV2GetImapMailBoxStructureByAccount");

            var localVarPath = "/api/v2/Mail/ImapFolders/ByAccount/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2GetImapMailBoxStructureByAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MailBoxFolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MailBoxFolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MailBoxFolderDTO>)));
        }

        /// <summary>
        /// This call returns IMAP folders by account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">Mail account identifier</param>
        /// <returns>Task of List&lt;MailBoxFolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MailBoxFolderDTO>> MailV2GetImapMailBoxStructureByAccountAsync (int? mailAccountId)
        {
             ApiResponse<List<MailBoxFolderDTO>> localVarResponse = await MailV2GetImapMailBoxStructureByAccountAsyncWithHttpInfo(mailAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns IMAP folders by account 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailAccountId">Mail account identifier</param>
        /// <returns>Task of ApiResponse (List&lt;MailBoxFolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MailBoxFolderDTO>>> MailV2GetImapMailBoxStructureByAccountAsyncWithHttpInfo (int? mailAccountId)
        {
            // verify the required parameter 'mailAccountId' is set
            if (mailAccountId == null)
                throw new ApiException(400, "Missing required parameter 'mailAccountId' when calling MailV2Api->MailV2GetImapMailBoxStructureByAccount");

            var localVarPath = "/api/v2/Mail/ImapFolders/ByAccount/{mailAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailAccountId != null) localVarPathParams.Add("mailAccountId", this.Configuration.ApiClient.ParameterToString(mailAccountId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2GetImapMailBoxStructureByAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MailBoxFolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MailBoxFolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MailBoxFolderDTO>)));
        }

        /// <summary>
        /// This call returns IMAP folders by settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>List&lt;MailBoxFolderDTO&gt;</returns>
        public List<MailBoxFolderDTO> MailV2GetImapMailBoxStructureBySettings (MailServerSettingsDTO mailServerSettings)
        {
             ApiResponse<List<MailBoxFolderDTO>> localVarResponse = MailV2GetImapMailBoxStructureBySettingsWithHttpInfo(mailServerSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns IMAP folders by settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>ApiResponse of List&lt;MailBoxFolderDTO&gt;</returns>
        public ApiResponse< List<MailBoxFolderDTO> > MailV2GetImapMailBoxStructureBySettingsWithHttpInfo (MailServerSettingsDTO mailServerSettings)
        {
            // verify the required parameter 'mailServerSettings' is set
            if (mailServerSettings == null)
                throw new ApiException(400, "Missing required parameter 'mailServerSettings' when calling MailV2Api->MailV2GetImapMailBoxStructureBySettings");

            var localVarPath = "/api/v2/Mail/ImapFolders/BySettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailServerSettings != null && mailServerSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailServerSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailServerSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2GetImapMailBoxStructureBySettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MailBoxFolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MailBoxFolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MailBoxFolderDTO>)));
        }

        /// <summary>
        /// This call returns IMAP folders by settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>Task of List&lt;MailBoxFolderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MailBoxFolderDTO>> MailV2GetImapMailBoxStructureBySettingsAsync (MailServerSettingsDTO mailServerSettings)
        {
             ApiResponse<List<MailBoxFolderDTO>> localVarResponse = await MailV2GetImapMailBoxStructureBySettingsAsyncWithHttpInfo(mailServerSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns IMAP folders by settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mailServerSettings">Mail server settings</param>
        /// <returns>Task of ApiResponse (List&lt;MailBoxFolderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MailBoxFolderDTO>>> MailV2GetImapMailBoxStructureBySettingsAsyncWithHttpInfo (MailServerSettingsDTO mailServerSettings)
        {
            // verify the required parameter 'mailServerSettings' is set
            if (mailServerSettings == null)
                throw new ApiException(400, "Missing required parameter 'mailServerSettings' when calling MailV2Api->MailV2GetImapMailBoxStructureBySettings");

            var localVarPath = "/api/v2/Mail/ImapFolders/BySettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mailServerSettings != null && mailServerSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mailServerSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mailServerSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2GetImapMailBoxStructureBySettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MailBoxFolderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MailBoxFolderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MailBoxFolderDTO>)));
        }

        /// <summary>
        /// Get mail plugin configuration parameters 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MailPluginConfigurationDTO</returns>
        public MailPluginConfigurationDTO MailV2GetMailPluginConfiguration ()
        {
             ApiResponse<MailPluginConfigurationDTO> localVarResponse = MailV2GetMailPluginConfigurationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mail plugin configuration parameters 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MailPluginConfigurationDTO</returns>
        public ApiResponse< MailPluginConfigurationDTO > MailV2GetMailPluginConfigurationWithHttpInfo ()
        {

            var localVarPath = "/api/v2/Mail/mailPluginConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2GetMailPluginConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailPluginConfigurationDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailPluginConfigurationDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailPluginConfigurationDTO)));
        }

        /// <summary>
        /// Get mail plugin configuration parameters 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MailPluginConfigurationDTO</returns>
        public async System.Threading.Tasks.Task<MailPluginConfigurationDTO> MailV2GetMailPluginConfigurationAsync ()
        {
             ApiResponse<MailPluginConfigurationDTO> localVarResponse = await MailV2GetMailPluginConfigurationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mail plugin configuration parameters 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MailPluginConfigurationDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailPluginConfigurationDTO>> MailV2GetMailPluginConfigurationAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/Mail/mailPluginConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2GetMailPluginConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailPluginConfigurationDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailPluginConfigurationDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailPluginConfigurationDTO)));
        }

        /// <summary>
        /// This call returns mail system variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  0: Imap  1: Smtp  2: Pop3 </param>
        /// <returns>List&lt;KeyValueDTO&gt;</returns>
        public List<KeyValueDTO> MailV2GetMailSystemVariables (int? type)
        {
             ApiResponse<List<KeyValueDTO>> localVarResponse = MailV2GetMailSystemVariablesWithHttpInfo(type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns mail system variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  0: Imap  1: Smtp  2: Pop3 </param>
        /// <returns>ApiResponse of List&lt;KeyValueDTO&gt;</returns>
        public ApiResponse< List<KeyValueDTO> > MailV2GetMailSystemVariablesWithHttpInfo (int? type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MailV2Api->MailV2GetMailSystemVariables");

            var localVarPath = "/api/v2/Mail/SystemVariables/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2GetMailSystemVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueDTO>)));
        }

        /// <summary>
        /// This call returns mail system variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  0: Imap  1: Smtp  2: Pop3 </param>
        /// <returns>Task of List&lt;KeyValueDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeyValueDTO>> MailV2GetMailSystemVariablesAsync (int? type)
        {
             ApiResponse<List<KeyValueDTO>> localVarResponse = await MailV2GetMailSystemVariablesAsyncWithHttpInfo(type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns mail system variables 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Possible values:  0: Imap  1: Smtp  2: Pop3 </param>
        /// <returns>Task of ApiResponse (List&lt;KeyValueDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeyValueDTO>>> MailV2GetMailSystemVariablesAsyncWithHttpInfo (int? type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MailV2Api->MailV2GetMailSystemVariables");

            var localVarPath = "/api/v2/Mail/SystemVariables/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2GetMailSystemVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValueDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValueDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValueDTO>)));
        }

        /// <summary>
        /// This call resends a email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns></returns>
        public void MailV2ReSendMessage (int? dmMsgId)
        {
             MailV2ReSendMessageWithHttpInfo(dmMsgId);
        }

        /// <summary>
        /// This call resends a email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MailV2ReSendMessageWithHttpInfo (int? dmMsgId)
        {
            // verify the required parameter 'dmMsgId' is set
            if (dmMsgId == null)
                throw new ApiException(400, "Missing required parameter 'dmMsgId' when calling MailV2Api->MailV2ReSendMessage");

            var localVarPath = "/api/v2/Mail/resend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmMsgId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dmMsgId", dmMsgId)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2ReSendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call resends a email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MailV2ReSendMessageAsync (int? dmMsgId)
        {
             await MailV2ReSendMessageAsyncWithHttpInfo(dmMsgId);

        }

        /// <summary>
        /// This call resends a email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmMsgId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MailV2ReSendMessageAsyncWithHttpInfo (int? dmMsgId)
        {
            // verify the required parameter 'dmMsgId' is set
            if (dmMsgId == null)
                throw new ApiException(400, "Missing required parameter 'dmMsgId' when calling MailV2Api->MailV2ReSendMessage");

            var localVarPath = "/api/v2/Mail/resend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmMsgId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dmMsgId", dmMsgId)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2ReSendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call saves a new draft message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>SaveMailRequestDTO</returns>
        public SaveMailRequestDTO MailV2SaveMessage (SaveMailRequestDTO requestdto = null)
        {
             ApiResponse<SaveMailRequestDTO> localVarResponse = MailV2SaveMessageWithHttpInfo(requestdto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call saves a new draft message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>ApiResponse of SaveMailRequestDTO</returns>
        public ApiResponse< SaveMailRequestDTO > MailV2SaveMessageWithHttpInfo (SaveMailRequestDTO requestdto = null)
        {

            var localVarPath = "/api/v2/Mail/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestdto != null && requestdto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestdto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestdto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2SaveMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveMailRequestDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveMailRequestDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveMailRequestDTO)));
        }

        /// <summary>
        /// This call saves a new draft message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>Task of SaveMailRequestDTO</returns>
        public async System.Threading.Tasks.Task<SaveMailRequestDTO> MailV2SaveMessageAsync (SaveMailRequestDTO requestdto = null)
        {
             ApiResponse<SaveMailRequestDTO> localVarResponse = await MailV2SaveMessageAsyncWithHttpInfo(requestdto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call saves a new draft message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveMailRequestDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaveMailRequestDTO>> MailV2SaveMessageAsyncWithHttpInfo (SaveMailRequestDTO requestdto = null)
        {

            var localVarPath = "/api/v2/Mail/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestdto != null && requestdto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestdto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestdto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2SaveMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveMailRequestDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveMailRequestDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveMailRequestDTO)));
        }

        /// <summary>
        /// This call sends a new email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>MailOutDTO</returns>
        public MailOutDTO MailV2SendMessage (SendMailRequestDTO requestdto = null)
        {
             ApiResponse<MailOutDTO> localVarResponse = MailV2SendMessageWithHttpInfo(requestdto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call sends a new email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>ApiResponse of MailOutDTO</returns>
        public ApiResponse< MailOutDTO > MailV2SendMessageWithHttpInfo (SendMailRequestDTO requestdto = null)
        {

            var localVarPath = "/api/v2/Mail/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestdto != null && requestdto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestdto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestdto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailOutDTO)));
        }

        /// <summary>
        /// This call sends a new email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>Task of MailOutDTO</returns>
        public async System.Threading.Tasks.Task<MailOutDTO> MailV2SendMessageAsync (SendMailRequestDTO requestdto = null)
        {
             ApiResponse<MailOutDTO> localVarResponse = await MailV2SendMessageAsyncWithHttpInfo(requestdto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call sends a new email message 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestdto"> (optional)</param>
        /// <returns>Task of ApiResponse (MailOutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailOutDTO>> MailV2SendMessageAsyncWithHttpInfo (SendMailRequestDTO requestdto = null)
        {

            var localVarPath = "/api/v2/Mail/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestdto != null && requestdto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestdto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestdto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MailV2SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MailOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailOutDTO)));
        }

    }
}
