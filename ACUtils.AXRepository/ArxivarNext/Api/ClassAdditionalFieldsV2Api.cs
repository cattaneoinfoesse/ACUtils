/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IClassAdditionalFieldsV2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <returns>Object</returns>
        Object ClassAdditionalFieldsV2AdditionalFieldClassComposeValues (List<int?> body, string fieldName, int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClassAdditionalFieldsV2AdditionalFieldClassComposeValuesWithHttpInfo (List<int?> body, string fieldName, int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <returns>Object</returns>
        Object ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0 (List<int?> body, string fieldName, int? documentTypeSystemId);

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0WithHttpInfo (List<int?> body, string fieldName, int? documentTypeSystemId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClassAdditionalFieldsV2AdditionalFieldClassComposeValuesAsync (List<int?> body, string fieldName, int? documentType, int? tipo2, int? tipo3);

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClassAdditionalFieldsV2AdditionalFieldClassComposeValuesAsyncWithHttpInfo (List<int?> body, string fieldName, int? documentType, int? tipo2, int? tipo3);
        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0Async (List<int?> body, string fieldName, int? documentTypeSystemId);

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0AsyncWithHttpInfo (List<int?> body, string fieldName, int? documentTypeSystemId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ClassAdditionalFieldsV2Api : IClassAdditionalFieldsV2Api
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassAdditionalFieldsV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public ClassAdditionalFieldsV2Api(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassAdditionalFieldsV2Api"/> class
        /// </summary>
        /// <returns></returns>
        public ClassAdditionalFieldsV2Api()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassAdditionalFieldsV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClassAdditionalFieldsV2Api(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3} 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <returns>Object</returns>
        public Object ClassAdditionalFieldsV2AdditionalFieldClassComposeValues (List<int?> body, string fieldName, int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<Object> localVarResponse = ClassAdditionalFieldsV2AdditionalFieldClassComposeValuesWithHttpInfo(body, fieldName, documentType, tipo2, tipo3);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3} 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClassAdditionalFieldsV2AdditionalFieldClassComposeValuesWithHttpInfo (List<int?> body, string fieldName, int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues");
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues");

            var localVarPath = "/api/v2/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (documentType != null) localVarPathParams.Add("documentType", this.Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", this.Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", this.Configuration.ApiClient.ParameterToString(tipo3)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClassAdditionalFieldsV2AdditionalFieldClassComposeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3} 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClassAdditionalFieldsV2AdditionalFieldClassComposeValuesAsync (List<int?> body, string fieldName, int? documentType, int? tipo2, int? tipo3)
        {
             ApiResponse<Object> localVarResponse = await ClassAdditionalFieldsV2AdditionalFieldClassComposeValuesAsyncWithHttpInfo(body, fieldName, documentType, tipo2, tipo3);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3} 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentType">Document type of first level</param>
        /// <param name="tipo2">Document type of second level</param>
        /// <param name="tipo3">Document type of third level</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClassAdditionalFieldsV2AdditionalFieldClassComposeValuesAsyncWithHttpInfo (List<int?> body, string fieldName, int? documentType, int? tipo2, int? tipo3)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues");
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues");
            // verify the required parameter 'tipo2' is set
            if (tipo2 == null)
                throw new ApiException(400, "Missing required parameter 'tipo2' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues");
            // verify the required parameter 'tipo3' is set
            if (tipo3 == null)
                throw new ApiException(400, "Missing required parameter 'tipo3' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues");

            var localVarPath = "/api/v2/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentType}/{tipo2}/{tipo3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (documentType != null) localVarPathParams.Add("documentType", this.Configuration.ApiClient.ParameterToString(documentType)); // path parameter
            if (tipo2 != null) localVarPathParams.Add("tipo2", this.Configuration.ApiClient.ParameterToString(tipo2)); // path parameter
            if (tipo3 != null) localVarPathParams.Add("tipo3", this.Configuration.ApiClient.ParameterToString(tipo3)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClassAdditionalFieldsV2AdditionalFieldClassComposeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId} 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <returns>Object</returns>
        public Object ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0 (List<int?> body, string fieldName, int? documentTypeSystemId)
        {
             ApiResponse<Object> localVarResponse = ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0WithHttpInfo(body, fieldName, documentTypeSystemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId} 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0WithHttpInfo (List<int?> body, string fieldName, int? documentTypeSystemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0");
            // verify the required parameter 'documentTypeSystemId' is set
            if (documentTypeSystemId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeSystemId' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0");

            var localVarPath = "/api/v2/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (documentTypeSystemId != null) localVarPathParams.Add("documentTypeSystemId", this.Configuration.ApiClient.ParameterToString(documentTypeSystemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId} 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0Async (List<int?> body, string fieldName, int? documentTypeSystemId)
        {
             ApiResponse<Object> localVarResponse = await ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0AsyncWithHttpInfo(body, fieldName, documentTypeSystemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieve the entire datasource for values in an class additional fields (the call compose columns based on call additional field configuration).  This call could not be compatible with some programming language, in this case use the call api/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId} 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Documents Identifier in the additional field</param>
        /// <param name="fieldName">Name of the additional field</param>
        /// <param name="documentTypeSystemId">Document type</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0AsyncWithHttpInfo (List<int?> body, string fieldName, int? documentTypeSystemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0");
            // verify the required parameter 'documentTypeSystemId' is set
            if (documentTypeSystemId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeSystemId' when calling ClassAdditionalFieldsV2Api->ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0");

            var localVarPath = "/api/v2/ClassAdditionalFields/fieldclasscomposevalues/{fieldName}/{documentTypeSystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (documentTypeSystemId != null) localVarPathParams.Add("documentTypeSystemId", this.Configuration.ApiClient.ParameterToString(documentTypeSystemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClassAdditionalFieldsV2AdditionalFieldClassComposeValues_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
