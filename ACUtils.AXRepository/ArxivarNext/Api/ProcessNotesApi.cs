/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProcessNotesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteworkid">Process note idenfier</param>
        /// <returns></returns>
        void ProcessNotesDelete (int? noteworkid);

        /// <summary>
        /// This call deletes a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteworkid">Process note idenfier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProcessNotesDeleteWithHttpInfo (int? noteworkid);
        /// <summary>
        /// This call inserts a new note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to insert</param>
        /// <returns>ProcessNoteDTO</returns>
        ProcessNoteDTO ProcessNotesInsert (ProcessNoteDTO body);

        /// <summary>
        /// This call inserts a new note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to insert</param>
        /// <returns>ApiResponse of ProcessNoteDTO</returns>
        ApiResponse<ProcessNoteDTO> ProcessNotesInsertWithHttpInfo (ProcessNoteDTO body);
        /// <summary>
        /// This call inserts a new note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>ProcessNoteDTO</returns>
        ProcessNoteDTO ProcessNotesInsert (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user);

        /// <summary>
        /// This call inserts a new note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of ProcessNoteDTO</returns>
        ApiResponse<ProcessNoteDTO> ProcessNotesInsertWithHttpInfo (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user);
        /// <summary>
        /// This call updates a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to update</param>
        /// <returns>ProcessNoteDTO</returns>
        ProcessNoteDTO ProcessNotesUpdate (ProcessNoteDTO body);

        /// <summary>
        /// This call updates a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to update</param>
        /// <returns>ApiResponse of ProcessNoteDTO</returns>
        ApiResponse<ProcessNoteDTO> ProcessNotesUpdateWithHttpInfo (ProcessNoteDTO body);
        /// <summary>
        /// This call updates a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>ProcessNoteDTO</returns>
        ProcessNoteDTO ProcessNotesUpdate (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user);

        /// <summary>
        /// This call updates a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of ProcessNoteDTO</returns>
        ApiResponse<ProcessNoteDTO> ProcessNotesUpdateWithHttpInfo (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteworkid">Process note idenfier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProcessNotesDeleteAsync (int? noteworkid);

        /// <summary>
        /// This call deletes a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteworkid">Process note idenfier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProcessNotesDeleteAsyncWithHttpInfo (int? noteworkid);
        /// <summary>
        /// This call inserts a new note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to insert</param>
        /// <returns>Task of ProcessNoteDTO</returns>
        System.Threading.Tasks.Task<ProcessNoteDTO> ProcessNotesInsertAsync (ProcessNoteDTO body);

        /// <summary>
        /// This call inserts a new note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to insert</param>
        /// <returns>Task of ApiResponse (ProcessNoteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessNoteDTO>> ProcessNotesInsertAsyncWithHttpInfo (ProcessNoteDTO body);
        /// <summary>
        /// This call inserts a new note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>Task of ProcessNoteDTO</returns>
        System.Threading.Tasks.Task<ProcessNoteDTO> ProcessNotesInsertAsync (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user);

        /// <summary>
        /// This call inserts a new note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (ProcessNoteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessNoteDTO>> ProcessNotesInsertAsyncWithHttpInfo (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user);
        /// <summary>
        /// This call updates a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to update</param>
        /// <returns>Task of ProcessNoteDTO</returns>
        System.Threading.Tasks.Task<ProcessNoteDTO> ProcessNotesUpdateAsync (ProcessNoteDTO body);

        /// <summary>
        /// This call updates a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to update</param>
        /// <returns>Task of ApiResponse (ProcessNoteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessNoteDTO>> ProcessNotesUpdateAsyncWithHttpInfo (ProcessNoteDTO body);
        /// <summary>
        /// This call updates a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>Task of ProcessNoteDTO</returns>
        System.Threading.Tasks.Task<ProcessNoteDTO> ProcessNotesUpdateAsync (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user);

        /// <summary>
        /// This call updates a process note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (ProcessNoteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessNoteDTO>> ProcessNotesUpdateAsyncWithHttpInfo (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProcessNotesApi : IProcessNotesApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessNotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessNotesApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessNotesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProcessNotesApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessNotesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessNotesApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteworkid">Process note idenfier</param>
        /// <returns></returns>
        public void ProcessNotesDelete (int? noteworkid)
        {
             ProcessNotesDeleteWithHttpInfo(noteworkid);
        }

        /// <summary>
        /// This call deletes a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteworkid">Process note idenfier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProcessNotesDeleteWithHttpInfo (int? noteworkid)
        {
            // verify the required parameter 'noteworkid' is set
            if (noteworkid == null)
                throw new ApiException(400, "Missing required parameter 'noteworkid' when calling ProcessNotesApi->ProcessNotesDelete");

            var localVarPath = "/api/ProcessNotes/{noteworkid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteworkid != null) localVarPathParams.Add("noteworkid", this.Configuration.ApiClient.ParameterToString(noteworkid)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessNotesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteworkid">Process note idenfier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProcessNotesDeleteAsync (int? noteworkid)
        {
             await ProcessNotesDeleteAsyncWithHttpInfo(noteworkid);

        }

        /// <summary>
        /// This call deletes a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteworkid">Process note idenfier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProcessNotesDeleteAsyncWithHttpInfo (int? noteworkid)
        {
            // verify the required parameter 'noteworkid' is set
            if (noteworkid == null)
                throw new ApiException(400, "Missing required parameter 'noteworkid' when calling ProcessNotesApi->ProcessNotesDelete");

            var localVarPath = "/api/ProcessNotes/{noteworkid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (noteworkid != null) localVarPathParams.Add("noteworkid", this.Configuration.ApiClient.ParameterToString(noteworkid)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessNotesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call inserts a new note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to insert</param>
        /// <returns>ProcessNoteDTO</returns>
        public ProcessNoteDTO ProcessNotesInsert (ProcessNoteDTO body)
        {
             ApiResponse<ProcessNoteDTO> localVarResponse = ProcessNotesInsertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to insert</param>
        /// <returns>ApiResponse of ProcessNoteDTO</returns>
        public ApiResponse< ProcessNoteDTO > ProcessNotesInsertWithHttpInfo (ProcessNoteDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessNotesApi->ProcessNotesInsert");

            var localVarPath = "/api/ProcessNotes/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessNotesInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessNoteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessNoteDTO)));
        }

        /// <summary>
        /// This call inserts a new note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to insert</param>
        /// <returns>Task of ProcessNoteDTO</returns>
        public async System.Threading.Tasks.Task<ProcessNoteDTO> ProcessNotesInsertAsync (ProcessNoteDTO body)
        {
             ApiResponse<ProcessNoteDTO> localVarResponse = await ProcessNotesInsertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to insert</param>
        /// <returns>Task of ApiResponse (ProcessNoteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessNoteDTO>> ProcessNotesInsertAsyncWithHttpInfo (ProcessNoteDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessNotesApi->ProcessNotesInsert");

            var localVarPath = "/api/ProcessNotes/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessNotesInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessNoteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessNoteDTO)));
        }

        /// <summary>
        /// This call inserts a new note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>ProcessNoteDTO</returns>
        public ProcessNoteDTO ProcessNotesInsert (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user)
        {
             ApiResponse<ProcessNoteDTO> localVarResponse = ProcessNotesInsertWithHttpInfo(date, id, processId, note, userCompleteName, user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of ProcessNoteDTO</returns>
        public ApiResponse< ProcessNoteDTO > ProcessNotesInsertWithHttpInfo (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling ProcessNotesApi->ProcessNotesInsert");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessNotesApi->ProcessNotesInsert");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessNotesApi->ProcessNotesInsert");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling ProcessNotesApi->ProcessNotesInsert");
            // verify the required parameter 'userCompleteName' is set
            if (userCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'userCompleteName' when calling ProcessNotesApi->ProcessNotesInsert");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling ProcessNotesApi->ProcessNotesInsert");

            var localVarPath = "/api/ProcessNotes/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarFormParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (processId != null) localVarFormParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            if (userCompleteName != null) localVarFormParams.Add("userCompleteName", this.Configuration.ApiClient.ParameterToString(userCompleteName)); // form parameter
            if (user != null) localVarFormParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessNotesInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessNoteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessNoteDTO)));
        }

        /// <summary>
        /// This call inserts a new note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>Task of ProcessNoteDTO</returns>
        public async System.Threading.Tasks.Task<ProcessNoteDTO> ProcessNotesInsertAsync (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user)
        {
             ApiResponse<ProcessNoteDTO> localVarResponse = await ProcessNotesInsertAsyncWithHttpInfo(date, id, processId, note, userCompleteName, user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (ProcessNoteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessNoteDTO>> ProcessNotesInsertAsyncWithHttpInfo (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling ProcessNotesApi->ProcessNotesInsert");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessNotesApi->ProcessNotesInsert");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessNotesApi->ProcessNotesInsert");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling ProcessNotesApi->ProcessNotesInsert");
            // verify the required parameter 'userCompleteName' is set
            if (userCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'userCompleteName' when calling ProcessNotesApi->ProcessNotesInsert");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling ProcessNotesApi->ProcessNotesInsert");

            var localVarPath = "/api/ProcessNotes/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarFormParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (processId != null) localVarFormParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            if (userCompleteName != null) localVarFormParams.Add("userCompleteName", this.Configuration.ApiClient.ParameterToString(userCompleteName)); // form parameter
            if (user != null) localVarFormParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessNotesInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessNoteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessNoteDTO)));
        }

        /// <summary>
        /// This call updates a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to update</param>
        /// <returns>ProcessNoteDTO</returns>
        public ProcessNoteDTO ProcessNotesUpdate (ProcessNoteDTO body)
        {
             ApiResponse<ProcessNoteDTO> localVarResponse = ProcessNotesUpdateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to update</param>
        /// <returns>ApiResponse of ProcessNoteDTO</returns>
        public ApiResponse< ProcessNoteDTO > ProcessNotesUpdateWithHttpInfo (ProcessNoteDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessNotesApi->ProcessNotesUpdate");

            var localVarPath = "/api/ProcessNotes/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessNotesUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessNoteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessNoteDTO)));
        }

        /// <summary>
        /// This call updates a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to update</param>
        /// <returns>Task of ProcessNoteDTO</returns>
        public async System.Threading.Tasks.Task<ProcessNoteDTO> ProcessNotesUpdateAsync (ProcessNoteDTO body)
        {
             ApiResponse<ProcessNoteDTO> localVarResponse = await ProcessNotesUpdateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Note information to update</param>
        /// <returns>Task of ApiResponse (ProcessNoteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessNoteDTO>> ProcessNotesUpdateAsyncWithHttpInfo (ProcessNoteDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessNotesApi->ProcessNotesUpdate");

            var localVarPath = "/api/ProcessNotes/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessNotesUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessNoteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessNoteDTO)));
        }

        /// <summary>
        /// This call updates a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>ProcessNoteDTO</returns>
        public ProcessNoteDTO ProcessNotesUpdate (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user)
        {
             ApiResponse<ProcessNoteDTO> localVarResponse = ProcessNotesUpdateWithHttpInfo(date, id, processId, note, userCompleteName, user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of ProcessNoteDTO</returns>
        public ApiResponse< ProcessNoteDTO > ProcessNotesUpdateWithHttpInfo (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling ProcessNotesApi->ProcessNotesUpdate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessNotesApi->ProcessNotesUpdate");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessNotesApi->ProcessNotesUpdate");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling ProcessNotesApi->ProcessNotesUpdate");
            // verify the required parameter 'userCompleteName' is set
            if (userCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'userCompleteName' when calling ProcessNotesApi->ProcessNotesUpdate");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling ProcessNotesApi->ProcessNotesUpdate");

            var localVarPath = "/api/ProcessNotes/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarFormParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (processId != null) localVarFormParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            if (userCompleteName != null) localVarFormParams.Add("userCompleteName", this.Configuration.ApiClient.ParameterToString(userCompleteName)); // form parameter
            if (user != null) localVarFormParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessNotesUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessNoteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessNoteDTO)));
        }

        /// <summary>
        /// This call updates a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>Task of ProcessNoteDTO</returns>
        public async System.Threading.Tasks.Task<ProcessNoteDTO> ProcessNotesUpdateAsync (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user)
        {
             ApiResponse<ProcessNoteDTO> localVarResponse = await ProcessNotesUpdateAsyncWithHttpInfo(date, id, processId, note, userCompleteName, user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a process note 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <param name="id"></param>
        /// <param name="processId"></param>
        /// <param name="note"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (ProcessNoteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessNoteDTO>> ProcessNotesUpdateAsyncWithHttpInfo (DateTime? date, int? id, int? processId, string note, string userCompleteName, int? user)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling ProcessNotesApi->ProcessNotesUpdate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessNotesApi->ProcessNotesUpdate");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessNotesApi->ProcessNotesUpdate");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling ProcessNotesApi->ProcessNotesUpdate");
            // verify the required parameter 'userCompleteName' is set
            if (userCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'userCompleteName' when calling ProcessNotesApi->ProcessNotesUpdate");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling ProcessNotesApi->ProcessNotesUpdate");

            var localVarPath = "/api/ProcessNotes/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarFormParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (processId != null) localVarFormParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            if (userCompleteName != null) localVarFormParams.Add("userCompleteName", this.Configuration.ApiClient.ParameterToString(userCompleteName)); // form parameter
            if (user != null) localVarFormParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessNotesUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessNoteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessNoteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessNoteDTO)));
        }

    }
}
