/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDesktopLayoutApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call delete an existent layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Identifier of the layout to be deleted</param>
        /// <returns></returns>
        void DesktopLayoutDelete (int? layoutId);

        /// <summary>
        /// This call delete an existent layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Identifier of the layout to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DesktopLayoutDeleteWithHttpInfo (int? layoutId);
        /// <summary>
        /// This call returns all layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LayoutDesktopDTO&gt;</returns>
        List<LayoutDesktopDTO> DesktopLayoutGet ();

        /// <summary>
        /// This call returns all layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LayoutDesktopDTO&gt;</returns>
        ApiResponse<List<LayoutDesktopDTO>> DesktopLayoutGetWithHttpInfo ();
        /// <summary>
        /// This call returns the single layout by the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>LayoutDesktopDTO</returns>
        LayoutDesktopDTO DesktopLayoutGetById (int? id);

        /// <summary>
        /// This call returns the single layout by the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>ApiResponse of LayoutDesktopDTO</returns>
        ApiResponse<LayoutDesktopDTO> DesktopLayoutGetByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Layout to be saved</param>
        /// <returns>LayoutDesktopDTO</returns>
        LayoutDesktopDTO DesktopLayoutPost (LayoutDesktopDTO body);

        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Layout to be saved</param>
        /// <returns>ApiResponse of LayoutDesktopDTO</returns>
        ApiResponse<LayoutDesktopDTO> DesktopLayoutPostWithHttpInfo (LayoutDesktopDTO body);
        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <returns>LayoutDesktopDTO</returns>
        LayoutDesktopDTO DesktopLayoutPost (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem);

        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <returns>ApiResponse of LayoutDesktopDTO</returns>
        ApiResponse<LayoutDesktopDTO> DesktopLayoutPostWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem);
        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New data of layout</param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns></returns>
        void DesktopLayoutPut (LayoutDesktopDTO body, int? id);

        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New data of layout</param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DesktopLayoutPutWithHttpInfo (LayoutDesktopDTO body, int? id);
        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns></returns>
        void DesktopLayoutPut (int? id2, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem, int? id);

        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DesktopLayoutPutWithHttpInfo (int? id2, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem, int? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call delete an existent layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Identifier of the layout to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DesktopLayoutDeleteAsync (int? layoutId);

        /// <summary>
        /// This call delete an existent layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Identifier of the layout to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DesktopLayoutDeleteAsyncWithHttpInfo (int? layoutId);
        /// <summary>
        /// This call returns all layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LayoutDesktopDTO&gt;</returns>
        System.Threading.Tasks.Task<List<LayoutDesktopDTO>> DesktopLayoutGetAsync ();

        /// <summary>
        /// This call returns all layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LayoutDesktopDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LayoutDesktopDTO>>> DesktopLayoutGetAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the single layout by the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of LayoutDesktopDTO</returns>
        System.Threading.Tasks.Task<LayoutDesktopDTO> DesktopLayoutGetByIdAsync (int? id);

        /// <summary>
        /// This call returns the single layout by the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of ApiResponse (LayoutDesktopDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutDesktopDTO>> DesktopLayoutGetByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Layout to be saved</param>
        /// <returns>Task of LayoutDesktopDTO</returns>
        System.Threading.Tasks.Task<LayoutDesktopDTO> DesktopLayoutPostAsync (LayoutDesktopDTO body);

        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Layout to be saved</param>
        /// <returns>Task of ApiResponse (LayoutDesktopDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutDesktopDTO>> DesktopLayoutPostAsyncWithHttpInfo (LayoutDesktopDTO body);
        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <returns>Task of LayoutDesktopDTO</returns>
        System.Threading.Tasks.Task<LayoutDesktopDTO> DesktopLayoutPostAsync (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem);

        /// <summary>
        /// This call save a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <returns>Task of ApiResponse (LayoutDesktopDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutDesktopDTO>> DesktopLayoutPostAsyncWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem);
        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New data of layout</param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DesktopLayoutPutAsync (LayoutDesktopDTO body, int? id);

        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New data of layout</param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DesktopLayoutPutAsyncWithHttpInfo (LayoutDesktopDTO body, int? id);
        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DesktopLayoutPutAsync (int? id2, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem, int? id);

        /// <summary>
        /// This call update a layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DesktopLayoutPutAsyncWithHttpInfo (int? id2, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem, int? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DesktopLayoutApi : IDesktopLayoutApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopLayoutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DesktopLayoutApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopLayoutApi"/> class
        /// </summary>
        /// <returns></returns>
        public DesktopLayoutApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopLayoutApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DesktopLayoutApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call delete an existent layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Identifier of the layout to be deleted</param>
        /// <returns></returns>
        public void DesktopLayoutDelete (int? layoutId)
        {
             DesktopLayoutDeleteWithHttpInfo(layoutId);
        }

        /// <summary>
        /// This call delete an existent layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Identifier of the layout to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DesktopLayoutDeleteWithHttpInfo (int? layoutId)
        {
            // verify the required parameter 'layoutId' is set
            if (layoutId == null)
                throw new ApiException(400, "Missing required parameter 'layoutId' when calling DesktopLayoutApi->DesktopLayoutDelete");

            var localVarPath = "/api/DesktopLayout/{layoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutId != null) localVarPathParams.Add("layoutId", this.Configuration.ApiClient.ParameterToString(layoutId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call delete an existent layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Identifier of the layout to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DesktopLayoutDeleteAsync (int? layoutId)
        {
             await DesktopLayoutDeleteAsyncWithHttpInfo(layoutId);

        }

        /// <summary>
        /// This call delete an existent layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId">Identifier of the layout to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DesktopLayoutDeleteAsyncWithHttpInfo (int? layoutId)
        {
            // verify the required parameter 'layoutId' is set
            if (layoutId == null)
                throw new ApiException(400, "Missing required parameter 'layoutId' when calling DesktopLayoutApi->DesktopLayoutDelete");

            var localVarPath = "/api/DesktopLayout/{layoutId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutId != null) localVarPathParams.Add("layoutId", this.Configuration.ApiClient.ParameterToString(layoutId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns all layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LayoutDesktopDTO&gt;</returns>
        public List<LayoutDesktopDTO> DesktopLayoutGet ()
        {
             ApiResponse<List<LayoutDesktopDTO>> localVarResponse = DesktopLayoutGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LayoutDesktopDTO&gt;</returns>
        public ApiResponse< List<LayoutDesktopDTO> > DesktopLayoutGetWithHttpInfo ()
        {

            var localVarPath = "/api/DesktopLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LayoutDesktopDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LayoutDesktopDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LayoutDesktopDTO>)));
        }

        /// <summary>
        /// This call returns all layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LayoutDesktopDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<LayoutDesktopDTO>> DesktopLayoutGetAsync ()
        {
             ApiResponse<List<LayoutDesktopDTO>> localVarResponse = await DesktopLayoutGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LayoutDesktopDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LayoutDesktopDTO>>> DesktopLayoutGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/DesktopLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LayoutDesktopDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LayoutDesktopDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LayoutDesktopDTO>)));
        }

        /// <summary>
        /// This call returns the single layout by the given id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>LayoutDesktopDTO</returns>
        public LayoutDesktopDTO DesktopLayoutGetById (int? id)
        {
             ApiResponse<LayoutDesktopDTO> localVarResponse = DesktopLayoutGetByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the single layout by the given id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>ApiResponse of LayoutDesktopDTO</returns>
        public ApiResponse< LayoutDesktopDTO > DesktopLayoutGetByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DesktopLayoutApi->DesktopLayoutGetById");

            var localVarPath = "/api/DesktopLayout/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDesktopDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutDesktopDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDesktopDTO)));
        }

        /// <summary>
        /// This call returns the single layout by the given id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of LayoutDesktopDTO</returns>
        public async System.Threading.Tasks.Task<LayoutDesktopDTO> DesktopLayoutGetByIdAsync (int? id)
        {
             ApiResponse<LayoutDesktopDTO> localVarResponse = await DesktopLayoutGetByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the single layout by the given id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of ApiResponse (LayoutDesktopDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LayoutDesktopDTO>> DesktopLayoutGetByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DesktopLayoutApi->DesktopLayoutGetById");

            var localVarPath = "/api/DesktopLayout/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDesktopDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutDesktopDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDesktopDTO)));
        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Layout to be saved</param>
        /// <returns>LayoutDesktopDTO</returns>
        public LayoutDesktopDTO DesktopLayoutPost (LayoutDesktopDTO body)
        {
             ApiResponse<LayoutDesktopDTO> localVarResponse = DesktopLayoutPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Layout to be saved</param>
        /// <returns>ApiResponse of LayoutDesktopDTO</returns>
        public ApiResponse< LayoutDesktopDTO > DesktopLayoutPostWithHttpInfo (LayoutDesktopDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DesktopLayoutApi->DesktopLayoutPost");

            var localVarPath = "/api/DesktopLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDesktopDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutDesktopDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDesktopDTO)));
        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Layout to be saved</param>
        /// <returns>Task of LayoutDesktopDTO</returns>
        public async System.Threading.Tasks.Task<LayoutDesktopDTO> DesktopLayoutPostAsync (LayoutDesktopDTO body)
        {
             ApiResponse<LayoutDesktopDTO> localVarResponse = await DesktopLayoutPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Layout to be saved</param>
        /// <returns>Task of ApiResponse (LayoutDesktopDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LayoutDesktopDTO>> DesktopLayoutPostAsyncWithHttpInfo (LayoutDesktopDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DesktopLayoutApi->DesktopLayoutPost");

            var localVarPath = "/api/DesktopLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDesktopDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutDesktopDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDesktopDTO)));
        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <returns>LayoutDesktopDTO</returns>
        public LayoutDesktopDTO DesktopLayoutPost (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem)
        {
             ApiResponse<LayoutDesktopDTO> localVarResponse = DesktopLayoutPostWithHttpInfo(id, name, author, authorCompleteName, creationDate, details, isSystem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <returns>ApiResponse of LayoutDesktopDTO</returns>
        public ApiResponse< LayoutDesktopDTO > DesktopLayoutPostWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'author' is set
            if (author == null)
                throw new ApiException(400, "Missing required parameter 'author' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'authorCompleteName' is set
            if (authorCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'authorCompleteName' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'isSystem' is set
            if (isSystem == null)
                throw new ApiException(400, "Missing required parameter 'isSystem' when calling DesktopLayoutApi->DesktopLayoutPost");

            var localVarPath = "/api/DesktopLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (author != null) localVarFormParams.Add("author", this.Configuration.ApiClient.ParameterToString(author)); // form parameter
            if (authorCompleteName != null) localVarFormParams.Add("authorCompleteName", this.Configuration.ApiClient.ParameterToString(authorCompleteName)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter
            if (isSystem != null) localVarFormParams.Add("isSystem", this.Configuration.ApiClient.ParameterToString(isSystem)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDesktopDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutDesktopDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDesktopDTO)));
        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <returns>Task of LayoutDesktopDTO</returns>
        public async System.Threading.Tasks.Task<LayoutDesktopDTO> DesktopLayoutPostAsync (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem)
        {
             ApiResponse<LayoutDesktopDTO> localVarResponse = await DesktopLayoutPostAsyncWithHttpInfo(id, name, author, authorCompleteName, creationDate, details, isSystem);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call save a new layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <returns>Task of ApiResponse (LayoutDesktopDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LayoutDesktopDTO>> DesktopLayoutPostAsyncWithHttpInfo (int? id, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'author' is set
            if (author == null)
                throw new ApiException(400, "Missing required parameter 'author' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'authorCompleteName' is set
            if (authorCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'authorCompleteName' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling DesktopLayoutApi->DesktopLayoutPost");
            // verify the required parameter 'isSystem' is set
            if (isSystem == null)
                throw new ApiException(400, "Missing required parameter 'isSystem' when calling DesktopLayoutApi->DesktopLayoutPost");

            var localVarPath = "/api/DesktopLayout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (author != null) localVarFormParams.Add("author", this.Configuration.ApiClient.ParameterToString(author)); // form parameter
            if (authorCompleteName != null) localVarFormParams.Add("authorCompleteName", this.Configuration.ApiClient.ParameterToString(authorCompleteName)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter
            if (isSystem != null) localVarFormParams.Add("isSystem", this.Configuration.ApiClient.ParameterToString(isSystem)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutDesktopDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutDesktopDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutDesktopDTO)));
        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New data of layout</param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns></returns>
        public void DesktopLayoutPut (LayoutDesktopDTO body, int? id)
        {
             DesktopLayoutPutWithHttpInfo(body, id);
        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New data of layout</param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DesktopLayoutPutWithHttpInfo (LayoutDesktopDTO body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DesktopLayoutApi->DesktopLayoutPut");

            var localVarPath = "/api/DesktopLayout/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New data of layout</param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DesktopLayoutPutAsync (LayoutDesktopDTO body, int? id)
        {
             await DesktopLayoutPutAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New data of layout</param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DesktopLayoutPutAsyncWithHttpInfo (LayoutDesktopDTO body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DesktopLayoutApi->DesktopLayoutPut");

            var localVarPath = "/api/DesktopLayout/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns></returns>
        public void DesktopLayoutPut (int? id2, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem, int? id)
        {
             DesktopLayoutPutWithHttpInfo(id2, name, author, authorCompleteName, creationDate, details, isSystem, id);
        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DesktopLayoutPutWithHttpInfo (int? id2, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem, int? id)
        {
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'author' is set
            if (author == null)
                throw new ApiException(400, "Missing required parameter 'author' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'authorCompleteName' is set
            if (authorCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'authorCompleteName' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'isSystem' is set
            if (isSystem == null)
                throw new ApiException(400, "Missing required parameter 'isSystem' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DesktopLayoutApi->DesktopLayoutPut");

            var localVarPath = "/api/DesktopLayout/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (author != null) localVarFormParams.Add("author", this.Configuration.ApiClient.ParameterToString(author)); // form parameter
            if (authorCompleteName != null) localVarFormParams.Add("authorCompleteName", this.Configuration.ApiClient.ParameterToString(authorCompleteName)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter
            if (isSystem != null) localVarFormParams.Add("isSystem", this.Configuration.ApiClient.ParameterToString(isSystem)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DesktopLayoutPutAsync (int? id2, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem, int? id)
        {
             await DesktopLayoutPutAsyncWithHttpInfo(id2, name, author, authorCompleteName, creationDate, details, isSystem, id);

        }

        /// <summary>
        /// This call update a layout 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="name"></param>
        /// <param name="author"></param>
        /// <param name="authorCompleteName"></param>
        /// <param name="creationDate"></param>
        /// <param name="details"></param>
        /// <param name="isSystem"></param>
        /// <param name="id">Identifier of the wanted layout</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DesktopLayoutPutAsyncWithHttpInfo (int? id2, string name, int? author, string authorCompleteName, DateTime? creationDate, List<LayoutDesktopDetailDTO> details, bool? isSystem, int? id)
        {
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'author' is set
            if (author == null)
                throw new ApiException(400, "Missing required parameter 'author' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'authorCompleteName' is set
            if (authorCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'authorCompleteName' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'isSystem' is set
            if (isSystem == null)
                throw new ApiException(400, "Missing required parameter 'isSystem' when calling DesktopLayoutApi->DesktopLayoutPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DesktopLayoutApi->DesktopLayoutPut");

            var localVarPath = "/api/DesktopLayout/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (author != null) localVarFormParams.Add("author", this.Configuration.ApiClient.ParameterToString(author)); // form parameter
            if (authorCompleteName != null) localVarFormParams.Add("authorCompleteName", this.Configuration.ApiClient.ParameterToString(authorCompleteName)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter
            if (isSystem != null) localVarFormParams.Add("isSystem", this.Configuration.ApiClient.ParameterToString(isSystem)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DesktopLayoutPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
