/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes user specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns></returns>
        void UsersDelete (int? id);

        /// <summary>
        /// This call deletes user specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersDeleteWithHttpInfo (int? id);
        /// <summary>
        /// This call returns a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>UserInfoDTO</returns>
        UserInfoDTO UsersGet (int? id);

        /// <summary>
        /// This call returns a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of UserInfoDTO</returns>
        ApiResponse<UserInfoDTO> UsersGetWithHttpInfo (int? id);
        /// <summary>
        /// This call gets user object for update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>UserUpdateDTO</returns>
        UserUpdateDTO UsersGetForUpdate (int? id);

        /// <summary>
        /// This call gets user object for update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of UserUpdateDTO</returns>
        ApiResponse<UserUpdateDTO> UsersGetForUpdateWithHttpInfo (int? id);
        /// <summary>
        /// This call returns all user groups defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserGroupDTO&gt;</returns>
        List<UserGroupDTO> UsersGetGroups ();

        /// <summary>
        /// This call returns all user groups defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserGroupDTO&gt;</returns>
        ApiResponse<List<UserGroupDTO>> UsersGetGroupsWithHttpInfo ();
        /// <summary>
        /// This call returns all user in a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        List<UserCompleteDTO> UsersGetUserByGroup (int? groupId);

        /// <summary>
        /// This call returns all user in a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        ApiResponse<List<UserCompleteDTO>> UsersGetUserByGroupWithHttpInfo (int? groupId);
        /// <summary>
        /// This call returns the informations of the connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserInfoDTO</returns>
        UserInfoDTO UsersGetUserInfo ();

        /// <summary>
        /// This call returns the informations of the connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserInfoDTO</returns>
        ApiResponse<UserInfoDTO> UsersGetUserInfoWithHttpInfo ();
        /// <summary>
        /// This call returns all users defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        List<UserCompleteDTO> UsersGet_0 ();

        /// <summary>
        /// This call returns all users defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        ApiResponse<List<UserCompleteDTO>> UsersGet_0WithHttpInfo ();
        /// <summary>
        /// This call inserts a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User information to insert</param>
        /// <returns>UserCompleteDTO</returns>
        UserCompleteDTO UsersInsert (UserInsertDTO body);

        /// <summary>
        /// This call inserts a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User information to insert</param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        ApiResponse<UserCompleteDTO> UsersInsertWithHttpInfo (UserInsertDTO body);
        /// <summary>
        /// This call inserts a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUserUnlock"></param>
        /// <param name="tempArchive"></param>
        /// <param name="addressBookProfile"></param>
        /// <param name="distributionList"></param>
        /// <param name="mailIn"></param>
        /// <param name="mailOutStoreExt"></param>
        /// <param name="mailOutStoreIn"></param>
        /// <param name="mailDeleteProfile"></param>
        /// <param name="webCompliantCopy"></param>
        /// <param name="webSearch"></param>
        /// <param name="webQuickSearch"></param>
        /// <param name="webMailBox"></param>
        /// <param name="webFolders"></param>
        /// <param name="webSearchViews"></param>
        /// <param name="webBinders"></param>
        /// <param name="webCheckinAdmin"></param>
        /// <param name="mailOutMaxSize"></param>
        /// <param name="mailOutDefaultType"></param>
        /// <param name="mailOutType2"></param>
        /// <param name="mailOutType3"></param>
        /// <param name="securityStateList"></param>
        /// <param name="group"></param>
        /// <param name="description"></param>
        /// <param name="email"></param>
        /// <param name="businessUnit"></param>
        /// <param name="password"></param>
        /// <param name="defaultType"></param>
        /// <param name="type2"></param>
        /// <param name="type3"></param>
        /// <param name="internalFax"></param>
        /// <param name="lastMail"></param>
        /// <param name="category"></param>
        /// <param name="workflow"></param>
        /// <param name="defaultState"></param>
        /// <param name="addressBook"></param>
        /// <param name="userState"></param>
        /// <param name="mailServer"></param>
        /// <param name="webAccess"></param>
        /// <param name="upload"></param>
        /// <param name="folders"></param>
        /// <param name="flow"></param>
        /// <param name="sign"></param>
        /// <param name="viewer"></param>
        /// <param name="protocol"></param>
        /// <param name="models"></param>
        /// <param name="domain"></param>
        /// <param name="outState"></param>
        /// <param name="mailBody"></param>
        /// <param name="notify"></param>
        /// <param name="mailClient"></param>
        /// <param name="htmlBody"></param>
        /// <param name="respAos"></param>
        /// <param name="assAos"></param>
        /// <param name="codFis"></param>
        /// <param name="pin"></param>
        /// <param name="guest"></param>
        /// <param name="passwordChange"></param>
        /// <param name="marking"></param>
        /// <param name="type"></param>
        /// <param name="mailOutDefault"></param>
        /// <param name="barcodeAccess"></param>
        /// <param name="mustChangePassword"></param>
        /// <param name="lang"></param>
        /// <param name="ws"></param>
        /// <param name="disablePswExpired"></param>
        /// <param name="completeDescription"></param>
        /// <param name="canAddVirtualStamps"></param>
        /// <param name="canApplyStaps"></param>
        /// <param name="viewFlow"></param>
        /// <returns>UserCompleteDTO</returns>
        UserCompleteDTO UsersInsert (bool? businessUnitUserUnlock, bool? tempArchive, bool? addressBookProfile, bool? distributionList, int? mailIn, int? mailOutStoreExt, int? mailOutStoreIn, bool? mailDeleteProfile, bool? webCompliantCopy, bool? webSearch, bool? webQuickSearch, bool? webMailBox, bool? webFolders, bool? webSearchViews, bool? webBinders, bool? webCheckinAdmin, int? mailOutMaxSize, int? mailOutDefaultType, int? mailOutType2, int? mailOutType3, List<UserSecurityStateDTO> securityStateList, int? group, string description, string email, string businessUnit, string password, int? defaultType, int? type2, int? type3, string internalFax, DateTime? lastMail, int? category, bool? workflow, string defaultState, bool? addressBook, int? userState, string mailServer, bool? webAccess, bool? upload, bool? folders, bool? flow, bool? sign, int? viewer, bool? protocol, bool? models, string domain, string outState, string mailBody, bool? notify, string mailClient, int? htmlBody, bool? respAos, bool? assAos, string codFis, string pin, bool? guest, bool? passwordChange, byte[] marking, int? type, bool? mailOutDefault, bool? barcodeAccess, int? mustChangePassword, string lang, bool? ws, bool? disablePswExpired, string completeDescription, int? canAddVirtualStamps, int? canApplyStaps, bool? viewFlow);

        /// <summary>
        /// This call inserts a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUserUnlock"></param>
        /// <param name="tempArchive"></param>
        /// <param name="addressBookProfile"></param>
        /// <param name="distributionList"></param>
        /// <param name="mailIn"></param>
        /// <param name="mailOutStoreExt"></param>
        /// <param name="mailOutStoreIn"></param>
        /// <param name="mailDeleteProfile"></param>
        /// <param name="webCompliantCopy"></param>
        /// <param name="webSearch"></param>
        /// <param name="webQuickSearch"></param>
        /// <param name="webMailBox"></param>
        /// <param name="webFolders"></param>
        /// <param name="webSearchViews"></param>
        /// <param name="webBinders"></param>
        /// <param name="webCheckinAdmin"></param>
        /// <param name="mailOutMaxSize"></param>
        /// <param name="mailOutDefaultType"></param>
        /// <param name="mailOutType2"></param>
        /// <param name="mailOutType3"></param>
        /// <param name="securityStateList"></param>
        /// <param name="group"></param>
        /// <param name="description"></param>
        /// <param name="email"></param>
        /// <param name="businessUnit"></param>
        /// <param name="password"></param>
        /// <param name="defaultType"></param>
        /// <param name="type2"></param>
        /// <param name="type3"></param>
        /// <param name="internalFax"></param>
        /// <param name="lastMail"></param>
        /// <param name="category"></param>
        /// <param name="workflow"></param>
        /// <param name="defaultState"></param>
        /// <param name="addressBook"></param>
        /// <param name="userState"></param>
        /// <param name="mailServer"></param>
        /// <param name="webAccess"></param>
        /// <param name="upload"></param>
        /// <param name="folders"></param>
        /// <param name="flow"></param>
        /// <param name="sign"></param>
        /// <param name="viewer"></param>
        /// <param name="protocol"></param>
        /// <param name="models"></param>
        /// <param name="domain"></param>
        /// <param name="outState"></param>
        /// <param name="mailBody"></param>
        /// <param name="notify"></param>
        /// <param name="mailClient"></param>
        /// <param name="htmlBody"></param>
        /// <param name="respAos"></param>
        /// <param name="assAos"></param>
        /// <param name="codFis"></param>
        /// <param name="pin"></param>
        /// <param name="guest"></param>
        /// <param name="passwordChange"></param>
        /// <param name="marking"></param>
        /// <param name="type"></param>
        /// <param name="mailOutDefault"></param>
        /// <param name="barcodeAccess"></param>
        /// <param name="mustChangePassword"></param>
        /// <param name="lang"></param>
        /// <param name="ws"></param>
        /// <param name="disablePswExpired"></param>
        /// <param name="completeDescription"></param>
        /// <param name="canAddVirtualStamps"></param>
        /// <param name="canApplyStaps"></param>
        /// <param name="viewFlow"></param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        ApiResponse<UserCompleteDTO> UsersInsertWithHttpInfo (bool? businessUnitUserUnlock, bool? tempArchive, bool? addressBookProfile, bool? distributionList, int? mailIn, int? mailOutStoreExt, int? mailOutStoreIn, bool? mailDeleteProfile, bool? webCompliantCopy, bool? webSearch, bool? webQuickSearch, bool? webMailBox, bool? webFolders, bool? webSearchViews, bool? webBinders, bool? webCheckinAdmin, int? mailOutMaxSize, int? mailOutDefaultType, int? mailOutType2, int? mailOutType3, List<UserSecurityStateDTO> securityStateList, int? group, string description, string email, string businessUnit, string password, int? defaultType, int? type2, int? type3, string internalFax, DateTime? lastMail, int? category, bool? workflow, string defaultState, bool? addressBook, int? userState, string mailServer, bool? webAccess, bool? upload, bool? folders, bool? flow, bool? sign, int? viewer, bool? protocol, bool? models, string domain, string outState, string mailBody, bool? notify, string mailClient, int? htmlBody, bool? respAos, bool? assAos, string codFis, string pin, bool? guest, bool? passwordChange, byte[] marking, int? type, bool? mailOutDefault, bool? barcodeAccess, int? mustChangePassword, string lang, bool? ws, bool? disablePswExpired, string completeDescription, int? canAddVirtualStamps, int? canApplyStaps, bool? viewFlow);
        /// <summary>
        /// This call updates the user languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">Language code to set</param>
        /// <returns></returns>
        void UsersSetLang (string lang);

        /// <summary>
        /// This call updates the user languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">Language code to set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersSetLangWithHttpInfo (string lang);
        /// <summary>
        /// This call updates a given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserCompleteDTO</returns>
        UserCompleteDTO UsersUpdate (int? id, UserUpdateDTO body = null);

        /// <summary>
        /// This call updates a given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        ApiResponse<UserCompleteDTO> UsersUpdateWithHttpInfo (int? id, UserUpdateDTO body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes user specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersDeleteAsync (int? id);

        /// <summary>
        /// This call deletes user specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of UserInfoDTO</returns>
        System.Threading.Tasks.Task<UserInfoDTO> UsersGetAsync (int? id);

        /// <summary>
        /// This call returns a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse (UserInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoDTO>> UsersGetAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call gets user object for update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of UserUpdateDTO</returns>
        System.Threading.Tasks.Task<UserUpdateDTO> UsersGetForUpdateAsync (int? id);

        /// <summary>
        /// This call gets user object for update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse (UserUpdateDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserUpdateDTO>> UsersGetForUpdateAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns all user groups defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserGroupDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserGroupDTO>> UsersGetGroupsAsync ();

        /// <summary>
        /// This call returns all user groups defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserGroupDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserGroupDTO>>> UsersGetGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all user in a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompleteDTO>> UsersGetUserByGroupAsync (int? groupId);

        /// <summary>
        /// This call returns all user in a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> UsersGetUserByGroupAsyncWithHttpInfo (int? groupId);
        /// <summary>
        /// This call returns the informations of the connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserInfoDTO</returns>
        System.Threading.Tasks.Task<UserInfoDTO> UsersGetUserInfoAsync ();

        /// <summary>
        /// This call returns the informations of the connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoDTO>> UsersGetUserInfoAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all users defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<UserCompleteDTO>> UsersGet_0Async ();

        /// <summary>
        /// This call returns all users defined in Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> UsersGet_0AsyncWithHttpInfo ();
        /// <summary>
        /// This call inserts a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User information to insert</param>
        /// <returns>Task of UserCompleteDTO</returns>
        System.Threading.Tasks.Task<UserCompleteDTO> UsersInsertAsync (UserInsertDTO body);

        /// <summary>
        /// This call inserts a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User information to insert</param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersInsertAsyncWithHttpInfo (UserInsertDTO body);
        /// <summary>
        /// This call inserts a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUserUnlock"></param>
        /// <param name="tempArchive"></param>
        /// <param name="addressBookProfile"></param>
        /// <param name="distributionList"></param>
        /// <param name="mailIn"></param>
        /// <param name="mailOutStoreExt"></param>
        /// <param name="mailOutStoreIn"></param>
        /// <param name="mailDeleteProfile"></param>
        /// <param name="webCompliantCopy"></param>
        /// <param name="webSearch"></param>
        /// <param name="webQuickSearch"></param>
        /// <param name="webMailBox"></param>
        /// <param name="webFolders"></param>
        /// <param name="webSearchViews"></param>
        /// <param name="webBinders"></param>
        /// <param name="webCheckinAdmin"></param>
        /// <param name="mailOutMaxSize"></param>
        /// <param name="mailOutDefaultType"></param>
        /// <param name="mailOutType2"></param>
        /// <param name="mailOutType3"></param>
        /// <param name="securityStateList"></param>
        /// <param name="group"></param>
        /// <param name="description"></param>
        /// <param name="email"></param>
        /// <param name="businessUnit"></param>
        /// <param name="password"></param>
        /// <param name="defaultType"></param>
        /// <param name="type2"></param>
        /// <param name="type3"></param>
        /// <param name="internalFax"></param>
        /// <param name="lastMail"></param>
        /// <param name="category"></param>
        /// <param name="workflow"></param>
        /// <param name="defaultState"></param>
        /// <param name="addressBook"></param>
        /// <param name="userState"></param>
        /// <param name="mailServer"></param>
        /// <param name="webAccess"></param>
        /// <param name="upload"></param>
        /// <param name="folders"></param>
        /// <param name="flow"></param>
        /// <param name="sign"></param>
        /// <param name="viewer"></param>
        /// <param name="protocol"></param>
        /// <param name="models"></param>
        /// <param name="domain"></param>
        /// <param name="outState"></param>
        /// <param name="mailBody"></param>
        /// <param name="notify"></param>
        /// <param name="mailClient"></param>
        /// <param name="htmlBody"></param>
        /// <param name="respAos"></param>
        /// <param name="assAos"></param>
        /// <param name="codFis"></param>
        /// <param name="pin"></param>
        /// <param name="guest"></param>
        /// <param name="passwordChange"></param>
        /// <param name="marking"></param>
        /// <param name="type"></param>
        /// <param name="mailOutDefault"></param>
        /// <param name="barcodeAccess"></param>
        /// <param name="mustChangePassword"></param>
        /// <param name="lang"></param>
        /// <param name="ws"></param>
        /// <param name="disablePswExpired"></param>
        /// <param name="completeDescription"></param>
        /// <param name="canAddVirtualStamps"></param>
        /// <param name="canApplyStaps"></param>
        /// <param name="viewFlow"></param>
        /// <returns>Task of UserCompleteDTO</returns>
        System.Threading.Tasks.Task<UserCompleteDTO> UsersInsertAsync (bool? businessUnitUserUnlock, bool? tempArchive, bool? addressBookProfile, bool? distributionList, int? mailIn, int? mailOutStoreExt, int? mailOutStoreIn, bool? mailDeleteProfile, bool? webCompliantCopy, bool? webSearch, bool? webQuickSearch, bool? webMailBox, bool? webFolders, bool? webSearchViews, bool? webBinders, bool? webCheckinAdmin, int? mailOutMaxSize, int? mailOutDefaultType, int? mailOutType2, int? mailOutType3, List<UserSecurityStateDTO> securityStateList, int? group, string description, string email, string businessUnit, string password, int? defaultType, int? type2, int? type3, string internalFax, DateTime? lastMail, int? category, bool? workflow, string defaultState, bool? addressBook, int? userState, string mailServer, bool? webAccess, bool? upload, bool? folders, bool? flow, bool? sign, int? viewer, bool? protocol, bool? models, string domain, string outState, string mailBody, bool? notify, string mailClient, int? htmlBody, bool? respAos, bool? assAos, string codFis, string pin, bool? guest, bool? passwordChange, byte[] marking, int? type, bool? mailOutDefault, bool? barcodeAccess, int? mustChangePassword, string lang, bool? ws, bool? disablePswExpired, string completeDescription, int? canAddVirtualStamps, int? canApplyStaps, bool? viewFlow);

        /// <summary>
        /// This call inserts a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUserUnlock"></param>
        /// <param name="tempArchive"></param>
        /// <param name="addressBookProfile"></param>
        /// <param name="distributionList"></param>
        /// <param name="mailIn"></param>
        /// <param name="mailOutStoreExt"></param>
        /// <param name="mailOutStoreIn"></param>
        /// <param name="mailDeleteProfile"></param>
        /// <param name="webCompliantCopy"></param>
        /// <param name="webSearch"></param>
        /// <param name="webQuickSearch"></param>
        /// <param name="webMailBox"></param>
        /// <param name="webFolders"></param>
        /// <param name="webSearchViews"></param>
        /// <param name="webBinders"></param>
        /// <param name="webCheckinAdmin"></param>
        /// <param name="mailOutMaxSize"></param>
        /// <param name="mailOutDefaultType"></param>
        /// <param name="mailOutType2"></param>
        /// <param name="mailOutType3"></param>
        /// <param name="securityStateList"></param>
        /// <param name="group"></param>
        /// <param name="description"></param>
        /// <param name="email"></param>
        /// <param name="businessUnit"></param>
        /// <param name="password"></param>
        /// <param name="defaultType"></param>
        /// <param name="type2"></param>
        /// <param name="type3"></param>
        /// <param name="internalFax"></param>
        /// <param name="lastMail"></param>
        /// <param name="category"></param>
        /// <param name="workflow"></param>
        /// <param name="defaultState"></param>
        /// <param name="addressBook"></param>
        /// <param name="userState"></param>
        /// <param name="mailServer"></param>
        /// <param name="webAccess"></param>
        /// <param name="upload"></param>
        /// <param name="folders"></param>
        /// <param name="flow"></param>
        /// <param name="sign"></param>
        /// <param name="viewer"></param>
        /// <param name="protocol"></param>
        /// <param name="models"></param>
        /// <param name="domain"></param>
        /// <param name="outState"></param>
        /// <param name="mailBody"></param>
        /// <param name="notify"></param>
        /// <param name="mailClient"></param>
        /// <param name="htmlBody"></param>
        /// <param name="respAos"></param>
        /// <param name="assAos"></param>
        /// <param name="codFis"></param>
        /// <param name="pin"></param>
        /// <param name="guest"></param>
        /// <param name="passwordChange"></param>
        /// <param name="marking"></param>
        /// <param name="type"></param>
        /// <param name="mailOutDefault"></param>
        /// <param name="barcodeAccess"></param>
        /// <param name="mustChangePassword"></param>
        /// <param name="lang"></param>
        /// <param name="ws"></param>
        /// <param name="disablePswExpired"></param>
        /// <param name="completeDescription"></param>
        /// <param name="canAddVirtualStamps"></param>
        /// <param name="canApplyStaps"></param>
        /// <param name="viewFlow"></param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersInsertAsyncWithHttpInfo (bool? businessUnitUserUnlock, bool? tempArchive, bool? addressBookProfile, bool? distributionList, int? mailIn, int? mailOutStoreExt, int? mailOutStoreIn, bool? mailDeleteProfile, bool? webCompliantCopy, bool? webSearch, bool? webQuickSearch, bool? webMailBox, bool? webFolders, bool? webSearchViews, bool? webBinders, bool? webCheckinAdmin, int? mailOutMaxSize, int? mailOutDefaultType, int? mailOutType2, int? mailOutType3, List<UserSecurityStateDTO> securityStateList, int? group, string description, string email, string businessUnit, string password, int? defaultType, int? type2, int? type3, string internalFax, DateTime? lastMail, int? category, bool? workflow, string defaultState, bool? addressBook, int? userState, string mailServer, bool? webAccess, bool? upload, bool? folders, bool? flow, bool? sign, int? viewer, bool? protocol, bool? models, string domain, string outState, string mailBody, bool? notify, string mailClient, int? htmlBody, bool? respAos, bool? assAos, string codFis, string pin, bool? guest, bool? passwordChange, byte[] marking, int? type, bool? mailOutDefault, bool? barcodeAccess, int? mustChangePassword, string lang, bool? ws, bool? disablePswExpired, string completeDescription, int? canAddVirtualStamps, int? canApplyStaps, bool? viewFlow);
        /// <summary>
        /// This call updates the user languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">Language code to set</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersSetLangAsync (string lang);

        /// <summary>
        /// This call updates the user languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">Language code to set</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersSetLangAsyncWithHttpInfo (string lang);
        /// <summary>
        /// This call updates a given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserCompleteDTO</returns>
        System.Threading.Tasks.Task<UserCompleteDTO> UsersUpdateAsync (int? id, UserUpdateDTO body = null);

        /// <summary>
        /// This call updates a given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersUpdateAsyncWithHttpInfo (int? id, UserUpdateDTO body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UsersApi : IUsersApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// </summary>
        /// <returns></returns>
        public UsersApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes user specified 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns></returns>
        public void UsersDelete (int? id)
        {
             UsersDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes user specified 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersDelete");

            var localVarPath = "/api/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes user specified 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersDeleteAsync (int? id)
        {
             await UsersDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes user specified 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersDelete");

            var localVarPath = "/api/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns a specific user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>UserInfoDTO</returns>
        public UserInfoDTO UsersGet (int? id)
        {
             ApiResponse<UserInfoDTO> localVarResponse = UsersGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a specific user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of UserInfoDTO</returns>
        public ApiResponse< UserInfoDTO > UsersGetWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersGet");

            var localVarPath = "/api/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoDTO)));
        }

        /// <summary>
        /// This call returns a specific user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of UserInfoDTO</returns>
        public async System.Threading.Tasks.Task<UserInfoDTO> UsersGetAsync (int? id)
        {
             ApiResponse<UserInfoDTO> localVarResponse = await UsersGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a specific user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse (UserInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoDTO>> UsersGetAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersGet");

            var localVarPath = "/api/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoDTO)));
        }

        /// <summary>
        /// This call gets user object for update 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>UserUpdateDTO</returns>
        public UserUpdateDTO UsersGetForUpdate (int? id)
        {
             ApiResponse<UserUpdateDTO> localVarResponse = UsersGetForUpdateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets user object for update 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>ApiResponse of UserUpdateDTO</returns>
        public ApiResponse< UserUpdateDTO > UsersGetForUpdateWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersGetForUpdate");

            var localVarPath = "/api/Users/ForUpdate/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetForUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserUpdateDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserUpdateDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserUpdateDTO)));
        }

        /// <summary>
        /// This call gets user object for update 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of UserUpdateDTO</returns>
        public async System.Threading.Tasks.Task<UserUpdateDTO> UsersGetForUpdateAsync (int? id)
        {
             ApiResponse<UserUpdateDTO> localVarResponse = await UsersGetForUpdateAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets user object for update 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <returns>Task of ApiResponse (UserUpdateDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserUpdateDTO>> UsersGetForUpdateAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersGetForUpdate");

            var localVarPath = "/api/Users/ForUpdate/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetForUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserUpdateDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserUpdateDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserUpdateDTO)));
        }

        /// <summary>
        /// This call returns all user groups defined in Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserGroupDTO&gt;</returns>
        public List<UserGroupDTO> UsersGetGroups ()
        {
             ApiResponse<List<UserGroupDTO>> localVarResponse = UsersGetGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all user groups defined in Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserGroupDTO&gt;</returns>
        public ApiResponse< List<UserGroupDTO> > UsersGetGroupsWithHttpInfo ()
        {

            var localVarPath = "/api/Users/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserGroupDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserGroupDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserGroupDTO>)));
        }

        /// <summary>
        /// This call returns all user groups defined in Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserGroupDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserGroupDTO>> UsersGetGroupsAsync ()
        {
             ApiResponse<List<UserGroupDTO>> localVarResponse = await UsersGetGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all user groups defined in Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserGroupDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserGroupDTO>>> UsersGetGroupsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Users/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserGroupDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserGroupDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserGroupDTO>)));
        }

        /// <summary>
        /// This call returns all user in a specific group 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        public List<UserCompleteDTO> UsersGetUserByGroup (int? groupId)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = UsersGetUserByGroupWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all user in a specific group 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        public ApiResponse< List<UserCompleteDTO> > UsersGetUserByGroupWithHttpInfo (int? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling UsersApi->UsersGetUserByGroup");

            var localVarPath = "/api/Users/ByGroupId/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserByGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns all user in a specific group 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompleteDTO>> UsersGetUserByGroupAsync (int? groupId)
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = await UsersGetUserByGroupAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all user in a specific group 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> UsersGetUserByGroupAsyncWithHttpInfo (int? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling UsersApi->UsersGetUserByGroup");

            var localVarPath = "/api/Users/ByGroupId/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserByGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns the informations of the connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserInfoDTO</returns>
        public UserInfoDTO UsersGetUserInfo ()
        {
             ApiResponse<UserInfoDTO> localVarResponse = UsersGetUserInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the informations of the connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserInfoDTO</returns>
        public ApiResponse< UserInfoDTO > UsersGetUserInfoWithHttpInfo ()
        {

            var localVarPath = "/api/Users/UserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoDTO)));
        }

        /// <summary>
        /// This call returns the informations of the connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserInfoDTO</returns>
        public async System.Threading.Tasks.Task<UserInfoDTO> UsersGetUserInfoAsync ()
        {
             ApiResponse<UserInfoDTO> localVarResponse = await UsersGetUserInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the informations of the connected user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoDTO>> UsersGetUserInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Users/UserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoDTO)));
        }

        /// <summary>
        /// This call returns all users defined in Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserCompleteDTO&gt;</returns>
        public List<UserCompleteDTO> UsersGet_0 ()
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = UsersGet_0WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all users defined in Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserCompleteDTO&gt;</returns>
        public ApiResponse< List<UserCompleteDTO> > UsersGet_0WithHttpInfo ()
        {

            var localVarPath = "/api/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call returns all users defined in Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserCompleteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserCompleteDTO>> UsersGet_0Async ()
        {
             ApiResponse<List<UserCompleteDTO>> localVarResponse = await UsersGet_0AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all users defined in Arxivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserCompleteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserCompleteDTO>>> UsersGet_0AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserCompleteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserCompleteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserCompleteDTO>)));
        }

        /// <summary>
        /// This call inserts a new user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User information to insert</param>
        /// <returns>UserCompleteDTO</returns>
        public UserCompleteDTO UsersInsert (UserInsertDTO body)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = UsersInsertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User information to insert</param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        public ApiResponse< UserCompleteDTO > UsersInsertWithHttpInfo (UserInsertDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersInsert");

            var localVarPath = "/api/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

        /// <summary>
        /// This call inserts a new user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User information to insert</param>
        /// <returns>Task of UserCompleteDTO</returns>
        public async System.Threading.Tasks.Task<UserCompleteDTO> UsersInsertAsync (UserInsertDTO body)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = await UsersInsertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User information to insert</param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersInsertAsyncWithHttpInfo (UserInsertDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersInsert");

            var localVarPath = "/api/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

        /// <summary>
        /// This call inserts a new user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUserUnlock"></param>
        /// <param name="tempArchive"></param>
        /// <param name="addressBookProfile"></param>
        /// <param name="distributionList"></param>
        /// <param name="mailIn"></param>
        /// <param name="mailOutStoreExt"></param>
        /// <param name="mailOutStoreIn"></param>
        /// <param name="mailDeleteProfile"></param>
        /// <param name="webCompliantCopy"></param>
        /// <param name="webSearch"></param>
        /// <param name="webQuickSearch"></param>
        /// <param name="webMailBox"></param>
        /// <param name="webFolders"></param>
        /// <param name="webSearchViews"></param>
        /// <param name="webBinders"></param>
        /// <param name="webCheckinAdmin"></param>
        /// <param name="mailOutMaxSize"></param>
        /// <param name="mailOutDefaultType"></param>
        /// <param name="mailOutType2"></param>
        /// <param name="mailOutType3"></param>
        /// <param name="securityStateList"></param>
        /// <param name="group"></param>
        /// <param name="description"></param>
        /// <param name="email"></param>
        /// <param name="businessUnit"></param>
        /// <param name="password"></param>
        /// <param name="defaultType"></param>
        /// <param name="type2"></param>
        /// <param name="type3"></param>
        /// <param name="internalFax"></param>
        /// <param name="lastMail"></param>
        /// <param name="category"></param>
        /// <param name="workflow"></param>
        /// <param name="defaultState"></param>
        /// <param name="addressBook"></param>
        /// <param name="userState"></param>
        /// <param name="mailServer"></param>
        /// <param name="webAccess"></param>
        /// <param name="upload"></param>
        /// <param name="folders"></param>
        /// <param name="flow"></param>
        /// <param name="sign"></param>
        /// <param name="viewer"></param>
        /// <param name="protocol"></param>
        /// <param name="models"></param>
        /// <param name="domain"></param>
        /// <param name="outState"></param>
        /// <param name="mailBody"></param>
        /// <param name="notify"></param>
        /// <param name="mailClient"></param>
        /// <param name="htmlBody"></param>
        /// <param name="respAos"></param>
        /// <param name="assAos"></param>
        /// <param name="codFis"></param>
        /// <param name="pin"></param>
        /// <param name="guest"></param>
        /// <param name="passwordChange"></param>
        /// <param name="marking"></param>
        /// <param name="type"></param>
        /// <param name="mailOutDefault"></param>
        /// <param name="barcodeAccess"></param>
        /// <param name="mustChangePassword"></param>
        /// <param name="lang"></param>
        /// <param name="ws"></param>
        /// <param name="disablePswExpired"></param>
        /// <param name="completeDescription"></param>
        /// <param name="canAddVirtualStamps"></param>
        /// <param name="canApplyStaps"></param>
        /// <param name="viewFlow"></param>
        /// <returns>UserCompleteDTO</returns>
        public UserCompleteDTO UsersInsert (bool? businessUnitUserUnlock, bool? tempArchive, bool? addressBookProfile, bool? distributionList, int? mailIn, int? mailOutStoreExt, int? mailOutStoreIn, bool? mailDeleteProfile, bool? webCompliantCopy, bool? webSearch, bool? webQuickSearch, bool? webMailBox, bool? webFolders, bool? webSearchViews, bool? webBinders, bool? webCheckinAdmin, int? mailOutMaxSize, int? mailOutDefaultType, int? mailOutType2, int? mailOutType3, List<UserSecurityStateDTO> securityStateList, int? group, string description, string email, string businessUnit, string password, int? defaultType, int? type2, int? type3, string internalFax, DateTime? lastMail, int? category, bool? workflow, string defaultState, bool? addressBook, int? userState, string mailServer, bool? webAccess, bool? upload, bool? folders, bool? flow, bool? sign, int? viewer, bool? protocol, bool? models, string domain, string outState, string mailBody, bool? notify, string mailClient, int? htmlBody, bool? respAos, bool? assAos, string codFis, string pin, bool? guest, bool? passwordChange, byte[] marking, int? type, bool? mailOutDefault, bool? barcodeAccess, int? mustChangePassword, string lang, bool? ws, bool? disablePswExpired, string completeDescription, int? canAddVirtualStamps, int? canApplyStaps, bool? viewFlow)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = UsersInsertWithHttpInfo(businessUnitUserUnlock, tempArchive, addressBookProfile, distributionList, mailIn, mailOutStoreExt, mailOutStoreIn, mailDeleteProfile, webCompliantCopy, webSearch, webQuickSearch, webMailBox, webFolders, webSearchViews, webBinders, webCheckinAdmin, mailOutMaxSize, mailOutDefaultType, mailOutType2, mailOutType3, securityStateList, group, description, email, businessUnit, password, defaultType, type2, type3, internalFax, lastMail, category, workflow, defaultState, addressBook, userState, mailServer, webAccess, upload, folders, flow, sign, viewer, protocol, models, domain, outState, mailBody, notify, mailClient, htmlBody, respAos, assAos, codFis, pin, guest, passwordChange, marking, type, mailOutDefault, barcodeAccess, mustChangePassword, lang, ws, disablePswExpired, completeDescription, canAddVirtualStamps, canApplyStaps, viewFlow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUserUnlock"></param>
        /// <param name="tempArchive"></param>
        /// <param name="addressBookProfile"></param>
        /// <param name="distributionList"></param>
        /// <param name="mailIn"></param>
        /// <param name="mailOutStoreExt"></param>
        /// <param name="mailOutStoreIn"></param>
        /// <param name="mailDeleteProfile"></param>
        /// <param name="webCompliantCopy"></param>
        /// <param name="webSearch"></param>
        /// <param name="webQuickSearch"></param>
        /// <param name="webMailBox"></param>
        /// <param name="webFolders"></param>
        /// <param name="webSearchViews"></param>
        /// <param name="webBinders"></param>
        /// <param name="webCheckinAdmin"></param>
        /// <param name="mailOutMaxSize"></param>
        /// <param name="mailOutDefaultType"></param>
        /// <param name="mailOutType2"></param>
        /// <param name="mailOutType3"></param>
        /// <param name="securityStateList"></param>
        /// <param name="group"></param>
        /// <param name="description"></param>
        /// <param name="email"></param>
        /// <param name="businessUnit"></param>
        /// <param name="password"></param>
        /// <param name="defaultType"></param>
        /// <param name="type2"></param>
        /// <param name="type3"></param>
        /// <param name="internalFax"></param>
        /// <param name="lastMail"></param>
        /// <param name="category"></param>
        /// <param name="workflow"></param>
        /// <param name="defaultState"></param>
        /// <param name="addressBook"></param>
        /// <param name="userState"></param>
        /// <param name="mailServer"></param>
        /// <param name="webAccess"></param>
        /// <param name="upload"></param>
        /// <param name="folders"></param>
        /// <param name="flow"></param>
        /// <param name="sign"></param>
        /// <param name="viewer"></param>
        /// <param name="protocol"></param>
        /// <param name="models"></param>
        /// <param name="domain"></param>
        /// <param name="outState"></param>
        /// <param name="mailBody"></param>
        /// <param name="notify"></param>
        /// <param name="mailClient"></param>
        /// <param name="htmlBody"></param>
        /// <param name="respAos"></param>
        /// <param name="assAos"></param>
        /// <param name="codFis"></param>
        /// <param name="pin"></param>
        /// <param name="guest"></param>
        /// <param name="passwordChange"></param>
        /// <param name="marking"></param>
        /// <param name="type"></param>
        /// <param name="mailOutDefault"></param>
        /// <param name="barcodeAccess"></param>
        /// <param name="mustChangePassword"></param>
        /// <param name="lang"></param>
        /// <param name="ws"></param>
        /// <param name="disablePswExpired"></param>
        /// <param name="completeDescription"></param>
        /// <param name="canAddVirtualStamps"></param>
        /// <param name="canApplyStaps"></param>
        /// <param name="viewFlow"></param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        public ApiResponse< UserCompleteDTO > UsersInsertWithHttpInfo (bool? businessUnitUserUnlock, bool? tempArchive, bool? addressBookProfile, bool? distributionList, int? mailIn, int? mailOutStoreExt, int? mailOutStoreIn, bool? mailDeleteProfile, bool? webCompliantCopy, bool? webSearch, bool? webQuickSearch, bool? webMailBox, bool? webFolders, bool? webSearchViews, bool? webBinders, bool? webCheckinAdmin, int? mailOutMaxSize, int? mailOutDefaultType, int? mailOutType2, int? mailOutType3, List<UserSecurityStateDTO> securityStateList, int? group, string description, string email, string businessUnit, string password, int? defaultType, int? type2, int? type3, string internalFax, DateTime? lastMail, int? category, bool? workflow, string defaultState, bool? addressBook, int? userState, string mailServer, bool? webAccess, bool? upload, bool? folders, bool? flow, bool? sign, int? viewer, bool? protocol, bool? models, string domain, string outState, string mailBody, bool? notify, string mailClient, int? htmlBody, bool? respAos, bool? assAos, string codFis, string pin, bool? guest, bool? passwordChange, byte[] marking, int? type, bool? mailOutDefault, bool? barcodeAccess, int? mustChangePassword, string lang, bool? ws, bool? disablePswExpired, string completeDescription, int? canAddVirtualStamps, int? canApplyStaps, bool? viewFlow)
        {
            // verify the required parameter 'businessUnitUserUnlock' is set
            if (businessUnitUserUnlock == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitUserUnlock' when calling UsersApi->UsersInsert");
            // verify the required parameter 'tempArchive' is set
            if (tempArchive == null)
                throw new ApiException(400, "Missing required parameter 'tempArchive' when calling UsersApi->UsersInsert");
            // verify the required parameter 'addressBookProfile' is set
            if (addressBookProfile == null)
                throw new ApiException(400, "Missing required parameter 'addressBookProfile' when calling UsersApi->UsersInsert");
            // verify the required parameter 'distributionList' is set
            if (distributionList == null)
                throw new ApiException(400, "Missing required parameter 'distributionList' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailIn' is set
            if (mailIn == null)
                throw new ApiException(400, "Missing required parameter 'mailIn' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutStoreExt' is set
            if (mailOutStoreExt == null)
                throw new ApiException(400, "Missing required parameter 'mailOutStoreExt' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutStoreIn' is set
            if (mailOutStoreIn == null)
                throw new ApiException(400, "Missing required parameter 'mailOutStoreIn' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailDeleteProfile' is set
            if (mailDeleteProfile == null)
                throw new ApiException(400, "Missing required parameter 'mailDeleteProfile' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webCompliantCopy' is set
            if (webCompliantCopy == null)
                throw new ApiException(400, "Missing required parameter 'webCompliantCopy' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webSearch' is set
            if (webSearch == null)
                throw new ApiException(400, "Missing required parameter 'webSearch' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webQuickSearch' is set
            if (webQuickSearch == null)
                throw new ApiException(400, "Missing required parameter 'webQuickSearch' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webMailBox' is set
            if (webMailBox == null)
                throw new ApiException(400, "Missing required parameter 'webMailBox' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webFolders' is set
            if (webFolders == null)
                throw new ApiException(400, "Missing required parameter 'webFolders' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webSearchViews' is set
            if (webSearchViews == null)
                throw new ApiException(400, "Missing required parameter 'webSearchViews' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webBinders' is set
            if (webBinders == null)
                throw new ApiException(400, "Missing required parameter 'webBinders' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webCheckinAdmin' is set
            if (webCheckinAdmin == null)
                throw new ApiException(400, "Missing required parameter 'webCheckinAdmin' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutMaxSize' is set
            if (mailOutMaxSize == null)
                throw new ApiException(400, "Missing required parameter 'mailOutMaxSize' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutDefaultType' is set
            if (mailOutDefaultType == null)
                throw new ApiException(400, "Missing required parameter 'mailOutDefaultType' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutType2' is set
            if (mailOutType2 == null)
                throw new ApiException(400, "Missing required parameter 'mailOutType2' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutType3' is set
            if (mailOutType3 == null)
                throw new ApiException(400, "Missing required parameter 'mailOutType3' when calling UsersApi->UsersInsert");
            // verify the required parameter 'securityStateList' is set
            if (securityStateList == null)
                throw new ApiException(400, "Missing required parameter 'securityStateList' when calling UsersApi->UsersInsert");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling UsersApi->UsersInsert");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling UsersApi->UsersInsert");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling UsersApi->UsersInsert");
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling UsersApi->UsersInsert");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling UsersApi->UsersInsert");
            // verify the required parameter 'defaultType' is set
            if (defaultType == null)
                throw new ApiException(400, "Missing required parameter 'defaultType' when calling UsersApi->UsersInsert");
            // verify the required parameter 'type2' is set
            if (type2 == null)
                throw new ApiException(400, "Missing required parameter 'type2' when calling UsersApi->UsersInsert");
            // verify the required parameter 'type3' is set
            if (type3 == null)
                throw new ApiException(400, "Missing required parameter 'type3' when calling UsersApi->UsersInsert");
            // verify the required parameter 'internalFax' is set
            if (internalFax == null)
                throw new ApiException(400, "Missing required parameter 'internalFax' when calling UsersApi->UsersInsert");
            // verify the required parameter 'lastMail' is set
            if (lastMail == null)
                throw new ApiException(400, "Missing required parameter 'lastMail' when calling UsersApi->UsersInsert");
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling UsersApi->UsersInsert");
            // verify the required parameter 'workflow' is set
            if (workflow == null)
                throw new ApiException(400, "Missing required parameter 'workflow' when calling UsersApi->UsersInsert");
            // verify the required parameter 'defaultState' is set
            if (defaultState == null)
                throw new ApiException(400, "Missing required parameter 'defaultState' when calling UsersApi->UsersInsert");
            // verify the required parameter 'addressBook' is set
            if (addressBook == null)
                throw new ApiException(400, "Missing required parameter 'addressBook' when calling UsersApi->UsersInsert");
            // verify the required parameter 'userState' is set
            if (userState == null)
                throw new ApiException(400, "Missing required parameter 'userState' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailServer' is set
            if (mailServer == null)
                throw new ApiException(400, "Missing required parameter 'mailServer' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webAccess' is set
            if (webAccess == null)
                throw new ApiException(400, "Missing required parameter 'webAccess' when calling UsersApi->UsersInsert");
            // verify the required parameter 'upload' is set
            if (upload == null)
                throw new ApiException(400, "Missing required parameter 'upload' when calling UsersApi->UsersInsert");
            // verify the required parameter 'folders' is set
            if (folders == null)
                throw new ApiException(400, "Missing required parameter 'folders' when calling UsersApi->UsersInsert");
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling UsersApi->UsersInsert");
            // verify the required parameter 'sign' is set
            if (sign == null)
                throw new ApiException(400, "Missing required parameter 'sign' when calling UsersApi->UsersInsert");
            // verify the required parameter 'viewer' is set
            if (viewer == null)
                throw new ApiException(400, "Missing required parameter 'viewer' when calling UsersApi->UsersInsert");
            // verify the required parameter 'protocol' is set
            if (protocol == null)
                throw new ApiException(400, "Missing required parameter 'protocol' when calling UsersApi->UsersInsert");
            // verify the required parameter 'models' is set
            if (models == null)
                throw new ApiException(400, "Missing required parameter 'models' when calling UsersApi->UsersInsert");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling UsersApi->UsersInsert");
            // verify the required parameter 'outState' is set
            if (outState == null)
                throw new ApiException(400, "Missing required parameter 'outState' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailBody' is set
            if (mailBody == null)
                throw new ApiException(400, "Missing required parameter 'mailBody' when calling UsersApi->UsersInsert");
            // verify the required parameter 'notify' is set
            if (notify == null)
                throw new ApiException(400, "Missing required parameter 'notify' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailClient' is set
            if (mailClient == null)
                throw new ApiException(400, "Missing required parameter 'mailClient' when calling UsersApi->UsersInsert");
            // verify the required parameter 'htmlBody' is set
            if (htmlBody == null)
                throw new ApiException(400, "Missing required parameter 'htmlBody' when calling UsersApi->UsersInsert");
            // verify the required parameter 'respAos' is set
            if (respAos == null)
                throw new ApiException(400, "Missing required parameter 'respAos' when calling UsersApi->UsersInsert");
            // verify the required parameter 'assAos' is set
            if (assAos == null)
                throw new ApiException(400, "Missing required parameter 'assAos' when calling UsersApi->UsersInsert");
            // verify the required parameter 'codFis' is set
            if (codFis == null)
                throw new ApiException(400, "Missing required parameter 'codFis' when calling UsersApi->UsersInsert");
            // verify the required parameter 'pin' is set
            if (pin == null)
                throw new ApiException(400, "Missing required parameter 'pin' when calling UsersApi->UsersInsert");
            // verify the required parameter 'guest' is set
            if (guest == null)
                throw new ApiException(400, "Missing required parameter 'guest' when calling UsersApi->UsersInsert");
            // verify the required parameter 'passwordChange' is set
            if (passwordChange == null)
                throw new ApiException(400, "Missing required parameter 'passwordChange' when calling UsersApi->UsersInsert");
            // verify the required parameter 'marking' is set
            if (marking == null)
                throw new ApiException(400, "Missing required parameter 'marking' when calling UsersApi->UsersInsert");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutDefault' is set
            if (mailOutDefault == null)
                throw new ApiException(400, "Missing required parameter 'mailOutDefault' when calling UsersApi->UsersInsert");
            // verify the required parameter 'barcodeAccess' is set
            if (barcodeAccess == null)
                throw new ApiException(400, "Missing required parameter 'barcodeAccess' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mustChangePassword' is set
            if (mustChangePassword == null)
                throw new ApiException(400, "Missing required parameter 'mustChangePassword' when calling UsersApi->UsersInsert");
            // verify the required parameter 'lang' is set
            if (lang == null)
                throw new ApiException(400, "Missing required parameter 'lang' when calling UsersApi->UsersInsert");
            // verify the required parameter 'ws' is set
            if (ws == null)
                throw new ApiException(400, "Missing required parameter 'ws' when calling UsersApi->UsersInsert");
            // verify the required parameter 'disablePswExpired' is set
            if (disablePswExpired == null)
                throw new ApiException(400, "Missing required parameter 'disablePswExpired' when calling UsersApi->UsersInsert");
            // verify the required parameter 'completeDescription' is set
            if (completeDescription == null)
                throw new ApiException(400, "Missing required parameter 'completeDescription' when calling UsersApi->UsersInsert");
            // verify the required parameter 'canAddVirtualStamps' is set
            if (canAddVirtualStamps == null)
                throw new ApiException(400, "Missing required parameter 'canAddVirtualStamps' when calling UsersApi->UsersInsert");
            // verify the required parameter 'canApplyStaps' is set
            if (canApplyStaps == null)
                throw new ApiException(400, "Missing required parameter 'canApplyStaps' when calling UsersApi->UsersInsert");
            // verify the required parameter 'viewFlow' is set
            if (viewFlow == null)
                throw new ApiException(400, "Missing required parameter 'viewFlow' when calling UsersApi->UsersInsert");

            var localVarPath = "/api/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitUserUnlock != null) localVarFormParams.Add("businessUnitUserUnlock", this.Configuration.ApiClient.ParameterToString(businessUnitUserUnlock)); // form parameter
            if (tempArchive != null) localVarFormParams.Add("tempArchive", this.Configuration.ApiClient.ParameterToString(tempArchive)); // form parameter
            if (addressBookProfile != null) localVarFormParams.Add("addressBookProfile", this.Configuration.ApiClient.ParameterToString(addressBookProfile)); // form parameter
            if (distributionList != null) localVarFormParams.Add("distributionList", this.Configuration.ApiClient.ParameterToString(distributionList)); // form parameter
            if (mailIn != null) localVarFormParams.Add("mailIn", this.Configuration.ApiClient.ParameterToString(mailIn)); // form parameter
            if (mailOutStoreExt != null) localVarFormParams.Add("mailOutStoreExt", this.Configuration.ApiClient.ParameterToString(mailOutStoreExt)); // form parameter
            if (mailOutStoreIn != null) localVarFormParams.Add("mailOutStoreIn", this.Configuration.ApiClient.ParameterToString(mailOutStoreIn)); // form parameter
            if (mailDeleteProfile != null) localVarFormParams.Add("mailDeleteProfile", this.Configuration.ApiClient.ParameterToString(mailDeleteProfile)); // form parameter
            if (webCompliantCopy != null) localVarFormParams.Add("webCompliantCopy", this.Configuration.ApiClient.ParameterToString(webCompliantCopy)); // form parameter
            if (webSearch != null) localVarFormParams.Add("webSearch", this.Configuration.ApiClient.ParameterToString(webSearch)); // form parameter
            if (webQuickSearch != null) localVarFormParams.Add("webQuickSearch", this.Configuration.ApiClient.ParameterToString(webQuickSearch)); // form parameter
            if (webMailBox != null) localVarFormParams.Add("webMailBox", this.Configuration.ApiClient.ParameterToString(webMailBox)); // form parameter
            if (webFolders != null) localVarFormParams.Add("webFolders", this.Configuration.ApiClient.ParameterToString(webFolders)); // form parameter
            if (webSearchViews != null) localVarFormParams.Add("webSearchViews", this.Configuration.ApiClient.ParameterToString(webSearchViews)); // form parameter
            if (webBinders != null) localVarFormParams.Add("webBinders", this.Configuration.ApiClient.ParameterToString(webBinders)); // form parameter
            if (webCheckinAdmin != null) localVarFormParams.Add("webCheckinAdmin", this.Configuration.ApiClient.ParameterToString(webCheckinAdmin)); // form parameter
            if (mailOutMaxSize != null) localVarFormParams.Add("mailOutMaxSize", this.Configuration.ApiClient.ParameterToString(mailOutMaxSize)); // form parameter
            if (mailOutDefaultType != null) localVarFormParams.Add("mailOutDefaultType", this.Configuration.ApiClient.ParameterToString(mailOutDefaultType)); // form parameter
            if (mailOutType2 != null) localVarFormParams.Add("mailOutType2", this.Configuration.ApiClient.ParameterToString(mailOutType2)); // form parameter
            if (mailOutType3 != null) localVarFormParams.Add("mailOutType3", this.Configuration.ApiClient.ParameterToString(mailOutType3)); // form parameter
            if (securityStateList != null) localVarFormParams.Add("securityStateList", this.Configuration.ApiClient.ParameterToString(securityStateList)); // form parameter
            if (group != null) localVarFormParams.Add("group", this.Configuration.ApiClient.ParameterToString(group)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (businessUnit != null) localVarFormParams.Add("businessUnit", this.Configuration.ApiClient.ParameterToString(businessUnit)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (defaultType != null) localVarFormParams.Add("defaultType", this.Configuration.ApiClient.ParameterToString(defaultType)); // form parameter
            if (type2 != null) localVarFormParams.Add("type2", this.Configuration.ApiClient.ParameterToString(type2)); // form parameter
            if (type3 != null) localVarFormParams.Add("type3", this.Configuration.ApiClient.ParameterToString(type3)); // form parameter
            if (internalFax != null) localVarFormParams.Add("internalFax", this.Configuration.ApiClient.ParameterToString(internalFax)); // form parameter
            if (lastMail != null) localVarFormParams.Add("lastMail", this.Configuration.ApiClient.ParameterToString(lastMail)); // form parameter
            if (category != null) localVarFormParams.Add("category", this.Configuration.ApiClient.ParameterToString(category)); // form parameter
            if (workflow != null) localVarFormParams.Add("workflow", this.Configuration.ApiClient.ParameterToString(workflow)); // form parameter
            if (defaultState != null) localVarFormParams.Add("defaultState", this.Configuration.ApiClient.ParameterToString(defaultState)); // form parameter
            if (addressBook != null) localVarFormParams.Add("addressBook", this.Configuration.ApiClient.ParameterToString(addressBook)); // form parameter
            if (userState != null) localVarFormParams.Add("userState", this.Configuration.ApiClient.ParameterToString(userState)); // form parameter
            if (mailServer != null) localVarFormParams.Add("mailServer", this.Configuration.ApiClient.ParameterToString(mailServer)); // form parameter
            if (webAccess != null) localVarFormParams.Add("webAccess", this.Configuration.ApiClient.ParameterToString(webAccess)); // form parameter
            if (upload != null) localVarFormParams.Add("upload", this.Configuration.ApiClient.ParameterToString(upload)); // form parameter
            if (folders != null) localVarFormParams.Add("folders", this.Configuration.ApiClient.ParameterToString(folders)); // form parameter
            if (flow != null) localVarFormParams.Add("flow", this.Configuration.ApiClient.ParameterToString(flow)); // form parameter
            if (sign != null) localVarFormParams.Add("sign", this.Configuration.ApiClient.ParameterToString(sign)); // form parameter
            if (viewer != null) localVarFormParams.Add("viewer", this.Configuration.ApiClient.ParameterToString(viewer)); // form parameter
            if (protocol != null) localVarFormParams.Add("protocol", this.Configuration.ApiClient.ParameterToString(protocol)); // form parameter
            if (models != null) localVarFormParams.Add("models", this.Configuration.ApiClient.ParameterToString(models)); // form parameter
            if (domain != null) localVarFormParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // form parameter
            if (outState != null) localVarFormParams.Add("outState", this.Configuration.ApiClient.ParameterToString(outState)); // form parameter
            if (mailBody != null) localVarFormParams.Add("mailBody", this.Configuration.ApiClient.ParameterToString(mailBody)); // form parameter
            if (notify != null) localVarFormParams.Add("notify", this.Configuration.ApiClient.ParameterToString(notify)); // form parameter
            if (mailClient != null) localVarFormParams.Add("mailClient", this.Configuration.ApiClient.ParameterToString(mailClient)); // form parameter
            if (htmlBody != null) localVarFormParams.Add("htmlBody", this.Configuration.ApiClient.ParameterToString(htmlBody)); // form parameter
            if (respAos != null) localVarFormParams.Add("respAos", this.Configuration.ApiClient.ParameterToString(respAos)); // form parameter
            if (assAos != null) localVarFormParams.Add("assAos", this.Configuration.ApiClient.ParameterToString(assAos)); // form parameter
            if (codFis != null) localVarFormParams.Add("codFis", this.Configuration.ApiClient.ParameterToString(codFis)); // form parameter
            if (pin != null) localVarFormParams.Add("pin", this.Configuration.ApiClient.ParameterToString(pin)); // form parameter
            if (guest != null) localVarFormParams.Add("guest", this.Configuration.ApiClient.ParameterToString(guest)); // form parameter
            if (passwordChange != null) localVarFormParams.Add("passwordChange", this.Configuration.ApiClient.ParameterToString(passwordChange)); // form parameter
            if (marking != null) localVarFormParams.Add("marking", this.Configuration.ApiClient.ParameterToString(marking)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (mailOutDefault != null) localVarFormParams.Add("mailOutDefault", this.Configuration.ApiClient.ParameterToString(mailOutDefault)); // form parameter
            if (barcodeAccess != null) localVarFormParams.Add("barcodeAccess", this.Configuration.ApiClient.ParameterToString(barcodeAccess)); // form parameter
            if (mustChangePassword != null) localVarFormParams.Add("mustChangePassword", this.Configuration.ApiClient.ParameterToString(mustChangePassword)); // form parameter
            if (lang != null) localVarFormParams.Add("lang", this.Configuration.ApiClient.ParameterToString(lang)); // form parameter
            if (ws != null) localVarFormParams.Add("ws", this.Configuration.ApiClient.ParameterToString(ws)); // form parameter
            if (disablePswExpired != null) localVarFormParams.Add("disablePswExpired", this.Configuration.ApiClient.ParameterToString(disablePswExpired)); // form parameter
            if (completeDescription != null) localVarFormParams.Add("completeDescription", this.Configuration.ApiClient.ParameterToString(completeDescription)); // form parameter
            if (canAddVirtualStamps != null) localVarFormParams.Add("canAddVirtualStamps", this.Configuration.ApiClient.ParameterToString(canAddVirtualStamps)); // form parameter
            if (canApplyStaps != null) localVarFormParams.Add("canApplyStaps", this.Configuration.ApiClient.ParameterToString(canApplyStaps)); // form parameter
            if (viewFlow != null) localVarFormParams.Add("viewFlow", this.Configuration.ApiClient.ParameterToString(viewFlow)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

        /// <summary>
        /// This call inserts a new user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUserUnlock"></param>
        /// <param name="tempArchive"></param>
        /// <param name="addressBookProfile"></param>
        /// <param name="distributionList"></param>
        /// <param name="mailIn"></param>
        /// <param name="mailOutStoreExt"></param>
        /// <param name="mailOutStoreIn"></param>
        /// <param name="mailDeleteProfile"></param>
        /// <param name="webCompliantCopy"></param>
        /// <param name="webSearch"></param>
        /// <param name="webQuickSearch"></param>
        /// <param name="webMailBox"></param>
        /// <param name="webFolders"></param>
        /// <param name="webSearchViews"></param>
        /// <param name="webBinders"></param>
        /// <param name="webCheckinAdmin"></param>
        /// <param name="mailOutMaxSize"></param>
        /// <param name="mailOutDefaultType"></param>
        /// <param name="mailOutType2"></param>
        /// <param name="mailOutType3"></param>
        /// <param name="securityStateList"></param>
        /// <param name="group"></param>
        /// <param name="description"></param>
        /// <param name="email"></param>
        /// <param name="businessUnit"></param>
        /// <param name="password"></param>
        /// <param name="defaultType"></param>
        /// <param name="type2"></param>
        /// <param name="type3"></param>
        /// <param name="internalFax"></param>
        /// <param name="lastMail"></param>
        /// <param name="category"></param>
        /// <param name="workflow"></param>
        /// <param name="defaultState"></param>
        /// <param name="addressBook"></param>
        /// <param name="userState"></param>
        /// <param name="mailServer"></param>
        /// <param name="webAccess"></param>
        /// <param name="upload"></param>
        /// <param name="folders"></param>
        /// <param name="flow"></param>
        /// <param name="sign"></param>
        /// <param name="viewer"></param>
        /// <param name="protocol"></param>
        /// <param name="models"></param>
        /// <param name="domain"></param>
        /// <param name="outState"></param>
        /// <param name="mailBody"></param>
        /// <param name="notify"></param>
        /// <param name="mailClient"></param>
        /// <param name="htmlBody"></param>
        /// <param name="respAos"></param>
        /// <param name="assAos"></param>
        /// <param name="codFis"></param>
        /// <param name="pin"></param>
        /// <param name="guest"></param>
        /// <param name="passwordChange"></param>
        /// <param name="marking"></param>
        /// <param name="type"></param>
        /// <param name="mailOutDefault"></param>
        /// <param name="barcodeAccess"></param>
        /// <param name="mustChangePassword"></param>
        /// <param name="lang"></param>
        /// <param name="ws"></param>
        /// <param name="disablePswExpired"></param>
        /// <param name="completeDescription"></param>
        /// <param name="canAddVirtualStamps"></param>
        /// <param name="canApplyStaps"></param>
        /// <param name="viewFlow"></param>
        /// <returns>Task of UserCompleteDTO</returns>
        public async System.Threading.Tasks.Task<UserCompleteDTO> UsersInsertAsync (bool? businessUnitUserUnlock, bool? tempArchive, bool? addressBookProfile, bool? distributionList, int? mailIn, int? mailOutStoreExt, int? mailOutStoreIn, bool? mailDeleteProfile, bool? webCompliantCopy, bool? webSearch, bool? webQuickSearch, bool? webMailBox, bool? webFolders, bool? webSearchViews, bool? webBinders, bool? webCheckinAdmin, int? mailOutMaxSize, int? mailOutDefaultType, int? mailOutType2, int? mailOutType3, List<UserSecurityStateDTO> securityStateList, int? group, string description, string email, string businessUnit, string password, int? defaultType, int? type2, int? type3, string internalFax, DateTime? lastMail, int? category, bool? workflow, string defaultState, bool? addressBook, int? userState, string mailServer, bool? webAccess, bool? upload, bool? folders, bool? flow, bool? sign, int? viewer, bool? protocol, bool? models, string domain, string outState, string mailBody, bool? notify, string mailClient, int? htmlBody, bool? respAos, bool? assAos, string codFis, string pin, bool? guest, bool? passwordChange, byte[] marking, int? type, bool? mailOutDefault, bool? barcodeAccess, int? mustChangePassword, string lang, bool? ws, bool? disablePswExpired, string completeDescription, int? canAddVirtualStamps, int? canApplyStaps, bool? viewFlow)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = await UsersInsertAsyncWithHttpInfo(businessUnitUserUnlock, tempArchive, addressBookProfile, distributionList, mailIn, mailOutStoreExt, mailOutStoreIn, mailDeleteProfile, webCompliantCopy, webSearch, webQuickSearch, webMailBox, webFolders, webSearchViews, webBinders, webCheckinAdmin, mailOutMaxSize, mailOutDefaultType, mailOutType2, mailOutType3, securityStateList, group, description, email, businessUnit, password, defaultType, type2, type3, internalFax, lastMail, category, workflow, defaultState, addressBook, userState, mailServer, webAccess, upload, folders, flow, sign, viewer, protocol, models, domain, outState, mailBody, notify, mailClient, htmlBody, respAos, assAos, codFis, pin, guest, passwordChange, marking, type, mailOutDefault, barcodeAccess, mustChangePassword, lang, ws, disablePswExpired, completeDescription, canAddVirtualStamps, canApplyStaps, viewFlow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitUserUnlock"></param>
        /// <param name="tempArchive"></param>
        /// <param name="addressBookProfile"></param>
        /// <param name="distributionList"></param>
        /// <param name="mailIn"></param>
        /// <param name="mailOutStoreExt"></param>
        /// <param name="mailOutStoreIn"></param>
        /// <param name="mailDeleteProfile"></param>
        /// <param name="webCompliantCopy"></param>
        /// <param name="webSearch"></param>
        /// <param name="webQuickSearch"></param>
        /// <param name="webMailBox"></param>
        /// <param name="webFolders"></param>
        /// <param name="webSearchViews"></param>
        /// <param name="webBinders"></param>
        /// <param name="webCheckinAdmin"></param>
        /// <param name="mailOutMaxSize"></param>
        /// <param name="mailOutDefaultType"></param>
        /// <param name="mailOutType2"></param>
        /// <param name="mailOutType3"></param>
        /// <param name="securityStateList"></param>
        /// <param name="group"></param>
        /// <param name="description"></param>
        /// <param name="email"></param>
        /// <param name="businessUnit"></param>
        /// <param name="password"></param>
        /// <param name="defaultType"></param>
        /// <param name="type2"></param>
        /// <param name="type3"></param>
        /// <param name="internalFax"></param>
        /// <param name="lastMail"></param>
        /// <param name="category"></param>
        /// <param name="workflow"></param>
        /// <param name="defaultState"></param>
        /// <param name="addressBook"></param>
        /// <param name="userState"></param>
        /// <param name="mailServer"></param>
        /// <param name="webAccess"></param>
        /// <param name="upload"></param>
        /// <param name="folders"></param>
        /// <param name="flow"></param>
        /// <param name="sign"></param>
        /// <param name="viewer"></param>
        /// <param name="protocol"></param>
        /// <param name="models"></param>
        /// <param name="domain"></param>
        /// <param name="outState"></param>
        /// <param name="mailBody"></param>
        /// <param name="notify"></param>
        /// <param name="mailClient"></param>
        /// <param name="htmlBody"></param>
        /// <param name="respAos"></param>
        /// <param name="assAos"></param>
        /// <param name="codFis"></param>
        /// <param name="pin"></param>
        /// <param name="guest"></param>
        /// <param name="passwordChange"></param>
        /// <param name="marking"></param>
        /// <param name="type"></param>
        /// <param name="mailOutDefault"></param>
        /// <param name="barcodeAccess"></param>
        /// <param name="mustChangePassword"></param>
        /// <param name="lang"></param>
        /// <param name="ws"></param>
        /// <param name="disablePswExpired"></param>
        /// <param name="completeDescription"></param>
        /// <param name="canAddVirtualStamps"></param>
        /// <param name="canApplyStaps"></param>
        /// <param name="viewFlow"></param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersInsertAsyncWithHttpInfo (bool? businessUnitUserUnlock, bool? tempArchive, bool? addressBookProfile, bool? distributionList, int? mailIn, int? mailOutStoreExt, int? mailOutStoreIn, bool? mailDeleteProfile, bool? webCompliantCopy, bool? webSearch, bool? webQuickSearch, bool? webMailBox, bool? webFolders, bool? webSearchViews, bool? webBinders, bool? webCheckinAdmin, int? mailOutMaxSize, int? mailOutDefaultType, int? mailOutType2, int? mailOutType3, List<UserSecurityStateDTO> securityStateList, int? group, string description, string email, string businessUnit, string password, int? defaultType, int? type2, int? type3, string internalFax, DateTime? lastMail, int? category, bool? workflow, string defaultState, bool? addressBook, int? userState, string mailServer, bool? webAccess, bool? upload, bool? folders, bool? flow, bool? sign, int? viewer, bool? protocol, bool? models, string domain, string outState, string mailBody, bool? notify, string mailClient, int? htmlBody, bool? respAos, bool? assAos, string codFis, string pin, bool? guest, bool? passwordChange, byte[] marking, int? type, bool? mailOutDefault, bool? barcodeAccess, int? mustChangePassword, string lang, bool? ws, bool? disablePswExpired, string completeDescription, int? canAddVirtualStamps, int? canApplyStaps, bool? viewFlow)
        {
            // verify the required parameter 'businessUnitUserUnlock' is set
            if (businessUnitUserUnlock == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitUserUnlock' when calling UsersApi->UsersInsert");
            // verify the required parameter 'tempArchive' is set
            if (tempArchive == null)
                throw new ApiException(400, "Missing required parameter 'tempArchive' when calling UsersApi->UsersInsert");
            // verify the required parameter 'addressBookProfile' is set
            if (addressBookProfile == null)
                throw new ApiException(400, "Missing required parameter 'addressBookProfile' when calling UsersApi->UsersInsert");
            // verify the required parameter 'distributionList' is set
            if (distributionList == null)
                throw new ApiException(400, "Missing required parameter 'distributionList' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailIn' is set
            if (mailIn == null)
                throw new ApiException(400, "Missing required parameter 'mailIn' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutStoreExt' is set
            if (mailOutStoreExt == null)
                throw new ApiException(400, "Missing required parameter 'mailOutStoreExt' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutStoreIn' is set
            if (mailOutStoreIn == null)
                throw new ApiException(400, "Missing required parameter 'mailOutStoreIn' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailDeleteProfile' is set
            if (mailDeleteProfile == null)
                throw new ApiException(400, "Missing required parameter 'mailDeleteProfile' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webCompliantCopy' is set
            if (webCompliantCopy == null)
                throw new ApiException(400, "Missing required parameter 'webCompliantCopy' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webSearch' is set
            if (webSearch == null)
                throw new ApiException(400, "Missing required parameter 'webSearch' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webQuickSearch' is set
            if (webQuickSearch == null)
                throw new ApiException(400, "Missing required parameter 'webQuickSearch' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webMailBox' is set
            if (webMailBox == null)
                throw new ApiException(400, "Missing required parameter 'webMailBox' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webFolders' is set
            if (webFolders == null)
                throw new ApiException(400, "Missing required parameter 'webFolders' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webSearchViews' is set
            if (webSearchViews == null)
                throw new ApiException(400, "Missing required parameter 'webSearchViews' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webBinders' is set
            if (webBinders == null)
                throw new ApiException(400, "Missing required parameter 'webBinders' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webCheckinAdmin' is set
            if (webCheckinAdmin == null)
                throw new ApiException(400, "Missing required parameter 'webCheckinAdmin' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutMaxSize' is set
            if (mailOutMaxSize == null)
                throw new ApiException(400, "Missing required parameter 'mailOutMaxSize' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutDefaultType' is set
            if (mailOutDefaultType == null)
                throw new ApiException(400, "Missing required parameter 'mailOutDefaultType' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutType2' is set
            if (mailOutType2 == null)
                throw new ApiException(400, "Missing required parameter 'mailOutType2' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutType3' is set
            if (mailOutType3 == null)
                throw new ApiException(400, "Missing required parameter 'mailOutType3' when calling UsersApi->UsersInsert");
            // verify the required parameter 'securityStateList' is set
            if (securityStateList == null)
                throw new ApiException(400, "Missing required parameter 'securityStateList' when calling UsersApi->UsersInsert");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling UsersApi->UsersInsert");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling UsersApi->UsersInsert");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling UsersApi->UsersInsert");
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling UsersApi->UsersInsert");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling UsersApi->UsersInsert");
            // verify the required parameter 'defaultType' is set
            if (defaultType == null)
                throw new ApiException(400, "Missing required parameter 'defaultType' when calling UsersApi->UsersInsert");
            // verify the required parameter 'type2' is set
            if (type2 == null)
                throw new ApiException(400, "Missing required parameter 'type2' when calling UsersApi->UsersInsert");
            // verify the required parameter 'type3' is set
            if (type3 == null)
                throw new ApiException(400, "Missing required parameter 'type3' when calling UsersApi->UsersInsert");
            // verify the required parameter 'internalFax' is set
            if (internalFax == null)
                throw new ApiException(400, "Missing required parameter 'internalFax' when calling UsersApi->UsersInsert");
            // verify the required parameter 'lastMail' is set
            if (lastMail == null)
                throw new ApiException(400, "Missing required parameter 'lastMail' when calling UsersApi->UsersInsert");
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling UsersApi->UsersInsert");
            // verify the required parameter 'workflow' is set
            if (workflow == null)
                throw new ApiException(400, "Missing required parameter 'workflow' when calling UsersApi->UsersInsert");
            // verify the required parameter 'defaultState' is set
            if (defaultState == null)
                throw new ApiException(400, "Missing required parameter 'defaultState' when calling UsersApi->UsersInsert");
            // verify the required parameter 'addressBook' is set
            if (addressBook == null)
                throw new ApiException(400, "Missing required parameter 'addressBook' when calling UsersApi->UsersInsert");
            // verify the required parameter 'userState' is set
            if (userState == null)
                throw new ApiException(400, "Missing required parameter 'userState' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailServer' is set
            if (mailServer == null)
                throw new ApiException(400, "Missing required parameter 'mailServer' when calling UsersApi->UsersInsert");
            // verify the required parameter 'webAccess' is set
            if (webAccess == null)
                throw new ApiException(400, "Missing required parameter 'webAccess' when calling UsersApi->UsersInsert");
            // verify the required parameter 'upload' is set
            if (upload == null)
                throw new ApiException(400, "Missing required parameter 'upload' when calling UsersApi->UsersInsert");
            // verify the required parameter 'folders' is set
            if (folders == null)
                throw new ApiException(400, "Missing required parameter 'folders' when calling UsersApi->UsersInsert");
            // verify the required parameter 'flow' is set
            if (flow == null)
                throw new ApiException(400, "Missing required parameter 'flow' when calling UsersApi->UsersInsert");
            // verify the required parameter 'sign' is set
            if (sign == null)
                throw new ApiException(400, "Missing required parameter 'sign' when calling UsersApi->UsersInsert");
            // verify the required parameter 'viewer' is set
            if (viewer == null)
                throw new ApiException(400, "Missing required parameter 'viewer' when calling UsersApi->UsersInsert");
            // verify the required parameter 'protocol' is set
            if (protocol == null)
                throw new ApiException(400, "Missing required parameter 'protocol' when calling UsersApi->UsersInsert");
            // verify the required parameter 'models' is set
            if (models == null)
                throw new ApiException(400, "Missing required parameter 'models' when calling UsersApi->UsersInsert");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling UsersApi->UsersInsert");
            // verify the required parameter 'outState' is set
            if (outState == null)
                throw new ApiException(400, "Missing required parameter 'outState' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailBody' is set
            if (mailBody == null)
                throw new ApiException(400, "Missing required parameter 'mailBody' when calling UsersApi->UsersInsert");
            // verify the required parameter 'notify' is set
            if (notify == null)
                throw new ApiException(400, "Missing required parameter 'notify' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailClient' is set
            if (mailClient == null)
                throw new ApiException(400, "Missing required parameter 'mailClient' when calling UsersApi->UsersInsert");
            // verify the required parameter 'htmlBody' is set
            if (htmlBody == null)
                throw new ApiException(400, "Missing required parameter 'htmlBody' when calling UsersApi->UsersInsert");
            // verify the required parameter 'respAos' is set
            if (respAos == null)
                throw new ApiException(400, "Missing required parameter 'respAos' when calling UsersApi->UsersInsert");
            // verify the required parameter 'assAos' is set
            if (assAos == null)
                throw new ApiException(400, "Missing required parameter 'assAos' when calling UsersApi->UsersInsert");
            // verify the required parameter 'codFis' is set
            if (codFis == null)
                throw new ApiException(400, "Missing required parameter 'codFis' when calling UsersApi->UsersInsert");
            // verify the required parameter 'pin' is set
            if (pin == null)
                throw new ApiException(400, "Missing required parameter 'pin' when calling UsersApi->UsersInsert");
            // verify the required parameter 'guest' is set
            if (guest == null)
                throw new ApiException(400, "Missing required parameter 'guest' when calling UsersApi->UsersInsert");
            // verify the required parameter 'passwordChange' is set
            if (passwordChange == null)
                throw new ApiException(400, "Missing required parameter 'passwordChange' when calling UsersApi->UsersInsert");
            // verify the required parameter 'marking' is set
            if (marking == null)
                throw new ApiException(400, "Missing required parameter 'marking' when calling UsersApi->UsersInsert");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mailOutDefault' is set
            if (mailOutDefault == null)
                throw new ApiException(400, "Missing required parameter 'mailOutDefault' when calling UsersApi->UsersInsert");
            // verify the required parameter 'barcodeAccess' is set
            if (barcodeAccess == null)
                throw new ApiException(400, "Missing required parameter 'barcodeAccess' when calling UsersApi->UsersInsert");
            // verify the required parameter 'mustChangePassword' is set
            if (mustChangePassword == null)
                throw new ApiException(400, "Missing required parameter 'mustChangePassword' when calling UsersApi->UsersInsert");
            // verify the required parameter 'lang' is set
            if (lang == null)
                throw new ApiException(400, "Missing required parameter 'lang' when calling UsersApi->UsersInsert");
            // verify the required parameter 'ws' is set
            if (ws == null)
                throw new ApiException(400, "Missing required parameter 'ws' when calling UsersApi->UsersInsert");
            // verify the required parameter 'disablePswExpired' is set
            if (disablePswExpired == null)
                throw new ApiException(400, "Missing required parameter 'disablePswExpired' when calling UsersApi->UsersInsert");
            // verify the required parameter 'completeDescription' is set
            if (completeDescription == null)
                throw new ApiException(400, "Missing required parameter 'completeDescription' when calling UsersApi->UsersInsert");
            // verify the required parameter 'canAddVirtualStamps' is set
            if (canAddVirtualStamps == null)
                throw new ApiException(400, "Missing required parameter 'canAddVirtualStamps' when calling UsersApi->UsersInsert");
            // verify the required parameter 'canApplyStaps' is set
            if (canApplyStaps == null)
                throw new ApiException(400, "Missing required parameter 'canApplyStaps' when calling UsersApi->UsersInsert");
            // verify the required parameter 'viewFlow' is set
            if (viewFlow == null)
                throw new ApiException(400, "Missing required parameter 'viewFlow' when calling UsersApi->UsersInsert");

            var localVarPath = "/api/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitUserUnlock != null) localVarFormParams.Add("businessUnitUserUnlock", this.Configuration.ApiClient.ParameterToString(businessUnitUserUnlock)); // form parameter
            if (tempArchive != null) localVarFormParams.Add("tempArchive", this.Configuration.ApiClient.ParameterToString(tempArchive)); // form parameter
            if (addressBookProfile != null) localVarFormParams.Add("addressBookProfile", this.Configuration.ApiClient.ParameterToString(addressBookProfile)); // form parameter
            if (distributionList != null) localVarFormParams.Add("distributionList", this.Configuration.ApiClient.ParameterToString(distributionList)); // form parameter
            if (mailIn != null) localVarFormParams.Add("mailIn", this.Configuration.ApiClient.ParameterToString(mailIn)); // form parameter
            if (mailOutStoreExt != null) localVarFormParams.Add("mailOutStoreExt", this.Configuration.ApiClient.ParameterToString(mailOutStoreExt)); // form parameter
            if (mailOutStoreIn != null) localVarFormParams.Add("mailOutStoreIn", this.Configuration.ApiClient.ParameterToString(mailOutStoreIn)); // form parameter
            if (mailDeleteProfile != null) localVarFormParams.Add("mailDeleteProfile", this.Configuration.ApiClient.ParameterToString(mailDeleteProfile)); // form parameter
            if (webCompliantCopy != null) localVarFormParams.Add("webCompliantCopy", this.Configuration.ApiClient.ParameterToString(webCompliantCopy)); // form parameter
            if (webSearch != null) localVarFormParams.Add("webSearch", this.Configuration.ApiClient.ParameterToString(webSearch)); // form parameter
            if (webQuickSearch != null) localVarFormParams.Add("webQuickSearch", this.Configuration.ApiClient.ParameterToString(webQuickSearch)); // form parameter
            if (webMailBox != null) localVarFormParams.Add("webMailBox", this.Configuration.ApiClient.ParameterToString(webMailBox)); // form parameter
            if (webFolders != null) localVarFormParams.Add("webFolders", this.Configuration.ApiClient.ParameterToString(webFolders)); // form parameter
            if (webSearchViews != null) localVarFormParams.Add("webSearchViews", this.Configuration.ApiClient.ParameterToString(webSearchViews)); // form parameter
            if (webBinders != null) localVarFormParams.Add("webBinders", this.Configuration.ApiClient.ParameterToString(webBinders)); // form parameter
            if (webCheckinAdmin != null) localVarFormParams.Add("webCheckinAdmin", this.Configuration.ApiClient.ParameterToString(webCheckinAdmin)); // form parameter
            if (mailOutMaxSize != null) localVarFormParams.Add("mailOutMaxSize", this.Configuration.ApiClient.ParameterToString(mailOutMaxSize)); // form parameter
            if (mailOutDefaultType != null) localVarFormParams.Add("mailOutDefaultType", this.Configuration.ApiClient.ParameterToString(mailOutDefaultType)); // form parameter
            if (mailOutType2 != null) localVarFormParams.Add("mailOutType2", this.Configuration.ApiClient.ParameterToString(mailOutType2)); // form parameter
            if (mailOutType3 != null) localVarFormParams.Add("mailOutType3", this.Configuration.ApiClient.ParameterToString(mailOutType3)); // form parameter
            if (securityStateList != null) localVarFormParams.Add("securityStateList", this.Configuration.ApiClient.ParameterToString(securityStateList)); // form parameter
            if (group != null) localVarFormParams.Add("group", this.Configuration.ApiClient.ParameterToString(group)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (businessUnit != null) localVarFormParams.Add("businessUnit", this.Configuration.ApiClient.ParameterToString(businessUnit)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (defaultType != null) localVarFormParams.Add("defaultType", this.Configuration.ApiClient.ParameterToString(defaultType)); // form parameter
            if (type2 != null) localVarFormParams.Add("type2", this.Configuration.ApiClient.ParameterToString(type2)); // form parameter
            if (type3 != null) localVarFormParams.Add("type3", this.Configuration.ApiClient.ParameterToString(type3)); // form parameter
            if (internalFax != null) localVarFormParams.Add("internalFax", this.Configuration.ApiClient.ParameterToString(internalFax)); // form parameter
            if (lastMail != null) localVarFormParams.Add("lastMail", this.Configuration.ApiClient.ParameterToString(lastMail)); // form parameter
            if (category != null) localVarFormParams.Add("category", this.Configuration.ApiClient.ParameterToString(category)); // form parameter
            if (workflow != null) localVarFormParams.Add("workflow", this.Configuration.ApiClient.ParameterToString(workflow)); // form parameter
            if (defaultState != null) localVarFormParams.Add("defaultState", this.Configuration.ApiClient.ParameterToString(defaultState)); // form parameter
            if (addressBook != null) localVarFormParams.Add("addressBook", this.Configuration.ApiClient.ParameterToString(addressBook)); // form parameter
            if (userState != null) localVarFormParams.Add("userState", this.Configuration.ApiClient.ParameterToString(userState)); // form parameter
            if (mailServer != null) localVarFormParams.Add("mailServer", this.Configuration.ApiClient.ParameterToString(mailServer)); // form parameter
            if (webAccess != null) localVarFormParams.Add("webAccess", this.Configuration.ApiClient.ParameterToString(webAccess)); // form parameter
            if (upload != null) localVarFormParams.Add("upload", this.Configuration.ApiClient.ParameterToString(upload)); // form parameter
            if (folders != null) localVarFormParams.Add("folders", this.Configuration.ApiClient.ParameterToString(folders)); // form parameter
            if (flow != null) localVarFormParams.Add("flow", this.Configuration.ApiClient.ParameterToString(flow)); // form parameter
            if (sign != null) localVarFormParams.Add("sign", this.Configuration.ApiClient.ParameterToString(sign)); // form parameter
            if (viewer != null) localVarFormParams.Add("viewer", this.Configuration.ApiClient.ParameterToString(viewer)); // form parameter
            if (protocol != null) localVarFormParams.Add("protocol", this.Configuration.ApiClient.ParameterToString(protocol)); // form parameter
            if (models != null) localVarFormParams.Add("models", this.Configuration.ApiClient.ParameterToString(models)); // form parameter
            if (domain != null) localVarFormParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // form parameter
            if (outState != null) localVarFormParams.Add("outState", this.Configuration.ApiClient.ParameterToString(outState)); // form parameter
            if (mailBody != null) localVarFormParams.Add("mailBody", this.Configuration.ApiClient.ParameterToString(mailBody)); // form parameter
            if (notify != null) localVarFormParams.Add("notify", this.Configuration.ApiClient.ParameterToString(notify)); // form parameter
            if (mailClient != null) localVarFormParams.Add("mailClient", this.Configuration.ApiClient.ParameterToString(mailClient)); // form parameter
            if (htmlBody != null) localVarFormParams.Add("htmlBody", this.Configuration.ApiClient.ParameterToString(htmlBody)); // form parameter
            if (respAos != null) localVarFormParams.Add("respAos", this.Configuration.ApiClient.ParameterToString(respAos)); // form parameter
            if (assAos != null) localVarFormParams.Add("assAos", this.Configuration.ApiClient.ParameterToString(assAos)); // form parameter
            if (codFis != null) localVarFormParams.Add("codFis", this.Configuration.ApiClient.ParameterToString(codFis)); // form parameter
            if (pin != null) localVarFormParams.Add("pin", this.Configuration.ApiClient.ParameterToString(pin)); // form parameter
            if (guest != null) localVarFormParams.Add("guest", this.Configuration.ApiClient.ParameterToString(guest)); // form parameter
            if (passwordChange != null) localVarFormParams.Add("passwordChange", this.Configuration.ApiClient.ParameterToString(passwordChange)); // form parameter
            if (marking != null) localVarFormParams.Add("marking", this.Configuration.ApiClient.ParameterToString(marking)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (mailOutDefault != null) localVarFormParams.Add("mailOutDefault", this.Configuration.ApiClient.ParameterToString(mailOutDefault)); // form parameter
            if (barcodeAccess != null) localVarFormParams.Add("barcodeAccess", this.Configuration.ApiClient.ParameterToString(barcodeAccess)); // form parameter
            if (mustChangePassword != null) localVarFormParams.Add("mustChangePassword", this.Configuration.ApiClient.ParameterToString(mustChangePassword)); // form parameter
            if (lang != null) localVarFormParams.Add("lang", this.Configuration.ApiClient.ParameterToString(lang)); // form parameter
            if (ws != null) localVarFormParams.Add("ws", this.Configuration.ApiClient.ParameterToString(ws)); // form parameter
            if (disablePswExpired != null) localVarFormParams.Add("disablePswExpired", this.Configuration.ApiClient.ParameterToString(disablePswExpired)); // form parameter
            if (completeDescription != null) localVarFormParams.Add("completeDescription", this.Configuration.ApiClient.ParameterToString(completeDescription)); // form parameter
            if (canAddVirtualStamps != null) localVarFormParams.Add("canAddVirtualStamps", this.Configuration.ApiClient.ParameterToString(canAddVirtualStamps)); // form parameter
            if (canApplyStaps != null) localVarFormParams.Add("canApplyStaps", this.Configuration.ApiClient.ParameterToString(canApplyStaps)); // form parameter
            if (viewFlow != null) localVarFormParams.Add("viewFlow", this.Configuration.ApiClient.ParameterToString(viewFlow)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

        /// <summary>
        /// This call updates the user languages 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">Language code to set</param>
        /// <returns></returns>
        public void UsersSetLang (string lang)
        {
             UsersSetLangWithHttpInfo(lang);
        }

        /// <summary>
        /// This call updates the user languages 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">Language code to set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersSetLangWithHttpInfo (string lang)
        {
            // verify the required parameter 'lang' is set
            if (lang == null)
                throw new ApiException(400, "Missing required parameter 'lang' when calling UsersApi->UsersSetLang");

            var localVarPath = "/api/Users/lang/{lang}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarPathParams.Add("lang", this.Configuration.ApiClient.ParameterToString(lang)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersSetLang", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates the user languages 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">Language code to set</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersSetLangAsync (string lang)
        {
             await UsersSetLangAsyncWithHttpInfo(lang);

        }

        /// <summary>
        /// This call updates the user languages 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">Language code to set</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersSetLangAsyncWithHttpInfo (string lang)
        {
            // verify the required parameter 'lang' is set
            if (lang == null)
                throw new ApiException(400, "Missing required parameter 'lang' when calling UsersApi->UsersSetLang");

            var localVarPath = "/api/Users/lang/{lang}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarPathParams.Add("lang", this.Configuration.ApiClient.ParameterToString(lang)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersSetLang", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates a given user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserCompleteDTO</returns>
        public UserCompleteDTO UsersUpdate (int? id, UserUpdateDTO body = null)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = UsersUpdateWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a given user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserCompleteDTO</returns>
        public ApiResponse< UserCompleteDTO > UsersUpdateWithHttpInfo (int? id, UserUpdateDTO body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersUpdate");

            var localVarPath = "/api/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

        /// <summary>
        /// This call updates a given user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserCompleteDTO</returns>
        public async System.Threading.Tasks.Task<UserCompleteDTO> UsersUpdateAsync (int? id, UserUpdateDTO body = null)
        {
             ApiResponse<UserCompleteDTO> localVarResponse = await UsersUpdateAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a given user 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserCompleteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCompleteDTO>> UsersUpdateAsyncWithHttpInfo (int? id, UserUpdateDTO body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersUpdate");

            var localVarPath = "/api/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCompleteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserCompleteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCompleteDTO)));
        }

    }
}
