/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAttachmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call adds a revision for the attachment by a existent revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns></returns>
        void AttachmentsAttachmentRevisionByRevision (int? attachmentId, int? revisionId);

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsAttachmentRevisionByRevisionWithHttpInfo (int? attachmentId, int? revisionId);
        /// <summary>
        /// This call converts an attachment file to the profile file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns></returns>
        void AttachmentsConvertoToPrincipalDocument (int? attachmentId);

        /// <summary>
        /// This call converts an attachment file to the profile file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsConvertoToPrincipalDocumentWithHttpInfo (int? attachmentId);
        /// <summary>
        /// This call deletes an attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        void AttachmentsDelete (int? id);

        /// <summary>
        /// This call deletes an attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsDeleteWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes revision by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns></returns>
        void AttachmentsDeleteRevision (int? revisionId);

        /// <summary>
        /// This call deletes revision by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsDeleteRevisionWithHttpInfo (int? revisionId);
        /// <summary>
        /// This call returns the attachment by profile and footprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Search options</param>
        /// <returns>AttachmentDTO</returns>
        AttachmentDTO AttachmentsGetByDocNumberAndFootprint (AttachmentByDocnumberFootprintRequestDTO body);

        /// <summary>
        /// This call returns the attachment by profile and footprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Search options</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        ApiResponse<AttachmentDTO> AttachmentsGetByDocNumberAndFootprintWithHttpInfo (AttachmentByDocnumberFootprintRequestDTO body);
        /// <summary>
        /// This call returns the attachment by profile and footprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="footprint"></param>
        /// <returns>AttachmentDTO</returns>
        AttachmentDTO AttachmentsGetByDocNumberAndFootprint (int? docnumber, string footprint);

        /// <summary>
        /// This call returns the attachment by profile and footprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="footprint"></param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        ApiResponse<AttachmentDTO> AttachmentsGetByDocNumberAndFootprintWithHttpInfo (int? docnumber, string footprint);
        /// <summary>
        /// This call retrieves all the attachments of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>List&lt;AttachmentDTO&gt;</returns>
        List<AttachmentDTO> AttachmentsGetByDocnumber (int? docnumber);

        /// <summary>
        /// This call retrieves all the attachments of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of List&lt;AttachmentDTO&gt;</returns>
        ApiResponse<List<AttachmentDTO>> AttachmentsGetByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the data for external and internal attachement of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>AttachmentsDataSourceDTO</returns>
        AttachmentsDataSourceDTO AttachmentsGetByDocnumberForGrid (int? docnumber);

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of AttachmentsDataSourceDTO</returns>
        ApiResponse<AttachmentsDataSourceDTO> AttachmentsGetByDocnumberForGridWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>AttachmentDTO</returns>
        AttachmentDTO AttachmentsGetById (int? id);

        /// <summary>
        /// This call returns the attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        ApiResponse<AttachmentDTO> AttachmentsGetByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieves the list of the revisions of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>List&lt;AttachmentRevisionDTO&gt;</returns>
        List<AttachmentRevisionDTO> AttachmentsGetRevisionsByAttachmentId (int? attachmentId);

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>ApiResponse of List&lt;AttachmentRevisionDTO&gt;</returns>
        ApiResponse<List<AttachmentRevisionDTO>> AttachmentsGetRevisionsByAttachmentIdWithHttpInfo (int? attachmentId);
        /// <summary>
        /// This call adds a new external attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Comment for the new attachment</param>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>AttachmentDTO</returns>
        AttachmentDTO AttachmentsInsertExternal (string body, string bufferid, int? docnumber);

        /// <summary>
        /// This call adds a new external attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Comment for the new attachment</param>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        ApiResponse<AttachmentDTO> AttachmentsInsertExternalWithHttpInfo (string body, string bufferid, int? docnumber);
        /// <summary>
        /// This call adds a new internal attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>AttachmentDTO</returns>
        AttachmentDTO AttachmentsInsertInternal (int? attachmentDocnumber, int? docnumber);

        /// <summary>
        /// This call adds a new internal attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        ApiResponse<AttachmentDTO> AttachmentsInsertInternalWithHttpInfo (int? attachmentDocnumber, int? docnumber);
        /// <summary>
        /// This call returns the permissions for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>PermissionsDTO</returns>
        PermissionsDTO AttachmentsPermissionsById (int? id);

        /// <summary>
        /// This call returns the permissions for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        ApiResponse<PermissionsDTO> AttachmentsPermissionsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call updates attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns></returns>
        void AttachmentsPutAttachmentDocument (int? attachmentId, string bufferId);

        /// <summary>
        /// This call updates attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsPutAttachmentDocumentWithHttpInfo (int? attachmentId, string bufferId);
        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object that indicates the attachment data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        void AttachmentsUpdate (AttachmentDTO body, int? id);

        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object that indicates the attachment data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsUpdateWithHttpInfo (AttachmentDTO body, int? id);
        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="docnumber"></param>
        /// <param name="revision"></param>
        /// <param name="filename"></param>
        /// <param name="filepath"></param>
        /// <param name="originalname"></param>
        /// <param name="device"></param>
        /// <param name="cdlabel"></param>
        /// <param name="comment"></param>
        /// <param name="importdate"></param>
        /// <param name="user"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="block"></param>
        /// <param name="compliantcopy"></param>
        /// <param name="footprint"></param>
        /// <param name="checksend"></param>
        /// <param name="aosflag"></param>
        /// <param name="access"></param>
        /// <param name="saveType"></param>
        /// <param name="filesize"></param>
        /// <param name="kind"></param>
        /// <param name="attachedDocnumber"></param>
        /// <param name="ixCheck"></param>
        /// <param name="attachmentRevision"></param>
        /// <param name="compressionMode"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        void AttachmentsUpdate (int? id2, int? docnumber, int? revision, string filename, string filepath, string originalname, int? device, string cdlabel, string comment, DateTime? importdate, int? user, string userCompleteName, int? block, bool? compliantcopy, string footprint, bool? checksend, bool? aosflag, int? access, int? saveType, long? filesize, int? kind, int? attachedDocnumber, bool? ixCheck, int? attachmentRevision, int? compressionMode, int? id);

        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="docnumber"></param>
        /// <param name="revision"></param>
        /// <param name="filename"></param>
        /// <param name="filepath"></param>
        /// <param name="originalname"></param>
        /// <param name="device"></param>
        /// <param name="cdlabel"></param>
        /// <param name="comment"></param>
        /// <param name="importdate"></param>
        /// <param name="user"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="block"></param>
        /// <param name="compliantcopy"></param>
        /// <param name="footprint"></param>
        /// <param name="checksend"></param>
        /// <param name="aosflag"></param>
        /// <param name="access"></param>
        /// <param name="saveType"></param>
        /// <param name="filesize"></param>
        /// <param name="kind"></param>
        /// <param name="attachedDocnumber"></param>
        /// <param name="ixCheck"></param>
        /// <param name="attachmentRevision"></param>
        /// <param name="compressionMode"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsUpdateWithHttpInfo (int? id2, int? docnumber, int? revision, string filename, string filepath, string originalname, int? device, string cdlabel, string comment, DateTime? importdate, int? user, string userCompleteName, int? block, bool? compliantcopy, string footprint, bool? checksend, bool? aosflag, int? access, int? saveType, long? filesize, int? kind, int? attachedDocnumber, bool? ixCheck, int? attachmentRevision, int? compressionMode, int? id);
        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permission data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        void AttachmentsWritePermissionsById (PermissionsDTO body, int? id);

        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permission data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsWritePermissionsByIdWithHttpInfo (PermissionsDTO body, int? id);
        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        void AttachmentsWritePermissionsById (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? id);

        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AttachmentsWritePermissionsByIdWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call adds a revision for the attachment by a existent revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsAttachmentRevisionByRevisionAsync (int? attachmentId, int? revisionId);

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsAttachmentRevisionByRevisionAsyncWithHttpInfo (int? attachmentId, int? revisionId);
        /// <summary>
        /// This call converts an attachment file to the profile file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsConvertoToPrincipalDocumentAsync (int? attachmentId);

        /// <summary>
        /// This call converts an attachment file to the profile file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsConvertoToPrincipalDocumentAsyncWithHttpInfo (int? attachmentId);
        /// <summary>
        /// This call deletes an attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsDeleteAsync (int? id);

        /// <summary>
        /// This call deletes an attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes revision by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsDeleteRevisionAsync (int? revisionId);

        /// <summary>
        /// This call deletes revision by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsDeleteRevisionAsyncWithHttpInfo (int? revisionId);
        /// <summary>
        /// This call returns the attachment by profile and footprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Search options</param>
        /// <returns>Task of AttachmentDTO</returns>
        System.Threading.Tasks.Task<AttachmentDTO> AttachmentsGetByDocNumberAndFootprintAsync (AttachmentByDocnumberFootprintRequestDTO body);

        /// <summary>
        /// This call returns the attachment by profile and footprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Search options</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsGetByDocNumberAndFootprintAsyncWithHttpInfo (AttachmentByDocnumberFootprintRequestDTO body);
        /// <summary>
        /// This call returns the attachment by profile and footprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="footprint"></param>
        /// <returns>Task of AttachmentDTO</returns>
        System.Threading.Tasks.Task<AttachmentDTO> AttachmentsGetByDocNumberAndFootprintAsync (int? docnumber, string footprint);

        /// <summary>
        /// This call returns the attachment by profile and footprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="footprint"></param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsGetByDocNumberAndFootprintAsyncWithHttpInfo (int? docnumber, string footprint);
        /// <summary>
        /// This call retrieves all the attachments of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of List&lt;AttachmentDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AttachmentDTO>> AttachmentsGetByDocnumberAsync (int? docnumber);

        /// <summary>
        /// This call retrieves all the attachments of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AttachmentDTO>>> AttachmentsGetByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the data for external and internal attachement of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of AttachmentsDataSourceDTO</returns>
        System.Threading.Tasks.Task<AttachmentsDataSourceDTO> AttachmentsGetByDocnumberForGridAsync (int? docnumber);

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (AttachmentsDataSourceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsDataSourceDTO>> AttachmentsGetByDocnumberForGridAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// This call returns the attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of AttachmentDTO</returns>
        System.Threading.Tasks.Task<AttachmentDTO> AttachmentsGetByIdAsync (int? id);

        /// <summary>
        /// This call returns the attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsGetByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call retrieves the list of the revisions of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of List&lt;AttachmentRevisionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AttachmentRevisionDTO>> AttachmentsGetRevisionsByAttachmentIdAsync (int? attachmentId);

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentRevisionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AttachmentRevisionDTO>>> AttachmentsGetRevisionsByAttachmentIdAsyncWithHttpInfo (int? attachmentId);
        /// <summary>
        /// This call adds a new external attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Comment for the new attachment</param>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of AttachmentDTO</returns>
        System.Threading.Tasks.Task<AttachmentDTO> AttachmentsInsertExternalAsync (string body, string bufferid, int? docnumber);

        /// <summary>
        /// This call adds a new external attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Comment for the new attachment</param>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsInsertExternalAsyncWithHttpInfo (string body, string bufferid, int? docnumber);
        /// <summary>
        /// This call adds a new internal attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of AttachmentDTO</returns>
        System.Threading.Tasks.Task<AttachmentDTO> AttachmentsInsertInternalAsync (int? attachmentDocnumber, int? docnumber);

        /// <summary>
        /// This call adds a new internal attachment for a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsInsertInternalAsyncWithHttpInfo (int? attachmentDocnumber, int? docnumber);
        /// <summary>
        /// This call returns the permissions for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of PermissionsDTO</returns>
        System.Threading.Tasks.Task<PermissionsDTO> AttachmentsPermissionsByIdAsync (int? id);

        /// <summary>
        /// This call returns the permissions for an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> AttachmentsPermissionsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call updates attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsPutAttachmentDocumentAsync (int? attachmentId, string bufferId);

        /// <summary>
        /// This call updates attachment file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsPutAttachmentDocumentAsyncWithHttpInfo (int? attachmentId, string bufferId);
        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object that indicates the attachment data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsUpdateAsync (AttachmentDTO body, int? id);

        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object that indicates the attachment data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsUpdateAsyncWithHttpInfo (AttachmentDTO body, int? id);
        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="docnumber"></param>
        /// <param name="revision"></param>
        /// <param name="filename"></param>
        /// <param name="filepath"></param>
        /// <param name="originalname"></param>
        /// <param name="device"></param>
        /// <param name="cdlabel"></param>
        /// <param name="comment"></param>
        /// <param name="importdate"></param>
        /// <param name="user"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="block"></param>
        /// <param name="compliantcopy"></param>
        /// <param name="footprint"></param>
        /// <param name="checksend"></param>
        /// <param name="aosflag"></param>
        /// <param name="access"></param>
        /// <param name="saveType"></param>
        /// <param name="filesize"></param>
        /// <param name="kind"></param>
        /// <param name="attachedDocnumber"></param>
        /// <param name="ixCheck"></param>
        /// <param name="attachmentRevision"></param>
        /// <param name="compressionMode"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsUpdateAsync (int? id2, int? docnumber, int? revision, string filename, string filepath, string originalname, int? device, string cdlabel, string comment, DateTime? importdate, int? user, string userCompleteName, int? block, bool? compliantcopy, string footprint, bool? checksend, bool? aosflag, int? access, int? saveType, long? filesize, int? kind, int? attachedDocnumber, bool? ixCheck, int? attachmentRevision, int? compressionMode, int? id);

        /// <summary>
        /// This call updates a attachment by its identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="docnumber"></param>
        /// <param name="revision"></param>
        /// <param name="filename"></param>
        /// <param name="filepath"></param>
        /// <param name="originalname"></param>
        /// <param name="device"></param>
        /// <param name="cdlabel"></param>
        /// <param name="comment"></param>
        /// <param name="importdate"></param>
        /// <param name="user"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="block"></param>
        /// <param name="compliantcopy"></param>
        /// <param name="footprint"></param>
        /// <param name="checksend"></param>
        /// <param name="aosflag"></param>
        /// <param name="access"></param>
        /// <param name="saveType"></param>
        /// <param name="filesize"></param>
        /// <param name="kind"></param>
        /// <param name="attachedDocnumber"></param>
        /// <param name="ixCheck"></param>
        /// <param name="attachmentRevision"></param>
        /// <param name="compressionMode"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsUpdateAsyncWithHttpInfo (int? id2, int? docnumber, int? revision, string filename, string filepath, string originalname, int? device, string cdlabel, string comment, DateTime? importdate, int? user, string userCompleteName, int? block, bool? compliantcopy, string footprint, bool? checksend, bool? aosflag, int? access, int? saveType, long? filesize, int? kind, int? attachedDocnumber, bool? ixCheck, int? attachmentRevision, int? compressionMode, int? id);
        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permission data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsWritePermissionsByIdAsync (PermissionsDTO body, int? id);

        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permission data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsWritePermissionsByIdAsyncWithHttpInfo (PermissionsDTO body, int? id);
        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AttachmentsWritePermissionsByIdAsync (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? id);

        /// <summary>
        /// This call updates permission of an attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsWritePermissionsByIdAsyncWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AttachmentsApi : IAttachmentsApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttachmentsApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AttachmentsApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttachmentsApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns></returns>
        public void AttachmentsAttachmentRevisionByRevision (int? attachmentId, int? revisionId)
        {
             AttachmentsAttachmentRevisionByRevisionWithHttpInfo(attachmentId, revisionId);
        }

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsAttachmentRevisionByRevisionWithHttpInfo (int? attachmentId, int? revisionId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsAttachmentRevisionByRevision");
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling AttachmentsApi->AttachmentsAttachmentRevisionByRevision");

            var localVarPath = "/api/Attachments/{attachmentId}/Revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsAttachmentRevisionByRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsAttachmentRevisionByRevisionAsync (int? attachmentId, int? revisionId)
        {
             await AttachmentsAttachmentRevisionByRevisionAsyncWithHttpInfo(attachmentId, revisionId);

        }

        /// <summary>
        /// This call adds a revision for the attachment by a existent revision 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsAttachmentRevisionByRevisionAsyncWithHttpInfo (int? attachmentId, int? revisionId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsAttachmentRevisionByRevision");
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling AttachmentsApi->AttachmentsAttachmentRevisionByRevision");

            var localVarPath = "/api/Attachments/{attachmentId}/Revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsAttachmentRevisionByRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call converts an attachment file to the profile file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns></returns>
        public void AttachmentsConvertoToPrincipalDocument (int? attachmentId)
        {
             AttachmentsConvertoToPrincipalDocumentWithHttpInfo(attachmentId);
        }

        /// <summary>
        /// This call converts an attachment file to the profile file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsConvertoToPrincipalDocumentWithHttpInfo (int? attachmentId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsConvertoToPrincipalDocument");

            var localVarPath = "/api/Attachments/{attachmentId}/convertToPrincipal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsConvertoToPrincipalDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call converts an attachment file to the profile file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsConvertoToPrincipalDocumentAsync (int? attachmentId)
        {
             await AttachmentsConvertoToPrincipalDocumentAsyncWithHttpInfo(attachmentId);

        }

        /// <summary>
        /// This call converts an attachment file to the profile file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsConvertoToPrincipalDocumentAsyncWithHttpInfo (int? attachmentId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsConvertoToPrincipalDocument");

            var localVarPath = "/api/Attachments/{attachmentId}/convertToPrincipal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsConvertoToPrincipalDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes an attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        public void AttachmentsDelete (int? id)
        {
             AttachmentsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes an attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsDelete");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes an attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsDeleteAsync (int? id)
        {
             await AttachmentsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes an attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsDelete");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes revision by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns></returns>
        public void AttachmentsDeleteRevision (int? revisionId)
        {
             AttachmentsDeleteRevisionWithHttpInfo(revisionId);
        }

        /// <summary>
        /// This call deletes revision by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsDeleteRevisionWithHttpInfo (int? revisionId)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling AttachmentsApi->AttachmentsDeleteRevision");

            var localVarPath = "/api/Attachments/Revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsDeleteRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes revision by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsDeleteRevisionAsync (int? revisionId)
        {
             await AttachmentsDeleteRevisionAsyncWithHttpInfo(revisionId);

        }

        /// <summary>
        /// This call deletes revision by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revisionId">Identifier of the revision</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsDeleteRevisionAsyncWithHttpInfo (int? revisionId)
        {
            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
                throw new ApiException(400, "Missing required parameter 'revisionId' when calling AttachmentsApi->AttachmentsDeleteRevision");

            var localVarPath = "/api/Attachments/Revisions/{revisionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (revisionId != null) localVarPathParams.Add("revisionId", this.Configuration.ApiClient.ParameterToString(revisionId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsDeleteRevision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns the attachment by profile and footprint 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Search options</param>
        /// <returns>AttachmentDTO</returns>
        public AttachmentDTO AttachmentsGetByDocNumberAndFootprint (AttachmentByDocnumberFootprintRequestDTO body)
        {
             ApiResponse<AttachmentDTO> localVarResponse = AttachmentsGetByDocNumberAndFootprintWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the attachment by profile and footprint 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Search options</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        public ApiResponse< AttachmentDTO > AttachmentsGetByDocNumberAndFootprintWithHttpInfo (AttachmentByDocnumberFootprintRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentsApi->AttachmentsGetByDocNumberAndFootprint");

            var localVarPath = "/api/Attachments/ByDocnumberAndFootprint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocNumberAndFootprint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call returns the attachment by profile and footprint 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Search options</param>
        /// <returns>Task of AttachmentDTO</returns>
        public async System.Threading.Tasks.Task<AttachmentDTO> AttachmentsGetByDocNumberAndFootprintAsync (AttachmentByDocnumberFootprintRequestDTO body)
        {
             ApiResponse<AttachmentDTO> localVarResponse = await AttachmentsGetByDocNumberAndFootprintAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the attachment by profile and footprint 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Search options</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsGetByDocNumberAndFootprintAsyncWithHttpInfo (AttachmentByDocnumberFootprintRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentsApi->AttachmentsGetByDocNumberAndFootprint");

            var localVarPath = "/api/Attachments/ByDocnumberAndFootprint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocNumberAndFootprint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call returns the attachment by profile and footprint 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="footprint"></param>
        /// <returns>AttachmentDTO</returns>
        public AttachmentDTO AttachmentsGetByDocNumberAndFootprint (int? docnumber, string footprint)
        {
             ApiResponse<AttachmentDTO> localVarResponse = AttachmentsGetByDocNumberAndFootprintWithHttpInfo(docnumber, footprint);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the attachment by profile and footprint 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="footprint"></param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        public ApiResponse< AttachmentDTO > AttachmentsGetByDocNumberAndFootprintWithHttpInfo (int? docnumber, string footprint)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsGetByDocNumberAndFootprint");
            // verify the required parameter 'footprint' is set
            if (footprint == null)
                throw new ApiException(400, "Missing required parameter 'footprint' when calling AttachmentsApi->AttachmentsGetByDocNumberAndFootprint");

            var localVarPath = "/api/Attachments/ByDocnumberAndFootprint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarFormParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // form parameter
            if (footprint != null) localVarFormParams.Add("footprint", this.Configuration.ApiClient.ParameterToString(footprint)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocNumberAndFootprint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call returns the attachment by profile and footprint 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="footprint"></param>
        /// <returns>Task of AttachmentDTO</returns>
        public async System.Threading.Tasks.Task<AttachmentDTO> AttachmentsGetByDocNumberAndFootprintAsync (int? docnumber, string footprint)
        {
             ApiResponse<AttachmentDTO> localVarResponse = await AttachmentsGetByDocNumberAndFootprintAsyncWithHttpInfo(docnumber, footprint);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the attachment by profile and footprint 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <param name="footprint"></param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsGetByDocNumberAndFootprintAsyncWithHttpInfo (int? docnumber, string footprint)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsGetByDocNumberAndFootprint");
            // verify the required parameter 'footprint' is set
            if (footprint == null)
                throw new ApiException(400, "Missing required parameter 'footprint' when calling AttachmentsApi->AttachmentsGetByDocNumberAndFootprint");

            var localVarPath = "/api/Attachments/ByDocnumberAndFootprint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarFormParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // form parameter
            if (footprint != null) localVarFormParams.Add("footprint", this.Configuration.ApiClient.ParameterToString(footprint)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocNumberAndFootprint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call retrieves all the attachments of a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>List&lt;AttachmentDTO&gt;</returns>
        public List<AttachmentDTO> AttachmentsGetByDocnumber (int? docnumber)
        {
             ApiResponse<List<AttachmentDTO>> localVarResponse = AttachmentsGetByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieves all the attachments of a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of List&lt;AttachmentDTO&gt;</returns>
        public ApiResponse< List<AttachmentDTO> > AttachmentsGetByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsGetByDocnumber");

            var localVarPath = "/api/Attachments/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AttachmentDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentDTO>)));
        }

        /// <summary>
        /// This call retrieves all the attachments of a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of List&lt;AttachmentDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AttachmentDTO>> AttachmentsGetByDocnumberAsync (int? docnumber)
        {
             ApiResponse<List<AttachmentDTO>> localVarResponse = await AttachmentsGetByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieves all the attachments of a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AttachmentDTO>>> AttachmentsGetByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsGetByDocnumber");

            var localVarPath = "/api/Attachments/docnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AttachmentDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentDTO>)));
        }

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>AttachmentsDataSourceDTO</returns>
        public AttachmentsDataSourceDTO AttachmentsGetByDocnumberForGrid (int? docnumber)
        {
             ApiResponse<AttachmentsDataSourceDTO> localVarResponse = AttachmentsGetByDocnumberForGridWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of AttachmentsDataSourceDTO</returns>
        public ApiResponse< AttachmentsDataSourceDTO > AttachmentsGetByDocnumberForGridWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsGetByDocnumberForGrid");

            var localVarPath = "/api/Attachments/docnumber/{docnumber}/grid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocnumberForGrid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsDataSourceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentsDataSourceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsDataSourceDTO)));
        }

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of AttachmentsDataSourceDTO</returns>
        public async System.Threading.Tasks.Task<AttachmentsDataSourceDTO> AttachmentsGetByDocnumberForGridAsync (int? docnumber)
        {
             ApiResponse<AttachmentsDataSourceDTO> localVarResponse = await AttachmentsGetByDocnumberForGridAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the data for external and internal attachement of a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (AttachmentsDataSourceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsDataSourceDTO>> AttachmentsGetByDocnumberForGridAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsGetByDocnumberForGrid");

            var localVarPath = "/api/Attachments/docnumber/{docnumber}/grid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetByDocnumberForGrid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsDataSourceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentsDataSourceDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsDataSourceDTO)));
        }

        /// <summary>
        /// This call returns the attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>AttachmentDTO</returns>
        public AttachmentDTO AttachmentsGetById (int? id)
        {
             ApiResponse<AttachmentDTO> localVarResponse = AttachmentsGetByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        public ApiResponse< AttachmentDTO > AttachmentsGetByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsGetById");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call returns the attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of AttachmentDTO</returns>
        public async System.Threading.Tasks.Task<AttachmentDTO> AttachmentsGetByIdAsync (int? id)
        {
             ApiResponse<AttachmentDTO> localVarResponse = await AttachmentsGetByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsGetByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsGetById");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>List&lt;AttachmentRevisionDTO&gt;</returns>
        public List<AttachmentRevisionDTO> AttachmentsGetRevisionsByAttachmentId (int? attachmentId)
        {
             ApiResponse<List<AttachmentRevisionDTO>> localVarResponse = AttachmentsGetRevisionsByAttachmentIdWithHttpInfo(attachmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>ApiResponse of List&lt;AttachmentRevisionDTO&gt;</returns>
        public ApiResponse< List<AttachmentRevisionDTO> > AttachmentsGetRevisionsByAttachmentIdWithHttpInfo (int? attachmentId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsGetRevisionsByAttachmentId");

            var localVarPath = "/api/Attachments/{attachmentId}/Revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetRevisionsByAttachmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentRevisionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AttachmentRevisionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentRevisionDTO>)));
        }

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of List&lt;AttachmentRevisionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AttachmentRevisionDTO>> AttachmentsGetRevisionsByAttachmentIdAsync (int? attachmentId)
        {
             ApiResponse<List<AttachmentRevisionDTO>> localVarResponse = await AttachmentsGetRevisionsByAttachmentIdAsyncWithHttpInfo(attachmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieves the list of the revisions of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentRevisionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AttachmentRevisionDTO>>> AttachmentsGetRevisionsByAttachmentIdAsyncWithHttpInfo (int? attachmentId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsGetRevisionsByAttachmentId");

            var localVarPath = "/api/Attachments/{attachmentId}/Revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsGetRevisionsByAttachmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentRevisionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AttachmentRevisionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentRevisionDTO>)));
        }

        /// <summary>
        /// This call adds a new external attachment for a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Comment for the new attachment</param>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>AttachmentDTO</returns>
        public AttachmentDTO AttachmentsInsertExternal (string body, string bufferid, int? docnumber)
        {
             ApiResponse<AttachmentDTO> localVarResponse = AttachmentsInsertExternalWithHttpInfo(body, bufferid, docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds a new external attachment for a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Comment for the new attachment</param>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        public ApiResponse< AttachmentDTO > AttachmentsInsertExternalWithHttpInfo (string body, string bufferid, int? docnumber)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentsApi->AttachmentsInsertExternal");
            // verify the required parameter 'bufferid' is set
            if (bufferid == null)
                throw new ApiException(400, "Missing required parameter 'bufferid' when calling AttachmentsApi->AttachmentsInsertExternal");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsInsertExternal");

            var localVarPath = "/api/Attachments/InsertExternal/{bufferid}/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferid != null) localVarPathParams.Add("bufferid", this.Configuration.ApiClient.ParameterToString(bufferid)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsInsertExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call adds a new external attachment for a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Comment for the new attachment</param>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of AttachmentDTO</returns>
        public async System.Threading.Tasks.Task<AttachmentDTO> AttachmentsInsertExternalAsync (string body, string bufferid, int? docnumber)
        {
             ApiResponse<AttachmentDTO> localVarResponse = await AttachmentsInsertExternalAsyncWithHttpInfo(body, bufferid, docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds a new external attachment for a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Comment for the new attachment</param>
        /// <param name="bufferid">Buffer Identifier of the file to attach</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsInsertExternalAsyncWithHttpInfo (string body, string bufferid, int? docnumber)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentsApi->AttachmentsInsertExternal");
            // verify the required parameter 'bufferid' is set
            if (bufferid == null)
                throw new ApiException(400, "Missing required parameter 'bufferid' when calling AttachmentsApi->AttachmentsInsertExternal");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsInsertExternal");

            var localVarPath = "/api/Attachments/InsertExternal/{bufferid}/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bufferid != null) localVarPathParams.Add("bufferid", this.Configuration.ApiClient.ParameterToString(bufferid)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsInsertExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call adds a new internal attachment for a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>AttachmentDTO</returns>
        public AttachmentDTO AttachmentsInsertInternal (int? attachmentDocnumber, int? docnumber)
        {
             ApiResponse<AttachmentDTO> localVarResponse = AttachmentsInsertInternalWithHttpInfo(attachmentDocnumber, docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call adds a new internal attachment for a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>ApiResponse of AttachmentDTO</returns>
        public ApiResponse< AttachmentDTO > AttachmentsInsertInternalWithHttpInfo (int? attachmentDocnumber, int? docnumber)
        {
            // verify the required parameter 'attachmentDocnumber' is set
            if (attachmentDocnumber == null)
                throw new ApiException(400, "Missing required parameter 'attachmentDocnumber' when calling AttachmentsApi->AttachmentsInsertInternal");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsInsertInternal");

            var localVarPath = "/api/Attachments/InsertInternal/{attachmentDocnumber}/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentDocnumber != null) localVarPathParams.Add("attachmentDocnumber", this.Configuration.ApiClient.ParameterToString(attachmentDocnumber)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsInsertInternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call adds a new internal attachment for a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of AttachmentDTO</returns>
        public async System.Threading.Tasks.Task<AttachmentDTO> AttachmentsInsertInternalAsync (int? attachmentDocnumber, int? docnumber)
        {
             ApiResponse<AttachmentDTO> localVarResponse = await AttachmentsInsertInternalAsyncWithHttpInfo(attachmentDocnumber, docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call adds a new internal attachment for a profile 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentDocnumber">Identifier of the attachment</param>
        /// <param name="docnumber">Identifier of the profile</param>
        /// <returns>Task of ApiResponse (AttachmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentDTO>> AttachmentsInsertInternalAsyncWithHttpInfo (int? attachmentDocnumber, int? docnumber)
        {
            // verify the required parameter 'attachmentDocnumber' is set
            if (attachmentDocnumber == null)
                throw new ApiException(400, "Missing required parameter 'attachmentDocnumber' when calling AttachmentsApi->AttachmentsInsertInternal");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsInsertInternal");

            var localVarPath = "/api/Attachments/InsertInternal/{attachmentDocnumber}/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentDocnumber != null) localVarPathParams.Add("attachmentDocnumber", this.Configuration.ApiClient.ParameterToString(attachmentDocnumber)); // path parameter
            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsInsertInternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDTO)));
        }

        /// <summary>
        /// This call returns the permissions for an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>PermissionsDTO</returns>
        public PermissionsDTO AttachmentsPermissionsById (int? id)
        {
             ApiResponse<PermissionsDTO> localVarResponse = AttachmentsPermissionsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the permissions for an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        public ApiResponse< PermissionsDTO > AttachmentsPermissionsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsPermissionsById");

            var localVarPath = "/api/Attachments/{id}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsPermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call returns the permissions for an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of PermissionsDTO</returns>
        public async System.Threading.Tasks.Task<PermissionsDTO> AttachmentsPermissionsByIdAsync (int? id)
        {
             ApiResponse<PermissionsDTO> localVarResponse = await AttachmentsPermissionsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the permissions for an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> AttachmentsPermissionsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsPermissionsById");

            var localVarPath = "/api/Attachments/{id}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsPermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call updates attachment file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns></returns>
        public void AttachmentsPutAttachmentDocument (int? attachmentId, string bufferId)
        {
             AttachmentsPutAttachmentDocumentWithHttpInfo(attachmentId, bufferId);
        }

        /// <summary>
        /// This call updates attachment file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsPutAttachmentDocumentWithHttpInfo (int? attachmentId, string bufferId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsPutAttachmentDocument");
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling AttachmentsApi->AttachmentsPutAttachmentDocument");

            var localVarPath = "/api/Attachments/{attachmentId}/Document/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (bufferId != null) localVarPathParams.Add("bufferId", this.Configuration.ApiClient.ParameterToString(bufferId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsPutAttachmentDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates attachment file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsPutAttachmentDocumentAsync (int? attachmentId, string bufferId)
        {
             await AttachmentsPutAttachmentDocumentAsyncWithHttpInfo(attachmentId, bufferId);

        }

        /// <summary>
        /// This call updates attachment file 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Identifier of the attachment</param>
        /// <param name="bufferId">Buffer Identifier of the file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsPutAttachmentDocumentAsyncWithHttpInfo (int? attachmentId, string bufferId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentsApi->AttachmentsPutAttachmentDocument");
            // verify the required parameter 'bufferId' is set
            if (bufferId == null)
                throw new ApiException(400, "Missing required parameter 'bufferId' when calling AttachmentsApi->AttachmentsPutAttachmentDocument");

            var localVarPath = "/api/Attachments/{attachmentId}/Document/{bufferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (bufferId != null) localVarPathParams.Add("bufferId", this.Configuration.ApiClient.ParameterToString(bufferId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsPutAttachmentDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object that indicates the attachment data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        public void AttachmentsUpdate (AttachmentDTO body, int? id)
        {
             AttachmentsUpdateWithHttpInfo(body, id);
        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object that indicates the attachment data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsUpdateWithHttpInfo (AttachmentDTO body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsUpdate");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object that indicates the attachment data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsUpdateAsync (AttachmentDTO body, int? id)
        {
             await AttachmentsUpdateAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object that indicates the attachment data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsUpdateAsyncWithHttpInfo (AttachmentDTO body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsUpdate");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="docnumber"></param>
        /// <param name="revision"></param>
        /// <param name="filename"></param>
        /// <param name="filepath"></param>
        /// <param name="originalname"></param>
        /// <param name="device"></param>
        /// <param name="cdlabel"></param>
        /// <param name="comment"></param>
        /// <param name="importdate"></param>
        /// <param name="user"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="block"></param>
        /// <param name="compliantcopy"></param>
        /// <param name="footprint"></param>
        /// <param name="checksend"></param>
        /// <param name="aosflag"></param>
        /// <param name="access"></param>
        /// <param name="saveType"></param>
        /// <param name="filesize"></param>
        /// <param name="kind"></param>
        /// <param name="attachedDocnumber"></param>
        /// <param name="ixCheck"></param>
        /// <param name="attachmentRevision"></param>
        /// <param name="compressionMode"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        public void AttachmentsUpdate (int? id2, int? docnumber, int? revision, string filename, string filepath, string originalname, int? device, string cdlabel, string comment, DateTime? importdate, int? user, string userCompleteName, int? block, bool? compliantcopy, string footprint, bool? checksend, bool? aosflag, int? access, int? saveType, long? filesize, int? kind, int? attachedDocnumber, bool? ixCheck, int? attachmentRevision, int? compressionMode, int? id)
        {
             AttachmentsUpdateWithHttpInfo(id2, docnumber, revision, filename, filepath, originalname, device, cdlabel, comment, importdate, user, userCompleteName, block, compliantcopy, footprint, checksend, aosflag, access, saveType, filesize, kind, attachedDocnumber, ixCheck, attachmentRevision, compressionMode, id);
        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="docnumber"></param>
        /// <param name="revision"></param>
        /// <param name="filename"></param>
        /// <param name="filepath"></param>
        /// <param name="originalname"></param>
        /// <param name="device"></param>
        /// <param name="cdlabel"></param>
        /// <param name="comment"></param>
        /// <param name="importdate"></param>
        /// <param name="user"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="block"></param>
        /// <param name="compliantcopy"></param>
        /// <param name="footprint"></param>
        /// <param name="checksend"></param>
        /// <param name="aosflag"></param>
        /// <param name="access"></param>
        /// <param name="saveType"></param>
        /// <param name="filesize"></param>
        /// <param name="kind"></param>
        /// <param name="attachedDocnumber"></param>
        /// <param name="ixCheck"></param>
        /// <param name="attachmentRevision"></param>
        /// <param name="compressionMode"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsUpdateWithHttpInfo (int? id2, int? docnumber, int? revision, string filename, string filepath, string originalname, int? device, string cdlabel, string comment, DateTime? importdate, int? user, string userCompleteName, int? block, bool? compliantcopy, string footprint, bool? checksend, bool? aosflag, int? access, int? saveType, long? filesize, int? kind, int? attachedDocnumber, bool? ixCheck, int? attachmentRevision, int? compressionMode, int? id)
        {
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'revision' is set
            if (revision == null)
                throw new ApiException(400, "Missing required parameter 'revision' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'originalname' is set
            if (originalname == null)
                throw new ApiException(400, "Missing required parameter 'originalname' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'device' is set
            if (device == null)
                throw new ApiException(400, "Missing required parameter 'device' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'cdlabel' is set
            if (cdlabel == null)
                throw new ApiException(400, "Missing required parameter 'cdlabel' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'comment' is set
            if (comment == null)
                throw new ApiException(400, "Missing required parameter 'comment' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'importdate' is set
            if (importdate == null)
                throw new ApiException(400, "Missing required parameter 'importdate' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'userCompleteName' is set
            if (userCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'userCompleteName' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'block' is set
            if (block == null)
                throw new ApiException(400, "Missing required parameter 'block' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'compliantcopy' is set
            if (compliantcopy == null)
                throw new ApiException(400, "Missing required parameter 'compliantcopy' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'footprint' is set
            if (footprint == null)
                throw new ApiException(400, "Missing required parameter 'footprint' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'checksend' is set
            if (checksend == null)
                throw new ApiException(400, "Missing required parameter 'checksend' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'aosflag' is set
            if (aosflag == null)
                throw new ApiException(400, "Missing required parameter 'aosflag' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'access' is set
            if (access == null)
                throw new ApiException(400, "Missing required parameter 'access' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'saveType' is set
            if (saveType == null)
                throw new ApiException(400, "Missing required parameter 'saveType' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'filesize' is set
            if (filesize == null)
                throw new ApiException(400, "Missing required parameter 'filesize' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'kind' is set
            if (kind == null)
                throw new ApiException(400, "Missing required parameter 'kind' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'attachedDocnumber' is set
            if (attachedDocnumber == null)
                throw new ApiException(400, "Missing required parameter 'attachedDocnumber' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'ixCheck' is set
            if (ixCheck == null)
                throw new ApiException(400, "Missing required parameter 'ixCheck' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'attachmentRevision' is set
            if (attachmentRevision == null)
                throw new ApiException(400, "Missing required parameter 'attachmentRevision' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'compressionMode' is set
            if (compressionMode == null)
                throw new ApiException(400, "Missing required parameter 'compressionMode' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsUpdate");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (docnumber != null) localVarFormParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // form parameter
            if (revision != null) localVarFormParams.Add("revision", this.Configuration.ApiClient.ParameterToString(revision)); // form parameter
            if (filename != null) localVarFormParams.Add("filename", this.Configuration.ApiClient.ParameterToString(filename)); // form parameter
            if (filepath != null) localVarFormParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // form parameter
            if (originalname != null) localVarFormParams.Add("originalname", this.Configuration.ApiClient.ParameterToString(originalname)); // form parameter
            if (device != null) localVarFormParams.Add("device", this.Configuration.ApiClient.ParameterToString(device)); // form parameter
            if (cdlabel != null) localVarFormParams.Add("cdlabel", this.Configuration.ApiClient.ParameterToString(cdlabel)); // form parameter
            if (comment != null) localVarFormParams.Add("comment", this.Configuration.ApiClient.ParameterToString(comment)); // form parameter
            if (importdate != null) localVarFormParams.Add("importdate", this.Configuration.ApiClient.ParameterToString(importdate)); // form parameter
            if (user != null) localVarFormParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (userCompleteName != null) localVarFormParams.Add("userCompleteName", this.Configuration.ApiClient.ParameterToString(userCompleteName)); // form parameter
            if (block != null) localVarFormParams.Add("block", this.Configuration.ApiClient.ParameterToString(block)); // form parameter
            if (compliantcopy != null) localVarFormParams.Add("compliantcopy", this.Configuration.ApiClient.ParameterToString(compliantcopy)); // form parameter
            if (footprint != null) localVarFormParams.Add("footprint", this.Configuration.ApiClient.ParameterToString(footprint)); // form parameter
            if (checksend != null) localVarFormParams.Add("checksend", this.Configuration.ApiClient.ParameterToString(checksend)); // form parameter
            if (aosflag != null) localVarFormParams.Add("aosflag", this.Configuration.ApiClient.ParameterToString(aosflag)); // form parameter
            if (access != null) localVarFormParams.Add("access", this.Configuration.ApiClient.ParameterToString(access)); // form parameter
            if (saveType != null) localVarFormParams.Add("saveType", this.Configuration.ApiClient.ParameterToString(saveType)); // form parameter
            if (filesize != null) localVarFormParams.Add("filesize", this.Configuration.ApiClient.ParameterToString(filesize)); // form parameter
            if (kind != null) localVarFormParams.Add("kind", this.Configuration.ApiClient.ParameterToString(kind)); // form parameter
            if (attachedDocnumber != null) localVarFormParams.Add("attachedDocnumber", this.Configuration.ApiClient.ParameterToString(attachedDocnumber)); // form parameter
            if (ixCheck != null) localVarFormParams.Add("ixCheck", this.Configuration.ApiClient.ParameterToString(ixCheck)); // form parameter
            if (attachmentRevision != null) localVarFormParams.Add("attachmentRevision", this.Configuration.ApiClient.ParameterToString(attachmentRevision)); // form parameter
            if (compressionMode != null) localVarFormParams.Add("compressionMode", this.Configuration.ApiClient.ParameterToString(compressionMode)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="docnumber"></param>
        /// <param name="revision"></param>
        /// <param name="filename"></param>
        /// <param name="filepath"></param>
        /// <param name="originalname"></param>
        /// <param name="device"></param>
        /// <param name="cdlabel"></param>
        /// <param name="comment"></param>
        /// <param name="importdate"></param>
        /// <param name="user"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="block"></param>
        /// <param name="compliantcopy"></param>
        /// <param name="footprint"></param>
        /// <param name="checksend"></param>
        /// <param name="aosflag"></param>
        /// <param name="access"></param>
        /// <param name="saveType"></param>
        /// <param name="filesize"></param>
        /// <param name="kind"></param>
        /// <param name="attachedDocnumber"></param>
        /// <param name="ixCheck"></param>
        /// <param name="attachmentRevision"></param>
        /// <param name="compressionMode"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsUpdateAsync (int? id2, int? docnumber, int? revision, string filename, string filepath, string originalname, int? device, string cdlabel, string comment, DateTime? importdate, int? user, string userCompleteName, int? block, bool? compliantcopy, string footprint, bool? checksend, bool? aosflag, int? access, int? saveType, long? filesize, int? kind, int? attachedDocnumber, bool? ixCheck, int? attachmentRevision, int? compressionMode, int? id)
        {
             await AttachmentsUpdateAsyncWithHttpInfo(id2, docnumber, revision, filename, filepath, originalname, device, cdlabel, comment, importdate, user, userCompleteName, block, compliantcopy, footprint, checksend, aosflag, access, saveType, filesize, kind, attachedDocnumber, ixCheck, attachmentRevision, compressionMode, id);

        }

        /// <summary>
        /// This call updates a attachment by its identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id2"></param>
        /// <param name="docnumber"></param>
        /// <param name="revision"></param>
        /// <param name="filename"></param>
        /// <param name="filepath"></param>
        /// <param name="originalname"></param>
        /// <param name="device"></param>
        /// <param name="cdlabel"></param>
        /// <param name="comment"></param>
        /// <param name="importdate"></param>
        /// <param name="user"></param>
        /// <param name="userCompleteName"></param>
        /// <param name="block"></param>
        /// <param name="compliantcopy"></param>
        /// <param name="footprint"></param>
        /// <param name="checksend"></param>
        /// <param name="aosflag"></param>
        /// <param name="access"></param>
        /// <param name="saveType"></param>
        /// <param name="filesize"></param>
        /// <param name="kind"></param>
        /// <param name="attachedDocnumber"></param>
        /// <param name="ixCheck"></param>
        /// <param name="attachmentRevision"></param>
        /// <param name="compressionMode"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsUpdateAsyncWithHttpInfo (int? id2, int? docnumber, int? revision, string filename, string filepath, string originalname, int? device, string cdlabel, string comment, DateTime? importdate, int? user, string userCompleteName, int? block, bool? compliantcopy, string footprint, bool? checksend, bool? aosflag, int? access, int? saveType, long? filesize, int? kind, int? attachedDocnumber, bool? ixCheck, int? attachmentRevision, int? compressionMode, int? id)
        {
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'revision' is set
            if (revision == null)
                throw new ApiException(400, "Missing required parameter 'revision' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'originalname' is set
            if (originalname == null)
                throw new ApiException(400, "Missing required parameter 'originalname' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'device' is set
            if (device == null)
                throw new ApiException(400, "Missing required parameter 'device' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'cdlabel' is set
            if (cdlabel == null)
                throw new ApiException(400, "Missing required parameter 'cdlabel' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'comment' is set
            if (comment == null)
                throw new ApiException(400, "Missing required parameter 'comment' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'importdate' is set
            if (importdate == null)
                throw new ApiException(400, "Missing required parameter 'importdate' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'userCompleteName' is set
            if (userCompleteName == null)
                throw new ApiException(400, "Missing required parameter 'userCompleteName' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'block' is set
            if (block == null)
                throw new ApiException(400, "Missing required parameter 'block' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'compliantcopy' is set
            if (compliantcopy == null)
                throw new ApiException(400, "Missing required parameter 'compliantcopy' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'footprint' is set
            if (footprint == null)
                throw new ApiException(400, "Missing required parameter 'footprint' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'checksend' is set
            if (checksend == null)
                throw new ApiException(400, "Missing required parameter 'checksend' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'aosflag' is set
            if (aosflag == null)
                throw new ApiException(400, "Missing required parameter 'aosflag' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'access' is set
            if (access == null)
                throw new ApiException(400, "Missing required parameter 'access' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'saveType' is set
            if (saveType == null)
                throw new ApiException(400, "Missing required parameter 'saveType' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'filesize' is set
            if (filesize == null)
                throw new ApiException(400, "Missing required parameter 'filesize' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'kind' is set
            if (kind == null)
                throw new ApiException(400, "Missing required parameter 'kind' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'attachedDocnumber' is set
            if (attachedDocnumber == null)
                throw new ApiException(400, "Missing required parameter 'attachedDocnumber' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'ixCheck' is set
            if (ixCheck == null)
                throw new ApiException(400, "Missing required parameter 'ixCheck' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'attachmentRevision' is set
            if (attachmentRevision == null)
                throw new ApiException(400, "Missing required parameter 'attachmentRevision' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'compressionMode' is set
            if (compressionMode == null)
                throw new ApiException(400, "Missing required parameter 'compressionMode' when calling AttachmentsApi->AttachmentsUpdate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsUpdate");

            var localVarPath = "/api/Attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (docnumber != null) localVarFormParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // form parameter
            if (revision != null) localVarFormParams.Add("revision", this.Configuration.ApiClient.ParameterToString(revision)); // form parameter
            if (filename != null) localVarFormParams.Add("filename", this.Configuration.ApiClient.ParameterToString(filename)); // form parameter
            if (filepath != null) localVarFormParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // form parameter
            if (originalname != null) localVarFormParams.Add("originalname", this.Configuration.ApiClient.ParameterToString(originalname)); // form parameter
            if (device != null) localVarFormParams.Add("device", this.Configuration.ApiClient.ParameterToString(device)); // form parameter
            if (cdlabel != null) localVarFormParams.Add("cdlabel", this.Configuration.ApiClient.ParameterToString(cdlabel)); // form parameter
            if (comment != null) localVarFormParams.Add("comment", this.Configuration.ApiClient.ParameterToString(comment)); // form parameter
            if (importdate != null) localVarFormParams.Add("importdate", this.Configuration.ApiClient.ParameterToString(importdate)); // form parameter
            if (user != null) localVarFormParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (userCompleteName != null) localVarFormParams.Add("userCompleteName", this.Configuration.ApiClient.ParameterToString(userCompleteName)); // form parameter
            if (block != null) localVarFormParams.Add("block", this.Configuration.ApiClient.ParameterToString(block)); // form parameter
            if (compliantcopy != null) localVarFormParams.Add("compliantcopy", this.Configuration.ApiClient.ParameterToString(compliantcopy)); // form parameter
            if (footprint != null) localVarFormParams.Add("footprint", this.Configuration.ApiClient.ParameterToString(footprint)); // form parameter
            if (checksend != null) localVarFormParams.Add("checksend", this.Configuration.ApiClient.ParameterToString(checksend)); // form parameter
            if (aosflag != null) localVarFormParams.Add("aosflag", this.Configuration.ApiClient.ParameterToString(aosflag)); // form parameter
            if (access != null) localVarFormParams.Add("access", this.Configuration.ApiClient.ParameterToString(access)); // form parameter
            if (saveType != null) localVarFormParams.Add("saveType", this.Configuration.ApiClient.ParameterToString(saveType)); // form parameter
            if (filesize != null) localVarFormParams.Add("filesize", this.Configuration.ApiClient.ParameterToString(filesize)); // form parameter
            if (kind != null) localVarFormParams.Add("kind", this.Configuration.ApiClient.ParameterToString(kind)); // form parameter
            if (attachedDocnumber != null) localVarFormParams.Add("attachedDocnumber", this.Configuration.ApiClient.ParameterToString(attachedDocnumber)); // form parameter
            if (ixCheck != null) localVarFormParams.Add("ixCheck", this.Configuration.ApiClient.ParameterToString(ixCheck)); // form parameter
            if (attachmentRevision != null) localVarFormParams.Add("attachmentRevision", this.Configuration.ApiClient.ParameterToString(attachmentRevision)); // form parameter
            if (compressionMode != null) localVarFormParams.Add("compressionMode", this.Configuration.ApiClient.ParameterToString(compressionMode)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permission data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        public void AttachmentsWritePermissionsById (PermissionsDTO body, int? id)
        {
             AttachmentsWritePermissionsByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permission data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsWritePermissionsByIdWithHttpInfo (PermissionsDTO body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentsApi->AttachmentsWritePermissionsById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsWritePermissionsById");

            var localVarPath = "/api/Attachments/{id}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsWritePermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permission data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsWritePermissionsByIdAsync (PermissionsDTO body, int? id)
        {
             await AttachmentsWritePermissionsByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Permission data to update</param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsWritePermissionsByIdAsyncWithHttpInfo (PermissionsDTO body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentsApi->AttachmentsWritePermissionsById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsWritePermissionsById");

            var localVarPath = "/api/Attachments/{id}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsWritePermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns></returns>
        public void AttachmentsWritePermissionsById (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? id)
        {
             AttachmentsWritePermissionsByIdWithHttpInfo(usersPermissions, permissionsProperties, id);
        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AttachmentsWritePermissionsByIdWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? id)
        {
            // verify the required parameter 'usersPermissions' is set
            if (usersPermissions == null)
                throw new ApiException(400, "Missing required parameter 'usersPermissions' when calling AttachmentsApi->AttachmentsWritePermissionsById");
            // verify the required parameter 'permissionsProperties' is set
            if (permissionsProperties == null)
                throw new ApiException(400, "Missing required parameter 'permissionsProperties' when calling AttachmentsApi->AttachmentsWritePermissionsById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsWritePermissionsById");

            var localVarPath = "/api/Attachments/{id}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (usersPermissions != null) localVarFormParams.Add("usersPermissions", this.Configuration.ApiClient.ParameterToString(usersPermissions)); // form parameter
            if (permissionsProperties != null) localVarFormParams.Add("permissionsProperties", this.Configuration.ApiClient.ParameterToString(permissionsProperties)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsWritePermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AttachmentsWritePermissionsByIdAsync (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? id)
        {
             await AttachmentsWritePermissionsByIdAsyncWithHttpInfo(usersPermissions, permissionsProperties, id);

        }

        /// <summary>
        /// This call updates permission of an attachment 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="id">Identifier of the attachment</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AttachmentsWritePermissionsByIdAsyncWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? id)
        {
            // verify the required parameter 'usersPermissions' is set
            if (usersPermissions == null)
                throw new ApiException(400, "Missing required parameter 'usersPermissions' when calling AttachmentsApi->AttachmentsWritePermissionsById");
            // verify the required parameter 'permissionsProperties' is set
            if (permissionsProperties == null)
                throw new ApiException(400, "Missing required parameter 'permissionsProperties' when calling AttachmentsApi->AttachmentsWritePermissionsById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->AttachmentsWritePermissionsById");

            var localVarPath = "/api/Attachments/{id}/Permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (usersPermissions != null) localVarFormParams.Add("usersPermissions", this.Configuration.ApiClient.ParameterToString(usersPermissions)); // form parameter
            if (permissionsProperties != null) localVarFormParams.Add("permissionsProperties", this.Configuration.ApiClient.ParameterToString(permissionsProperties)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentsWritePermissionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
