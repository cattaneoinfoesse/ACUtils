/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISharingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns></returns>
        void SharingDeleteSharing (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SharingDeleteSharingWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>List&lt;SharingOperationDTO&gt;</returns>
        List<SharingOperationDTO> SharingGetOperations (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of List&lt;SharingOperationDTO&gt;</returns>
        ApiResponse<List<SharingOperationDTO>> SharingGetOperationsWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>SharingDTO</returns>
        SharingDTO SharingGetSharing (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        ApiResponse<SharingDTO> SharingGetSharingWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>SharingDTO</returns>
        SharingDTO SharingGetSharingForShow (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        ApiResponse<SharingDTO> SharingGetSharingForShowWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SharingDTO&gt;</returns>
        List<SharingDTO> SharingGetSharings ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SharingDTO&gt;</returns>
        ApiResponse<List<SharingDTO>> SharingGetSharingsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>List&lt;SharingDTO&gt;</returns>
        List<SharingDTO> SharingGetSharingsByDocnumber (int? docnumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of List&lt;SharingDTO&gt;</returns>
        ApiResponse<List<SharingDTO>> SharingGetSharingsByDocnumberWithHttpInfo (int? docnumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDTO</returns>
        SharingDTO SharingInsertSharing (SharingDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        ApiResponse<SharingDTO> SharingInsertSharingWithHttpInfo (SharingDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>SharingDTO</returns>
        SharingDTO SharingInsertSharing (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        ApiResponse<SharingDTO> SharingInsertSharingWithHttpInfo (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDTO</returns>
        SharingDTO SharingNewByBusinessUnitAndDocumentTypeId (GetNewSharingRequestDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        ApiResponse<SharingDTO> SharingNewByBusinessUnitAndDocumentTypeIdWithHttpInfo (GetNewSharingRequestDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>SharingDTO</returns>
        SharingDTO SharingNewByBusinessUnitAndDocumentTypeId (string businessUnitCode, int? documentTypeSystemId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        ApiResponse<SharingDTO> SharingNewByBusinessUnitAndDocumentTypeIdWithHttpInfo (string businessUnitCode, int? documentTypeSystemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>SharingDTO</returns>
        SharingDTO SharingReprocessSharing (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        ApiResponse<SharingDTO> SharingReprocessSharingWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDTO</returns>
        SharingDTO SharingUpdateSharing (SharingDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        ApiResponse<SharingDTO> SharingUpdateSharingWithHttpInfo (SharingDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>SharingDTO</returns>
        SharingDTO SharingUpdateSharing (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        ApiResponse<SharingDTO> SharingUpdateSharingWithHttpInfo (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? SharingUserConnectedIsConfigurationRole ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> SharingUserConnectedIsConfigurationRoleWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? SharingUserConnectedIsSharingManager ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> SharingUserConnectedIsSharingManagerWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SharingDeleteSharingAsync (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SharingDeleteSharingAsyncWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of List&lt;SharingOperationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SharingOperationDTO>> SharingGetOperationsAsync (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (List&lt;SharingOperationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SharingOperationDTO>>> SharingGetOperationsAsyncWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of SharingDTO</returns>
        System.Threading.Tasks.Task<SharingDTO> SharingGetSharingAsync (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingGetSharingAsyncWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of SharingDTO</returns>
        System.Threading.Tasks.Task<SharingDTO> SharingGetSharingForShowAsync (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingGetSharingForShowAsyncWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SharingDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SharingDTO>> SharingGetSharingsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SharingDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SharingDTO>>> SharingGetSharingsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of List&lt;SharingDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SharingDTO>> SharingGetSharingsByDocnumberAsync (int? docnumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse (List&lt;SharingDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SharingDTO>>> SharingGetSharingsByDocnumberAsyncWithHttpInfo (int? docnumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDTO</returns>
        System.Threading.Tasks.Task<SharingDTO> SharingInsertSharingAsync (SharingDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingInsertSharingAsyncWithHttpInfo (SharingDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>Task of SharingDTO</returns>
        System.Threading.Tasks.Task<SharingDTO> SharingInsertSharingAsync (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingInsertSharingAsyncWithHttpInfo (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDTO</returns>
        System.Threading.Tasks.Task<SharingDTO> SharingNewByBusinessUnitAndDocumentTypeIdAsync (GetNewSharingRequestDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingNewByBusinessUnitAndDocumentTypeIdAsyncWithHttpInfo (GetNewSharingRequestDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of SharingDTO</returns>
        System.Threading.Tasks.Task<SharingDTO> SharingNewByBusinessUnitAndDocumentTypeIdAsync (string businessUnitCode, int? documentTypeSystemId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingNewByBusinessUnitAndDocumentTypeIdAsyncWithHttpInfo (string businessUnitCode, int? documentTypeSystemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of SharingDTO</returns>
        System.Threading.Tasks.Task<SharingDTO> SharingReprocessSharingAsync (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingReprocessSharingAsyncWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDTO</returns>
        System.Threading.Tasks.Task<SharingDTO> SharingUpdateSharingAsync (SharingDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingUpdateSharingAsyncWithHttpInfo (SharingDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>Task of SharingDTO</returns>
        System.Threading.Tasks.Task<SharingDTO> SharingUpdateSharingAsync (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingUpdateSharingAsyncWithHttpInfo (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> SharingUserConnectedIsConfigurationRoleAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> SharingUserConnectedIsConfigurationRoleAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> SharingUserConnectedIsSharingManagerAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> SharingUserConnectedIsSharingManagerAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SharingApi : ISharingApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SharingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SharingApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SharingApi"/> class
        /// </summary>
        /// <returns></returns>
        public SharingApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SharingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SharingApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns></returns>
        public void SharingDeleteSharing (string sharingId)
        {
             SharingDeleteSharingWithHttpInfo(sharingId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SharingDeleteSharingWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingDeleteSharing");

            var localVarPath = "/api/Sharing/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDeleteSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SharingDeleteSharingAsync (string sharingId)
        {
             await SharingDeleteSharingAsyncWithHttpInfo(sharingId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SharingDeleteSharingAsyncWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingDeleteSharing");

            var localVarPath = "/api/Sharing/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDeleteSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>List&lt;SharingOperationDTO&gt;</returns>
        public List<SharingOperationDTO> SharingGetOperations (string sharingId)
        {
             ApiResponse<List<SharingOperationDTO>> localVarResponse = SharingGetOperationsWithHttpInfo(sharingId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of List&lt;SharingOperationDTO&gt;</returns>
        public ApiResponse< List<SharingOperationDTO> > SharingGetOperationsWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingGetOperations");

            var localVarPath = "/api/Sharing/Operations/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingGetOperations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SharingOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SharingOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SharingOperationDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of List&lt;SharingOperationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SharingOperationDTO>> SharingGetOperationsAsync (string sharingId)
        {
             ApiResponse<List<SharingOperationDTO>> localVarResponse = await SharingGetOperationsAsyncWithHttpInfo(sharingId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (List&lt;SharingOperationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SharingOperationDTO>>> SharingGetOperationsAsyncWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingGetOperations");

            var localVarPath = "/api/Sharing/Operations/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingGetOperations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SharingOperationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SharingOperationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SharingOperationDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>SharingDTO</returns>
        public SharingDTO SharingGetSharing (string sharingId)
        {
             ApiResponse<SharingDTO> localVarResponse = SharingGetSharingWithHttpInfo(sharingId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        public ApiResponse< SharingDTO > SharingGetSharingWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingGetSharing");

            var localVarPath = "/api/Sharing/ForUpdate/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingGetSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of SharingDTO</returns>
        public async System.Threading.Tasks.Task<SharingDTO> SharingGetSharingAsync (string sharingId)
        {
             ApiResponse<SharingDTO> localVarResponse = await SharingGetSharingAsyncWithHttpInfo(sharingId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingGetSharingAsyncWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingGetSharing");

            var localVarPath = "/api/Sharing/ForUpdate/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingGetSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>SharingDTO</returns>
        public SharingDTO SharingGetSharingForShow (string sharingId)
        {
             ApiResponse<SharingDTO> localVarResponse = SharingGetSharingForShowWithHttpInfo(sharingId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        public ApiResponse< SharingDTO > SharingGetSharingForShowWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingGetSharingForShow");

            var localVarPath = "/api/Sharing/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingGetSharingForShow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of SharingDTO</returns>
        public async System.Threading.Tasks.Task<SharingDTO> SharingGetSharingForShowAsync (string sharingId)
        {
             ApiResponse<SharingDTO> localVarResponse = await SharingGetSharingForShowAsyncWithHttpInfo(sharingId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingGetSharingForShowAsyncWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingGetSharingForShow");

            var localVarPath = "/api/Sharing/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingGetSharingForShow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SharingDTO&gt;</returns>
        public List<SharingDTO> SharingGetSharings ()
        {
             ApiResponse<List<SharingDTO>> localVarResponse = SharingGetSharingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SharingDTO&gt;</returns>
        public ApiResponse< List<SharingDTO> > SharingGetSharingsWithHttpInfo ()
        {

            var localVarPath = "/api/Sharing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingGetSharings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SharingDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SharingDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SharingDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SharingDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SharingDTO>> SharingGetSharingsAsync ()
        {
             ApiResponse<List<SharingDTO>> localVarResponse = await SharingGetSharingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SharingDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SharingDTO>>> SharingGetSharingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Sharing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingGetSharings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SharingDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SharingDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SharingDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>List&lt;SharingDTO&gt;</returns>
        public List<SharingDTO> SharingGetSharingsByDocnumber (int? docnumber)
        {
             ApiResponse<List<SharingDTO>> localVarResponse = SharingGetSharingsByDocnumberWithHttpInfo(docnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>ApiResponse of List&lt;SharingDTO&gt;</returns>
        public ApiResponse< List<SharingDTO> > SharingGetSharingsByDocnumberWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling SharingApi->SharingGetSharingsByDocnumber");

            var localVarPath = "/api/Sharing/ByDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingGetSharingsByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SharingDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SharingDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SharingDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of List&lt;SharingDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SharingDTO>> SharingGetSharingsByDocnumberAsync (int? docnumber)
        {
             ApiResponse<List<SharingDTO>> localVarResponse = await SharingGetSharingsByDocnumberAsyncWithHttpInfo(docnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber"></param>
        /// <returns>Task of ApiResponse (List&lt;SharingDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SharingDTO>>> SharingGetSharingsByDocnumberAsyncWithHttpInfo (int? docnumber)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling SharingApi->SharingGetSharingsByDocnumber");

            var localVarPath = "/api/Sharing/ByDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingGetSharingsByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SharingDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SharingDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SharingDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDTO</returns>
        public SharingDTO SharingInsertSharing (SharingDTO body)
        {
             ApiResponse<SharingDTO> localVarResponse = SharingInsertSharingWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        public ApiResponse< SharingDTO > SharingInsertSharingWithHttpInfo (SharingDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingApi->SharingInsertSharing");

            var localVarPath = "/api/Sharing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingInsertSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDTO</returns>
        public async System.Threading.Tasks.Task<SharingDTO> SharingInsertSharingAsync (SharingDTO body)
        {
             ApiResponse<SharingDTO> localVarResponse = await SharingInsertSharingAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingInsertSharingAsyncWithHttpInfo (SharingDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingApi->SharingInsertSharing");

            var localVarPath = "/api/Sharing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingInsertSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>SharingDTO</returns>
        public SharingDTO SharingInsertSharing (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData)
        {
             ApiResponse<SharingDTO> localVarResponse = SharingInsertSharingWithHttpInfo(sharingId, userId, creationDate, htmlForAccess, htmlForExpiration, urlForReceivers, sharingDefinitionId, documentTypeId, beginning, expiration, afterSend, repeatSendMail, repeatSendMailTime, repeatSendMailNumber, workflowAfterRead, workflowAfterExpiration, workflowAfterExpirationNotRead, alertForNoRead, alertForNoReadTime, disableAfterRead, deleteAfterExpiration, immediatlySend, sendTime, maxDownloadTime, detailsAsZip, defaultLanguage, downloadDirectly, sharingMode, mailDefinitions, shareName, shareDescription, isEnable, _virtual, sharingReceivers, sharingDetails, externalData);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        public ApiResponse< SharingDTO > SharingInsertSharingWithHttpInfo (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'htmlForAccess' is set
            if (htmlForAccess == null)
                throw new ApiException(400, "Missing required parameter 'htmlForAccess' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'htmlForExpiration' is set
            if (htmlForExpiration == null)
                throw new ApiException(400, "Missing required parameter 'htmlForExpiration' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'urlForReceivers' is set
            if (urlForReceivers == null)
                throw new ApiException(400, "Missing required parameter 'urlForReceivers' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'sharingDefinitionId' is set
            if (sharingDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionId' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'beginning' is set
            if (beginning == null)
                throw new ApiException(400, "Missing required parameter 'beginning' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'expiration' is set
            if (expiration == null)
                throw new ApiException(400, "Missing required parameter 'expiration' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'afterSend' is set
            if (afterSend == null)
                throw new ApiException(400, "Missing required parameter 'afterSend' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'repeatSendMail' is set
            if (repeatSendMail == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMail' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'repeatSendMailTime' is set
            if (repeatSendMailTime == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailTime' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'repeatSendMailNumber' is set
            if (repeatSendMailNumber == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailNumber' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'workflowAfterRead' is set
            if (workflowAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterRead' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'workflowAfterExpiration' is set
            if (workflowAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpiration' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'workflowAfterExpirationNotRead' is set
            if (workflowAfterExpirationNotRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpirationNotRead' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'alertForNoRead' is set
            if (alertForNoRead == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoRead' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'alertForNoReadTime' is set
            if (alertForNoReadTime == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoReadTime' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'disableAfterRead' is set
            if (disableAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'disableAfterRead' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'deleteAfterExpiration' is set
            if (deleteAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'deleteAfterExpiration' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'immediatlySend' is set
            if (immediatlySend == null)
                throw new ApiException(400, "Missing required parameter 'immediatlySend' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'sendTime' is set
            if (sendTime == null)
                throw new ApiException(400, "Missing required parameter 'sendTime' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'maxDownloadTime' is set
            if (maxDownloadTime == null)
                throw new ApiException(400, "Missing required parameter 'maxDownloadTime' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'detailsAsZip' is set
            if (detailsAsZip == null)
                throw new ApiException(400, "Missing required parameter 'detailsAsZip' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'defaultLanguage' is set
            if (defaultLanguage == null)
                throw new ApiException(400, "Missing required parameter 'defaultLanguage' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'downloadDirectly' is set
            if (downloadDirectly == null)
                throw new ApiException(400, "Missing required parameter 'downloadDirectly' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'sharingMode' is set
            if (sharingMode == null)
                throw new ApiException(400, "Missing required parameter 'sharingMode' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'mailDefinitions' is set
            if (mailDefinitions == null)
                throw new ApiException(400, "Missing required parameter 'mailDefinitions' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'shareName' is set
            if (shareName == null)
                throw new ApiException(400, "Missing required parameter 'shareName' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'shareDescription' is set
            if (shareDescription == null)
                throw new ApiException(400, "Missing required parameter 'shareDescription' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'isEnable' is set
            if (isEnable == null)
                throw new ApiException(400, "Missing required parameter 'isEnable' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter '_virtual' is set
            if (_virtual == null)
                throw new ApiException(400, "Missing required parameter '_virtual' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'sharingReceivers' is set
            if (sharingReceivers == null)
                throw new ApiException(400, "Missing required parameter 'sharingReceivers' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'sharingDetails' is set
            if (sharingDetails == null)
                throw new ApiException(400, "Missing required parameter 'sharingDetails' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'externalData' is set
            if (externalData == null)
                throw new ApiException(400, "Missing required parameter 'externalData' when calling SharingApi->SharingInsertSharing");

            var localVarPath = "/api/Sharing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarFormParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (htmlForAccess != null) localVarFormParams.Add("htmlForAccess", this.Configuration.ApiClient.ParameterToString(htmlForAccess)); // form parameter
            if (htmlForExpiration != null) localVarFormParams.Add("htmlForExpiration", this.Configuration.ApiClient.ParameterToString(htmlForExpiration)); // form parameter
            if (urlForReceivers != null) localVarFormParams.Add("urlForReceivers", this.Configuration.ApiClient.ParameterToString(urlForReceivers)); // form parameter
            if (sharingDefinitionId != null) localVarFormParams.Add("sharingDefinitionId", this.Configuration.ApiClient.ParameterToString(sharingDefinitionId)); // form parameter
            if (documentTypeId != null) localVarFormParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // form parameter
            if (beginning != null) localVarFormParams.Add("beginning", this.Configuration.ApiClient.ParameterToString(beginning)); // form parameter
            if (expiration != null) localVarFormParams.Add("expiration", this.Configuration.ApiClient.ParameterToString(expiration)); // form parameter
            if (afterSend != null) localVarFormParams.Add("afterSend", this.Configuration.ApiClient.ParameterToString(afterSend)); // form parameter
            if (repeatSendMail != null) localVarFormParams.Add("repeatSendMail", this.Configuration.ApiClient.ParameterToString(repeatSendMail)); // form parameter
            if (repeatSendMailTime != null) localVarFormParams.Add("repeatSendMailTime", this.Configuration.ApiClient.ParameterToString(repeatSendMailTime)); // form parameter
            if (repeatSendMailNumber != null) localVarFormParams.Add("repeatSendMailNumber", this.Configuration.ApiClient.ParameterToString(repeatSendMailNumber)); // form parameter
            if (workflowAfterRead != null) localVarFormParams.Add("workflowAfterRead", this.Configuration.ApiClient.ParameterToString(workflowAfterRead)); // form parameter
            if (workflowAfterExpiration != null) localVarFormParams.Add("workflowAfterExpiration", this.Configuration.ApiClient.ParameterToString(workflowAfterExpiration)); // form parameter
            if (workflowAfterExpirationNotRead != null) localVarFormParams.Add("workflowAfterExpirationNotRead", this.Configuration.ApiClient.ParameterToString(workflowAfterExpirationNotRead)); // form parameter
            if (alertForNoRead != null) localVarFormParams.Add("alertForNoRead", this.Configuration.ApiClient.ParameterToString(alertForNoRead)); // form parameter
            if (alertForNoReadTime != null) localVarFormParams.Add("alertForNoReadTime", this.Configuration.ApiClient.ParameterToString(alertForNoReadTime)); // form parameter
            if (disableAfterRead != null) localVarFormParams.Add("disableAfterRead", this.Configuration.ApiClient.ParameterToString(disableAfterRead)); // form parameter
            if (deleteAfterExpiration != null) localVarFormParams.Add("deleteAfterExpiration", this.Configuration.ApiClient.ParameterToString(deleteAfterExpiration)); // form parameter
            if (immediatlySend != null) localVarFormParams.Add("immediatlySend", this.Configuration.ApiClient.ParameterToString(immediatlySend)); // form parameter
            if (sendTime != null) localVarFormParams.Add("sendTime", this.Configuration.ApiClient.ParameterToString(sendTime)); // form parameter
            if (maxDownloadTime != null) localVarFormParams.Add("maxDownloadTime", this.Configuration.ApiClient.ParameterToString(maxDownloadTime)); // form parameter
            if (detailsAsZip != null) localVarFormParams.Add("detailsAsZip", this.Configuration.ApiClient.ParameterToString(detailsAsZip)); // form parameter
            if (defaultLanguage != null) localVarFormParams.Add("defaultLanguage", this.Configuration.ApiClient.ParameterToString(defaultLanguage)); // form parameter
            if (downloadDirectly != null) localVarFormParams.Add("downloadDirectly", this.Configuration.ApiClient.ParameterToString(downloadDirectly)); // form parameter
            if (sharingMode != null) localVarFormParams.Add("sharingMode", this.Configuration.ApiClient.ParameterToString(sharingMode)); // form parameter
            if (mailDefinitions != null) localVarFormParams.Add("mailDefinitions", this.Configuration.ApiClient.ParameterToString(mailDefinitions)); // form parameter
            if (shareName != null) localVarFormParams.Add("shareName", this.Configuration.ApiClient.ParameterToString(shareName)); // form parameter
            if (shareDescription != null) localVarFormParams.Add("shareDescription", this.Configuration.ApiClient.ParameterToString(shareDescription)); // form parameter
            if (isEnable != null) localVarFormParams.Add("isEnable", this.Configuration.ApiClient.ParameterToString(isEnable)); // form parameter
            if (_virtual != null) localVarFormParams.Add("virtual", this.Configuration.ApiClient.ParameterToString(_virtual)); // form parameter
            if (sharingReceivers != null) localVarFormParams.Add("sharingReceivers", this.Configuration.ApiClient.ParameterToString(sharingReceivers)); // form parameter
            if (sharingDetails != null) localVarFormParams.Add("sharingDetails", this.Configuration.ApiClient.ParameterToString(sharingDetails)); // form parameter
            if (externalData != null) localVarFormParams.Add("externalData", this.Configuration.ApiClient.ParameterToString(externalData)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingInsertSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>Task of SharingDTO</returns>
        public async System.Threading.Tasks.Task<SharingDTO> SharingInsertSharingAsync (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData)
        {
             ApiResponse<SharingDTO> localVarResponse = await SharingInsertSharingAsyncWithHttpInfo(sharingId, userId, creationDate, htmlForAccess, htmlForExpiration, urlForReceivers, sharingDefinitionId, documentTypeId, beginning, expiration, afterSend, repeatSendMail, repeatSendMailTime, repeatSendMailNumber, workflowAfterRead, workflowAfterExpiration, workflowAfterExpirationNotRead, alertForNoRead, alertForNoReadTime, disableAfterRead, deleteAfterExpiration, immediatlySend, sendTime, maxDownloadTime, detailsAsZip, defaultLanguage, downloadDirectly, sharingMode, mailDefinitions, shareName, shareDescription, isEnable, _virtual, sharingReceivers, sharingDetails, externalData);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingInsertSharingAsyncWithHttpInfo (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'htmlForAccess' is set
            if (htmlForAccess == null)
                throw new ApiException(400, "Missing required parameter 'htmlForAccess' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'htmlForExpiration' is set
            if (htmlForExpiration == null)
                throw new ApiException(400, "Missing required parameter 'htmlForExpiration' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'urlForReceivers' is set
            if (urlForReceivers == null)
                throw new ApiException(400, "Missing required parameter 'urlForReceivers' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'sharingDefinitionId' is set
            if (sharingDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionId' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'beginning' is set
            if (beginning == null)
                throw new ApiException(400, "Missing required parameter 'beginning' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'expiration' is set
            if (expiration == null)
                throw new ApiException(400, "Missing required parameter 'expiration' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'afterSend' is set
            if (afterSend == null)
                throw new ApiException(400, "Missing required parameter 'afterSend' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'repeatSendMail' is set
            if (repeatSendMail == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMail' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'repeatSendMailTime' is set
            if (repeatSendMailTime == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailTime' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'repeatSendMailNumber' is set
            if (repeatSendMailNumber == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailNumber' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'workflowAfterRead' is set
            if (workflowAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterRead' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'workflowAfterExpiration' is set
            if (workflowAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpiration' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'workflowAfterExpirationNotRead' is set
            if (workflowAfterExpirationNotRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpirationNotRead' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'alertForNoRead' is set
            if (alertForNoRead == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoRead' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'alertForNoReadTime' is set
            if (alertForNoReadTime == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoReadTime' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'disableAfterRead' is set
            if (disableAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'disableAfterRead' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'deleteAfterExpiration' is set
            if (deleteAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'deleteAfterExpiration' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'immediatlySend' is set
            if (immediatlySend == null)
                throw new ApiException(400, "Missing required parameter 'immediatlySend' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'sendTime' is set
            if (sendTime == null)
                throw new ApiException(400, "Missing required parameter 'sendTime' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'maxDownloadTime' is set
            if (maxDownloadTime == null)
                throw new ApiException(400, "Missing required parameter 'maxDownloadTime' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'detailsAsZip' is set
            if (detailsAsZip == null)
                throw new ApiException(400, "Missing required parameter 'detailsAsZip' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'defaultLanguage' is set
            if (defaultLanguage == null)
                throw new ApiException(400, "Missing required parameter 'defaultLanguage' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'downloadDirectly' is set
            if (downloadDirectly == null)
                throw new ApiException(400, "Missing required parameter 'downloadDirectly' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'sharingMode' is set
            if (sharingMode == null)
                throw new ApiException(400, "Missing required parameter 'sharingMode' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'mailDefinitions' is set
            if (mailDefinitions == null)
                throw new ApiException(400, "Missing required parameter 'mailDefinitions' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'shareName' is set
            if (shareName == null)
                throw new ApiException(400, "Missing required parameter 'shareName' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'shareDescription' is set
            if (shareDescription == null)
                throw new ApiException(400, "Missing required parameter 'shareDescription' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'isEnable' is set
            if (isEnable == null)
                throw new ApiException(400, "Missing required parameter 'isEnable' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter '_virtual' is set
            if (_virtual == null)
                throw new ApiException(400, "Missing required parameter '_virtual' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'sharingReceivers' is set
            if (sharingReceivers == null)
                throw new ApiException(400, "Missing required parameter 'sharingReceivers' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'sharingDetails' is set
            if (sharingDetails == null)
                throw new ApiException(400, "Missing required parameter 'sharingDetails' when calling SharingApi->SharingInsertSharing");
            // verify the required parameter 'externalData' is set
            if (externalData == null)
                throw new ApiException(400, "Missing required parameter 'externalData' when calling SharingApi->SharingInsertSharing");

            var localVarPath = "/api/Sharing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarFormParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (htmlForAccess != null) localVarFormParams.Add("htmlForAccess", this.Configuration.ApiClient.ParameterToString(htmlForAccess)); // form parameter
            if (htmlForExpiration != null) localVarFormParams.Add("htmlForExpiration", this.Configuration.ApiClient.ParameterToString(htmlForExpiration)); // form parameter
            if (urlForReceivers != null) localVarFormParams.Add("urlForReceivers", this.Configuration.ApiClient.ParameterToString(urlForReceivers)); // form parameter
            if (sharingDefinitionId != null) localVarFormParams.Add("sharingDefinitionId", this.Configuration.ApiClient.ParameterToString(sharingDefinitionId)); // form parameter
            if (documentTypeId != null) localVarFormParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // form parameter
            if (beginning != null) localVarFormParams.Add("beginning", this.Configuration.ApiClient.ParameterToString(beginning)); // form parameter
            if (expiration != null) localVarFormParams.Add("expiration", this.Configuration.ApiClient.ParameterToString(expiration)); // form parameter
            if (afterSend != null) localVarFormParams.Add("afterSend", this.Configuration.ApiClient.ParameterToString(afterSend)); // form parameter
            if (repeatSendMail != null) localVarFormParams.Add("repeatSendMail", this.Configuration.ApiClient.ParameterToString(repeatSendMail)); // form parameter
            if (repeatSendMailTime != null) localVarFormParams.Add("repeatSendMailTime", this.Configuration.ApiClient.ParameterToString(repeatSendMailTime)); // form parameter
            if (repeatSendMailNumber != null) localVarFormParams.Add("repeatSendMailNumber", this.Configuration.ApiClient.ParameterToString(repeatSendMailNumber)); // form parameter
            if (workflowAfterRead != null) localVarFormParams.Add("workflowAfterRead", this.Configuration.ApiClient.ParameterToString(workflowAfterRead)); // form parameter
            if (workflowAfterExpiration != null) localVarFormParams.Add("workflowAfterExpiration", this.Configuration.ApiClient.ParameterToString(workflowAfterExpiration)); // form parameter
            if (workflowAfterExpirationNotRead != null) localVarFormParams.Add("workflowAfterExpirationNotRead", this.Configuration.ApiClient.ParameterToString(workflowAfterExpirationNotRead)); // form parameter
            if (alertForNoRead != null) localVarFormParams.Add("alertForNoRead", this.Configuration.ApiClient.ParameterToString(alertForNoRead)); // form parameter
            if (alertForNoReadTime != null) localVarFormParams.Add("alertForNoReadTime", this.Configuration.ApiClient.ParameterToString(alertForNoReadTime)); // form parameter
            if (disableAfterRead != null) localVarFormParams.Add("disableAfterRead", this.Configuration.ApiClient.ParameterToString(disableAfterRead)); // form parameter
            if (deleteAfterExpiration != null) localVarFormParams.Add("deleteAfterExpiration", this.Configuration.ApiClient.ParameterToString(deleteAfterExpiration)); // form parameter
            if (immediatlySend != null) localVarFormParams.Add("immediatlySend", this.Configuration.ApiClient.ParameterToString(immediatlySend)); // form parameter
            if (sendTime != null) localVarFormParams.Add("sendTime", this.Configuration.ApiClient.ParameterToString(sendTime)); // form parameter
            if (maxDownloadTime != null) localVarFormParams.Add("maxDownloadTime", this.Configuration.ApiClient.ParameterToString(maxDownloadTime)); // form parameter
            if (detailsAsZip != null) localVarFormParams.Add("detailsAsZip", this.Configuration.ApiClient.ParameterToString(detailsAsZip)); // form parameter
            if (defaultLanguage != null) localVarFormParams.Add("defaultLanguage", this.Configuration.ApiClient.ParameterToString(defaultLanguage)); // form parameter
            if (downloadDirectly != null) localVarFormParams.Add("downloadDirectly", this.Configuration.ApiClient.ParameterToString(downloadDirectly)); // form parameter
            if (sharingMode != null) localVarFormParams.Add("sharingMode", this.Configuration.ApiClient.ParameterToString(sharingMode)); // form parameter
            if (mailDefinitions != null) localVarFormParams.Add("mailDefinitions", this.Configuration.ApiClient.ParameterToString(mailDefinitions)); // form parameter
            if (shareName != null) localVarFormParams.Add("shareName", this.Configuration.ApiClient.ParameterToString(shareName)); // form parameter
            if (shareDescription != null) localVarFormParams.Add("shareDescription", this.Configuration.ApiClient.ParameterToString(shareDescription)); // form parameter
            if (isEnable != null) localVarFormParams.Add("isEnable", this.Configuration.ApiClient.ParameterToString(isEnable)); // form parameter
            if (_virtual != null) localVarFormParams.Add("virtual", this.Configuration.ApiClient.ParameterToString(_virtual)); // form parameter
            if (sharingReceivers != null) localVarFormParams.Add("sharingReceivers", this.Configuration.ApiClient.ParameterToString(sharingReceivers)); // form parameter
            if (sharingDetails != null) localVarFormParams.Add("sharingDetails", this.Configuration.ApiClient.ParameterToString(sharingDetails)); // form parameter
            if (externalData != null) localVarFormParams.Add("externalData", this.Configuration.ApiClient.ParameterToString(externalData)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingInsertSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDTO</returns>
        public SharingDTO SharingNewByBusinessUnitAndDocumentTypeId (GetNewSharingRequestDTO body)
        {
             ApiResponse<SharingDTO> localVarResponse = SharingNewByBusinessUnitAndDocumentTypeIdWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        public ApiResponse< SharingDTO > SharingNewByBusinessUnitAndDocumentTypeIdWithHttpInfo (GetNewSharingRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingApi->SharingNewByBusinessUnitAndDocumentTypeId");

            var localVarPath = "/api/Sharing/NewByBusinessUnitAndDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingNewByBusinessUnitAndDocumentTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDTO</returns>
        public async System.Threading.Tasks.Task<SharingDTO> SharingNewByBusinessUnitAndDocumentTypeIdAsync (GetNewSharingRequestDTO body)
        {
             ApiResponse<SharingDTO> localVarResponse = await SharingNewByBusinessUnitAndDocumentTypeIdAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingNewByBusinessUnitAndDocumentTypeIdAsyncWithHttpInfo (GetNewSharingRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingApi->SharingNewByBusinessUnitAndDocumentTypeId");

            var localVarPath = "/api/Sharing/NewByBusinessUnitAndDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingNewByBusinessUnitAndDocumentTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>SharingDTO</returns>
        public SharingDTO SharingNewByBusinessUnitAndDocumentTypeId (string businessUnitCode, int? documentTypeSystemId)
        {
             ApiResponse<SharingDTO> localVarResponse = SharingNewByBusinessUnitAndDocumentTypeIdWithHttpInfo(businessUnitCode, documentTypeSystemId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        public ApiResponse< SharingDTO > SharingNewByBusinessUnitAndDocumentTypeIdWithHttpInfo (string businessUnitCode, int? documentTypeSystemId)
        {
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling SharingApi->SharingNewByBusinessUnitAndDocumentTypeId");
            // verify the required parameter 'documentTypeSystemId' is set
            if (documentTypeSystemId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeSystemId' when calling SharingApi->SharingNewByBusinessUnitAndDocumentTypeId");

            var localVarPath = "/api/Sharing/NewByBusinessUnitAndDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitCode != null) localVarFormParams.Add("businessUnitCode", this.Configuration.ApiClient.ParameterToString(businessUnitCode)); // form parameter
            if (documentTypeSystemId != null) localVarFormParams.Add("documentTypeSystemId", this.Configuration.ApiClient.ParameterToString(documentTypeSystemId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingNewByBusinessUnitAndDocumentTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of SharingDTO</returns>
        public async System.Threading.Tasks.Task<SharingDTO> SharingNewByBusinessUnitAndDocumentTypeIdAsync (string businessUnitCode, int? documentTypeSystemId)
        {
             ApiResponse<SharingDTO> localVarResponse = await SharingNewByBusinessUnitAndDocumentTypeIdAsyncWithHttpInfo(businessUnitCode, documentTypeSystemId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingNewByBusinessUnitAndDocumentTypeIdAsyncWithHttpInfo (string businessUnitCode, int? documentTypeSystemId)
        {
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling SharingApi->SharingNewByBusinessUnitAndDocumentTypeId");
            // verify the required parameter 'documentTypeSystemId' is set
            if (documentTypeSystemId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeSystemId' when calling SharingApi->SharingNewByBusinessUnitAndDocumentTypeId");

            var localVarPath = "/api/Sharing/NewByBusinessUnitAndDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitCode != null) localVarFormParams.Add("businessUnitCode", this.Configuration.ApiClient.ParameterToString(businessUnitCode)); // form parameter
            if (documentTypeSystemId != null) localVarFormParams.Add("documentTypeSystemId", this.Configuration.ApiClient.ParameterToString(documentTypeSystemId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingNewByBusinessUnitAndDocumentTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>SharingDTO</returns>
        public SharingDTO SharingReprocessSharing (string sharingId)
        {
             ApiResponse<SharingDTO> localVarResponse = SharingReprocessSharingWithHttpInfo(sharingId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        public ApiResponse< SharingDTO > SharingReprocessSharingWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingReprocessSharing");

            var localVarPath = "/api/Sharing/Reprocess/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingReprocessSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of SharingDTO</returns>
        public async System.Threading.Tasks.Task<SharingDTO> SharingReprocessSharingAsync (string sharingId)
        {
             ApiResponse<SharingDTO> localVarResponse = await SharingReprocessSharingAsyncWithHttpInfo(sharingId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingReprocessSharingAsyncWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingReprocessSharing");

            var localVarPath = "/api/Sharing/Reprocess/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingReprocessSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDTO</returns>
        public SharingDTO SharingUpdateSharing (SharingDTO body)
        {
             ApiResponse<SharingDTO> localVarResponse = SharingUpdateSharingWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        public ApiResponse< SharingDTO > SharingUpdateSharingWithHttpInfo (SharingDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingApi->SharingUpdateSharing");

            var localVarPath = "/api/Sharing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingUpdateSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDTO</returns>
        public async System.Threading.Tasks.Task<SharingDTO> SharingUpdateSharingAsync (SharingDTO body)
        {
             ApiResponse<SharingDTO> localVarResponse = await SharingUpdateSharingAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingUpdateSharingAsyncWithHttpInfo (SharingDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingApi->SharingUpdateSharing");

            var localVarPath = "/api/Sharing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingUpdateSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>SharingDTO</returns>
        public SharingDTO SharingUpdateSharing (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData)
        {
             ApiResponse<SharingDTO> localVarResponse = SharingUpdateSharingWithHttpInfo(sharingId, userId, creationDate, htmlForAccess, htmlForExpiration, urlForReceivers, sharingDefinitionId, documentTypeId, beginning, expiration, afterSend, repeatSendMail, repeatSendMailTime, repeatSendMailNumber, workflowAfterRead, workflowAfterExpiration, workflowAfterExpirationNotRead, alertForNoRead, alertForNoReadTime, disableAfterRead, deleteAfterExpiration, immediatlySend, sendTime, maxDownloadTime, detailsAsZip, defaultLanguage, downloadDirectly, sharingMode, mailDefinitions, shareName, shareDescription, isEnable, _virtual, sharingReceivers, sharingDetails, externalData);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>ApiResponse of SharingDTO</returns>
        public ApiResponse< SharingDTO > SharingUpdateSharingWithHttpInfo (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'htmlForAccess' is set
            if (htmlForAccess == null)
                throw new ApiException(400, "Missing required parameter 'htmlForAccess' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'htmlForExpiration' is set
            if (htmlForExpiration == null)
                throw new ApiException(400, "Missing required parameter 'htmlForExpiration' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'urlForReceivers' is set
            if (urlForReceivers == null)
                throw new ApiException(400, "Missing required parameter 'urlForReceivers' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'sharingDefinitionId' is set
            if (sharingDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionId' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'beginning' is set
            if (beginning == null)
                throw new ApiException(400, "Missing required parameter 'beginning' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'expiration' is set
            if (expiration == null)
                throw new ApiException(400, "Missing required parameter 'expiration' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'afterSend' is set
            if (afterSend == null)
                throw new ApiException(400, "Missing required parameter 'afterSend' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'repeatSendMail' is set
            if (repeatSendMail == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMail' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'repeatSendMailTime' is set
            if (repeatSendMailTime == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailTime' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'repeatSendMailNumber' is set
            if (repeatSendMailNumber == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailNumber' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'workflowAfterRead' is set
            if (workflowAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterRead' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'workflowAfterExpiration' is set
            if (workflowAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpiration' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'workflowAfterExpirationNotRead' is set
            if (workflowAfterExpirationNotRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpirationNotRead' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'alertForNoRead' is set
            if (alertForNoRead == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoRead' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'alertForNoReadTime' is set
            if (alertForNoReadTime == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoReadTime' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'disableAfterRead' is set
            if (disableAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'disableAfterRead' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'deleteAfterExpiration' is set
            if (deleteAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'deleteAfterExpiration' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'immediatlySend' is set
            if (immediatlySend == null)
                throw new ApiException(400, "Missing required parameter 'immediatlySend' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'sendTime' is set
            if (sendTime == null)
                throw new ApiException(400, "Missing required parameter 'sendTime' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'maxDownloadTime' is set
            if (maxDownloadTime == null)
                throw new ApiException(400, "Missing required parameter 'maxDownloadTime' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'detailsAsZip' is set
            if (detailsAsZip == null)
                throw new ApiException(400, "Missing required parameter 'detailsAsZip' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'defaultLanguage' is set
            if (defaultLanguage == null)
                throw new ApiException(400, "Missing required parameter 'defaultLanguage' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'downloadDirectly' is set
            if (downloadDirectly == null)
                throw new ApiException(400, "Missing required parameter 'downloadDirectly' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'sharingMode' is set
            if (sharingMode == null)
                throw new ApiException(400, "Missing required parameter 'sharingMode' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'mailDefinitions' is set
            if (mailDefinitions == null)
                throw new ApiException(400, "Missing required parameter 'mailDefinitions' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'shareName' is set
            if (shareName == null)
                throw new ApiException(400, "Missing required parameter 'shareName' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'shareDescription' is set
            if (shareDescription == null)
                throw new ApiException(400, "Missing required parameter 'shareDescription' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'isEnable' is set
            if (isEnable == null)
                throw new ApiException(400, "Missing required parameter 'isEnable' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter '_virtual' is set
            if (_virtual == null)
                throw new ApiException(400, "Missing required parameter '_virtual' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'sharingReceivers' is set
            if (sharingReceivers == null)
                throw new ApiException(400, "Missing required parameter 'sharingReceivers' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'sharingDetails' is set
            if (sharingDetails == null)
                throw new ApiException(400, "Missing required parameter 'sharingDetails' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'externalData' is set
            if (externalData == null)
                throw new ApiException(400, "Missing required parameter 'externalData' when calling SharingApi->SharingUpdateSharing");

            var localVarPath = "/api/Sharing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarFormParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (htmlForAccess != null) localVarFormParams.Add("htmlForAccess", this.Configuration.ApiClient.ParameterToString(htmlForAccess)); // form parameter
            if (htmlForExpiration != null) localVarFormParams.Add("htmlForExpiration", this.Configuration.ApiClient.ParameterToString(htmlForExpiration)); // form parameter
            if (urlForReceivers != null) localVarFormParams.Add("urlForReceivers", this.Configuration.ApiClient.ParameterToString(urlForReceivers)); // form parameter
            if (sharingDefinitionId != null) localVarFormParams.Add("sharingDefinitionId", this.Configuration.ApiClient.ParameterToString(sharingDefinitionId)); // form parameter
            if (documentTypeId != null) localVarFormParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // form parameter
            if (beginning != null) localVarFormParams.Add("beginning", this.Configuration.ApiClient.ParameterToString(beginning)); // form parameter
            if (expiration != null) localVarFormParams.Add("expiration", this.Configuration.ApiClient.ParameterToString(expiration)); // form parameter
            if (afterSend != null) localVarFormParams.Add("afterSend", this.Configuration.ApiClient.ParameterToString(afterSend)); // form parameter
            if (repeatSendMail != null) localVarFormParams.Add("repeatSendMail", this.Configuration.ApiClient.ParameterToString(repeatSendMail)); // form parameter
            if (repeatSendMailTime != null) localVarFormParams.Add("repeatSendMailTime", this.Configuration.ApiClient.ParameterToString(repeatSendMailTime)); // form parameter
            if (repeatSendMailNumber != null) localVarFormParams.Add("repeatSendMailNumber", this.Configuration.ApiClient.ParameterToString(repeatSendMailNumber)); // form parameter
            if (workflowAfterRead != null) localVarFormParams.Add("workflowAfterRead", this.Configuration.ApiClient.ParameterToString(workflowAfterRead)); // form parameter
            if (workflowAfterExpiration != null) localVarFormParams.Add("workflowAfterExpiration", this.Configuration.ApiClient.ParameterToString(workflowAfterExpiration)); // form parameter
            if (workflowAfterExpirationNotRead != null) localVarFormParams.Add("workflowAfterExpirationNotRead", this.Configuration.ApiClient.ParameterToString(workflowAfterExpirationNotRead)); // form parameter
            if (alertForNoRead != null) localVarFormParams.Add("alertForNoRead", this.Configuration.ApiClient.ParameterToString(alertForNoRead)); // form parameter
            if (alertForNoReadTime != null) localVarFormParams.Add("alertForNoReadTime", this.Configuration.ApiClient.ParameterToString(alertForNoReadTime)); // form parameter
            if (disableAfterRead != null) localVarFormParams.Add("disableAfterRead", this.Configuration.ApiClient.ParameterToString(disableAfterRead)); // form parameter
            if (deleteAfterExpiration != null) localVarFormParams.Add("deleteAfterExpiration", this.Configuration.ApiClient.ParameterToString(deleteAfterExpiration)); // form parameter
            if (immediatlySend != null) localVarFormParams.Add("immediatlySend", this.Configuration.ApiClient.ParameterToString(immediatlySend)); // form parameter
            if (sendTime != null) localVarFormParams.Add("sendTime", this.Configuration.ApiClient.ParameterToString(sendTime)); // form parameter
            if (maxDownloadTime != null) localVarFormParams.Add("maxDownloadTime", this.Configuration.ApiClient.ParameterToString(maxDownloadTime)); // form parameter
            if (detailsAsZip != null) localVarFormParams.Add("detailsAsZip", this.Configuration.ApiClient.ParameterToString(detailsAsZip)); // form parameter
            if (defaultLanguage != null) localVarFormParams.Add("defaultLanguage", this.Configuration.ApiClient.ParameterToString(defaultLanguage)); // form parameter
            if (downloadDirectly != null) localVarFormParams.Add("downloadDirectly", this.Configuration.ApiClient.ParameterToString(downloadDirectly)); // form parameter
            if (sharingMode != null) localVarFormParams.Add("sharingMode", this.Configuration.ApiClient.ParameterToString(sharingMode)); // form parameter
            if (mailDefinitions != null) localVarFormParams.Add("mailDefinitions", this.Configuration.ApiClient.ParameterToString(mailDefinitions)); // form parameter
            if (shareName != null) localVarFormParams.Add("shareName", this.Configuration.ApiClient.ParameterToString(shareName)); // form parameter
            if (shareDescription != null) localVarFormParams.Add("shareDescription", this.Configuration.ApiClient.ParameterToString(shareDescription)); // form parameter
            if (isEnable != null) localVarFormParams.Add("isEnable", this.Configuration.ApiClient.ParameterToString(isEnable)); // form parameter
            if (_virtual != null) localVarFormParams.Add("virtual", this.Configuration.ApiClient.ParameterToString(_virtual)); // form parameter
            if (sharingReceivers != null) localVarFormParams.Add("sharingReceivers", this.Configuration.ApiClient.ParameterToString(sharingReceivers)); // form parameter
            if (sharingDetails != null) localVarFormParams.Add("sharingDetails", this.Configuration.ApiClient.ParameterToString(sharingDetails)); // form parameter
            if (externalData != null) localVarFormParams.Add("externalData", this.Configuration.ApiClient.ParameterToString(externalData)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingUpdateSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>Task of SharingDTO</returns>
        public async System.Threading.Tasks.Task<SharingDTO> SharingUpdateSharingAsync (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData)
        {
             ApiResponse<SharingDTO> localVarResponse = await SharingUpdateSharingAsyncWithHttpInfo(sharingId, userId, creationDate, htmlForAccess, htmlForExpiration, urlForReceivers, sharingDefinitionId, documentTypeId, beginning, expiration, afterSend, repeatSendMail, repeatSendMailTime, repeatSendMailNumber, workflowAfterRead, workflowAfterExpiration, workflowAfterExpirationNotRead, alertForNoRead, alertForNoReadTime, disableAfterRead, deleteAfterExpiration, immediatlySend, sendTime, maxDownloadTime, detailsAsZip, defaultLanguage, downloadDirectly, sharingMode, mailDefinitions, shareName, shareDescription, isEnable, _virtual, sharingReceivers, sharingDetails, externalData);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <param name="userId"></param>
        /// <param name="creationDate"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="urlForReceivers"></param>
        /// <param name="sharingDefinitionId"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="shareName"></param>
        /// <param name="shareDescription"></param>
        /// <param name="isEnable"></param>
        /// <param name="_virtual"></param>
        /// <param name="sharingReceivers"></param>
        /// <param name="sharingDetails"></param>
        /// <param name="externalData"></param>
        /// <returns>Task of ApiResponse (SharingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDTO>> SharingUpdateSharingAsyncWithHttpInfo (string sharingId, int? userId, DateTime? creationDate, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, List<SharingReceiverUriDTO> urlForReceivers, string sharingDefinitionId, int? documentTypeId, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, int? sharingMode, List<SharingMailDTO> mailDefinitions, string shareName, string shareDescription, bool? isEnable, bool? _virtual, List<SharingReceiverDTO> sharingReceivers, List<SharingDetailDTO> sharingDetails, List<KeyValueDTO> externalData)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'creationDate' is set
            if (creationDate == null)
                throw new ApiException(400, "Missing required parameter 'creationDate' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'htmlForAccess' is set
            if (htmlForAccess == null)
                throw new ApiException(400, "Missing required parameter 'htmlForAccess' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'htmlForExpiration' is set
            if (htmlForExpiration == null)
                throw new ApiException(400, "Missing required parameter 'htmlForExpiration' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'urlForReceivers' is set
            if (urlForReceivers == null)
                throw new ApiException(400, "Missing required parameter 'urlForReceivers' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'sharingDefinitionId' is set
            if (sharingDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionId' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'beginning' is set
            if (beginning == null)
                throw new ApiException(400, "Missing required parameter 'beginning' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'expiration' is set
            if (expiration == null)
                throw new ApiException(400, "Missing required parameter 'expiration' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'afterSend' is set
            if (afterSend == null)
                throw new ApiException(400, "Missing required parameter 'afterSend' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'repeatSendMail' is set
            if (repeatSendMail == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMail' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'repeatSendMailTime' is set
            if (repeatSendMailTime == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailTime' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'repeatSendMailNumber' is set
            if (repeatSendMailNumber == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailNumber' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'workflowAfterRead' is set
            if (workflowAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterRead' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'workflowAfterExpiration' is set
            if (workflowAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpiration' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'workflowAfterExpirationNotRead' is set
            if (workflowAfterExpirationNotRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpirationNotRead' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'alertForNoRead' is set
            if (alertForNoRead == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoRead' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'alertForNoReadTime' is set
            if (alertForNoReadTime == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoReadTime' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'disableAfterRead' is set
            if (disableAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'disableAfterRead' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'deleteAfterExpiration' is set
            if (deleteAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'deleteAfterExpiration' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'immediatlySend' is set
            if (immediatlySend == null)
                throw new ApiException(400, "Missing required parameter 'immediatlySend' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'sendTime' is set
            if (sendTime == null)
                throw new ApiException(400, "Missing required parameter 'sendTime' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'maxDownloadTime' is set
            if (maxDownloadTime == null)
                throw new ApiException(400, "Missing required parameter 'maxDownloadTime' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'detailsAsZip' is set
            if (detailsAsZip == null)
                throw new ApiException(400, "Missing required parameter 'detailsAsZip' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'defaultLanguage' is set
            if (defaultLanguage == null)
                throw new ApiException(400, "Missing required parameter 'defaultLanguage' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'downloadDirectly' is set
            if (downloadDirectly == null)
                throw new ApiException(400, "Missing required parameter 'downloadDirectly' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'sharingMode' is set
            if (sharingMode == null)
                throw new ApiException(400, "Missing required parameter 'sharingMode' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'mailDefinitions' is set
            if (mailDefinitions == null)
                throw new ApiException(400, "Missing required parameter 'mailDefinitions' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'shareName' is set
            if (shareName == null)
                throw new ApiException(400, "Missing required parameter 'shareName' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'shareDescription' is set
            if (shareDescription == null)
                throw new ApiException(400, "Missing required parameter 'shareDescription' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'isEnable' is set
            if (isEnable == null)
                throw new ApiException(400, "Missing required parameter 'isEnable' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter '_virtual' is set
            if (_virtual == null)
                throw new ApiException(400, "Missing required parameter '_virtual' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'sharingReceivers' is set
            if (sharingReceivers == null)
                throw new ApiException(400, "Missing required parameter 'sharingReceivers' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'sharingDetails' is set
            if (sharingDetails == null)
                throw new ApiException(400, "Missing required parameter 'sharingDetails' when calling SharingApi->SharingUpdateSharing");
            // verify the required parameter 'externalData' is set
            if (externalData == null)
                throw new ApiException(400, "Missing required parameter 'externalData' when calling SharingApi->SharingUpdateSharing");

            var localVarPath = "/api/Sharing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarFormParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // form parameter
            if (userId != null) localVarFormParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // form parameter
            if (creationDate != null) localVarFormParams.Add("creationDate", this.Configuration.ApiClient.ParameterToString(creationDate)); // form parameter
            if (htmlForAccess != null) localVarFormParams.Add("htmlForAccess", this.Configuration.ApiClient.ParameterToString(htmlForAccess)); // form parameter
            if (htmlForExpiration != null) localVarFormParams.Add("htmlForExpiration", this.Configuration.ApiClient.ParameterToString(htmlForExpiration)); // form parameter
            if (urlForReceivers != null) localVarFormParams.Add("urlForReceivers", this.Configuration.ApiClient.ParameterToString(urlForReceivers)); // form parameter
            if (sharingDefinitionId != null) localVarFormParams.Add("sharingDefinitionId", this.Configuration.ApiClient.ParameterToString(sharingDefinitionId)); // form parameter
            if (documentTypeId != null) localVarFormParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // form parameter
            if (beginning != null) localVarFormParams.Add("beginning", this.Configuration.ApiClient.ParameterToString(beginning)); // form parameter
            if (expiration != null) localVarFormParams.Add("expiration", this.Configuration.ApiClient.ParameterToString(expiration)); // form parameter
            if (afterSend != null) localVarFormParams.Add("afterSend", this.Configuration.ApiClient.ParameterToString(afterSend)); // form parameter
            if (repeatSendMail != null) localVarFormParams.Add("repeatSendMail", this.Configuration.ApiClient.ParameterToString(repeatSendMail)); // form parameter
            if (repeatSendMailTime != null) localVarFormParams.Add("repeatSendMailTime", this.Configuration.ApiClient.ParameterToString(repeatSendMailTime)); // form parameter
            if (repeatSendMailNumber != null) localVarFormParams.Add("repeatSendMailNumber", this.Configuration.ApiClient.ParameterToString(repeatSendMailNumber)); // form parameter
            if (workflowAfterRead != null) localVarFormParams.Add("workflowAfterRead", this.Configuration.ApiClient.ParameterToString(workflowAfterRead)); // form parameter
            if (workflowAfterExpiration != null) localVarFormParams.Add("workflowAfterExpiration", this.Configuration.ApiClient.ParameterToString(workflowAfterExpiration)); // form parameter
            if (workflowAfterExpirationNotRead != null) localVarFormParams.Add("workflowAfterExpirationNotRead", this.Configuration.ApiClient.ParameterToString(workflowAfterExpirationNotRead)); // form parameter
            if (alertForNoRead != null) localVarFormParams.Add("alertForNoRead", this.Configuration.ApiClient.ParameterToString(alertForNoRead)); // form parameter
            if (alertForNoReadTime != null) localVarFormParams.Add("alertForNoReadTime", this.Configuration.ApiClient.ParameterToString(alertForNoReadTime)); // form parameter
            if (disableAfterRead != null) localVarFormParams.Add("disableAfterRead", this.Configuration.ApiClient.ParameterToString(disableAfterRead)); // form parameter
            if (deleteAfterExpiration != null) localVarFormParams.Add("deleteAfterExpiration", this.Configuration.ApiClient.ParameterToString(deleteAfterExpiration)); // form parameter
            if (immediatlySend != null) localVarFormParams.Add("immediatlySend", this.Configuration.ApiClient.ParameterToString(immediatlySend)); // form parameter
            if (sendTime != null) localVarFormParams.Add("sendTime", this.Configuration.ApiClient.ParameterToString(sendTime)); // form parameter
            if (maxDownloadTime != null) localVarFormParams.Add("maxDownloadTime", this.Configuration.ApiClient.ParameterToString(maxDownloadTime)); // form parameter
            if (detailsAsZip != null) localVarFormParams.Add("detailsAsZip", this.Configuration.ApiClient.ParameterToString(detailsAsZip)); // form parameter
            if (defaultLanguage != null) localVarFormParams.Add("defaultLanguage", this.Configuration.ApiClient.ParameterToString(defaultLanguage)); // form parameter
            if (downloadDirectly != null) localVarFormParams.Add("downloadDirectly", this.Configuration.ApiClient.ParameterToString(downloadDirectly)); // form parameter
            if (sharingMode != null) localVarFormParams.Add("sharingMode", this.Configuration.ApiClient.ParameterToString(sharingMode)); // form parameter
            if (mailDefinitions != null) localVarFormParams.Add("mailDefinitions", this.Configuration.ApiClient.ParameterToString(mailDefinitions)); // form parameter
            if (shareName != null) localVarFormParams.Add("shareName", this.Configuration.ApiClient.ParameterToString(shareName)); // form parameter
            if (shareDescription != null) localVarFormParams.Add("shareDescription", this.Configuration.ApiClient.ParameterToString(shareDescription)); // form parameter
            if (isEnable != null) localVarFormParams.Add("isEnable", this.Configuration.ApiClient.ParameterToString(isEnable)); // form parameter
            if (_virtual != null) localVarFormParams.Add("virtual", this.Configuration.ApiClient.ParameterToString(_virtual)); // form parameter
            if (sharingReceivers != null) localVarFormParams.Add("sharingReceivers", this.Configuration.ApiClient.ParameterToString(sharingReceivers)); // form parameter
            if (sharingDetails != null) localVarFormParams.Add("sharingDetails", this.Configuration.ApiClient.ParameterToString(sharingDetails)); // form parameter
            if (externalData != null) localVarFormParams.Add("externalData", this.Configuration.ApiClient.ParameterToString(externalData)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingUpdateSharing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? SharingUserConnectedIsConfigurationRole ()
        {
             ApiResponse<bool?> localVarResponse = SharingUserConnectedIsConfigurationRoleWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > SharingUserConnectedIsConfigurationRoleWithHttpInfo ()
        {

            var localVarPath = "/api/Sharing/Permissions/IsConfigurationRole";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingUserConnectedIsConfigurationRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> SharingUserConnectedIsConfigurationRoleAsync ()
        {
             ApiResponse<bool?> localVarResponse = await SharingUserConnectedIsConfigurationRoleAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> SharingUserConnectedIsConfigurationRoleAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Sharing/Permissions/IsConfigurationRole";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingUserConnectedIsConfigurationRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? SharingUserConnectedIsSharingManager ()
        {
             ApiResponse<bool?> localVarResponse = SharingUserConnectedIsSharingManagerWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > SharingUserConnectedIsSharingManagerWithHttpInfo ()
        {

            var localVarPath = "/api/Sharing/Permissions/IsSharingManager";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingUserConnectedIsSharingManager", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> SharingUserConnectedIsSharingManagerAsync ()
        {
             ApiResponse<bool?> localVarResponse = await SharingUserConnectedIsSharingManagerAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> SharingUserConnectedIsSharingManagerAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Sharing/Permissions/IsSharingManager";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingUserConnectedIsSharingManager", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

    }
}
