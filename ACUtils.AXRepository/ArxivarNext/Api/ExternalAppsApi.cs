/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IExternalAppsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Aborts a document edit session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <returns></returns>
        void ExternalAppsAbortDocument (string idDocument);

        /// <summary>
        /// Aborts a document edit session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExternalAppsAbortDocumentWithHttpInfo (string idDocument);
        /// <summary>
        /// Begins an edit of a docnumber in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EditDocumentResponseDTO</returns>
        EditDocumentResponseDTO ExternalAppsEditDocnumber (EditDocnumberRequestDTO body);

        /// <summary>
        /// Begins an edit of a docnumber in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EditDocumentResponseDTO</returns>
        ApiResponse<EditDocumentResponseDTO> ExternalAppsEditDocnumberWithHttpInfo (EditDocnumberRequestDTO body);
        /// <summary>
        /// Begins an edit of a docnumber in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="docnumber"></param>
        /// <param name="externalAppType"></param>
        /// <returns>EditDocumentResponseDTO</returns>
        EditDocumentResponseDTO ExternalAppsEditDocnumber (string accessToken, int? docnumber, int? externalAppType);

        /// <summary>
        /// Begins an edit of a docnumber in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="docnumber"></param>
        /// <param name="externalAppType"></param>
        /// <returns>ApiResponse of EditDocumentResponseDTO</returns>
        ApiResponse<EditDocumentResponseDTO> ExternalAppsEditDocnumberWithHttpInfo (string accessToken, int? docnumber, int? externalAppType);
        /// <summary>
        /// Begins an edit of a workflow document in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EditDocumentResponseDTO</returns>
        EditDocumentResponseDTO ExternalAppsEditProcessDoc (EditProcessDocRequestDTO body);

        /// <summary>
        /// Begins an edit of a workflow document in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EditDocumentResponseDTO</returns>
        ApiResponse<EditDocumentResponseDTO> ExternalAppsEditProcessDocWithHttpInfo (EditProcessDocRequestDTO body);
        /// <summary>
        /// Begins an edit of a workflow document in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="processDocId"></param>
        /// <param name="taskWorkId"></param>
        /// <param name="externalAppType"></param>
        /// <returns>EditDocumentResponseDTO</returns>
        EditDocumentResponseDTO ExternalAppsEditProcessDoc (string accessToken, int? processDocId, int? taskWorkId, int? externalAppType);

        /// <summary>
        /// Begins an edit of a workflow document in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="processDocId"></param>
        /// <param name="taskWorkId"></param>
        /// <param name="externalAppType"></param>
        /// <returns>ApiResponse of EditDocumentResponseDTO</returns>
        ApiResponse<EditDocumentResponseDTO> ExternalAppsEditProcessDocWithHttpInfo (string accessToken, int? processDocId, int? taskWorkId, int? externalAppType);
        /// <summary>
        /// Returns authorization parameters for retrieve access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>ExternalAppAuthParamsDTO</returns>
        ExternalAppAuthParamsDTO ExternalAppsGetExternalAppAuthParams (int? externalAppType);

        /// <summary>
        /// Returns authorization parameters for retrieve access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>ApiResponse of ExternalAppAuthParamsDTO</returns>
        ApiResponse<ExternalAppAuthParamsDTO> ExternalAppsGetExternalAppAuthParamsWithHttpInfo (int? externalAppType);
        /// <summary>
        /// Returns profilation options for a new office document in ARXivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>List&lt;ExternalAppProfilationModeDTO&gt;</returns>
        List<ExternalAppProfilationModeDTO> ExternalAppsGetProfilationOptions (int? externalAppType);

        /// <summary>
        /// Returns profilation options for a new office document in ARXivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>ApiResponse of List&lt;ExternalAppProfilationModeDTO&gt;</returns>
        ApiResponse<List<ExternalAppProfilationModeDTO>> ExternalAppsGetProfilationOptionsWithHttpInfo (int? externalAppType);
        /// <summary>
        /// Get information about a document edit session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument">Microsoft graph file object identifier</param>
        /// <returns>InfoDocumentResponseDTO</returns>
        InfoDocumentResponseDTO ExternalAppsInfoDocument (string idDocument);

        /// <summary>
        /// Get information about a document edit session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument">Microsoft graph file object identifier</param>
        /// <returns>ApiResponse of InfoDocumentResponseDTO</returns>
        ApiResponse<InfoDocumentResponseDTO> ExternalAppsInfoDocumentWithHttpInfo (string idDocument);
        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void ExternalAppsUpdateDocument (UpdateDocumentRequestDTO body);

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExternalAppsUpdateDocumentWithHttpInfo (UpdateDocumentRequestDTO body);
        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <param name="cacheFileId"></param>
        /// <param name="updateOption"></param>
        /// <returns></returns>
        void ExternalAppsUpdateDocument (string idDocument, string cacheFileId, int? updateOption);

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <param name="cacheFileId"></param>
        /// <param name="updateOption"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExternalAppsUpdateDocumentWithHttpInfo (string idDocument, string cacheFileId, int? updateOption);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Aborts a document edit session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExternalAppsAbortDocumentAsync (string idDocument);

        /// <summary>
        /// Aborts a document edit session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExternalAppsAbortDocumentAsyncWithHttpInfo (string idDocument);
        /// <summary>
        /// Begins an edit of a docnumber in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EditDocumentResponseDTO</returns>
        System.Threading.Tasks.Task<EditDocumentResponseDTO> ExternalAppsEditDocnumberAsync (EditDocnumberRequestDTO body);

        /// <summary>
        /// Begins an edit of a docnumber in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EditDocumentResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EditDocumentResponseDTO>> ExternalAppsEditDocnumberAsyncWithHttpInfo (EditDocnumberRequestDTO body);
        /// <summary>
        /// Begins an edit of a docnumber in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="docnumber"></param>
        /// <param name="externalAppType"></param>
        /// <returns>Task of EditDocumentResponseDTO</returns>
        System.Threading.Tasks.Task<EditDocumentResponseDTO> ExternalAppsEditDocnumberAsync (string accessToken, int? docnumber, int? externalAppType);

        /// <summary>
        /// Begins an edit of a docnumber in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="docnumber"></param>
        /// <param name="externalAppType"></param>
        /// <returns>Task of ApiResponse (EditDocumentResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EditDocumentResponseDTO>> ExternalAppsEditDocnumberAsyncWithHttpInfo (string accessToken, int? docnumber, int? externalAppType);
        /// <summary>
        /// Begins an edit of a workflow document in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EditDocumentResponseDTO</returns>
        System.Threading.Tasks.Task<EditDocumentResponseDTO> ExternalAppsEditProcessDocAsync (EditProcessDocRequestDTO body);

        /// <summary>
        /// Begins an edit of a workflow document in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EditDocumentResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EditDocumentResponseDTO>> ExternalAppsEditProcessDocAsyncWithHttpInfo (EditProcessDocRequestDTO body);
        /// <summary>
        /// Begins an edit of a workflow document in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="processDocId"></param>
        /// <param name="taskWorkId"></param>
        /// <param name="externalAppType"></param>
        /// <returns>Task of EditDocumentResponseDTO</returns>
        System.Threading.Tasks.Task<EditDocumentResponseDTO> ExternalAppsEditProcessDocAsync (string accessToken, int? processDocId, int? taskWorkId, int? externalAppType);

        /// <summary>
        /// Begins an edit of a workflow document in Office365
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="processDocId"></param>
        /// <param name="taskWorkId"></param>
        /// <param name="externalAppType"></param>
        /// <returns>Task of ApiResponse (EditDocumentResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EditDocumentResponseDTO>> ExternalAppsEditProcessDocAsyncWithHttpInfo (string accessToken, int? processDocId, int? taskWorkId, int? externalAppType);
        /// <summary>
        /// Returns authorization parameters for retrieve access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>Task of ExternalAppAuthParamsDTO</returns>
        System.Threading.Tasks.Task<ExternalAppAuthParamsDTO> ExternalAppsGetExternalAppAuthParamsAsync (int? externalAppType);

        /// <summary>
        /// Returns authorization parameters for retrieve access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>Task of ApiResponse (ExternalAppAuthParamsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalAppAuthParamsDTO>> ExternalAppsGetExternalAppAuthParamsAsyncWithHttpInfo (int? externalAppType);
        /// <summary>
        /// Returns profilation options for a new office document in ARXivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>Task of List&lt;ExternalAppProfilationModeDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ExternalAppProfilationModeDTO>> ExternalAppsGetProfilationOptionsAsync (int? externalAppType);

        /// <summary>
        /// Returns profilation options for a new office document in ARXivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>Task of ApiResponse (List&lt;ExternalAppProfilationModeDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExternalAppProfilationModeDTO>>> ExternalAppsGetProfilationOptionsAsyncWithHttpInfo (int? externalAppType);
        /// <summary>
        /// Get information about a document edit session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument">Microsoft graph file object identifier</param>
        /// <returns>Task of InfoDocumentResponseDTO</returns>
        System.Threading.Tasks.Task<InfoDocumentResponseDTO> ExternalAppsInfoDocumentAsync (string idDocument);

        /// <summary>
        /// Get information about a document edit session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument">Microsoft graph file object identifier</param>
        /// <returns>Task of ApiResponse (InfoDocumentResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<InfoDocumentResponseDTO>> ExternalAppsInfoDocumentAsyncWithHttpInfo (string idDocument);
        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExternalAppsUpdateDocumentAsync (UpdateDocumentRequestDTO body);

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExternalAppsUpdateDocumentAsyncWithHttpInfo (UpdateDocumentRequestDTO body);
        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <param name="cacheFileId"></param>
        /// <param name="updateOption"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExternalAppsUpdateDocumentAsync (string idDocument, string cacheFileId, int? updateOption);

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <param name="cacheFileId"></param>
        /// <param name="updateOption"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExternalAppsUpdateDocumentAsyncWithHttpInfo (string idDocument, string cacheFileId, int? updateOption);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ExternalAppsApi : IExternalAppsApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalAppsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExternalAppsApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalAppsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ExternalAppsApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalAppsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExternalAppsApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Aborts a document edit session 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <returns></returns>
        public void ExternalAppsAbortDocument (string idDocument)
        {
             ExternalAppsAbortDocumentWithHttpInfo(idDocument);
        }

        /// <summary>
        /// Aborts a document edit session 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExternalAppsAbortDocumentWithHttpInfo (string idDocument)
        {
            // verify the required parameter 'idDocument' is set
            if (idDocument == null)
                throw new ApiException(400, "Missing required parameter 'idDocument' when calling ExternalAppsApi->ExternalAppsAbortDocument");

            var localVarPath = "/api/ExternalApps/abortDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idDocument != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idDocument", idDocument)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsAbortDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Aborts a document edit session 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExternalAppsAbortDocumentAsync (string idDocument)
        {
             await ExternalAppsAbortDocumentAsyncWithHttpInfo(idDocument);

        }

        /// <summary>
        /// Aborts a document edit session 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExternalAppsAbortDocumentAsyncWithHttpInfo (string idDocument)
        {
            // verify the required parameter 'idDocument' is set
            if (idDocument == null)
                throw new ApiException(400, "Missing required parameter 'idDocument' when calling ExternalAppsApi->ExternalAppsAbortDocument");

            var localVarPath = "/api/ExternalApps/abortDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idDocument != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idDocument", idDocument)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsAbortDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Begins an edit of a docnumber in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EditDocumentResponseDTO</returns>
        public EditDocumentResponseDTO ExternalAppsEditDocnumber (EditDocnumberRequestDTO body)
        {
             ApiResponse<EditDocumentResponseDTO> localVarResponse = ExternalAppsEditDocnumberWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Begins an edit of a docnumber in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EditDocumentResponseDTO</returns>
        public ApiResponse< EditDocumentResponseDTO > ExternalAppsEditDocnumberWithHttpInfo (EditDocnumberRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalAppsApi->ExternalAppsEditDocnumber");

            var localVarPath = "/api/ExternalApps/editDocnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsEditDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditDocumentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EditDocumentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditDocumentResponseDTO)));
        }

        /// <summary>
        /// Begins an edit of a docnumber in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EditDocumentResponseDTO</returns>
        public async System.Threading.Tasks.Task<EditDocumentResponseDTO> ExternalAppsEditDocnumberAsync (EditDocnumberRequestDTO body)
        {
             ApiResponse<EditDocumentResponseDTO> localVarResponse = await ExternalAppsEditDocnumberAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Begins an edit of a docnumber in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EditDocumentResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EditDocumentResponseDTO>> ExternalAppsEditDocnumberAsyncWithHttpInfo (EditDocnumberRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalAppsApi->ExternalAppsEditDocnumber");

            var localVarPath = "/api/ExternalApps/editDocnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsEditDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditDocumentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EditDocumentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditDocumentResponseDTO)));
        }

        /// <summary>
        /// Begins an edit of a docnumber in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="docnumber"></param>
        /// <param name="externalAppType"></param>
        /// <returns>EditDocumentResponseDTO</returns>
        public EditDocumentResponseDTO ExternalAppsEditDocnumber (string accessToken, int? docnumber, int? externalAppType)
        {
             ApiResponse<EditDocumentResponseDTO> localVarResponse = ExternalAppsEditDocnumberWithHttpInfo(accessToken, docnumber, externalAppType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Begins an edit of a docnumber in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="docnumber"></param>
        /// <param name="externalAppType"></param>
        /// <returns>ApiResponse of EditDocumentResponseDTO</returns>
        public ApiResponse< EditDocumentResponseDTO > ExternalAppsEditDocnumberWithHttpInfo (string accessToken, int? docnumber, int? externalAppType)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ExternalAppsApi->ExternalAppsEditDocnumber");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling ExternalAppsApi->ExternalAppsEditDocnumber");
            // verify the required parameter 'externalAppType' is set
            if (externalAppType == null)
                throw new ApiException(400, "Missing required parameter 'externalAppType' when calling ExternalAppsApi->ExternalAppsEditDocnumber");

            var localVarPath = "/api/ExternalApps/editDocnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarFormParams.Add("accessToken", this.Configuration.ApiClient.ParameterToString(accessToken)); // form parameter
            if (docnumber != null) localVarFormParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // form parameter
            if (externalAppType != null) localVarFormParams.Add("externalAppType", this.Configuration.ApiClient.ParameterToString(externalAppType)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsEditDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditDocumentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EditDocumentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditDocumentResponseDTO)));
        }

        /// <summary>
        /// Begins an edit of a docnumber in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="docnumber"></param>
        /// <param name="externalAppType"></param>
        /// <returns>Task of EditDocumentResponseDTO</returns>
        public async System.Threading.Tasks.Task<EditDocumentResponseDTO> ExternalAppsEditDocnumberAsync (string accessToken, int? docnumber, int? externalAppType)
        {
             ApiResponse<EditDocumentResponseDTO> localVarResponse = await ExternalAppsEditDocnumberAsyncWithHttpInfo(accessToken, docnumber, externalAppType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Begins an edit of a docnumber in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="docnumber"></param>
        /// <param name="externalAppType"></param>
        /// <returns>Task of ApiResponse (EditDocumentResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EditDocumentResponseDTO>> ExternalAppsEditDocnumberAsyncWithHttpInfo (string accessToken, int? docnumber, int? externalAppType)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ExternalAppsApi->ExternalAppsEditDocnumber");
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling ExternalAppsApi->ExternalAppsEditDocnumber");
            // verify the required parameter 'externalAppType' is set
            if (externalAppType == null)
                throw new ApiException(400, "Missing required parameter 'externalAppType' when calling ExternalAppsApi->ExternalAppsEditDocnumber");

            var localVarPath = "/api/ExternalApps/editDocnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarFormParams.Add("accessToken", this.Configuration.ApiClient.ParameterToString(accessToken)); // form parameter
            if (docnumber != null) localVarFormParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // form parameter
            if (externalAppType != null) localVarFormParams.Add("externalAppType", this.Configuration.ApiClient.ParameterToString(externalAppType)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsEditDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditDocumentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EditDocumentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditDocumentResponseDTO)));
        }

        /// <summary>
        /// Begins an edit of a workflow document in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EditDocumentResponseDTO</returns>
        public EditDocumentResponseDTO ExternalAppsEditProcessDoc (EditProcessDocRequestDTO body)
        {
             ApiResponse<EditDocumentResponseDTO> localVarResponse = ExternalAppsEditProcessDocWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Begins an edit of a workflow document in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EditDocumentResponseDTO</returns>
        public ApiResponse< EditDocumentResponseDTO > ExternalAppsEditProcessDocWithHttpInfo (EditProcessDocRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalAppsApi->ExternalAppsEditProcessDoc");

            var localVarPath = "/api/ExternalApps/editProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsEditProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditDocumentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EditDocumentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditDocumentResponseDTO)));
        }

        /// <summary>
        /// Begins an edit of a workflow document in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EditDocumentResponseDTO</returns>
        public async System.Threading.Tasks.Task<EditDocumentResponseDTO> ExternalAppsEditProcessDocAsync (EditProcessDocRequestDTO body)
        {
             ApiResponse<EditDocumentResponseDTO> localVarResponse = await ExternalAppsEditProcessDocAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Begins an edit of a workflow document in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EditDocumentResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EditDocumentResponseDTO>> ExternalAppsEditProcessDocAsyncWithHttpInfo (EditProcessDocRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalAppsApi->ExternalAppsEditProcessDoc");

            var localVarPath = "/api/ExternalApps/editProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsEditProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditDocumentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EditDocumentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditDocumentResponseDTO)));
        }

        /// <summary>
        /// Begins an edit of a workflow document in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="processDocId"></param>
        /// <param name="taskWorkId"></param>
        /// <param name="externalAppType"></param>
        /// <returns>EditDocumentResponseDTO</returns>
        public EditDocumentResponseDTO ExternalAppsEditProcessDoc (string accessToken, int? processDocId, int? taskWorkId, int? externalAppType)
        {
             ApiResponse<EditDocumentResponseDTO> localVarResponse = ExternalAppsEditProcessDocWithHttpInfo(accessToken, processDocId, taskWorkId, externalAppType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Begins an edit of a workflow document in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="processDocId"></param>
        /// <param name="taskWorkId"></param>
        /// <param name="externalAppType"></param>
        /// <returns>ApiResponse of EditDocumentResponseDTO</returns>
        public ApiResponse< EditDocumentResponseDTO > ExternalAppsEditProcessDocWithHttpInfo (string accessToken, int? processDocId, int? taskWorkId, int? externalAppType)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ExternalAppsApi->ExternalAppsEditProcessDoc");
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling ExternalAppsApi->ExternalAppsEditProcessDoc");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling ExternalAppsApi->ExternalAppsEditProcessDoc");
            // verify the required parameter 'externalAppType' is set
            if (externalAppType == null)
                throw new ApiException(400, "Missing required parameter 'externalAppType' when calling ExternalAppsApi->ExternalAppsEditProcessDoc");

            var localVarPath = "/api/ExternalApps/editProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarFormParams.Add("accessToken", this.Configuration.ApiClient.ParameterToString(accessToken)); // form parameter
            if (processDocId != null) localVarFormParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // form parameter
            if (taskWorkId != null) localVarFormParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // form parameter
            if (externalAppType != null) localVarFormParams.Add("externalAppType", this.Configuration.ApiClient.ParameterToString(externalAppType)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsEditProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditDocumentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EditDocumentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditDocumentResponseDTO)));
        }

        /// <summary>
        /// Begins an edit of a workflow document in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="processDocId"></param>
        /// <param name="taskWorkId"></param>
        /// <param name="externalAppType"></param>
        /// <returns>Task of EditDocumentResponseDTO</returns>
        public async System.Threading.Tasks.Task<EditDocumentResponseDTO> ExternalAppsEditProcessDocAsync (string accessToken, int? processDocId, int? taskWorkId, int? externalAppType)
        {
             ApiResponse<EditDocumentResponseDTO> localVarResponse = await ExternalAppsEditProcessDocAsyncWithHttpInfo(accessToken, processDocId, taskWorkId, externalAppType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Begins an edit of a workflow document in Office365 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <param name="processDocId"></param>
        /// <param name="taskWorkId"></param>
        /// <param name="externalAppType"></param>
        /// <returns>Task of ApiResponse (EditDocumentResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EditDocumentResponseDTO>> ExternalAppsEditProcessDocAsyncWithHttpInfo (string accessToken, int? processDocId, int? taskWorkId, int? externalAppType)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ExternalAppsApi->ExternalAppsEditProcessDoc");
            // verify the required parameter 'processDocId' is set
            if (processDocId == null)
                throw new ApiException(400, "Missing required parameter 'processDocId' when calling ExternalAppsApi->ExternalAppsEditProcessDoc");
            // verify the required parameter 'taskWorkId' is set
            if (taskWorkId == null)
                throw new ApiException(400, "Missing required parameter 'taskWorkId' when calling ExternalAppsApi->ExternalAppsEditProcessDoc");
            // verify the required parameter 'externalAppType' is set
            if (externalAppType == null)
                throw new ApiException(400, "Missing required parameter 'externalAppType' when calling ExternalAppsApi->ExternalAppsEditProcessDoc");

            var localVarPath = "/api/ExternalApps/editProcessDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarFormParams.Add("accessToken", this.Configuration.ApiClient.ParameterToString(accessToken)); // form parameter
            if (processDocId != null) localVarFormParams.Add("processDocId", this.Configuration.ApiClient.ParameterToString(processDocId)); // form parameter
            if (taskWorkId != null) localVarFormParams.Add("taskWorkId", this.Configuration.ApiClient.ParameterToString(taskWorkId)); // form parameter
            if (externalAppType != null) localVarFormParams.Add("externalAppType", this.Configuration.ApiClient.ParameterToString(externalAppType)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsEditProcessDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EditDocumentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EditDocumentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EditDocumentResponseDTO)));
        }

        /// <summary>
        /// Returns authorization parameters for retrieve access token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>ExternalAppAuthParamsDTO</returns>
        public ExternalAppAuthParamsDTO ExternalAppsGetExternalAppAuthParams (int? externalAppType)
        {
             ApiResponse<ExternalAppAuthParamsDTO> localVarResponse = ExternalAppsGetExternalAppAuthParamsWithHttpInfo(externalAppType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns authorization parameters for retrieve access token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>ApiResponse of ExternalAppAuthParamsDTO</returns>
        public ApiResponse< ExternalAppAuthParamsDTO > ExternalAppsGetExternalAppAuthParamsWithHttpInfo (int? externalAppType)
        {
            // verify the required parameter 'externalAppType' is set
            if (externalAppType == null)
                throw new ApiException(400, "Missing required parameter 'externalAppType' when calling ExternalAppsApi->ExternalAppsGetExternalAppAuthParams");

            var localVarPath = "/api/ExternalApps/authParams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalAppType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalAppType", externalAppType)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsGetExternalAppAuthParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAppAuthParamsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExternalAppAuthParamsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAppAuthParamsDTO)));
        }

        /// <summary>
        /// Returns authorization parameters for retrieve access token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>Task of ExternalAppAuthParamsDTO</returns>
        public async System.Threading.Tasks.Task<ExternalAppAuthParamsDTO> ExternalAppsGetExternalAppAuthParamsAsync (int? externalAppType)
        {
             ApiResponse<ExternalAppAuthParamsDTO> localVarResponse = await ExternalAppsGetExternalAppAuthParamsAsyncWithHttpInfo(externalAppType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns authorization parameters for retrieve access token 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>Task of ApiResponse (ExternalAppAuthParamsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalAppAuthParamsDTO>> ExternalAppsGetExternalAppAuthParamsAsyncWithHttpInfo (int? externalAppType)
        {
            // verify the required parameter 'externalAppType' is set
            if (externalAppType == null)
                throw new ApiException(400, "Missing required parameter 'externalAppType' when calling ExternalAppsApi->ExternalAppsGetExternalAppAuthParams");

            var localVarPath = "/api/ExternalApps/authParams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalAppType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalAppType", externalAppType)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsGetExternalAppAuthParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAppAuthParamsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExternalAppAuthParamsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAppAuthParamsDTO)));
        }

        /// <summary>
        /// Returns profilation options for a new office document in ARXivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>List&lt;ExternalAppProfilationModeDTO&gt;</returns>
        public List<ExternalAppProfilationModeDTO> ExternalAppsGetProfilationOptions (int? externalAppType)
        {
             ApiResponse<List<ExternalAppProfilationModeDTO>> localVarResponse = ExternalAppsGetProfilationOptionsWithHttpInfo(externalAppType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns profilation options for a new office document in ARXivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>ApiResponse of List&lt;ExternalAppProfilationModeDTO&gt;</returns>
        public ApiResponse< List<ExternalAppProfilationModeDTO> > ExternalAppsGetProfilationOptionsWithHttpInfo (int? externalAppType)
        {
            // verify the required parameter 'externalAppType' is set
            if (externalAppType == null)
                throw new ApiException(400, "Missing required parameter 'externalAppType' when calling ExternalAppsApi->ExternalAppsGetProfilationOptions");

            var localVarPath = "/api/ExternalApps/profilationOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalAppType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalAppType", externalAppType)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsGetProfilationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExternalAppProfilationModeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExternalAppProfilationModeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExternalAppProfilationModeDTO>)));
        }

        /// <summary>
        /// Returns profilation options for a new office document in ARXivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>Task of List&lt;ExternalAppProfilationModeDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExternalAppProfilationModeDTO>> ExternalAppsGetProfilationOptionsAsync (int? externalAppType)
        {
             ApiResponse<List<ExternalAppProfilationModeDTO>> localVarResponse = await ExternalAppsGetProfilationOptionsAsyncWithHttpInfo(externalAppType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns profilation options for a new office document in ARXivar 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAppType">Possible values:  0: Office365 </param>
        /// <returns>Task of ApiResponse (List&lt;ExternalAppProfilationModeDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExternalAppProfilationModeDTO>>> ExternalAppsGetProfilationOptionsAsyncWithHttpInfo (int? externalAppType)
        {
            // verify the required parameter 'externalAppType' is set
            if (externalAppType == null)
                throw new ApiException(400, "Missing required parameter 'externalAppType' when calling ExternalAppsApi->ExternalAppsGetProfilationOptions");

            var localVarPath = "/api/ExternalApps/profilationOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalAppType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalAppType", externalAppType)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsGetProfilationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExternalAppProfilationModeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExternalAppProfilationModeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExternalAppProfilationModeDTO>)));
        }

        /// <summary>
        /// Get information about a document edit session 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument">Microsoft graph file object identifier</param>
        /// <returns>InfoDocumentResponseDTO</returns>
        public InfoDocumentResponseDTO ExternalAppsInfoDocument (string idDocument)
        {
             ApiResponse<InfoDocumentResponseDTO> localVarResponse = ExternalAppsInfoDocumentWithHttpInfo(idDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about a document edit session 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument">Microsoft graph file object identifier</param>
        /// <returns>ApiResponse of InfoDocumentResponseDTO</returns>
        public ApiResponse< InfoDocumentResponseDTO > ExternalAppsInfoDocumentWithHttpInfo (string idDocument)
        {
            // verify the required parameter 'idDocument' is set
            if (idDocument == null)
                throw new ApiException(400, "Missing required parameter 'idDocument' when calling ExternalAppsApi->ExternalAppsInfoDocument");

            var localVarPath = "/api/ExternalApps/infoDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idDocument != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idDocument", idDocument)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsInfoDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InfoDocumentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InfoDocumentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InfoDocumentResponseDTO)));
        }

        /// <summary>
        /// Get information about a document edit session 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument">Microsoft graph file object identifier</param>
        /// <returns>Task of InfoDocumentResponseDTO</returns>
        public async System.Threading.Tasks.Task<InfoDocumentResponseDTO> ExternalAppsInfoDocumentAsync (string idDocument)
        {
             ApiResponse<InfoDocumentResponseDTO> localVarResponse = await ExternalAppsInfoDocumentAsyncWithHttpInfo(idDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about a document edit session 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument">Microsoft graph file object identifier</param>
        /// <returns>Task of ApiResponse (InfoDocumentResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InfoDocumentResponseDTO>> ExternalAppsInfoDocumentAsyncWithHttpInfo (string idDocument)
        {
            // verify the required parameter 'idDocument' is set
            if (idDocument == null)
                throw new ApiException(400, "Missing required parameter 'idDocument' when calling ExternalAppsApi->ExternalAppsInfoDocument");

            var localVarPath = "/api/ExternalApps/infoDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idDocument != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idDocument", idDocument)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsInfoDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InfoDocumentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InfoDocumentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InfoDocumentResponseDTO)));
        }

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void ExternalAppsUpdateDocument (UpdateDocumentRequestDTO body)
        {
             ExternalAppsUpdateDocumentWithHttpInfo(body);
        }

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExternalAppsUpdateDocumentWithHttpInfo (UpdateDocumentRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalAppsApi->ExternalAppsUpdateDocument");

            var localVarPath = "/api/ExternalApps/updateDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsUpdateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExternalAppsUpdateDocumentAsync (UpdateDocumentRequestDTO body)
        {
             await ExternalAppsUpdateDocumentAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExternalAppsUpdateDocumentAsyncWithHttpInfo (UpdateDocumentRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalAppsApi->ExternalAppsUpdateDocument");

            var localVarPath = "/api/ExternalApps/updateDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsUpdateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <param name="cacheFileId"></param>
        /// <param name="updateOption"></param>
        /// <returns></returns>
        public void ExternalAppsUpdateDocument (string idDocument, string cacheFileId, int? updateOption)
        {
             ExternalAppsUpdateDocumentWithHttpInfo(idDocument, cacheFileId, updateOption);
        }

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <param name="cacheFileId"></param>
        /// <param name="updateOption"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExternalAppsUpdateDocumentWithHttpInfo (string idDocument, string cacheFileId, int? updateOption)
        {
            // verify the required parameter 'idDocument' is set
            if (idDocument == null)
                throw new ApiException(400, "Missing required parameter 'idDocument' when calling ExternalAppsApi->ExternalAppsUpdateDocument");
            // verify the required parameter 'cacheFileId' is set
            if (cacheFileId == null)
                throw new ApiException(400, "Missing required parameter 'cacheFileId' when calling ExternalAppsApi->ExternalAppsUpdateDocument");
            // verify the required parameter 'updateOption' is set
            if (updateOption == null)
                throw new ApiException(400, "Missing required parameter 'updateOption' when calling ExternalAppsApi->ExternalAppsUpdateDocument");

            var localVarPath = "/api/ExternalApps/updateDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idDocument != null) localVarFormParams.Add("idDocument", this.Configuration.ApiClient.ParameterToString(idDocument)); // form parameter
            if (cacheFileId != null) localVarFormParams.Add("cacheFileId", this.Configuration.ApiClient.ParameterToString(cacheFileId)); // form parameter
            if (updateOption != null) localVarFormParams.Add("updateOption", this.Configuration.ApiClient.ParameterToString(updateOption)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsUpdateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <param name="cacheFileId"></param>
        /// <param name="updateOption"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExternalAppsUpdateDocumentAsync (string idDocument, string cacheFileId, int? updateOption)
        {
             await ExternalAppsUpdateDocumentAsyncWithHttpInfo(idDocument, cacheFileId, updateOption);

        }

        /// <summary>
        /// Updates a document within an edit session. Retrieves the document from Microsoft Graph and update the ARXivar document 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idDocument"></param>
        /// <param name="cacheFileId"></param>
        /// <param name="updateOption"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExternalAppsUpdateDocumentAsyncWithHttpInfo (string idDocument, string cacheFileId, int? updateOption)
        {
            // verify the required parameter 'idDocument' is set
            if (idDocument == null)
                throw new ApiException(400, "Missing required parameter 'idDocument' when calling ExternalAppsApi->ExternalAppsUpdateDocument");
            // verify the required parameter 'cacheFileId' is set
            if (cacheFileId == null)
                throw new ApiException(400, "Missing required parameter 'cacheFileId' when calling ExternalAppsApi->ExternalAppsUpdateDocument");
            // verify the required parameter 'updateOption' is set
            if (updateOption == null)
                throw new ApiException(400, "Missing required parameter 'updateOption' when calling ExternalAppsApi->ExternalAppsUpdateDocument");

            var localVarPath = "/api/ExternalApps/updateDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idDocument != null) localVarFormParams.Add("idDocument", this.Configuration.ApiClient.ParameterToString(idDocument)); // form parameter
            if (cacheFileId != null) localVarFormParams.Add("cacheFileId", this.Configuration.ApiClient.ParameterToString(cacheFileId)); // form parameter
            if (updateOption != null) localVarFormParams.Add("updateOption", this.Configuration.ApiClient.ParameterToString(updateOption)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalAppsUpdateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
