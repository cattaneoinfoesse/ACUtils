/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAddressBookApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns true if the connected user can edit an address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of the address book</param>
        /// <returns>bool?</returns>
        bool? AddressBookAddressBookCanWriteByAddressBookId (int? addressbookId);

        /// <summary>
        /// This call returns true if the connected user can edit an address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of the address book</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> AddressBookAddressBookCanWriteByAddressBookIdWithHttpInfo (int? addressbookId);
        /// <summary>
        /// This call returns true if the connected user can edit address books of a specified category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of address book category</param>
        /// <returns>bool?</returns>
        bool? AddressBookAddressBookCanWriteByCategoryId (int? addressbookCategoryId);

        /// <summary>
        /// This call returns true if the connected user can edit address books of a specified category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of address book category</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> AddressBookAddressBookCanWriteByCategoryIdWithHttpInfo (int? addressbookCategoryId);
        /// <summary>
        /// This call deletes an addressbook by its Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">AddressBook Id</param>
        /// <returns></returns>
        void AddressBookDeleteAddressBook (int? addressBookId);

        /// <summary>
        /// This call deletes an addressbook by its Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">AddressBook Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddressBookDeleteAddressBookWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call deletes addressbooks by their ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns></returns>
        void AddressBookDeleteAddressBook_0 (List<int?> body);

        /// <summary>
        /// This call deletes addressbooks by their ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddressBookDeleteAddressBook_0WithHttpInfo (List<int?> body);
        /// <summary>
        /// This call deletes a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of contact to delete</param>
        /// <returns></returns>
        void AddressBookDeleteContact (int? contactId);

        /// <summary>
        /// This call deletes a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of contact to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddressBookDeleteContactWithHttpInfo (int? contactId);
        /// <summary>
        /// This call deletes contacts by their ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns></returns>
        void AddressBookDeleteContact_0 (List<int?> body);

        /// <summary>
        /// This call deletes contacts by their ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddressBookDeleteContact_0WithHttpInfo (List<int?> body);
        /// <summary>
        /// This call returns the values for combo box address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">The field name of the combo</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> AddressBookGetAddressBookComboFieldValues (string fieldName);

        /// <summary>
        /// This call returns the values for combo box address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">The field name of the combo</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> AddressBookGetAddressBookComboFieldValuesWithHttpInfo (string fieldName);
        /// <summary>
        /// This call returns new profile data (for archiving purpose) by address book identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>UserProfileDTO</returns>
        UserProfileDTO AddressBookGetByAddressBookId (int? addressBookId, int? type);

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by address book identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        ApiResponse<UserProfileDTO> AddressBookGetByAddressBookIdWithHttpInfo (int? addressBookId, int? type);
        /// <summary>
        /// This call returns new profile data (for archiving purpose) by contact identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of the contact</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>UserProfileDTO</returns>
        UserProfileDTO AddressBookGetByContactId (int? contactId, int? type);

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by contact identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of the contact</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        ApiResponse<UserProfileDTO> AddressBookGetByContactIdWithHttpInfo (int? contactId, int? type);
        /// <summary>
        /// This call returns an adressbook by the identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <returns>AddressBookDTO</returns>
        AddressBookDTO AddressBookGetById (int? addressBookId);

        /// <summary>
        /// This call returns an adressbook by the identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        ApiResponse<AddressBookDTO> AddressBookGetByIdWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call returns new profile data (for archiving purpose) by user identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Identifier of the user</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>UserProfileDTO</returns>
        UserProfileDTO AddressBookGetByUserId (int? userId, int? type);

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by user identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Identifier of the user</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        ApiResponse<UserProfileDTO> AddressBookGetByUserIdWithHttpInfo (int? userId, int? type);
        /// <summary>
        /// This call returns new AddreBookDTO object for insert purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AddressBookDTO</returns>
        AddressBookDTO AddressBookGetForInsert ();

        /// <summary>
        /// This call returns new AddreBookDTO object for insert purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        ApiResponse<AddressBookDTO> AddressBookGetForInsertWithHttpInfo ();
        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>AddressBookDTO</returns>
        AddressBookDTO AddressBookGetForInsert_0 (int? addressbookCategoryId);

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        ApiResponse<AddressBookDTO> AddressBookGetForInsert_0WithHttpInfo (int? addressbookCategoryId);
        /// <summary>
        /// This call returns all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>PermissionsDTO</returns>
        PermissionsDTO AddressBookGetPermissionByAddrebookId (int? addressBookId);

        /// <summary>
        /// This call returns all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        ApiResponse<PermissionsDTO> AddressBookGetPermissionByAddrebookIdWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call returns all the possible fields for search in address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        List<RubricaFieldDTO> AddressBookGetSearchField ();

        /// <summary>
        /// This call returns all the possible fields for search in address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        ApiResponse<List<RubricaFieldDTO>> AddressBookGetSearchFieldWithHttpInfo ();
        /// <summary>
        /// This call returns all the possible select fields for search in address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        List<RubricaFieldDTO> AddressBookGetSelectField ();

        /// <summary>
        /// This call returns all the possible select fields for search in address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        ApiResponse<List<RubricaFieldDTO>> AddressBookGetSelectFieldWithHttpInfo ();
        /// <summary>
        /// This call returns user permissions for an AddressBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>UserPermissionsDTO</returns>
        UserPermissionsDTO AddressBookGetUserPermissionByAddrebookId (int? addressBookId);

        /// <summary>
        /// This call returns user permissions for an AddressBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>ApiResponse of UserPermissionsDTO</returns>
        ApiResponse<UserPermissionsDTO> AddressBookGetUserPermissionByAddrebookIdWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>AddressBookDTO</returns>
        AddressBookDTO AddressBookInsertAddressBook (AddressBookDTO body);

        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        ApiResponse<AddressBookDTO> AddressBookInsertAddressBookWithHttpInfo (AddressBookDTO body);
        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>AddressBookDTO</returns>
        AddressBookDTO AddressBookInsertAddressBook (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields);

        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        ApiResponse<AddressBookDTO> AddressBookInsertAddressBookWithHttpInfo (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields);
        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>List&lt;AddressBookDTO&gt;</returns>
        List<AddressBookDTO> AddressBookInsertAddressBook_0 (List<AddressBookDTO> body);

        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>ApiResponse of List&lt;AddressBookDTO&gt;</returns>
        ApiResponse<List<AddressBookDTO>> AddressBookInsertAddressBook_0WithHttpInfo (List<AddressBookDTO> body);
        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>ContactDTO</returns>
        ContactDTO AddressBookInsertContact (ContactDTO body);

        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>ApiResponse of ContactDTO</returns>
        ApiResponse<ContactDTO> AddressBookInsertContactWithHttpInfo (ContactDTO body);
        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ContactDTO</returns>
        ContactDTO AddressBookInsertContact (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);

        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactDTO</returns>
        ApiResponse<ContactDTO> AddressBookInsertContactWithHttpInfo (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);
        /// <summary>
        /// This call searches address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The fields of the search</param>
        /// <returns>AddressBookSearchResultDTO</returns>
        AddressBookSearchResultDTO AddressBookPostSearch (AddressBookSearchCriteriaDTO body);

        /// <summary>
        /// This call searches address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The fields of the search</param>
        /// <returns>ApiResponse of AddressBookSearchResultDTO</returns>
        ApiResponse<AddressBookSearchResultDTO> AddressBookPostSearchWithHttpInfo (AddressBookSearchCriteriaDTO body);
        /// <summary>
        /// This call searches address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="filterFields"></param>
        /// <param name="selectFields"></param>
        /// <param name="filter"></param>
        /// <returns>AddressBookSearchResultDTO</returns>
        AddressBookSearchResultDTO AddressBookPostSearch (int? addressBookCategoryId, List<RubricaFieldDTO> filterFields, List<RubricaFieldDTO> selectFields, string filter);

        /// <summary>
        /// This call searches address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="filterFields"></param>
        /// <param name="selectFields"></param>
        /// <param name="filter"></param>
        /// <returns>ApiResponse of AddressBookSearchResultDTO</returns>
        ApiResponse<AddressBookSearchResultDTO> AddressBookPostSearchWithHttpInfo (int? addressBookCategoryId, List<RubricaFieldDTO> filterFields, List<RubricaFieldDTO> selectFields, string filter);
        /// <summary>
        /// This call saves the select fields with the user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of select fields</param>
        /// <returns></returns>
        void AddressBookPutSelectField (List<RubricaFieldDTO> body);

        /// <summary>
        /// This call saves the select fields with the user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of select fields</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddressBookPutSelectFieldWithHttpInfo (List<RubricaFieldDTO> body);
        /// <summary>
        /// This call saves all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns></returns>
        void AddressBookSetPermissionByAddrebookId (PermissionsDTO body, int? addressBookId);

        /// <summary>
        /// This call saves all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddressBookSetPermissionByAddrebookIdWithHttpInfo (PermissionsDTO body, int? addressBookId);
        /// <summary>
        /// This call saves all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns></returns>
        void AddressBookSetPermissionByAddrebookId (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? addressBookId);

        /// <summary>
        /// This call saves all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddressBookSetPermissionByAddrebookIdWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? addressBookId);
        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>AddressBookDTO</returns>
        AddressBookDTO AddressBookUpdateAddressBook (AddressBookDTO body, int? addressbookId);

        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        ApiResponse<AddressBookDTO> AddressBookUpdateAddressBookWithHttpInfo (AddressBookDTO body, int? addressbookId);
        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>AddressBookDTO</returns>
        AddressBookDTO AddressBookUpdateAddressBook (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId);

        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        ApiResponse<AddressBookDTO> AddressBookUpdateAddressBookWithHttpInfo (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId);
        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>ContactDTO</returns>
        ContactDTO AddressBookUpdateContact (ContactDTO body);

        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>ApiResponse of ContactDTO</returns>
        ApiResponse<ContactDTO> AddressBookUpdateContactWithHttpInfo (ContactDTO body);
        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ContactDTO</returns>
        ContactDTO AddressBookUpdateContact (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);

        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactDTO</returns>
        ApiResponse<ContactDTO> AddressBookUpdateContactWithHttpInfo (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns true if the connected user can edit an address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of the address book</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> AddressBookAddressBookCanWriteByAddressBookIdAsync (int? addressbookId);

        /// <summary>
        /// This call returns true if the connected user can edit an address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of the address book</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> AddressBookAddressBookCanWriteByAddressBookIdAsyncWithHttpInfo (int? addressbookId);
        /// <summary>
        /// This call returns true if the connected user can edit address books of a specified category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of address book category</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> AddressBookAddressBookCanWriteByCategoryIdAsync (int? addressbookCategoryId);

        /// <summary>
        /// This call returns true if the connected user can edit address books of a specified category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of address book category</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> AddressBookAddressBookCanWriteByCategoryIdAsyncWithHttpInfo (int? addressbookCategoryId);
        /// <summary>
        /// This call deletes an addressbook by its Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">AddressBook Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddressBookDeleteAddressBookAsync (int? addressBookId);

        /// <summary>
        /// This call deletes an addressbook by its Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">AddressBook Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookDeleteAddressBookAsyncWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call deletes addressbooks by their ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddressBookDeleteAddressBook_0Async (List<int?> body);

        /// <summary>
        /// This call deletes addressbooks by their ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookDeleteAddressBook_0AsyncWithHttpInfo (List<int?> body);
        /// <summary>
        /// This call deletes a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of contact to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddressBookDeleteContactAsync (int? contactId);

        /// <summary>
        /// This call deletes a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of contact to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookDeleteContactAsyncWithHttpInfo (int? contactId);
        /// <summary>
        /// This call deletes contacts by their ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddressBookDeleteContact_0Async (List<int?> body);

        /// <summary>
        /// This call deletes contacts by their ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookDeleteContact_0AsyncWithHttpInfo (List<int?> body);
        /// <summary>
        /// This call returns the values for combo box address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">The field name of the combo</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> AddressBookGetAddressBookComboFieldValuesAsync (string fieldName);

        /// <summary>
        /// This call returns the values for combo box address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">The field name of the combo</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> AddressBookGetAddressBookComboFieldValuesAsyncWithHttpInfo (string fieldName);
        /// <summary>
        /// This call returns new profile data (for archiving purpose) by address book identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of UserProfileDTO</returns>
        System.Threading.Tasks.Task<UserProfileDTO> AddressBookGetByAddressBookIdAsync (int? addressBookId, int? type);

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by address book identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> AddressBookGetByAddressBookIdAsyncWithHttpInfo (int? addressBookId, int? type);
        /// <summary>
        /// This call returns new profile data (for archiving purpose) by contact identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of the contact</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of UserProfileDTO</returns>
        System.Threading.Tasks.Task<UserProfileDTO> AddressBookGetByContactIdAsync (int? contactId, int? type);

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by contact identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of the contact</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> AddressBookGetByContactIdAsyncWithHttpInfo (int? contactId, int? type);
        /// <summary>
        /// This call returns an adressbook by the identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <returns>Task of AddressBookDTO</returns>
        System.Threading.Tasks.Task<AddressBookDTO> AddressBookGetByIdAsync (int? addressBookId);

        /// <summary>
        /// This call returns an adressbook by the identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookGetByIdAsyncWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call returns new profile data (for archiving purpose) by user identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Identifier of the user</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of UserProfileDTO</returns>
        System.Threading.Tasks.Task<UserProfileDTO> AddressBookGetByUserIdAsync (int? userId, int? type);

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by user identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Identifier of the user</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> AddressBookGetByUserIdAsyncWithHttpInfo (int? userId, int? type);
        /// <summary>
        /// This call returns new AddreBookDTO object for insert purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AddressBookDTO</returns>
        System.Threading.Tasks.Task<AddressBookDTO> AddressBookGetForInsertAsync ();

        /// <summary>
        /// This call returns new AddreBookDTO object for insert purpose
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookGetForInsertAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of AddressBookDTO</returns>
        System.Threading.Tasks.Task<AddressBookDTO> AddressBookGetForInsert_0Async (int? addressbookCategoryId);

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookGetForInsert_0AsyncWithHttpInfo (int? addressbookCategoryId);
        /// <summary>
        /// This call returns all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of PermissionsDTO</returns>
        System.Threading.Tasks.Task<PermissionsDTO> AddressBookGetPermissionByAddrebookIdAsync (int? addressBookId);

        /// <summary>
        /// This call returns all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> AddressBookGetPermissionByAddrebookIdAsyncWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call returns all the possible fields for search in address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookGetSearchFieldAsync ();

        /// <summary>
        /// This call returns all the possible fields for search in address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookGetSearchFieldAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns all the possible select fields for search in address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookGetSelectFieldAsync ();

        /// <summary>
        /// This call returns all the possible select fields for search in address book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookGetSelectFieldAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns user permissions for an AddressBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of UserPermissionsDTO</returns>
        System.Threading.Tasks.Task<UserPermissionsDTO> AddressBookGetUserPermissionByAddrebookIdAsync (int? addressBookId);

        /// <summary>
        /// This call returns user permissions for an AddressBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of ApiResponse (UserPermissionsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPermissionsDTO>> AddressBookGetUserPermissionByAddrebookIdAsyncWithHttpInfo (int? addressBookId);
        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>Task of AddressBookDTO</returns>
        System.Threading.Tasks.Task<AddressBookDTO> AddressBookInsertAddressBookAsync (AddressBookDTO body);

        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookInsertAddressBookAsyncWithHttpInfo (AddressBookDTO body);
        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>Task of AddressBookDTO</returns>
        System.Threading.Tasks.Task<AddressBookDTO> AddressBookInsertAddressBookAsync (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields);

        /// <summary>
        /// This call inserts new addres book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookInsertAddressBookAsyncWithHttpInfo (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields);
        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>Task of List&lt;AddressBookDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AddressBookDTO>> AddressBookInsertAddressBook_0Async (List<AddressBookDTO> body);

        /// <summary>
        /// This call inserts new address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>Task of ApiResponse (List&lt;AddressBookDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AddressBookDTO>>> AddressBookInsertAddressBook_0AsyncWithHttpInfo (List<AddressBookDTO> body);
        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>Task of ContactDTO</returns>
        System.Threading.Tasks.Task<ContactDTO> AddressBookInsertContactAsync (ContactDTO body);

        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>Task of ApiResponse (ContactDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactDTO>> AddressBookInsertContactAsyncWithHttpInfo (ContactDTO body);
        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ContactDTO</returns>
        System.Threading.Tasks.Task<ContactDTO> AddressBookInsertContactAsync (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);

        /// <summary>
        /// This call inserts new contact of a address book item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactDTO>> AddressBookInsertContactAsyncWithHttpInfo (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);
        /// <summary>
        /// This call searches address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The fields of the search</param>
        /// <returns>Task of AddressBookSearchResultDTO</returns>
        System.Threading.Tasks.Task<AddressBookSearchResultDTO> AddressBookPostSearchAsync (AddressBookSearchCriteriaDTO body);

        /// <summary>
        /// This call searches address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The fields of the search</param>
        /// <returns>Task of ApiResponse (AddressBookSearchResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookSearchResultDTO>> AddressBookPostSearchAsyncWithHttpInfo (AddressBookSearchCriteriaDTO body);
        /// <summary>
        /// This call searches address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="filterFields"></param>
        /// <param name="selectFields"></param>
        /// <param name="filter"></param>
        /// <returns>Task of AddressBookSearchResultDTO</returns>
        System.Threading.Tasks.Task<AddressBookSearchResultDTO> AddressBookPostSearchAsync (int? addressBookCategoryId, List<RubricaFieldDTO> filterFields, List<RubricaFieldDTO> selectFields, string filter);

        /// <summary>
        /// This call searches address book items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="filterFields"></param>
        /// <param name="selectFields"></param>
        /// <param name="filter"></param>
        /// <returns>Task of ApiResponse (AddressBookSearchResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookSearchResultDTO>> AddressBookPostSearchAsyncWithHttpInfo (int? addressBookCategoryId, List<RubricaFieldDTO> filterFields, List<RubricaFieldDTO> selectFields, string filter);
        /// <summary>
        /// This call saves the select fields with the user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of select fields</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddressBookPutSelectFieldAsync (List<RubricaFieldDTO> body);

        /// <summary>
        /// This call saves the select fields with the user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of select fields</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookPutSelectFieldAsyncWithHttpInfo (List<RubricaFieldDTO> body);
        /// <summary>
        /// This call saves all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddressBookSetPermissionByAddrebookIdAsync (PermissionsDTO body, int? addressBookId);

        /// <summary>
        /// This call saves all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookSetPermissionByAddrebookIdAsyncWithHttpInfo (PermissionsDTO body, int? addressBookId);
        /// <summary>
        /// This call saves all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddressBookSetPermissionByAddrebookIdAsync (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? addressBookId);

        /// <summary>
        /// This call saves all permissions for an AddreBook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookSetPermissionByAddrebookIdAsyncWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? addressBookId);
        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of AddressBookDTO</returns>
        System.Threading.Tasks.Task<AddressBookDTO> AddressBookUpdateAddressBookAsync (AddressBookDTO body, int? addressbookId);

        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookUpdateAddressBookAsyncWithHttpInfo (AddressBookDTO body, int? addressbookId);
        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of AddressBookDTO</returns>
        System.Threading.Tasks.Task<AddressBookDTO> AddressBookUpdateAddressBookAsync (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId);

        /// <summary>
        /// This call updates a addresbook item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookUpdateAddressBookAsyncWithHttpInfo (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId);
        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>Task of ContactDTO</returns>
        System.Threading.Tasks.Task<ContactDTO> AddressBookUpdateContactAsync (ContactDTO body);

        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>Task of ApiResponse (ContactDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactDTO>> AddressBookUpdateContactAsyncWithHttpInfo (ContactDTO body);
        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ContactDTO</returns>
        System.Threading.Tasks.Task<ContactDTO> AddressBookUpdateContactAsync (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);

        /// <summary>
        /// This call updates a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactDTO>> AddressBookUpdateContactAsyncWithHttpInfo (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AddressBookApi : IAddressBookApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressBookApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookApi"/> class
        /// </summary>
        /// <returns></returns>
        public AddressBookApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressBookApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns true if the connected user can edit an address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of the address book</param>
        /// <returns>bool?</returns>
        public bool? AddressBookAddressBookCanWriteByAddressBookId (int? addressbookId)
        {
             ApiResponse<bool?> localVarResponse = AddressBookAddressBookCanWriteByAddressBookIdWithHttpInfo(addressbookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns true if the connected user can edit an address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of the address book</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > AddressBookAddressBookCanWriteByAddressBookIdWithHttpInfo (int? addressbookId)
        {
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookApi->AddressBookAddressBookCanWriteByAddressBookId");

            var localVarPath = "/api/AddressBook/canwrite/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookAddressBookCanWriteByAddressBookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns true if the connected user can edit an address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of the address book</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> AddressBookAddressBookCanWriteByAddressBookIdAsync (int? addressbookId)
        {
             ApiResponse<bool?> localVarResponse = await AddressBookAddressBookCanWriteByAddressBookIdAsyncWithHttpInfo(addressbookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns true if the connected user can edit an address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookId">Identifier of the address book</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> AddressBookAddressBookCanWriteByAddressBookIdAsyncWithHttpInfo (int? addressbookId)
        {
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookApi->AddressBookAddressBookCanWriteByAddressBookId");

            var localVarPath = "/api/AddressBook/canwrite/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookAddressBookCanWriteByAddressBookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns true if the connected user can edit address books of a specified category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of address book category</param>
        /// <returns>bool?</returns>
        public bool? AddressBookAddressBookCanWriteByCategoryId (int? addressbookCategoryId)
        {
             ApiResponse<bool?> localVarResponse = AddressBookAddressBookCanWriteByCategoryIdWithHttpInfo(addressbookCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns true if the connected user can edit address books of a specified category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of address book category</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > AddressBookAddressBookCanWriteByCategoryIdWithHttpInfo (int? addressbookCategoryId)
        {
            // verify the required parameter 'addressbookCategoryId' is set
            if (addressbookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookCategoryId' when calling AddressBookApi->AddressBookAddressBookCanWriteByCategoryId");

            var localVarPath = "/api/AddressBook/canwritebycategory/{addressbookCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookCategoryId != null) localVarPathParams.Add("addressbookCategoryId", this.Configuration.ApiClient.ParameterToString(addressbookCategoryId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookAddressBookCanWriteByCategoryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns true if the connected user can edit address books of a specified category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of address book category</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> AddressBookAddressBookCanWriteByCategoryIdAsync (int? addressbookCategoryId)
        {
             ApiResponse<bool?> localVarResponse = await AddressBookAddressBookCanWriteByCategoryIdAsyncWithHttpInfo(addressbookCategoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns true if the connected user can edit address books of a specified category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of address book category</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> AddressBookAddressBookCanWriteByCategoryIdAsyncWithHttpInfo (int? addressbookCategoryId)
        {
            // verify the required parameter 'addressbookCategoryId' is set
            if (addressbookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookCategoryId' when calling AddressBookApi->AddressBookAddressBookCanWriteByCategoryId");

            var localVarPath = "/api/AddressBook/canwritebycategory/{addressbookCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookCategoryId != null) localVarPathParams.Add("addressbookCategoryId", this.Configuration.ApiClient.ParameterToString(addressbookCategoryId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookAddressBookCanWriteByCategoryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call deletes an addressbook by its Id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">AddressBook Id</param>
        /// <returns></returns>
        public void AddressBookDeleteAddressBook (int? addressBookId)
        {
             AddressBookDeleteAddressBookWithHttpInfo(addressBookId);
        }

        /// <summary>
        /// This call deletes an addressbook by its Id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">AddressBook Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddressBookDeleteAddressBookWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookDeleteAddressBook");

            var localVarPath = "/api/AddressBook/addressbook/{addressBookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookDeleteAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes an addressbook by its Id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">AddressBook Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddressBookDeleteAddressBookAsync (int? addressBookId)
        {
             await AddressBookDeleteAddressBookAsyncWithHttpInfo(addressBookId);

        }

        /// <summary>
        /// This call deletes an addressbook by its Id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">AddressBook Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookDeleteAddressBookAsyncWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookDeleteAddressBook");

            var localVarPath = "/api/AddressBook/addressbook/{addressBookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookDeleteAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes addressbooks by their ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns></returns>
        public void AddressBookDeleteAddressBook_0 (List<int?> body)
        {
             AddressBookDeleteAddressBook_0WithHttpInfo(body);
        }

        /// <summary>
        /// This call deletes addressbooks by their ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddressBookDeleteAddressBook_0WithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookDeleteAddressBook_0");

            var localVarPath = "/api/AddressBook/delete/addressbooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookDeleteAddressBook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes addressbooks by their ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddressBookDeleteAddressBook_0Async (List<int?> body)
        {
             await AddressBookDeleteAddressBook_0AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call deletes addressbooks by their ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookDeleteAddressBook_0AsyncWithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookDeleteAddressBook_0");

            var localVarPath = "/api/AddressBook/delete/addressbooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookDeleteAddressBook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of contact to delete</param>
        /// <returns></returns>
        public void AddressBookDeleteContact (int? contactId)
        {
             AddressBookDeleteContactWithHttpInfo(contactId);
        }

        /// <summary>
        /// This call deletes a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of contact to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddressBookDeleteContactWithHttpInfo (int? contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling AddressBookApi->AddressBookDeleteContact");

            var localVarPath = "/api/AddressBook/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookDeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of contact to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddressBookDeleteContactAsync (int? contactId)
        {
             await AddressBookDeleteContactAsyncWithHttpInfo(contactId);

        }

        /// <summary>
        /// This call deletes a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of contact to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookDeleteContactAsyncWithHttpInfo (int? contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling AddressBookApi->AddressBookDeleteContact");

            var localVarPath = "/api/AddressBook/contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookDeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes contacts by their ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns></returns>
        public void AddressBookDeleteContact_0 (List<int?> body)
        {
             AddressBookDeleteContact_0WithHttpInfo(body);
        }

        /// <summary>
        /// This call deletes contacts by their ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddressBookDeleteContact_0WithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookDeleteContact_0");

            var localVarPath = "/api/AddressBook/delete/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookDeleteContact_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call deletes contacts by their ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddressBookDeleteContact_0Async (List<int?> body)
        {
             await AddressBookDeleteContact_0AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call deletes contacts by their ids 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The id list</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookDeleteContact_0AsyncWithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookDeleteContact_0");

            var localVarPath = "/api/AddressBook/delete/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookDeleteContact_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call returns the values for combo box address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">The field name of the combo</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> AddressBookGetAddressBookComboFieldValues (string fieldName)
        {
             ApiResponse<List<string>> localVarResponse = AddressBookGetAddressBookComboFieldValuesWithHttpInfo(fieldName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the values for combo box address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">The field name of the combo</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > AddressBookGetAddressBookComboFieldValuesWithHttpInfo (string fieldName)
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling AddressBookApi->AddressBookGetAddressBookComboFieldValues");

            var localVarPath = "/api/AddressBook/addressbook/combovalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldName", fieldName)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetAddressBookComboFieldValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// This call returns the values for combo box address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">The field name of the combo</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> AddressBookGetAddressBookComboFieldValuesAsync (string fieldName)
        {
             ApiResponse<List<string>> localVarResponse = await AddressBookGetAddressBookComboFieldValuesAsyncWithHttpInfo(fieldName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the values for combo box address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName">The field name of the combo</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> AddressBookGetAddressBookComboFieldValuesAsyncWithHttpInfo (string fieldName)
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling AddressBookApi->AddressBookGetAddressBookComboFieldValues");

            var localVarPath = "/api/AddressBook/addressbook/combovalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldName", fieldName)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetAddressBookComboFieldValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by address book identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>UserProfileDTO</returns>
        public UserProfileDTO AddressBookGetByAddressBookId (int? addressBookId, int? type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = AddressBookGetByAddressBookIdWithHttpInfo(addressBookId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by address book identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        public ApiResponse< UserProfileDTO > AddressBookGetByAddressBookIdWithHttpInfo (int? addressBookId, int? type)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookGetByAddressBookId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookApi->AddressBookGetByAddressBookId");

            var localVarPath = "/api/AddressBook/AddressBook/{addressBookId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetByAddressBookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfileDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by address book identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of UserProfileDTO</returns>
        public async System.Threading.Tasks.Task<UserProfileDTO> AddressBookGetByAddressBookIdAsync (int? addressBookId, int? type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = await AddressBookGetByAddressBookIdAsyncWithHttpInfo(addressBookId, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by address book identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> AddressBookGetByAddressBookIdAsyncWithHttpInfo (int? addressBookId, int? type)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookGetByAddressBookId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookApi->AddressBookGetByAddressBookId");

            var localVarPath = "/api/AddressBook/AddressBook/{addressBookId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetByAddressBookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfileDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by contact identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of the contact</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>UserProfileDTO</returns>
        public UserProfileDTO AddressBookGetByContactId (int? contactId, int? type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = AddressBookGetByContactIdWithHttpInfo(contactId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by contact identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of the contact</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        public ApiResponse< UserProfileDTO > AddressBookGetByContactIdWithHttpInfo (int? contactId, int? type)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling AddressBookApi->AddressBookGetByContactId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookApi->AddressBookGetByContactId");

            var localVarPath = "/api/AddressBook/Contact/{contactId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetByContactId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfileDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by contact identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of the contact</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of UserProfileDTO</returns>
        public async System.Threading.Tasks.Task<UserProfileDTO> AddressBookGetByContactIdAsync (int? contactId, int? type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = await AddressBookGetByContactIdAsyncWithHttpInfo(contactId, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by contact identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Identifier of the contact</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> AddressBookGetByContactIdAsyncWithHttpInfo (int? contactId, int? type)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling AddressBookApi->AddressBookGetByContactId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookApi->AddressBookGetByContactId");

            var localVarPath = "/api/AddressBook/Contact/{contactId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetByContactId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfileDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
        }

        /// <summary>
        /// This call returns an adressbook by the identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <returns>AddressBookDTO</returns>
        public AddressBookDTO AddressBookGetById (int? addressBookId)
        {
             ApiResponse<AddressBookDTO> localVarResponse = AddressBookGetByIdWithHttpInfo(addressBookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns an adressbook by the identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        public ApiResponse< AddressBookDTO > AddressBookGetByIdWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookGetById");

            var localVarPath = "/api/AddressBook/addressbook/{addressBookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call returns an adressbook by the identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <returns>Task of AddressBookDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookDTO> AddressBookGetByIdAsync (int? addressBookId)
        {
             ApiResponse<AddressBookDTO> localVarResponse = await AddressBookGetByIdAsyncWithHttpInfo(addressBookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns an adressbook by the identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Identifier of the adress book</param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookGetByIdAsyncWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookGetById");

            var localVarPath = "/api/AddressBook/addressbook/{addressBookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by user identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Identifier of the user</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>UserProfileDTO</returns>
        public UserProfileDTO AddressBookGetByUserId (int? userId, int? type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = AddressBookGetByUserIdWithHttpInfo(userId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by user identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Identifier of the user</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>ApiResponse of UserProfileDTO</returns>
        public ApiResponse< UserProfileDTO > AddressBookGetByUserIdWithHttpInfo (int? userId, int? type)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AddressBookApi->AddressBookGetByUserId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookApi->AddressBookGetByUserId");

            var localVarPath = "/api/AddressBook/User/{userId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetByUserId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfileDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by user identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Identifier of the user</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of UserProfileDTO</returns>
        public async System.Threading.Tasks.Task<UserProfileDTO> AddressBookGetByUserIdAsync (int? userId, int? type)
        {
             ApiResponse<UserProfileDTO> localVarResponse = await AddressBookGetByUserIdAsyncWithHttpInfo(userId, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns new profile data (for archiving purpose) by user identifier 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Identifier of the user</param>
        /// <param name="type">Possible values:  0: To  1: From  2: Cc  3: Senders </param>
        /// <returns>Task of ApiResponse (UserProfileDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProfileDTO>> AddressBookGetByUserIdAsyncWithHttpInfo (int? userId, int? type)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AddressBookApi->AddressBookGetByUserId");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookApi->AddressBookGetByUserId");

            var localVarPath = "/api/AddressBook/User/{userId}/UserProfile/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetByUserId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfileDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfileDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfileDTO)));
        }

        /// <summary>
        /// This call returns new AddreBookDTO object for insert purpose 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AddressBookDTO</returns>
        public AddressBookDTO AddressBookGetForInsert ()
        {
             ApiResponse<AddressBookDTO> localVarResponse = AddressBookGetForInsertWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns new AddreBookDTO object for insert purpose 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        public ApiResponse< AddressBookDTO > AddressBookGetForInsertWithHttpInfo ()
        {

            var localVarPath = "/api/AddressBook/newinstance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetForInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call returns new AddreBookDTO object for insert purpose 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AddressBookDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookDTO> AddressBookGetForInsertAsync ()
        {
             ApiResponse<AddressBookDTO> localVarResponse = await AddressBookGetForInsertAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns new AddreBookDTO object for insert purpose 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookGetForInsertAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/AddressBook/newinstance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetForInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>AddressBookDTO</returns>
        public AddressBookDTO AddressBookGetForInsert_0 (int? addressbookCategoryId)
        {
             ApiResponse<AddressBookDTO> localVarResponse = AddressBookGetForInsert_0WithHttpInfo(addressbookCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        public ApiResponse< AddressBookDTO > AddressBookGetForInsert_0WithHttpInfo (int? addressbookCategoryId)
        {
            // verify the required parameter 'addressbookCategoryId' is set
            if (addressbookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookCategoryId' when calling AddressBookApi->AddressBookGetForInsert_0");

            var localVarPath = "/api/AddressBook/newinstance/{addressbookCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookCategoryId != null) localVarPathParams.Add("addressbookCategoryId", this.Configuration.ApiClient.ParameterToString(addressbookCategoryId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetForInsert_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of AddressBookDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookDTO> AddressBookGetForInsert_0Async (int? addressbookCategoryId)
        {
             ApiResponse<AddressBookDTO> localVarResponse = await AddressBookGetForInsert_0AsyncWithHttpInfo(addressbookCategoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns new AddreBookDTO for insert purpose by category 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressbookCategoryId">Identifier of the address book category</param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookGetForInsert_0AsyncWithHttpInfo (int? addressbookCategoryId)
        {
            // verify the required parameter 'addressbookCategoryId' is set
            if (addressbookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookCategoryId' when calling AddressBookApi->AddressBookGetForInsert_0");

            var localVarPath = "/api/AddressBook/newinstance/{addressbookCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookCategoryId != null) localVarPathParams.Add("addressbookCategoryId", this.Configuration.ApiClient.ParameterToString(addressbookCategoryId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetForInsert_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call returns all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>PermissionsDTO</returns>
        public PermissionsDTO AddressBookGetPermissionByAddrebookId (int? addressBookId)
        {
             ApiResponse<PermissionsDTO> localVarResponse = AddressBookGetPermissionByAddrebookIdWithHttpInfo(addressBookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>ApiResponse of PermissionsDTO</returns>
        public ApiResponse< PermissionsDTO > AddressBookGetPermissionByAddrebookIdWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookGetPermissionByAddrebookId");

            var localVarPath = "/api/AddressBook/{addressBookId}/Permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetPermissionByAddrebookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call returns all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of PermissionsDTO</returns>
        public async System.Threading.Tasks.Task<PermissionsDTO> AddressBookGetPermissionByAddrebookIdAsync (int? addressBookId)
        {
             ApiResponse<PermissionsDTO> localVarResponse = await AddressBookGetPermissionByAddrebookIdAsyncWithHttpInfo(addressBookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of ApiResponse (PermissionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionsDTO>> AddressBookGetPermissionByAddrebookIdAsyncWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookGetPermissionByAddrebookId");

            var localVarPath = "/api/AddressBook/{addressBookId}/Permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetPermissionByAddrebookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionsDTO)));
        }

        /// <summary>
        /// This call returns all the possible fields for search in address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        public List<RubricaFieldDTO> AddressBookGetSearchField ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = AddressBookGetSearchFieldWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the possible fields for search in address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        public ApiResponse< List<RubricaFieldDTO> > AddressBookGetSearchFieldWithHttpInfo ()
        {

            var localVarPath = "/api/AddressBook/SearchField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetSearchField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call returns all the possible fields for search in address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookGetSearchFieldAsync ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = await AddressBookGetSearchFieldAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the possible fields for search in address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookGetSearchFieldAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/AddressBook/SearchField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetSearchField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RubricaFieldDTO&gt;</returns>
        public List<RubricaFieldDTO> AddressBookGetSelectField ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = AddressBookGetSelectFieldWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RubricaFieldDTO&gt;</returns>
        public ApiResponse< List<RubricaFieldDTO> > AddressBookGetSelectFieldWithHttpInfo ()
        {

            var localVarPath = "/api/AddressBook/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RubricaFieldDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<RubricaFieldDTO>> AddressBookGetSelectFieldAsync ()
        {
             ApiResponse<List<RubricaFieldDTO>> localVarResponse = await AddressBookGetSelectFieldAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the possible select fields for search in address book 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RubricaFieldDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RubricaFieldDTO>>> AddressBookGetSelectFieldAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/AddressBook/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RubricaFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RubricaFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RubricaFieldDTO>)));
        }

        /// <summary>
        /// This call returns user permissions for an AddressBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>UserPermissionsDTO</returns>
        public UserPermissionsDTO AddressBookGetUserPermissionByAddrebookId (int? addressBookId)
        {
             ApiResponse<UserPermissionsDTO> localVarResponse = AddressBookGetUserPermissionByAddrebookIdWithHttpInfo(addressBookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns user permissions for an AddressBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>ApiResponse of UserPermissionsDTO</returns>
        public ApiResponse< UserPermissionsDTO > AddressBookGetUserPermissionByAddrebookIdWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookGetUserPermissionByAddrebookId");

            var localVarPath = "/api/AddressBook/{addressBookId}/UserPermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetUserPermissionByAddrebookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserPermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPermissionsDTO)));
        }

        /// <summary>
        /// This call returns user permissions for an AddressBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of UserPermissionsDTO</returns>
        public async System.Threading.Tasks.Task<UserPermissionsDTO> AddressBookGetUserPermissionByAddrebookIdAsync (int? addressBookId)
        {
             ApiResponse<UserPermissionsDTO> localVarResponse = await AddressBookGetUserPermissionByAddrebookIdAsyncWithHttpInfo(addressBookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns user permissions for an AddressBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of ApiResponse (UserPermissionsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserPermissionsDTO>> AddressBookGetUserPermissionByAddrebookIdAsyncWithHttpInfo (int? addressBookId)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookGetUserPermissionByAddrebookId");

            var localVarPath = "/api/AddressBook/{addressBookId}/UserPermission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookGetUserPermissionByAddrebookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPermissionsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserPermissionsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPermissionsDTO)));
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>AddressBookDTO</returns>
        public AddressBookDTO AddressBookInsertAddressBook (AddressBookDTO body)
        {
             ApiResponse<AddressBookDTO> localVarResponse = AddressBookInsertAddressBookWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        public ApiResponse< AddressBookDTO > AddressBookInsertAddressBookWithHttpInfo (AddressBookDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookInsertAddressBook");

            var localVarPath = "/api/AddressBook/addressbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookInsertAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>Task of AddressBookDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookDTO> AddressBookInsertAddressBookAsync (AddressBookDTO body)
        {
             ApiResponse<AddressBookDTO> localVarResponse = await AddressBookInsertAddressBookAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book item to profile</param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookInsertAddressBookAsyncWithHttpInfo (AddressBookDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookInsertAddressBook");

            var localVarPath = "/api/AddressBook/addressbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookInsertAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>AddressBookDTO</returns>
        public AddressBookDTO AddressBookInsertAddressBook (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields)
        {
             ApiResponse<AddressBookDTO> localVarResponse = AddressBookInsertAddressBookWithHttpInfo(contacts, id, businessName, fax, address, location, postalCode, province, country, email, phoneNumber, cellPhone, state, type, addressBookCategoryId, businessUnit, _class, fiscalCode, vatNumber, priority, addressBookBusinessUnitCode, addressBookNote, externalCode, additionalFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        public ApiResponse< AddressBookDTO > AddressBookInsertAddressBookWithHttpInfo (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields)
        {
            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new ApiException(400, "Missing required parameter 'contacts' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'businessName' is set
            if (businessName == null)
                throw new ApiException(400, "Missing required parameter 'businessName' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'province' is set
            if (province == null)
                throw new ApiException(400, "Missing required parameter 'province' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'addressBookCategoryId' is set
            if (addressBookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookCategoryId' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'fiscalCode' is set
            if (fiscalCode == null)
                throw new ApiException(400, "Missing required parameter 'fiscalCode' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'vatNumber' is set
            if (vatNumber == null)
                throw new ApiException(400, "Missing required parameter 'vatNumber' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'addressBookBusinessUnitCode' is set
            if (addressBookBusinessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'addressBookBusinessUnitCode' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'addressBookNote' is set
            if (addressBookNote == null)
                throw new ApiException(400, "Missing required parameter 'addressBookNote' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'externalCode' is set
            if (externalCode == null)
                throw new ApiException(400, "Missing required parameter 'externalCode' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'additionalFields' is set
            if (additionalFields == null)
                throw new ApiException(400, "Missing required parameter 'additionalFields' when calling AddressBookApi->AddressBookInsertAddressBook");

            var localVarPath = "/api/AddressBook/addressbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (businessName != null) localVarFormParams.Add("businessName", this.Configuration.ApiClient.ParameterToString(businessName)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (location != null) localVarFormParams.Add("location", this.Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (postalCode != null) localVarFormParams.Add("postalCode", this.Configuration.ApiClient.ParameterToString(postalCode)); // form parameter
            if (province != null) localVarFormParams.Add("province", this.Configuration.ApiClient.ParameterToString(province)); // form parameter
            if (country != null) localVarFormParams.Add("country", this.Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (phoneNumber != null) localVarFormParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (addressBookCategoryId != null) localVarFormParams.Add("addressBookCategoryId", this.Configuration.ApiClient.ParameterToString(addressBookCategoryId)); // form parameter
            if (businessUnit != null) localVarFormParams.Add("businessUnit", this.Configuration.ApiClient.ParameterToString(businessUnit)); // form parameter
            if (_class != null) localVarFormParams.Add("class", this.Configuration.ApiClient.ParameterToString(_class)); // form parameter
            if (fiscalCode != null) localVarFormParams.Add("fiscalCode", this.Configuration.ApiClient.ParameterToString(fiscalCode)); // form parameter
            if (vatNumber != null) localVarFormParams.Add("vatNumber", this.Configuration.ApiClient.ParameterToString(vatNumber)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (addressBookBusinessUnitCode != null) localVarFormParams.Add("addressBookBusinessUnitCode", this.Configuration.ApiClient.ParameterToString(addressBookBusinessUnitCode)); // form parameter
            if (addressBookNote != null) localVarFormParams.Add("addressBookNote", this.Configuration.ApiClient.ParameterToString(addressBookNote)); // form parameter
            if (externalCode != null) localVarFormParams.Add("externalCode", this.Configuration.ApiClient.ParameterToString(externalCode)); // form parameter
            if (additionalFields != null) localVarFormParams.Add("additionalFields", this.Configuration.ApiClient.ParameterToString(additionalFields)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookInsertAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>Task of AddressBookDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookDTO> AddressBookInsertAddressBookAsync (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields)
        {
             ApiResponse<AddressBookDTO> localVarResponse = await AddressBookInsertAddressBookAsyncWithHttpInfo(contacts, id, businessName, fax, address, location, postalCode, province, country, email, phoneNumber, cellPhone, state, type, addressBookCategoryId, businessUnit, _class, fiscalCode, vatNumber, priority, addressBookBusinessUnitCode, addressBookNote, externalCode, additionalFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new addres book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookInsertAddressBookAsyncWithHttpInfo (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields)
        {
            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new ApiException(400, "Missing required parameter 'contacts' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'businessName' is set
            if (businessName == null)
                throw new ApiException(400, "Missing required parameter 'businessName' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'province' is set
            if (province == null)
                throw new ApiException(400, "Missing required parameter 'province' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'addressBookCategoryId' is set
            if (addressBookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookCategoryId' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'fiscalCode' is set
            if (fiscalCode == null)
                throw new ApiException(400, "Missing required parameter 'fiscalCode' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'vatNumber' is set
            if (vatNumber == null)
                throw new ApiException(400, "Missing required parameter 'vatNumber' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'addressBookBusinessUnitCode' is set
            if (addressBookBusinessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'addressBookBusinessUnitCode' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'addressBookNote' is set
            if (addressBookNote == null)
                throw new ApiException(400, "Missing required parameter 'addressBookNote' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'externalCode' is set
            if (externalCode == null)
                throw new ApiException(400, "Missing required parameter 'externalCode' when calling AddressBookApi->AddressBookInsertAddressBook");
            // verify the required parameter 'additionalFields' is set
            if (additionalFields == null)
                throw new ApiException(400, "Missing required parameter 'additionalFields' when calling AddressBookApi->AddressBookInsertAddressBook");

            var localVarPath = "/api/AddressBook/addressbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (businessName != null) localVarFormParams.Add("businessName", this.Configuration.ApiClient.ParameterToString(businessName)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (location != null) localVarFormParams.Add("location", this.Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (postalCode != null) localVarFormParams.Add("postalCode", this.Configuration.ApiClient.ParameterToString(postalCode)); // form parameter
            if (province != null) localVarFormParams.Add("province", this.Configuration.ApiClient.ParameterToString(province)); // form parameter
            if (country != null) localVarFormParams.Add("country", this.Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (phoneNumber != null) localVarFormParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (addressBookCategoryId != null) localVarFormParams.Add("addressBookCategoryId", this.Configuration.ApiClient.ParameterToString(addressBookCategoryId)); // form parameter
            if (businessUnit != null) localVarFormParams.Add("businessUnit", this.Configuration.ApiClient.ParameterToString(businessUnit)); // form parameter
            if (_class != null) localVarFormParams.Add("class", this.Configuration.ApiClient.ParameterToString(_class)); // form parameter
            if (fiscalCode != null) localVarFormParams.Add("fiscalCode", this.Configuration.ApiClient.ParameterToString(fiscalCode)); // form parameter
            if (vatNumber != null) localVarFormParams.Add("vatNumber", this.Configuration.ApiClient.ParameterToString(vatNumber)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (addressBookBusinessUnitCode != null) localVarFormParams.Add("addressBookBusinessUnitCode", this.Configuration.ApiClient.ParameterToString(addressBookBusinessUnitCode)); // form parameter
            if (addressBookNote != null) localVarFormParams.Add("addressBookNote", this.Configuration.ApiClient.ParameterToString(addressBookNote)); // form parameter
            if (externalCode != null) localVarFormParams.Add("externalCode", this.Configuration.ApiClient.ParameterToString(externalCode)); // form parameter
            if (additionalFields != null) localVarFormParams.Add("additionalFields", this.Configuration.ApiClient.ParameterToString(additionalFields)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookInsertAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>List&lt;AddressBookDTO&gt;</returns>
        public List<AddressBookDTO> AddressBookInsertAddressBook_0 (List<AddressBookDTO> body)
        {
             ApiResponse<List<AddressBookDTO>> localVarResponse = AddressBookInsertAddressBook_0WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>ApiResponse of List&lt;AddressBookDTO&gt;</returns>
        public ApiResponse< List<AddressBookDTO> > AddressBookInsertAddressBook_0WithHttpInfo (List<AddressBookDTO> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookInsertAddressBook_0");

            var localVarPath = "/api/AddressBook/addressbooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookInsertAddressBook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AddressBookDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AddressBookDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AddressBookDTO>)));
        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>Task of List&lt;AddressBookDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AddressBookDTO>> AddressBookInsertAddressBook_0Async (List<AddressBookDTO> body)
        {
             ApiResponse<List<AddressBookDTO>> localVarResponse = await AddressBookInsertAddressBook_0AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book items to profile</param>
        /// <returns>Task of ApiResponse (List&lt;AddressBookDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AddressBookDTO>>> AddressBookInsertAddressBook_0AsyncWithHttpInfo (List<AddressBookDTO> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookInsertAddressBook_0");

            var localVarPath = "/api/AddressBook/addressbooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookInsertAddressBook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AddressBookDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AddressBookDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AddressBookDTO>)));
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>ContactDTO</returns>
        public ContactDTO AddressBookInsertContact (ContactDTO body)
        {
             ApiResponse<ContactDTO> localVarResponse = AddressBookInsertContactWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>ApiResponse of ContactDTO</returns>
        public ApiResponse< ContactDTO > AddressBookInsertContactWithHttpInfo (ContactDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookInsertContact");

            var localVarPath = "/api/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookInsertContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactDTO)));
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>Task of ContactDTO</returns>
        public async System.Threading.Tasks.Task<ContactDTO> AddressBookInsertContactAsync (ContactDTO body)
        {
             ApiResponse<ContactDTO> localVarResponse = await AddressBookInsertContactAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact item to insert</param>
        /// <returns>Task of ApiResponse (ContactDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactDTO>> AddressBookInsertContactAsyncWithHttpInfo (ContactDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookInsertContact");

            var localVarPath = "/api/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookInsertContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactDTO)));
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ContactDTO</returns>
        public ContactDTO AddressBookInsertContact (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
             ApiResponse<ContactDTO> localVarResponse = AddressBookInsertContactWithHttpInfo(addressBookId, contactName, job, phone, fax, cellPhone, house, department, office, email, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactDTO</returns>
        public ApiResponse< ContactDTO > AddressBookInsertContactWithHttpInfo (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'contactName' is set
            if (contactName == null)
                throw new ApiException(400, "Missing required parameter 'contactName' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'house' is set
            if (house == null)
                throw new ApiException(400, "Missing required parameter 'house' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'department' is set
            if (department == null)
                throw new ApiException(400, "Missing required parameter 'department' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'office' is set
            if (office == null)
                throw new ApiException(400, "Missing required parameter 'office' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookApi->AddressBookInsertContact");

            var localVarPath = "/api/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarFormParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // form parameter
            if (contactName != null) localVarFormParams.Add("contactName", this.Configuration.ApiClient.ParameterToString(contactName)); // form parameter
            if (job != null) localVarFormParams.Add("job", this.Configuration.ApiClient.ParameterToString(job)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (house != null) localVarFormParams.Add("house", this.Configuration.ApiClient.ParameterToString(house)); // form parameter
            if (department != null) localVarFormParams.Add("department", this.Configuration.ApiClient.ParameterToString(department)); // form parameter
            if (office != null) localVarFormParams.Add("office", this.Configuration.ApiClient.ParameterToString(office)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookInsertContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactDTO)));
        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ContactDTO</returns>
        public async System.Threading.Tasks.Task<ContactDTO> AddressBookInsertContactAsync (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
             ApiResponse<ContactDTO> localVarResponse = await AddressBookInsertContactAsyncWithHttpInfo(addressBookId, contactName, job, phone, fax, cellPhone, house, department, office, email, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new contact of a address book item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactDTO>> AddressBookInsertContactAsyncWithHttpInfo (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'contactName' is set
            if (contactName == null)
                throw new ApiException(400, "Missing required parameter 'contactName' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'house' is set
            if (house == null)
                throw new ApiException(400, "Missing required parameter 'house' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'department' is set
            if (department == null)
                throw new ApiException(400, "Missing required parameter 'department' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'office' is set
            if (office == null)
                throw new ApiException(400, "Missing required parameter 'office' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookApi->AddressBookInsertContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookApi->AddressBookInsertContact");

            var localVarPath = "/api/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarFormParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // form parameter
            if (contactName != null) localVarFormParams.Add("contactName", this.Configuration.ApiClient.ParameterToString(contactName)); // form parameter
            if (job != null) localVarFormParams.Add("job", this.Configuration.ApiClient.ParameterToString(job)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (house != null) localVarFormParams.Add("house", this.Configuration.ApiClient.ParameterToString(house)); // form parameter
            if (department != null) localVarFormParams.Add("department", this.Configuration.ApiClient.ParameterToString(department)); // form parameter
            if (office != null) localVarFormParams.Add("office", this.Configuration.ApiClient.ParameterToString(office)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookInsertContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactDTO)));
        }

        /// <summary>
        /// This call searches address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The fields of the search</param>
        /// <returns>AddressBookSearchResultDTO</returns>
        public AddressBookSearchResultDTO AddressBookPostSearch (AddressBookSearchCriteriaDTO body)
        {
             ApiResponse<AddressBookSearchResultDTO> localVarResponse = AddressBookPostSearchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call searches address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The fields of the search</param>
        /// <returns>ApiResponse of AddressBookSearchResultDTO</returns>
        public ApiResponse< AddressBookSearchResultDTO > AddressBookPostSearchWithHttpInfo (AddressBookSearchCriteriaDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookPostSearch");

            var localVarPath = "/api/AddressBook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookPostSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookSearchResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookSearchResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookSearchResultDTO)));
        }

        /// <summary>
        /// This call searches address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The fields of the search</param>
        /// <returns>Task of AddressBookSearchResultDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookSearchResultDTO> AddressBookPostSearchAsync (AddressBookSearchCriteriaDTO body)
        {
             ApiResponse<AddressBookSearchResultDTO> localVarResponse = await AddressBookPostSearchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call searches address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The fields of the search</param>
        /// <returns>Task of ApiResponse (AddressBookSearchResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookSearchResultDTO>> AddressBookPostSearchAsyncWithHttpInfo (AddressBookSearchCriteriaDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookPostSearch");

            var localVarPath = "/api/AddressBook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookPostSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookSearchResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookSearchResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookSearchResultDTO)));
        }

        /// <summary>
        /// This call searches address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="filterFields"></param>
        /// <param name="selectFields"></param>
        /// <param name="filter"></param>
        /// <returns>AddressBookSearchResultDTO</returns>
        public AddressBookSearchResultDTO AddressBookPostSearch (int? addressBookCategoryId, List<RubricaFieldDTO> filterFields, List<RubricaFieldDTO> selectFields, string filter)
        {
             ApiResponse<AddressBookSearchResultDTO> localVarResponse = AddressBookPostSearchWithHttpInfo(addressBookCategoryId, filterFields, selectFields, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call searches address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="filterFields"></param>
        /// <param name="selectFields"></param>
        /// <param name="filter"></param>
        /// <returns>ApiResponse of AddressBookSearchResultDTO</returns>
        public ApiResponse< AddressBookSearchResultDTO > AddressBookPostSearchWithHttpInfo (int? addressBookCategoryId, List<RubricaFieldDTO> filterFields, List<RubricaFieldDTO> selectFields, string filter)
        {
            // verify the required parameter 'addressBookCategoryId' is set
            if (addressBookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookCategoryId' when calling AddressBookApi->AddressBookPostSearch");
            // verify the required parameter 'filterFields' is set
            if (filterFields == null)
                throw new ApiException(400, "Missing required parameter 'filterFields' when calling AddressBookApi->AddressBookPostSearch");
            // verify the required parameter 'selectFields' is set
            if (selectFields == null)
                throw new ApiException(400, "Missing required parameter 'selectFields' when calling AddressBookApi->AddressBookPostSearch");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling AddressBookApi->AddressBookPostSearch");

            var localVarPath = "/api/AddressBook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookCategoryId != null) localVarFormParams.Add("addressBookCategoryId", this.Configuration.ApiClient.ParameterToString(addressBookCategoryId)); // form parameter
            if (filterFields != null) localVarFormParams.Add("filterFields", this.Configuration.ApiClient.ParameterToString(filterFields)); // form parameter
            if (selectFields != null) localVarFormParams.Add("selectFields", this.Configuration.ApiClient.ParameterToString(selectFields)); // form parameter
            if (filter != null) localVarFormParams.Add("filter", this.Configuration.ApiClient.ParameterToString(filter)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookPostSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookSearchResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookSearchResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookSearchResultDTO)));
        }

        /// <summary>
        /// This call searches address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="filterFields"></param>
        /// <param name="selectFields"></param>
        /// <param name="filter"></param>
        /// <returns>Task of AddressBookSearchResultDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookSearchResultDTO> AddressBookPostSearchAsync (int? addressBookCategoryId, List<RubricaFieldDTO> filterFields, List<RubricaFieldDTO> selectFields, string filter)
        {
             ApiResponse<AddressBookSearchResultDTO> localVarResponse = await AddressBookPostSearchAsyncWithHttpInfo(addressBookCategoryId, filterFields, selectFields, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call searches address book items 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="filterFields"></param>
        /// <param name="selectFields"></param>
        /// <param name="filter"></param>
        /// <returns>Task of ApiResponse (AddressBookSearchResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookSearchResultDTO>> AddressBookPostSearchAsyncWithHttpInfo (int? addressBookCategoryId, List<RubricaFieldDTO> filterFields, List<RubricaFieldDTO> selectFields, string filter)
        {
            // verify the required parameter 'addressBookCategoryId' is set
            if (addressBookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookCategoryId' when calling AddressBookApi->AddressBookPostSearch");
            // verify the required parameter 'filterFields' is set
            if (filterFields == null)
                throw new ApiException(400, "Missing required parameter 'filterFields' when calling AddressBookApi->AddressBookPostSearch");
            // verify the required parameter 'selectFields' is set
            if (selectFields == null)
                throw new ApiException(400, "Missing required parameter 'selectFields' when calling AddressBookApi->AddressBookPostSearch");
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling AddressBookApi->AddressBookPostSearch");

            var localVarPath = "/api/AddressBook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookCategoryId != null) localVarFormParams.Add("addressBookCategoryId", this.Configuration.ApiClient.ParameterToString(addressBookCategoryId)); // form parameter
            if (filterFields != null) localVarFormParams.Add("filterFields", this.Configuration.ApiClient.ParameterToString(filterFields)); // form parameter
            if (selectFields != null) localVarFormParams.Add("selectFields", this.Configuration.ApiClient.ParameterToString(selectFields)); // form parameter
            if (filter != null) localVarFormParams.Add("filter", this.Configuration.ApiClient.ParameterToString(filter)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookPostSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookSearchResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookSearchResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookSearchResultDTO)));
        }

        /// <summary>
        /// This call saves the select fields with the user settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of select fields</param>
        /// <returns></returns>
        public void AddressBookPutSelectField (List<RubricaFieldDTO> body)
        {
             AddressBookPutSelectFieldWithHttpInfo(body);
        }

        /// <summary>
        /// This call saves the select fields with the user settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of select fields</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddressBookPutSelectFieldWithHttpInfo (List<RubricaFieldDTO> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookPutSelectField");

            var localVarPath = "/api/AddressBook/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookPutSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call saves the select fields with the user settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of select fields</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddressBookPutSelectFieldAsync (List<RubricaFieldDTO> body)
        {
             await AddressBookPutSelectFieldAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// This call saves the select fields with the user settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of select fields</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookPutSelectFieldAsyncWithHttpInfo (List<RubricaFieldDTO> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookPutSelectField");

            var localVarPath = "/api/AddressBook/SelectField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookPutSelectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call saves all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns></returns>
        public void AddressBookSetPermissionByAddrebookId (PermissionsDTO body, int? addressBookId)
        {
             AddressBookSetPermissionByAddrebookIdWithHttpInfo(body, addressBookId);
        }

        /// <summary>
        /// This call saves all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddressBookSetPermissionByAddrebookIdWithHttpInfo (PermissionsDTO body, int? addressBookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookSetPermissionByAddrebookId");
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookSetPermissionByAddrebookId");

            var localVarPath = "/api/AddressBook/{addressBookId}/Permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookSetPermissionByAddrebookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call saves all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddressBookSetPermissionByAddrebookIdAsync (PermissionsDTO body, int? addressBookId)
        {
             await AddressBookSetPermissionByAddrebookIdAsyncWithHttpInfo(body, addressBookId);

        }

        /// <summary>
        /// This call saves all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookSetPermissionByAddrebookIdAsyncWithHttpInfo (PermissionsDTO body, int? addressBookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookSetPermissionByAddrebookId");
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookSetPermissionByAddrebookId");

            var localVarPath = "/api/AddressBook/{addressBookId}/Permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookSetPermissionByAddrebookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call saves all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns></returns>
        public void AddressBookSetPermissionByAddrebookId (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? addressBookId)
        {
             AddressBookSetPermissionByAddrebookIdWithHttpInfo(usersPermissions, permissionsProperties, addressBookId);
        }

        /// <summary>
        /// This call saves all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddressBookSetPermissionByAddrebookIdWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? addressBookId)
        {
            // verify the required parameter 'usersPermissions' is set
            if (usersPermissions == null)
                throw new ApiException(400, "Missing required parameter 'usersPermissions' when calling AddressBookApi->AddressBookSetPermissionByAddrebookId");
            // verify the required parameter 'permissionsProperties' is set
            if (permissionsProperties == null)
                throw new ApiException(400, "Missing required parameter 'permissionsProperties' when calling AddressBookApi->AddressBookSetPermissionByAddrebookId");
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookSetPermissionByAddrebookId");

            var localVarPath = "/api/AddressBook/{addressBookId}/Permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            if (usersPermissions != null) localVarFormParams.Add("usersPermissions", this.Configuration.ApiClient.ParameterToString(usersPermissions)); // form parameter
            if (permissionsProperties != null) localVarFormParams.Add("permissionsProperties", this.Configuration.ApiClient.ParameterToString(permissionsProperties)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookSetPermissionByAddrebookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call saves all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddressBookSetPermissionByAddrebookIdAsync (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? addressBookId)
        {
             await AddressBookSetPermissionByAddrebookIdAsyncWithHttpInfo(usersPermissions, permissionsProperties, addressBookId);

        }

        /// <summary>
        /// This call saves all permissions for an AddreBook 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usersPermissions"></param>
        /// <param name="permissionsProperties"></param>
        /// <param name="addressBookId">Id of the addressBook</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookSetPermissionByAddrebookIdAsyncWithHttpInfo (List<UserPermissionDTO> usersPermissions, List<PermissionPropertiesDTO> permissionsProperties, int? addressBookId)
        {
            // verify the required parameter 'usersPermissions' is set
            if (usersPermissions == null)
                throw new ApiException(400, "Missing required parameter 'usersPermissions' when calling AddressBookApi->AddressBookSetPermissionByAddrebookId");
            // verify the required parameter 'permissionsProperties' is set
            if (permissionsProperties == null)
                throw new ApiException(400, "Missing required parameter 'permissionsProperties' when calling AddressBookApi->AddressBookSetPermissionByAddrebookId");
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookSetPermissionByAddrebookId");

            var localVarPath = "/api/AddressBook/{addressBookId}/Permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarPathParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // path parameter
            if (usersPermissions != null) localVarFormParams.Add("usersPermissions", this.Configuration.ApiClient.ParameterToString(usersPermissions)); // form parameter
            if (permissionsProperties != null) localVarFormParams.Add("permissionsProperties", this.Configuration.ApiClient.ParameterToString(permissionsProperties)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookSetPermissionByAddrebookId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>AddressBookDTO</returns>
        public AddressBookDTO AddressBookUpdateAddressBook (AddressBookDTO body, int? addressbookId)
        {
             ApiResponse<AddressBookDTO> localVarResponse = AddressBookUpdateAddressBookWithHttpInfo(body, addressbookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        public ApiResponse< AddressBookDTO > AddressBookUpdateAddressBookWithHttpInfo (AddressBookDTO body, int? addressbookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookApi->AddressBookUpdateAddressBook");

            var localVarPath = "/api/AddressBook/addressbook/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookUpdateAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of AddressBookDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookDTO> AddressBookUpdateAddressBookAsync (AddressBookDTO body, int? addressbookId)
        {
             ApiResponse<AddressBookDTO> localVarResponse = await AddressBookUpdateAddressBookAsyncWithHttpInfo(body, addressbookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Address book data to update</param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookUpdateAddressBookAsyncWithHttpInfo (AddressBookDTO body, int? addressbookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookApi->AddressBookUpdateAddressBook");

            var localVarPath = "/api/AddressBook/addressbook/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookUpdateAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>AddressBookDTO</returns>
        public AddressBookDTO AddressBookUpdateAddressBook (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId)
        {
             ApiResponse<AddressBookDTO> localVarResponse = AddressBookUpdateAddressBookWithHttpInfo(contacts, id, businessName, fax, address, location, postalCode, province, country, email, phoneNumber, cellPhone, state, type, addressBookCategoryId, businessUnit, _class, fiscalCode, vatNumber, priority, addressBookBusinessUnitCode, addressBookNote, externalCode, additionalFields, addressbookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>ApiResponse of AddressBookDTO</returns>
        public ApiResponse< AddressBookDTO > AddressBookUpdateAddressBookWithHttpInfo (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId)
        {
            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new ApiException(400, "Missing required parameter 'contacts' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'businessName' is set
            if (businessName == null)
                throw new ApiException(400, "Missing required parameter 'businessName' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'province' is set
            if (province == null)
                throw new ApiException(400, "Missing required parameter 'province' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'addressBookCategoryId' is set
            if (addressBookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookCategoryId' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'fiscalCode' is set
            if (fiscalCode == null)
                throw new ApiException(400, "Missing required parameter 'fiscalCode' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'vatNumber' is set
            if (vatNumber == null)
                throw new ApiException(400, "Missing required parameter 'vatNumber' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'addressBookBusinessUnitCode' is set
            if (addressBookBusinessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'addressBookBusinessUnitCode' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'addressBookNote' is set
            if (addressBookNote == null)
                throw new ApiException(400, "Missing required parameter 'addressBookNote' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'externalCode' is set
            if (externalCode == null)
                throw new ApiException(400, "Missing required parameter 'externalCode' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'additionalFields' is set
            if (additionalFields == null)
                throw new ApiException(400, "Missing required parameter 'additionalFields' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookApi->AddressBookUpdateAddressBook");

            var localVarPath = "/api/AddressBook/addressbook/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (businessName != null) localVarFormParams.Add("businessName", this.Configuration.ApiClient.ParameterToString(businessName)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (location != null) localVarFormParams.Add("location", this.Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (postalCode != null) localVarFormParams.Add("postalCode", this.Configuration.ApiClient.ParameterToString(postalCode)); // form parameter
            if (province != null) localVarFormParams.Add("province", this.Configuration.ApiClient.ParameterToString(province)); // form parameter
            if (country != null) localVarFormParams.Add("country", this.Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (phoneNumber != null) localVarFormParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (addressBookCategoryId != null) localVarFormParams.Add("addressBookCategoryId", this.Configuration.ApiClient.ParameterToString(addressBookCategoryId)); // form parameter
            if (businessUnit != null) localVarFormParams.Add("businessUnit", this.Configuration.ApiClient.ParameterToString(businessUnit)); // form parameter
            if (_class != null) localVarFormParams.Add("class", this.Configuration.ApiClient.ParameterToString(_class)); // form parameter
            if (fiscalCode != null) localVarFormParams.Add("fiscalCode", this.Configuration.ApiClient.ParameterToString(fiscalCode)); // form parameter
            if (vatNumber != null) localVarFormParams.Add("vatNumber", this.Configuration.ApiClient.ParameterToString(vatNumber)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (addressBookBusinessUnitCode != null) localVarFormParams.Add("addressBookBusinessUnitCode", this.Configuration.ApiClient.ParameterToString(addressBookBusinessUnitCode)); // form parameter
            if (addressBookNote != null) localVarFormParams.Add("addressBookNote", this.Configuration.ApiClient.ParameterToString(addressBookNote)); // form parameter
            if (externalCode != null) localVarFormParams.Add("externalCode", this.Configuration.ApiClient.ParameterToString(externalCode)); // form parameter
            if (additionalFields != null) localVarFormParams.Add("additionalFields", this.Configuration.ApiClient.ParameterToString(additionalFields)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookUpdateAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of AddressBookDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookDTO> AddressBookUpdateAddressBookAsync (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId)
        {
             ApiResponse<AddressBookDTO> localVarResponse = await AddressBookUpdateAddressBookAsyncWithHttpInfo(contacts, id, businessName, fax, address, location, postalCode, province, country, email, phoneNumber, cellPhone, state, type, addressBookCategoryId, businessUnit, _class, fiscalCode, vatNumber, priority, addressBookBusinessUnitCode, addressBookNote, externalCode, additionalFields, addressbookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a addresbook item 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contacts"></param>
        /// <param name="id"></param>
        /// <param name="businessName"></param>
        /// <param name="fax"></param>
        /// <param name="address"></param>
        /// <param name="location"></param>
        /// <param name="postalCode"></param>
        /// <param name="province"></param>
        /// <param name="country"></param>
        /// <param name="email"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="cellPhone"></param>
        /// <param name="state"></param>
        /// <param name="type"></param>
        /// <param name="addressBookCategoryId"></param>
        /// <param name="businessUnit"></param>
        /// <param name="_class"></param>
        /// <param name="fiscalCode"></param>
        /// <param name="vatNumber"></param>
        /// <param name="priority"></param>
        /// <param name="addressBookBusinessUnitCode"></param>
        /// <param name="addressBookNote"></param>
        /// <param name="externalCode"></param>
        /// <param name="additionalFields"></param>
        /// <param name="addressbookId">Identifier of Address book to update</param>
        /// <returns>Task of ApiResponse (AddressBookDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookDTO>> AddressBookUpdateAddressBookAsyncWithHttpInfo (List<ContactDTO> contacts, int? id, string businessName, string fax, string address, string location, string postalCode, string province, string country, string email, string phoneNumber, string cellPhone, int? state, int? type, int? addressBookCategoryId, string businessUnit, string _class, string fiscalCode, string vatNumber, int? priority, string addressBookBusinessUnitCode, string addressBookNote, string externalCode, AdditionalConcreteFields additionalFields, int? addressbookId)
        {
            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new ApiException(400, "Missing required parameter 'contacts' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'businessName' is set
            if (businessName == null)
                throw new ApiException(400, "Missing required parameter 'businessName' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'province' is set
            if (province == null)
                throw new ApiException(400, "Missing required parameter 'province' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'addressBookCategoryId' is set
            if (addressBookCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookCategoryId' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'businessUnit' is set
            if (businessUnit == null)
                throw new ApiException(400, "Missing required parameter 'businessUnit' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'fiscalCode' is set
            if (fiscalCode == null)
                throw new ApiException(400, "Missing required parameter 'fiscalCode' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'vatNumber' is set
            if (vatNumber == null)
                throw new ApiException(400, "Missing required parameter 'vatNumber' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'addressBookBusinessUnitCode' is set
            if (addressBookBusinessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'addressBookBusinessUnitCode' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'addressBookNote' is set
            if (addressBookNote == null)
                throw new ApiException(400, "Missing required parameter 'addressBookNote' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'externalCode' is set
            if (externalCode == null)
                throw new ApiException(400, "Missing required parameter 'externalCode' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'additionalFields' is set
            if (additionalFields == null)
                throw new ApiException(400, "Missing required parameter 'additionalFields' when calling AddressBookApi->AddressBookUpdateAddressBook");
            // verify the required parameter 'addressbookId' is set
            if (addressbookId == null)
                throw new ApiException(400, "Missing required parameter 'addressbookId' when calling AddressBookApi->AddressBookUpdateAddressBook");

            var localVarPath = "/api/AddressBook/addressbook/{addressbookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressbookId != null) localVarPathParams.Add("addressbookId", this.Configuration.ApiClient.ParameterToString(addressbookId)); // path parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (businessName != null) localVarFormParams.Add("businessName", this.Configuration.ApiClient.ParameterToString(businessName)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (location != null) localVarFormParams.Add("location", this.Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (postalCode != null) localVarFormParams.Add("postalCode", this.Configuration.ApiClient.ParameterToString(postalCode)); // form parameter
            if (province != null) localVarFormParams.Add("province", this.Configuration.ApiClient.ParameterToString(province)); // form parameter
            if (country != null) localVarFormParams.Add("country", this.Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (phoneNumber != null) localVarFormParams.Add("phoneNumber", this.Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (addressBookCategoryId != null) localVarFormParams.Add("addressBookCategoryId", this.Configuration.ApiClient.ParameterToString(addressBookCategoryId)); // form parameter
            if (businessUnit != null) localVarFormParams.Add("businessUnit", this.Configuration.ApiClient.ParameterToString(businessUnit)); // form parameter
            if (_class != null) localVarFormParams.Add("class", this.Configuration.ApiClient.ParameterToString(_class)); // form parameter
            if (fiscalCode != null) localVarFormParams.Add("fiscalCode", this.Configuration.ApiClient.ParameterToString(fiscalCode)); // form parameter
            if (vatNumber != null) localVarFormParams.Add("vatNumber", this.Configuration.ApiClient.ParameterToString(vatNumber)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (addressBookBusinessUnitCode != null) localVarFormParams.Add("addressBookBusinessUnitCode", this.Configuration.ApiClient.ParameterToString(addressBookBusinessUnitCode)); // form parameter
            if (addressBookNote != null) localVarFormParams.Add("addressBookNote", this.Configuration.ApiClient.ParameterToString(addressBookNote)); // form parameter
            if (externalCode != null) localVarFormParams.Add("externalCode", this.Configuration.ApiClient.ParameterToString(externalCode)); // form parameter
            if (additionalFields != null) localVarFormParams.Add("additionalFields", this.Configuration.ApiClient.ParameterToString(additionalFields)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookUpdateAddressBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressBookDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookDTO)));
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>ContactDTO</returns>
        public ContactDTO AddressBookUpdateContact (ContactDTO body)
        {
             ApiResponse<ContactDTO> localVarResponse = AddressBookUpdateContactWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>ApiResponse of ContactDTO</returns>
        public ApiResponse< ContactDTO > AddressBookUpdateContactWithHttpInfo (ContactDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookUpdateContact");

            var localVarPath = "/api/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookUpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactDTO)));
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>Task of ContactDTO</returns>
        public async System.Threading.Tasks.Task<ContactDTO> AddressBookUpdateContactAsync (ContactDTO body)
        {
             ApiResponse<ContactDTO> localVarResponse = await AddressBookUpdateContactAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Identifier of contact to update</param>
        /// <returns>Task of ApiResponse (ContactDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactDTO>> AddressBookUpdateContactAsyncWithHttpInfo (ContactDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddressBookApi->AddressBookUpdateContact");

            var localVarPath = "/api/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookUpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactDTO)));
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ContactDTO</returns>
        public ContactDTO AddressBookUpdateContact (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
             ApiResponse<ContactDTO> localVarResponse = AddressBookUpdateContactWithHttpInfo(addressBookId, contactName, job, phone, fax, cellPhone, house, department, office, email, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactDTO</returns>
        public ApiResponse< ContactDTO > AddressBookUpdateContactWithHttpInfo (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'contactName' is set
            if (contactName == null)
                throw new ApiException(400, "Missing required parameter 'contactName' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'house' is set
            if (house == null)
                throw new ApiException(400, "Missing required parameter 'house' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'department' is set
            if (department == null)
                throw new ApiException(400, "Missing required parameter 'department' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'office' is set
            if (office == null)
                throw new ApiException(400, "Missing required parameter 'office' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookApi->AddressBookUpdateContact");

            var localVarPath = "/api/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarFormParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // form parameter
            if (contactName != null) localVarFormParams.Add("contactName", this.Configuration.ApiClient.ParameterToString(contactName)); // form parameter
            if (job != null) localVarFormParams.Add("job", this.Configuration.ApiClient.ParameterToString(job)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (house != null) localVarFormParams.Add("house", this.Configuration.ApiClient.ParameterToString(house)); // form parameter
            if (department != null) localVarFormParams.Add("department", this.Configuration.ApiClient.ParameterToString(department)); // form parameter
            if (office != null) localVarFormParams.Add("office", this.Configuration.ApiClient.ParameterToString(office)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookUpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactDTO)));
        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ContactDTO</returns>
        public async System.Threading.Tasks.Task<ContactDTO> AddressBookUpdateContactAsync (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
             ApiResponse<ContactDTO> localVarResponse = await AddressBookUpdateContactAsyncWithHttpInfo(addressBookId, contactName, job, phone, fax, cellPhone, house, department, office, email, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a contact 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressBookId"></param>
        /// <param name="contactName"></param>
        /// <param name="job"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="cellPhone"></param>
        /// <param name="house"></param>
        /// <param name="department"></param>
        /// <param name="office"></param>
        /// <param name="email"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactDTO>> AddressBookUpdateContactAsyncWithHttpInfo (int? addressBookId, string contactName, string job, string phone, string fax, string cellPhone, string house, string department, string office, string email, int? id)
        {
            // verify the required parameter 'addressBookId' is set
            if (addressBookId == null)
                throw new ApiException(400, "Missing required parameter 'addressBookId' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'contactName' is set
            if (contactName == null)
                throw new ApiException(400, "Missing required parameter 'contactName' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'fax' is set
            if (fax == null)
                throw new ApiException(400, "Missing required parameter 'fax' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'cellPhone' is set
            if (cellPhone == null)
                throw new ApiException(400, "Missing required parameter 'cellPhone' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'house' is set
            if (house == null)
                throw new ApiException(400, "Missing required parameter 'house' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'department' is set
            if (department == null)
                throw new ApiException(400, "Missing required parameter 'department' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'office' is set
            if (office == null)
                throw new ApiException(400, "Missing required parameter 'office' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AddressBookApi->AddressBookUpdateContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookApi->AddressBookUpdateContact");

            var localVarPath = "/api/AddressBook/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressBookId != null) localVarFormParams.Add("addressBookId", this.Configuration.ApiClient.ParameterToString(addressBookId)); // form parameter
            if (contactName != null) localVarFormParams.Add("contactName", this.Configuration.ApiClient.ParameterToString(contactName)); // form parameter
            if (job != null) localVarFormParams.Add("job", this.Configuration.ApiClient.ParameterToString(job)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (fax != null) localVarFormParams.Add("fax", this.Configuration.ApiClient.ParameterToString(fax)); // form parameter
            if (cellPhone != null) localVarFormParams.Add("cellPhone", this.Configuration.ApiClient.ParameterToString(cellPhone)); // form parameter
            if (house != null) localVarFormParams.Add("house", this.Configuration.ApiClient.ParameterToString(house)); // form parameter
            if (department != null) localVarFormParams.Add("department", this.Configuration.ApiClient.ParameterToString(department)); // form parameter
            if (office != null) localVarFormParams.Add("office", this.Configuration.ApiClient.ParameterToString(office)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookUpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContactDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactDTO)));
        }

    }
}
