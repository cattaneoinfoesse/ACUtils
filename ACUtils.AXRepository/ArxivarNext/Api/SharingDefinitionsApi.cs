/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISharingDefinitionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SharingDefinitionDTO</returns>
        SharingDefinitionDTO SharingDefinitionsGetNewSharingDefinition ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        ApiResponse<SharingDefinitionDTO> SharingDefinitionsGetNewSharingDefinitionWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SharingDefinitionDTO&gt;</returns>
        List<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitions ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SharingDefinitionDTO&gt;</returns>
        ApiResponse<List<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDefinitionDTO</returns>
        SharingDefinitionDTO SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        ApiResponse<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeWithHttpInfo (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>SharingDefinitionDTO</returns>
        SharingDefinitionDTO SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode (string aooCode, int? documentTypeSystemId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        ApiResponse<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeWithHttpInfo (string aooCode, int? documentTypeSystemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>SharingDefinitionDTO</returns>
        SharingDefinitionDTO SharingDefinitionsGetSharingDefinitionsById (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        ApiResponse<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByIdWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        SharingDefinitionInsertResult SharingDefinitionsInsertSharingDefinition (SharingDefinitionDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        ApiResponse<SharingDefinitionInsertResult> SharingDefinitionsInsertSharingDefinitionWithHttpInfo (SharingDefinitionDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        SharingDefinitionInsertResult SharingDefinitionsInsertSharingDefinition (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        ApiResponse<SharingDefinitionInsertResult> SharingDefinitionsInsertSharingDefinitionWithHttpInfo (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? SharingDefinitionsIsArxLinkConfigured ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> SharingDefinitionsIsArxLinkConfiguredWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns></returns>
        void SharingDefinitionsSharingDefinitionDeleteById (string sharingDefinitionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SharingDefinitionsSharingDefinitionDeleteByIdWithHttpInfo (string sharingDefinitionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        SharingDefinitionInsertResult SharingDefinitionsUpdateSharingDefinition (SharingDefinitionDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        ApiResponse<SharingDefinitionInsertResult> SharingDefinitionsUpdateSharingDefinitionWithHttpInfo (SharingDefinitionDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        SharingDefinitionInsertResult SharingDefinitionsUpdateSharingDefinition (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        ApiResponse<SharingDefinitionInsertResult> SharingDefinitionsUpdateSharingDefinitionWithHttpInfo (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SharingDefinitionDTO</returns>
        System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetNewSharingDefinitionAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetNewSharingDefinitionAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SharingDefinitionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SharingDefinitionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SharingDefinitionDTO>>> SharingDefinitionsGetSharingDefinitionsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDefinitionDTO</returns>
        System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsync (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsyncWithHttpInfo (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of SharingDefinitionDTO</returns>
        System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsync (string aooCode, int? documentTypeSystemId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsyncWithHttpInfo (string aooCode, int? documentTypeSystemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of SharingDefinitionDTO</returns>
        System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByIdAsync (string sharingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsByIdAsyncWithHttpInfo (string sharingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsInsertSharingDefinitionAsync (SharingDefinitionDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsInsertSharingDefinitionAsyncWithHttpInfo (SharingDefinitionDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsInsertSharingDefinitionAsync (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsInsertSharingDefinitionAsyncWithHttpInfo (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> SharingDefinitionsIsArxLinkConfiguredAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> SharingDefinitionsIsArxLinkConfiguredAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SharingDefinitionsSharingDefinitionDeleteByIdAsync (string sharingDefinitionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SharingDefinitionsSharingDefinitionDeleteByIdAsyncWithHttpInfo (string sharingDefinitionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsUpdateSharingDefinitionAsync (SharingDefinitionDTO body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsUpdateSharingDefinitionAsyncWithHttpInfo (SharingDefinitionDTO body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsUpdateSharingDefinitionAsync (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsUpdateSharingDefinitionAsyncWithHttpInfo (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SharingDefinitionsApi : ISharingDefinitionsApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SharingDefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SharingDefinitionsApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SharingDefinitionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SharingDefinitionsApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SharingDefinitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SharingDefinitionsApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SharingDefinitionDTO</returns>
        public SharingDefinitionDTO SharingDefinitionsGetNewSharingDefinition ()
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = SharingDefinitionsGetNewSharingDefinitionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        public ApiResponse< SharingDefinitionDTO > SharingDefinitionsGetNewSharingDefinitionWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions/New";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetNewSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SharingDefinitionDTO</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetNewSharingDefinitionAsync ()
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = await SharingDefinitionsGetNewSharingDefinitionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetNewSharingDefinitionAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions/New";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetNewSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SharingDefinitionDTO&gt;</returns>
        public List<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitions ()
        {
             ApiResponse<List<SharingDefinitionDTO>> localVarResponse = SharingDefinitionsGetSharingDefinitionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SharingDefinitionDTO&gt;</returns>
        public ApiResponse< List<SharingDefinitionDTO> > SharingDefinitionsGetSharingDefinitionsWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SharingDefinitionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SharingDefinitionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SharingDefinitionDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SharingDefinitionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsAsync ()
        {
             ApiResponse<List<SharingDefinitionDTO>> localVarResponse = await SharingDefinitionsGetSharingDefinitionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SharingDefinitionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SharingDefinitionDTO>>> SharingDefinitionsGetSharingDefinitionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SharingDefinitionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SharingDefinitionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SharingDefinitionDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDefinitionDTO</returns>
        public SharingDefinitionDTO SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO body)
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        public ApiResponse< SharingDefinitionDTO > SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeWithHttpInfo (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode");

            var localVarPath = "/api/SharingDefinitions/GetByAooAndDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDefinitionDTO</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsync (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO body)
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = await SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsyncWithHttpInfo (GetSharingDefinitionsByDocumentTypeIdAndAooCodeRequestDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode");

            var localVarPath = "/api/SharingDefinitions/GetByAooAndDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>SharingDefinitionDTO</returns>
        public SharingDefinitionDTO SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode (string aooCode, int? documentTypeSystemId)
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeWithHttpInfo(aooCode, documentTypeSystemId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        public ApiResponse< SharingDefinitionDTO > SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeWithHttpInfo (string aooCode, int? documentTypeSystemId)
        {
            // verify the required parameter 'aooCode' is set
            if (aooCode == null)
                throw new ApiException(400, "Missing required parameter 'aooCode' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode");
            // verify the required parameter 'documentTypeSystemId' is set
            if (documentTypeSystemId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeSystemId' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode");

            var localVarPath = "/api/SharingDefinitions/GetByAooAndDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooCode != null) localVarFormParams.Add("aooCode", this.Configuration.ApiClient.ParameterToString(aooCode)); // form parameter
            if (documentTypeSystemId != null) localVarFormParams.Add("documentTypeSystemId", this.Configuration.ApiClient.ParameterToString(documentTypeSystemId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of SharingDefinitionDTO</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsync (string aooCode, int? documentTypeSystemId)
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = await SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsyncWithHttpInfo(aooCode, documentTypeSystemId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooCode"></param>
        /// <param name="documentTypeSystemId"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCodeAsyncWithHttpInfo (string aooCode, int? documentTypeSystemId)
        {
            // verify the required parameter 'aooCode' is set
            if (aooCode == null)
                throw new ApiException(400, "Missing required parameter 'aooCode' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode");
            // verify the required parameter 'documentTypeSystemId' is set
            if (documentTypeSystemId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeSystemId' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode");

            var localVarPath = "/api/SharingDefinitions/GetByAooAndDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooCode != null) localVarFormParams.Add("aooCode", this.Configuration.ApiClient.ParameterToString(aooCode)); // form parameter
            if (documentTypeSystemId != null) localVarFormParams.Add("documentTypeSystemId", this.Configuration.ApiClient.ParameterToString(documentTypeSystemId)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitionsByDocumentTypeIdAndAooCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>SharingDefinitionDTO</returns>
        public SharingDefinitionDTO SharingDefinitionsGetSharingDefinitionsById (string sharingId)
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = SharingDefinitionsGetSharingDefinitionsByIdWithHttpInfo(sharingId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>ApiResponse of SharingDefinitionDTO</returns>
        public ApiResponse< SharingDefinitionDTO > SharingDefinitionsGetSharingDefinitionsByIdWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsById");

            var localVarPath = "/api/SharingDefinitions/ById/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of SharingDefinitionDTO</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionDTO> SharingDefinitionsGetSharingDefinitionsByIdAsync (string sharingId)
        {
             ApiResponse<SharingDefinitionDTO> localVarResponse = await SharingDefinitionsGetSharingDefinitionsByIdAsyncWithHttpInfo(sharingId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingId"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionDTO>> SharingDefinitionsGetSharingDefinitionsByIdAsyncWithHttpInfo (string sharingId)
        {
            // verify the required parameter 'sharingId' is set
            if (sharingId == null)
                throw new ApiException(400, "Missing required parameter 'sharingId' when calling SharingDefinitionsApi->SharingDefinitionsGetSharingDefinitionsById");

            var localVarPath = "/api/SharingDefinitions/ById/{sharingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingId != null) localVarPathParams.Add("sharingId", this.Configuration.ApiClient.ParameterToString(sharingId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsGetSharingDefinitionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        public SharingDefinitionInsertResult SharingDefinitionsInsertSharingDefinition (SharingDefinitionDTO body)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = SharingDefinitionsInsertSharingDefinitionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        public ApiResponse< SharingDefinitionInsertResult > SharingDefinitionsInsertSharingDefinitionWithHttpInfo (SharingDefinitionDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsInsertSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsInsertSharingDefinitionAsync (SharingDefinitionDTO body)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = await SharingDefinitionsInsertSharingDefinitionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsInsertSharingDefinitionAsyncWithHttpInfo (SharingDefinitionDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsInsertSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        public SharingDefinitionInsertResult SharingDefinitionsInsertSharingDefinition (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = SharingDefinitionsInsertSharingDefinitionWithHttpInfo(id, documentTypeId, businessUnitCode, beginning, expiration, afterSend, repeatSendMail, repeatSendMailTime, repeatSendMailNumber, workflowAfterRead, workflowAfterExpiration, workflowAfterExpirationNotRead, alertForNoRead, alertForNoReadTime, disableAfterRead, deleteAfterExpiration, immediatlySend, sendTime, maxDownloadTime, detailsAsZip, defaultLanguage, downloadDirectly, aggregable, aggregateMode, sharingMode, mailDefinitions, htmlForAccess, htmlForExpiration, selectedFields, sharingDefinitionSender);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        public ApiResponse< SharingDefinitionInsertResult > SharingDefinitionsInsertSharingDefinitionWithHttpInfo (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'beginning' is set
            if (beginning == null)
                throw new ApiException(400, "Missing required parameter 'beginning' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'expiration' is set
            if (expiration == null)
                throw new ApiException(400, "Missing required parameter 'expiration' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'afterSend' is set
            if (afterSend == null)
                throw new ApiException(400, "Missing required parameter 'afterSend' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'repeatSendMail' is set
            if (repeatSendMail == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMail' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'repeatSendMailTime' is set
            if (repeatSendMailTime == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailTime' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'repeatSendMailNumber' is set
            if (repeatSendMailNumber == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailNumber' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'workflowAfterRead' is set
            if (workflowAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterRead' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'workflowAfterExpiration' is set
            if (workflowAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpiration' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'workflowAfterExpirationNotRead' is set
            if (workflowAfterExpirationNotRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpirationNotRead' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'alertForNoRead' is set
            if (alertForNoRead == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoRead' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'alertForNoReadTime' is set
            if (alertForNoReadTime == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoReadTime' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'disableAfterRead' is set
            if (disableAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'disableAfterRead' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'deleteAfterExpiration' is set
            if (deleteAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'deleteAfterExpiration' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'immediatlySend' is set
            if (immediatlySend == null)
                throw new ApiException(400, "Missing required parameter 'immediatlySend' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'sendTime' is set
            if (sendTime == null)
                throw new ApiException(400, "Missing required parameter 'sendTime' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'maxDownloadTime' is set
            if (maxDownloadTime == null)
                throw new ApiException(400, "Missing required parameter 'maxDownloadTime' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'detailsAsZip' is set
            if (detailsAsZip == null)
                throw new ApiException(400, "Missing required parameter 'detailsAsZip' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'defaultLanguage' is set
            if (defaultLanguage == null)
                throw new ApiException(400, "Missing required parameter 'defaultLanguage' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'downloadDirectly' is set
            if (downloadDirectly == null)
                throw new ApiException(400, "Missing required parameter 'downloadDirectly' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'aggregable' is set
            if (aggregable == null)
                throw new ApiException(400, "Missing required parameter 'aggregable' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'aggregateMode' is set
            if (aggregateMode == null)
                throw new ApiException(400, "Missing required parameter 'aggregateMode' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'sharingMode' is set
            if (sharingMode == null)
                throw new ApiException(400, "Missing required parameter 'sharingMode' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'mailDefinitions' is set
            if (mailDefinitions == null)
                throw new ApiException(400, "Missing required parameter 'mailDefinitions' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'htmlForAccess' is set
            if (htmlForAccess == null)
                throw new ApiException(400, "Missing required parameter 'htmlForAccess' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'htmlForExpiration' is set
            if (htmlForExpiration == null)
                throw new ApiException(400, "Missing required parameter 'htmlForExpiration' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'selectedFields' is set
            if (selectedFields == null)
                throw new ApiException(400, "Missing required parameter 'selectedFields' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'sharingDefinitionSender' is set
            if (sharingDefinitionSender == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionSender' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (documentTypeId != null) localVarFormParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // form parameter
            if (businessUnitCode != null) localVarFormParams.Add("businessUnitCode", this.Configuration.ApiClient.ParameterToString(businessUnitCode)); // form parameter
            if (beginning != null) localVarFormParams.Add("beginning", this.Configuration.ApiClient.ParameterToString(beginning)); // form parameter
            if (expiration != null) localVarFormParams.Add("expiration", this.Configuration.ApiClient.ParameterToString(expiration)); // form parameter
            if (afterSend != null) localVarFormParams.Add("afterSend", this.Configuration.ApiClient.ParameterToString(afterSend)); // form parameter
            if (repeatSendMail != null) localVarFormParams.Add("repeatSendMail", this.Configuration.ApiClient.ParameterToString(repeatSendMail)); // form parameter
            if (repeatSendMailTime != null) localVarFormParams.Add("repeatSendMailTime", this.Configuration.ApiClient.ParameterToString(repeatSendMailTime)); // form parameter
            if (repeatSendMailNumber != null) localVarFormParams.Add("repeatSendMailNumber", this.Configuration.ApiClient.ParameterToString(repeatSendMailNumber)); // form parameter
            if (workflowAfterRead != null) localVarFormParams.Add("workflowAfterRead", this.Configuration.ApiClient.ParameterToString(workflowAfterRead)); // form parameter
            if (workflowAfterExpiration != null) localVarFormParams.Add("workflowAfterExpiration", this.Configuration.ApiClient.ParameterToString(workflowAfterExpiration)); // form parameter
            if (workflowAfterExpirationNotRead != null) localVarFormParams.Add("workflowAfterExpirationNotRead", this.Configuration.ApiClient.ParameterToString(workflowAfterExpirationNotRead)); // form parameter
            if (alertForNoRead != null) localVarFormParams.Add("alertForNoRead", this.Configuration.ApiClient.ParameterToString(alertForNoRead)); // form parameter
            if (alertForNoReadTime != null) localVarFormParams.Add("alertForNoReadTime", this.Configuration.ApiClient.ParameterToString(alertForNoReadTime)); // form parameter
            if (disableAfterRead != null) localVarFormParams.Add("disableAfterRead", this.Configuration.ApiClient.ParameterToString(disableAfterRead)); // form parameter
            if (deleteAfterExpiration != null) localVarFormParams.Add("deleteAfterExpiration", this.Configuration.ApiClient.ParameterToString(deleteAfterExpiration)); // form parameter
            if (immediatlySend != null) localVarFormParams.Add("immediatlySend", this.Configuration.ApiClient.ParameterToString(immediatlySend)); // form parameter
            if (sendTime != null) localVarFormParams.Add("sendTime", this.Configuration.ApiClient.ParameterToString(sendTime)); // form parameter
            if (maxDownloadTime != null) localVarFormParams.Add("maxDownloadTime", this.Configuration.ApiClient.ParameterToString(maxDownloadTime)); // form parameter
            if (detailsAsZip != null) localVarFormParams.Add("detailsAsZip", this.Configuration.ApiClient.ParameterToString(detailsAsZip)); // form parameter
            if (defaultLanguage != null) localVarFormParams.Add("defaultLanguage", this.Configuration.ApiClient.ParameterToString(defaultLanguage)); // form parameter
            if (downloadDirectly != null) localVarFormParams.Add("downloadDirectly", this.Configuration.ApiClient.ParameterToString(downloadDirectly)); // form parameter
            if (aggregable != null) localVarFormParams.Add("aggregable", this.Configuration.ApiClient.ParameterToString(aggregable)); // form parameter
            if (aggregateMode != null) localVarFormParams.Add("aggregateMode", this.Configuration.ApiClient.ParameterToString(aggregateMode)); // form parameter
            if (sharingMode != null) localVarFormParams.Add("sharingMode", this.Configuration.ApiClient.ParameterToString(sharingMode)); // form parameter
            if (mailDefinitions != null) localVarFormParams.Add("mailDefinitions", this.Configuration.ApiClient.ParameterToString(mailDefinitions)); // form parameter
            if (htmlForAccess != null) localVarFormParams.Add("htmlForAccess", this.Configuration.ApiClient.ParameterToString(htmlForAccess)); // form parameter
            if (htmlForExpiration != null) localVarFormParams.Add("htmlForExpiration", this.Configuration.ApiClient.ParameterToString(htmlForExpiration)); // form parameter
            if (selectedFields != null) localVarFormParams.Add("selectedFields", this.Configuration.ApiClient.ParameterToString(selectedFields)); // form parameter
            if (sharingDefinitionSender != null) localVarFormParams.Add("sharingDefinitionSender", this.Configuration.ApiClient.ParameterToString(sharingDefinitionSender)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsInsertSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsInsertSharingDefinitionAsync (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = await SharingDefinitionsInsertSharingDefinitionAsyncWithHttpInfo(id, documentTypeId, businessUnitCode, beginning, expiration, afterSend, repeatSendMail, repeatSendMailTime, repeatSendMailNumber, workflowAfterRead, workflowAfterExpiration, workflowAfterExpirationNotRead, alertForNoRead, alertForNoReadTime, disableAfterRead, deleteAfterExpiration, immediatlySend, sendTime, maxDownloadTime, detailsAsZip, defaultLanguage, downloadDirectly, aggregable, aggregateMode, sharingMode, mailDefinitions, htmlForAccess, htmlForExpiration, selectedFields, sharingDefinitionSender);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsInsertSharingDefinitionAsyncWithHttpInfo (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'beginning' is set
            if (beginning == null)
                throw new ApiException(400, "Missing required parameter 'beginning' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'expiration' is set
            if (expiration == null)
                throw new ApiException(400, "Missing required parameter 'expiration' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'afterSend' is set
            if (afterSend == null)
                throw new ApiException(400, "Missing required parameter 'afterSend' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'repeatSendMail' is set
            if (repeatSendMail == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMail' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'repeatSendMailTime' is set
            if (repeatSendMailTime == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailTime' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'repeatSendMailNumber' is set
            if (repeatSendMailNumber == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailNumber' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'workflowAfterRead' is set
            if (workflowAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterRead' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'workflowAfterExpiration' is set
            if (workflowAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpiration' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'workflowAfterExpirationNotRead' is set
            if (workflowAfterExpirationNotRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpirationNotRead' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'alertForNoRead' is set
            if (alertForNoRead == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoRead' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'alertForNoReadTime' is set
            if (alertForNoReadTime == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoReadTime' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'disableAfterRead' is set
            if (disableAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'disableAfterRead' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'deleteAfterExpiration' is set
            if (deleteAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'deleteAfterExpiration' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'immediatlySend' is set
            if (immediatlySend == null)
                throw new ApiException(400, "Missing required parameter 'immediatlySend' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'sendTime' is set
            if (sendTime == null)
                throw new ApiException(400, "Missing required parameter 'sendTime' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'maxDownloadTime' is set
            if (maxDownloadTime == null)
                throw new ApiException(400, "Missing required parameter 'maxDownloadTime' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'detailsAsZip' is set
            if (detailsAsZip == null)
                throw new ApiException(400, "Missing required parameter 'detailsAsZip' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'defaultLanguage' is set
            if (defaultLanguage == null)
                throw new ApiException(400, "Missing required parameter 'defaultLanguage' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'downloadDirectly' is set
            if (downloadDirectly == null)
                throw new ApiException(400, "Missing required parameter 'downloadDirectly' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'aggregable' is set
            if (aggregable == null)
                throw new ApiException(400, "Missing required parameter 'aggregable' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'aggregateMode' is set
            if (aggregateMode == null)
                throw new ApiException(400, "Missing required parameter 'aggregateMode' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'sharingMode' is set
            if (sharingMode == null)
                throw new ApiException(400, "Missing required parameter 'sharingMode' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'mailDefinitions' is set
            if (mailDefinitions == null)
                throw new ApiException(400, "Missing required parameter 'mailDefinitions' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'htmlForAccess' is set
            if (htmlForAccess == null)
                throw new ApiException(400, "Missing required parameter 'htmlForAccess' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'htmlForExpiration' is set
            if (htmlForExpiration == null)
                throw new ApiException(400, "Missing required parameter 'htmlForExpiration' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'selectedFields' is set
            if (selectedFields == null)
                throw new ApiException(400, "Missing required parameter 'selectedFields' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");
            // verify the required parameter 'sharingDefinitionSender' is set
            if (sharingDefinitionSender == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionSender' when calling SharingDefinitionsApi->SharingDefinitionsInsertSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (documentTypeId != null) localVarFormParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // form parameter
            if (businessUnitCode != null) localVarFormParams.Add("businessUnitCode", this.Configuration.ApiClient.ParameterToString(businessUnitCode)); // form parameter
            if (beginning != null) localVarFormParams.Add("beginning", this.Configuration.ApiClient.ParameterToString(beginning)); // form parameter
            if (expiration != null) localVarFormParams.Add("expiration", this.Configuration.ApiClient.ParameterToString(expiration)); // form parameter
            if (afterSend != null) localVarFormParams.Add("afterSend", this.Configuration.ApiClient.ParameterToString(afterSend)); // form parameter
            if (repeatSendMail != null) localVarFormParams.Add("repeatSendMail", this.Configuration.ApiClient.ParameterToString(repeatSendMail)); // form parameter
            if (repeatSendMailTime != null) localVarFormParams.Add("repeatSendMailTime", this.Configuration.ApiClient.ParameterToString(repeatSendMailTime)); // form parameter
            if (repeatSendMailNumber != null) localVarFormParams.Add("repeatSendMailNumber", this.Configuration.ApiClient.ParameterToString(repeatSendMailNumber)); // form parameter
            if (workflowAfterRead != null) localVarFormParams.Add("workflowAfterRead", this.Configuration.ApiClient.ParameterToString(workflowAfterRead)); // form parameter
            if (workflowAfterExpiration != null) localVarFormParams.Add("workflowAfterExpiration", this.Configuration.ApiClient.ParameterToString(workflowAfterExpiration)); // form parameter
            if (workflowAfterExpirationNotRead != null) localVarFormParams.Add("workflowAfterExpirationNotRead", this.Configuration.ApiClient.ParameterToString(workflowAfterExpirationNotRead)); // form parameter
            if (alertForNoRead != null) localVarFormParams.Add("alertForNoRead", this.Configuration.ApiClient.ParameterToString(alertForNoRead)); // form parameter
            if (alertForNoReadTime != null) localVarFormParams.Add("alertForNoReadTime", this.Configuration.ApiClient.ParameterToString(alertForNoReadTime)); // form parameter
            if (disableAfterRead != null) localVarFormParams.Add("disableAfterRead", this.Configuration.ApiClient.ParameterToString(disableAfterRead)); // form parameter
            if (deleteAfterExpiration != null) localVarFormParams.Add("deleteAfterExpiration", this.Configuration.ApiClient.ParameterToString(deleteAfterExpiration)); // form parameter
            if (immediatlySend != null) localVarFormParams.Add("immediatlySend", this.Configuration.ApiClient.ParameterToString(immediatlySend)); // form parameter
            if (sendTime != null) localVarFormParams.Add("sendTime", this.Configuration.ApiClient.ParameterToString(sendTime)); // form parameter
            if (maxDownloadTime != null) localVarFormParams.Add("maxDownloadTime", this.Configuration.ApiClient.ParameterToString(maxDownloadTime)); // form parameter
            if (detailsAsZip != null) localVarFormParams.Add("detailsAsZip", this.Configuration.ApiClient.ParameterToString(detailsAsZip)); // form parameter
            if (defaultLanguage != null) localVarFormParams.Add("defaultLanguage", this.Configuration.ApiClient.ParameterToString(defaultLanguage)); // form parameter
            if (downloadDirectly != null) localVarFormParams.Add("downloadDirectly", this.Configuration.ApiClient.ParameterToString(downloadDirectly)); // form parameter
            if (aggregable != null) localVarFormParams.Add("aggregable", this.Configuration.ApiClient.ParameterToString(aggregable)); // form parameter
            if (aggregateMode != null) localVarFormParams.Add("aggregateMode", this.Configuration.ApiClient.ParameterToString(aggregateMode)); // form parameter
            if (sharingMode != null) localVarFormParams.Add("sharingMode", this.Configuration.ApiClient.ParameterToString(sharingMode)); // form parameter
            if (mailDefinitions != null) localVarFormParams.Add("mailDefinitions", this.Configuration.ApiClient.ParameterToString(mailDefinitions)); // form parameter
            if (htmlForAccess != null) localVarFormParams.Add("htmlForAccess", this.Configuration.ApiClient.ParameterToString(htmlForAccess)); // form parameter
            if (htmlForExpiration != null) localVarFormParams.Add("htmlForExpiration", this.Configuration.ApiClient.ParameterToString(htmlForExpiration)); // form parameter
            if (selectedFields != null) localVarFormParams.Add("selectedFields", this.Configuration.ApiClient.ParameterToString(selectedFields)); // form parameter
            if (sharingDefinitionSender != null) localVarFormParams.Add("sharingDefinitionSender", this.Configuration.ApiClient.ParameterToString(sharingDefinitionSender)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsInsertSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? SharingDefinitionsIsArxLinkConfigured ()
        {
             ApiResponse<bool?> localVarResponse = SharingDefinitionsIsArxLinkConfiguredWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > SharingDefinitionsIsArxLinkConfiguredWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions/IsConfigured";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsIsArxLinkConfigured", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> SharingDefinitionsIsArxLinkConfiguredAsync ()
        {
             ApiResponse<bool?> localVarResponse = await SharingDefinitionsIsArxLinkConfiguredAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> SharingDefinitionsIsArxLinkConfiguredAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/SharingDefinitions/IsConfigured";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsIsArxLinkConfigured", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns></returns>
        public void SharingDefinitionsSharingDefinitionDeleteById (string sharingDefinitionId)
        {
             SharingDefinitionsSharingDefinitionDeleteByIdWithHttpInfo(sharingDefinitionId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SharingDefinitionsSharingDefinitionDeleteByIdWithHttpInfo (string sharingDefinitionId)
        {
            // verify the required parameter 'sharingDefinitionId' is set
            if (sharingDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionId' when calling SharingDefinitionsApi->SharingDefinitionsSharingDefinitionDeleteById");

            var localVarPath = "/api/SharingDefinitions/{sharingDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingDefinitionId != null) localVarPathParams.Add("sharingDefinitionId", this.Configuration.ApiClient.ParameterToString(sharingDefinitionId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsSharingDefinitionDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SharingDefinitionsSharingDefinitionDeleteByIdAsync (string sharingDefinitionId)
        {
             await SharingDefinitionsSharingDefinitionDeleteByIdAsyncWithHttpInfo(sharingDefinitionId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharingDefinitionId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SharingDefinitionsSharingDefinitionDeleteByIdAsyncWithHttpInfo (string sharingDefinitionId)
        {
            // verify the required parameter 'sharingDefinitionId' is set
            if (sharingDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionId' when calling SharingDefinitionsApi->SharingDefinitionsSharingDefinitionDeleteById");

            var localVarPath = "/api/SharingDefinitions/{sharingDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sharingDefinitionId != null) localVarPathParams.Add("sharingDefinitionId", this.Configuration.ApiClient.ParameterToString(sharingDefinitionId)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsSharingDefinitionDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        public SharingDefinitionInsertResult SharingDefinitionsUpdateSharingDefinition (SharingDefinitionDTO body)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = SharingDefinitionsUpdateSharingDefinitionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        public ApiResponse< SharingDefinitionInsertResult > SharingDefinitionsUpdateSharingDefinitionWithHttpInfo (SharingDefinitionDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsUpdateSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsUpdateSharingDefinitionAsync (SharingDefinitionDTO body)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = await SharingDefinitionsUpdateSharingDefinitionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsUpdateSharingDefinitionAsyncWithHttpInfo (SharingDefinitionDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsUpdateSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>SharingDefinitionInsertResult</returns>
        public SharingDefinitionInsertResult SharingDefinitionsUpdateSharingDefinition (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = SharingDefinitionsUpdateSharingDefinitionWithHttpInfo(id, documentTypeId, businessUnitCode, beginning, expiration, afterSend, repeatSendMail, repeatSendMailTime, repeatSendMailNumber, workflowAfterRead, workflowAfterExpiration, workflowAfterExpirationNotRead, alertForNoRead, alertForNoReadTime, disableAfterRead, deleteAfterExpiration, immediatlySend, sendTime, maxDownloadTime, detailsAsZip, defaultLanguage, downloadDirectly, aggregable, aggregateMode, sharingMode, mailDefinitions, htmlForAccess, htmlForExpiration, selectedFields, sharingDefinitionSender);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>ApiResponse of SharingDefinitionInsertResult</returns>
        public ApiResponse< SharingDefinitionInsertResult > SharingDefinitionsUpdateSharingDefinitionWithHttpInfo (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'beginning' is set
            if (beginning == null)
                throw new ApiException(400, "Missing required parameter 'beginning' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'expiration' is set
            if (expiration == null)
                throw new ApiException(400, "Missing required parameter 'expiration' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'afterSend' is set
            if (afterSend == null)
                throw new ApiException(400, "Missing required parameter 'afterSend' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'repeatSendMail' is set
            if (repeatSendMail == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMail' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'repeatSendMailTime' is set
            if (repeatSendMailTime == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailTime' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'repeatSendMailNumber' is set
            if (repeatSendMailNumber == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailNumber' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'workflowAfterRead' is set
            if (workflowAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterRead' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'workflowAfterExpiration' is set
            if (workflowAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpiration' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'workflowAfterExpirationNotRead' is set
            if (workflowAfterExpirationNotRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpirationNotRead' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'alertForNoRead' is set
            if (alertForNoRead == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoRead' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'alertForNoReadTime' is set
            if (alertForNoReadTime == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoReadTime' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'disableAfterRead' is set
            if (disableAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'disableAfterRead' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'deleteAfterExpiration' is set
            if (deleteAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'deleteAfterExpiration' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'immediatlySend' is set
            if (immediatlySend == null)
                throw new ApiException(400, "Missing required parameter 'immediatlySend' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'sendTime' is set
            if (sendTime == null)
                throw new ApiException(400, "Missing required parameter 'sendTime' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'maxDownloadTime' is set
            if (maxDownloadTime == null)
                throw new ApiException(400, "Missing required parameter 'maxDownloadTime' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'detailsAsZip' is set
            if (detailsAsZip == null)
                throw new ApiException(400, "Missing required parameter 'detailsAsZip' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'defaultLanguage' is set
            if (defaultLanguage == null)
                throw new ApiException(400, "Missing required parameter 'defaultLanguage' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'downloadDirectly' is set
            if (downloadDirectly == null)
                throw new ApiException(400, "Missing required parameter 'downloadDirectly' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'aggregable' is set
            if (aggregable == null)
                throw new ApiException(400, "Missing required parameter 'aggregable' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'aggregateMode' is set
            if (aggregateMode == null)
                throw new ApiException(400, "Missing required parameter 'aggregateMode' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'sharingMode' is set
            if (sharingMode == null)
                throw new ApiException(400, "Missing required parameter 'sharingMode' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'mailDefinitions' is set
            if (mailDefinitions == null)
                throw new ApiException(400, "Missing required parameter 'mailDefinitions' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'htmlForAccess' is set
            if (htmlForAccess == null)
                throw new ApiException(400, "Missing required parameter 'htmlForAccess' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'htmlForExpiration' is set
            if (htmlForExpiration == null)
                throw new ApiException(400, "Missing required parameter 'htmlForExpiration' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'selectedFields' is set
            if (selectedFields == null)
                throw new ApiException(400, "Missing required parameter 'selectedFields' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'sharingDefinitionSender' is set
            if (sharingDefinitionSender == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionSender' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (documentTypeId != null) localVarFormParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // form parameter
            if (businessUnitCode != null) localVarFormParams.Add("businessUnitCode", this.Configuration.ApiClient.ParameterToString(businessUnitCode)); // form parameter
            if (beginning != null) localVarFormParams.Add("beginning", this.Configuration.ApiClient.ParameterToString(beginning)); // form parameter
            if (expiration != null) localVarFormParams.Add("expiration", this.Configuration.ApiClient.ParameterToString(expiration)); // form parameter
            if (afterSend != null) localVarFormParams.Add("afterSend", this.Configuration.ApiClient.ParameterToString(afterSend)); // form parameter
            if (repeatSendMail != null) localVarFormParams.Add("repeatSendMail", this.Configuration.ApiClient.ParameterToString(repeatSendMail)); // form parameter
            if (repeatSendMailTime != null) localVarFormParams.Add("repeatSendMailTime", this.Configuration.ApiClient.ParameterToString(repeatSendMailTime)); // form parameter
            if (repeatSendMailNumber != null) localVarFormParams.Add("repeatSendMailNumber", this.Configuration.ApiClient.ParameterToString(repeatSendMailNumber)); // form parameter
            if (workflowAfterRead != null) localVarFormParams.Add("workflowAfterRead", this.Configuration.ApiClient.ParameterToString(workflowAfterRead)); // form parameter
            if (workflowAfterExpiration != null) localVarFormParams.Add("workflowAfterExpiration", this.Configuration.ApiClient.ParameterToString(workflowAfterExpiration)); // form parameter
            if (workflowAfterExpirationNotRead != null) localVarFormParams.Add("workflowAfterExpirationNotRead", this.Configuration.ApiClient.ParameterToString(workflowAfterExpirationNotRead)); // form parameter
            if (alertForNoRead != null) localVarFormParams.Add("alertForNoRead", this.Configuration.ApiClient.ParameterToString(alertForNoRead)); // form parameter
            if (alertForNoReadTime != null) localVarFormParams.Add("alertForNoReadTime", this.Configuration.ApiClient.ParameterToString(alertForNoReadTime)); // form parameter
            if (disableAfterRead != null) localVarFormParams.Add("disableAfterRead", this.Configuration.ApiClient.ParameterToString(disableAfterRead)); // form parameter
            if (deleteAfterExpiration != null) localVarFormParams.Add("deleteAfterExpiration", this.Configuration.ApiClient.ParameterToString(deleteAfterExpiration)); // form parameter
            if (immediatlySend != null) localVarFormParams.Add("immediatlySend", this.Configuration.ApiClient.ParameterToString(immediatlySend)); // form parameter
            if (sendTime != null) localVarFormParams.Add("sendTime", this.Configuration.ApiClient.ParameterToString(sendTime)); // form parameter
            if (maxDownloadTime != null) localVarFormParams.Add("maxDownloadTime", this.Configuration.ApiClient.ParameterToString(maxDownloadTime)); // form parameter
            if (detailsAsZip != null) localVarFormParams.Add("detailsAsZip", this.Configuration.ApiClient.ParameterToString(detailsAsZip)); // form parameter
            if (defaultLanguage != null) localVarFormParams.Add("defaultLanguage", this.Configuration.ApiClient.ParameterToString(defaultLanguage)); // form parameter
            if (downloadDirectly != null) localVarFormParams.Add("downloadDirectly", this.Configuration.ApiClient.ParameterToString(downloadDirectly)); // form parameter
            if (aggregable != null) localVarFormParams.Add("aggregable", this.Configuration.ApiClient.ParameterToString(aggregable)); // form parameter
            if (aggregateMode != null) localVarFormParams.Add("aggregateMode", this.Configuration.ApiClient.ParameterToString(aggregateMode)); // form parameter
            if (sharingMode != null) localVarFormParams.Add("sharingMode", this.Configuration.ApiClient.ParameterToString(sharingMode)); // form parameter
            if (mailDefinitions != null) localVarFormParams.Add("mailDefinitions", this.Configuration.ApiClient.ParameterToString(mailDefinitions)); // form parameter
            if (htmlForAccess != null) localVarFormParams.Add("htmlForAccess", this.Configuration.ApiClient.ParameterToString(htmlForAccess)); // form parameter
            if (htmlForExpiration != null) localVarFormParams.Add("htmlForExpiration", this.Configuration.ApiClient.ParameterToString(htmlForExpiration)); // form parameter
            if (selectedFields != null) localVarFormParams.Add("selectedFields", this.Configuration.ApiClient.ParameterToString(selectedFields)); // form parameter
            if (sharingDefinitionSender != null) localVarFormParams.Add("sharingDefinitionSender", this.Configuration.ApiClient.ParameterToString(sharingDefinitionSender)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsUpdateSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>Task of SharingDefinitionInsertResult</returns>
        public async System.Threading.Tasks.Task<SharingDefinitionInsertResult> SharingDefinitionsUpdateSharingDefinitionAsync (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender)
        {
             ApiResponse<SharingDefinitionInsertResult> localVarResponse = await SharingDefinitionsUpdateSharingDefinitionAsyncWithHttpInfo(id, documentTypeId, businessUnitCode, beginning, expiration, afterSend, repeatSendMail, repeatSendMailTime, repeatSendMailNumber, workflowAfterRead, workflowAfterExpiration, workflowAfterExpirationNotRead, alertForNoRead, alertForNoReadTime, disableAfterRead, deleteAfterExpiration, immediatlySend, sendTime, maxDownloadTime, detailsAsZip, defaultLanguage, downloadDirectly, aggregable, aggregateMode, sharingMode, mailDefinitions, htmlForAccess, htmlForExpiration, selectedFields, sharingDefinitionSender);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="documentTypeId"></param>
        /// <param name="businessUnitCode"></param>
        /// <param name="beginning"></param>
        /// <param name="expiration"></param>
        /// <param name="afterSend"></param>
        /// <param name="repeatSendMail"></param>
        /// <param name="repeatSendMailTime"></param>
        /// <param name="repeatSendMailNumber"></param>
        /// <param name="workflowAfterRead"></param>
        /// <param name="workflowAfterExpiration"></param>
        /// <param name="workflowAfterExpirationNotRead"></param>
        /// <param name="alertForNoRead"></param>
        /// <param name="alertForNoReadTime"></param>
        /// <param name="disableAfterRead"></param>
        /// <param name="deleteAfterExpiration"></param>
        /// <param name="immediatlySend"></param>
        /// <param name="sendTime"></param>
        /// <param name="maxDownloadTime"></param>
        /// <param name="detailsAsZip"></param>
        /// <param name="defaultLanguage"></param>
        /// <param name="downloadDirectly"></param>
        /// <param name="aggregable"></param>
        /// <param name="aggregateMode"></param>
        /// <param name="sharingMode"></param>
        /// <param name="mailDefinitions"></param>
        /// <param name="htmlForAccess"></param>
        /// <param name="htmlForExpiration"></param>
        /// <param name="selectedFields"></param>
        /// <param name="sharingDefinitionSender"></param>
        /// <returns>Task of ApiResponse (SharingDefinitionInsertResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharingDefinitionInsertResult>> SharingDefinitionsUpdateSharingDefinitionAsyncWithHttpInfo (string id, int? documentTypeId, string businessUnitCode, int? beginning, int? expiration, int? afterSend, bool? repeatSendMail, int? repeatSendMailTime, int? repeatSendMailNumber, int? workflowAfterRead, int? workflowAfterExpiration, int? workflowAfterExpirationNotRead, bool? alertForNoRead, int? alertForNoReadTime, bool? disableAfterRead, bool? deleteAfterExpiration, bool? immediatlySend, DateTime? sendTime, int? maxDownloadTime, bool? detailsAsZip, string defaultLanguage, bool? downloadDirectly, bool? aggregable, int? aggregateMode, int? sharingMode, List<SharingMailDTO> mailDefinitions, List<SharingHtmlDTO> htmlForAccess, List<SharingHtmlDTO> htmlForExpiration, SelectDTO selectedFields, SharingDefinitionSenderDTO sharingDefinitionSender)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'beginning' is set
            if (beginning == null)
                throw new ApiException(400, "Missing required parameter 'beginning' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'expiration' is set
            if (expiration == null)
                throw new ApiException(400, "Missing required parameter 'expiration' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'afterSend' is set
            if (afterSend == null)
                throw new ApiException(400, "Missing required parameter 'afterSend' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'repeatSendMail' is set
            if (repeatSendMail == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMail' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'repeatSendMailTime' is set
            if (repeatSendMailTime == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailTime' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'repeatSendMailNumber' is set
            if (repeatSendMailNumber == null)
                throw new ApiException(400, "Missing required parameter 'repeatSendMailNumber' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'workflowAfterRead' is set
            if (workflowAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterRead' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'workflowAfterExpiration' is set
            if (workflowAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpiration' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'workflowAfterExpirationNotRead' is set
            if (workflowAfterExpirationNotRead == null)
                throw new ApiException(400, "Missing required parameter 'workflowAfterExpirationNotRead' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'alertForNoRead' is set
            if (alertForNoRead == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoRead' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'alertForNoReadTime' is set
            if (alertForNoReadTime == null)
                throw new ApiException(400, "Missing required parameter 'alertForNoReadTime' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'disableAfterRead' is set
            if (disableAfterRead == null)
                throw new ApiException(400, "Missing required parameter 'disableAfterRead' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'deleteAfterExpiration' is set
            if (deleteAfterExpiration == null)
                throw new ApiException(400, "Missing required parameter 'deleteAfterExpiration' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'immediatlySend' is set
            if (immediatlySend == null)
                throw new ApiException(400, "Missing required parameter 'immediatlySend' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'sendTime' is set
            if (sendTime == null)
                throw new ApiException(400, "Missing required parameter 'sendTime' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'maxDownloadTime' is set
            if (maxDownloadTime == null)
                throw new ApiException(400, "Missing required parameter 'maxDownloadTime' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'detailsAsZip' is set
            if (detailsAsZip == null)
                throw new ApiException(400, "Missing required parameter 'detailsAsZip' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'defaultLanguage' is set
            if (defaultLanguage == null)
                throw new ApiException(400, "Missing required parameter 'defaultLanguage' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'downloadDirectly' is set
            if (downloadDirectly == null)
                throw new ApiException(400, "Missing required parameter 'downloadDirectly' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'aggregable' is set
            if (aggregable == null)
                throw new ApiException(400, "Missing required parameter 'aggregable' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'aggregateMode' is set
            if (aggregateMode == null)
                throw new ApiException(400, "Missing required parameter 'aggregateMode' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'sharingMode' is set
            if (sharingMode == null)
                throw new ApiException(400, "Missing required parameter 'sharingMode' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'mailDefinitions' is set
            if (mailDefinitions == null)
                throw new ApiException(400, "Missing required parameter 'mailDefinitions' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'htmlForAccess' is set
            if (htmlForAccess == null)
                throw new ApiException(400, "Missing required parameter 'htmlForAccess' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'htmlForExpiration' is set
            if (htmlForExpiration == null)
                throw new ApiException(400, "Missing required parameter 'htmlForExpiration' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'selectedFields' is set
            if (selectedFields == null)
                throw new ApiException(400, "Missing required parameter 'selectedFields' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");
            // verify the required parameter 'sharingDefinitionSender' is set
            if (sharingDefinitionSender == null)
                throw new ApiException(400, "Missing required parameter 'sharingDefinitionSender' when calling SharingDefinitionsApi->SharingDefinitionsUpdateSharingDefinition");

            var localVarPath = "/api/SharingDefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (documentTypeId != null) localVarFormParams.Add("documentTypeId", this.Configuration.ApiClient.ParameterToString(documentTypeId)); // form parameter
            if (businessUnitCode != null) localVarFormParams.Add("businessUnitCode", this.Configuration.ApiClient.ParameterToString(businessUnitCode)); // form parameter
            if (beginning != null) localVarFormParams.Add("beginning", this.Configuration.ApiClient.ParameterToString(beginning)); // form parameter
            if (expiration != null) localVarFormParams.Add("expiration", this.Configuration.ApiClient.ParameterToString(expiration)); // form parameter
            if (afterSend != null) localVarFormParams.Add("afterSend", this.Configuration.ApiClient.ParameterToString(afterSend)); // form parameter
            if (repeatSendMail != null) localVarFormParams.Add("repeatSendMail", this.Configuration.ApiClient.ParameterToString(repeatSendMail)); // form parameter
            if (repeatSendMailTime != null) localVarFormParams.Add("repeatSendMailTime", this.Configuration.ApiClient.ParameterToString(repeatSendMailTime)); // form parameter
            if (repeatSendMailNumber != null) localVarFormParams.Add("repeatSendMailNumber", this.Configuration.ApiClient.ParameterToString(repeatSendMailNumber)); // form parameter
            if (workflowAfterRead != null) localVarFormParams.Add("workflowAfterRead", this.Configuration.ApiClient.ParameterToString(workflowAfterRead)); // form parameter
            if (workflowAfterExpiration != null) localVarFormParams.Add("workflowAfterExpiration", this.Configuration.ApiClient.ParameterToString(workflowAfterExpiration)); // form parameter
            if (workflowAfterExpirationNotRead != null) localVarFormParams.Add("workflowAfterExpirationNotRead", this.Configuration.ApiClient.ParameterToString(workflowAfterExpirationNotRead)); // form parameter
            if (alertForNoRead != null) localVarFormParams.Add("alertForNoRead", this.Configuration.ApiClient.ParameterToString(alertForNoRead)); // form parameter
            if (alertForNoReadTime != null) localVarFormParams.Add("alertForNoReadTime", this.Configuration.ApiClient.ParameterToString(alertForNoReadTime)); // form parameter
            if (disableAfterRead != null) localVarFormParams.Add("disableAfterRead", this.Configuration.ApiClient.ParameterToString(disableAfterRead)); // form parameter
            if (deleteAfterExpiration != null) localVarFormParams.Add("deleteAfterExpiration", this.Configuration.ApiClient.ParameterToString(deleteAfterExpiration)); // form parameter
            if (immediatlySend != null) localVarFormParams.Add("immediatlySend", this.Configuration.ApiClient.ParameterToString(immediatlySend)); // form parameter
            if (sendTime != null) localVarFormParams.Add("sendTime", this.Configuration.ApiClient.ParameterToString(sendTime)); // form parameter
            if (maxDownloadTime != null) localVarFormParams.Add("maxDownloadTime", this.Configuration.ApiClient.ParameterToString(maxDownloadTime)); // form parameter
            if (detailsAsZip != null) localVarFormParams.Add("detailsAsZip", this.Configuration.ApiClient.ParameterToString(detailsAsZip)); // form parameter
            if (defaultLanguage != null) localVarFormParams.Add("defaultLanguage", this.Configuration.ApiClient.ParameterToString(defaultLanguage)); // form parameter
            if (downloadDirectly != null) localVarFormParams.Add("downloadDirectly", this.Configuration.ApiClient.ParameterToString(downloadDirectly)); // form parameter
            if (aggregable != null) localVarFormParams.Add("aggregable", this.Configuration.ApiClient.ParameterToString(aggregable)); // form parameter
            if (aggregateMode != null) localVarFormParams.Add("aggregateMode", this.Configuration.ApiClient.ParameterToString(aggregateMode)); // form parameter
            if (sharingMode != null) localVarFormParams.Add("sharingMode", this.Configuration.ApiClient.ParameterToString(sharingMode)); // form parameter
            if (mailDefinitions != null) localVarFormParams.Add("mailDefinitions", this.Configuration.ApiClient.ParameterToString(mailDefinitions)); // form parameter
            if (htmlForAccess != null) localVarFormParams.Add("htmlForAccess", this.Configuration.ApiClient.ParameterToString(htmlForAccess)); // form parameter
            if (htmlForExpiration != null) localVarFormParams.Add("htmlForExpiration", this.Configuration.ApiClient.ParameterToString(htmlForExpiration)); // form parameter
            if (selectedFields != null) localVarFormParams.Add("selectedFields", this.Configuration.ApiClient.ParameterToString(selectedFields)); // form parameter
            if (sharingDefinitionSender != null) localVarFormParams.Add("sharingDefinitionSender", this.Configuration.ApiClient.ParameterToString(sharingDefinitionSender)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharingDefinitionsUpdateSharingDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharingDefinitionInsertResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharingDefinitionInsertResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharingDefinitionInsertResult)));
        }

    }
}
