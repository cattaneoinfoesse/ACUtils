/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNext.Client;
using ACUtils.AXRepository.ArxivarNext.Model;

namespace ACUtils.AXRepository.ArxivarNext.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProcessVariablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>FieldValuesDTO</returns>
        FieldValuesDTO ProcessVariablesGetFieldValuesByProcessVariable (VariablesValuesCriteriaDTO body, int? processVariableId);

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        ApiResponse<FieldValuesDTO> ProcessVariablesGetFieldValuesByProcessVariableWithHttpInfo (VariablesValuesCriteriaDTO body, int? processVariableId);
        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>FieldValuesDTO</returns>
        FieldValuesDTO ProcessVariablesGetFieldValuesByProcessVariable (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId);

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        ApiResponse<FieldValuesDTO> ProcessVariablesGetFieldValuesByProcessVariableWithHttpInfo (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId);
        /// <summary>
        /// This call returns the filter field associated woth a process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable fields information</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        FieldFilterConcreteDTO ProcessVariablesGetFiltersByProcessVariables (ProcessVariablesFieldsDTO body, int? processVariableId);

        /// <summary>
        /// This call returns the filter field associated woth a process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable fields information</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        ApiResponse<FieldFilterConcreteDTO> ProcessVariablesGetFiltersByProcessVariablesWithHttpInfo (ProcessVariablesFieldsDTO body, int? processVariableId);
        /// <summary>
        /// This call returns the filter field associated woth a process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        FieldFilterConcreteDTO ProcessVariablesGetFiltersByProcessVariables (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId);

        /// <summary>
        /// This call returns the filter field associated woth a process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        ApiResponse<FieldFilterConcreteDTO> ProcessVariablesGetFiltersByProcessVariablesWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId);
        /// <summary>
        /// This call inserts the variables associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variables information</param>
        /// <param name="processId">Process Identifier</param>
        /// <returns></returns>
        void ProcessVariablesSetProcessVariableValue (ProcessVariablesFieldsDTO body, int? processId);

        /// <summary>
        /// This call inserts the variables associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variables information</param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProcessVariablesSetProcessVariableValueWithHttpInfo (ProcessVariablesFieldsDTO body, int? processId);
        /// <summary>
        /// This call inserts the variables associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processId">Process Identifier</param>
        /// <returns></returns>
        void ProcessVariablesSetProcessVariableValue (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processId);

        /// <summary>
        /// This call inserts the variables associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProcessVariablesSetProcessVariableValueWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processId);
        /// <summary>
        /// Validate the variable data update of a specific variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The validation data</param>
        /// <param name="processId">The process instance id</param>
        /// <returns>ValidationFieldResultDTO</returns>
        ValidationFieldResultDTO ProcessVariablesValidateVariabile (ProcessVariableValidationDTO body, int? processId);

        /// <summary>
        /// Validate the variable data update of a specific variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The validation data</param>
        /// <param name="processId">The process instance id</param>
        /// <returns>ApiResponse of ValidationFieldResultDTO</returns>
        ApiResponse<ValidationFieldResultDTO> ProcessVariablesValidateVariabileWithHttpInfo (ProcessVariableValidationDTO body, int? processId);
        /// <summary>
        /// Validate the variable data update of a specific variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="processId">The process instance id</param>
        /// <returns>ValidationFieldResultDTO</returns>
        ValidationFieldResultDTO ProcessVariablesValidateVariabile (string variableName, ProcessVariablesFieldsDTO currentData, int? processId);

        /// <summary>
        /// Validate the variable data update of a specific variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="processId">The process instance id</param>
        /// <returns>ApiResponse of ValidationFieldResultDTO</returns>
        ApiResponse<ValidationFieldResultDTO> ProcessVariablesValidateVariabileWithHttpInfo (string variableName, ProcessVariablesFieldsDTO currentData, int? processId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of FieldValuesDTO</returns>
        System.Threading.Tasks.Task<FieldValuesDTO> ProcessVariablesGetFieldValuesByProcessVariableAsync (VariablesValuesCriteriaDTO body, int? processVariableId);

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> ProcessVariablesGetFieldValuesByProcessVariableAsyncWithHttpInfo (VariablesValuesCriteriaDTO body, int? processVariableId);
        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of FieldValuesDTO</returns>
        System.Threading.Tasks.Task<FieldValuesDTO> ProcessVariablesGetFieldValuesByProcessVariableAsync (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId);

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> ProcessVariablesGetFieldValuesByProcessVariableAsyncWithHttpInfo (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId);
        /// <summary>
        /// This call returns the filter field associated woth a process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable fields information</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        System.Threading.Tasks.Task<FieldFilterConcreteDTO> ProcessVariablesGetFiltersByProcessVariablesAsync (ProcessVariablesFieldsDTO body, int? processVariableId);

        /// <summary>
        /// This call returns the filter field associated woth a process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable fields information</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> ProcessVariablesGetFiltersByProcessVariablesAsyncWithHttpInfo (ProcessVariablesFieldsDTO body, int? processVariableId);
        /// <summary>
        /// This call returns the filter field associated woth a process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        System.Threading.Tasks.Task<FieldFilterConcreteDTO> ProcessVariablesGetFiltersByProcessVariablesAsync (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId);

        /// <summary>
        /// This call returns the filter field associated woth a process variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> ProcessVariablesGetFiltersByProcessVariablesAsyncWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId);
        /// <summary>
        /// This call inserts the variables associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variables information</param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProcessVariablesSetProcessVariableValueAsync (ProcessVariablesFieldsDTO body, int? processId);

        /// <summary>
        /// This call inserts the variables associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variables information</param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProcessVariablesSetProcessVariableValueAsyncWithHttpInfo (ProcessVariablesFieldsDTO body, int? processId);
        /// <summary>
        /// This call inserts the variables associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProcessVariablesSetProcessVariableValueAsync (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processId);

        /// <summary>
        /// This call inserts the variables associated with the process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProcessVariablesSetProcessVariableValueAsyncWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processId);
        /// <summary>
        /// Validate the variable data update of a specific variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The validation data</param>
        /// <param name="processId">The process instance id</param>
        /// <returns>Task of ValidationFieldResultDTO</returns>
        System.Threading.Tasks.Task<ValidationFieldResultDTO> ProcessVariablesValidateVariabileAsync (ProcessVariableValidationDTO body, int? processId);

        /// <summary>
        /// Validate the variable data update of a specific variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The validation data</param>
        /// <param name="processId">The process instance id</param>
        /// <returns>Task of ApiResponse (ValidationFieldResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationFieldResultDTO>> ProcessVariablesValidateVariabileAsyncWithHttpInfo (ProcessVariableValidationDTO body, int? processId);
        /// <summary>
        /// Validate the variable data update of a specific variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="processId">The process instance id</param>
        /// <returns>Task of ValidationFieldResultDTO</returns>
        System.Threading.Tasks.Task<ValidationFieldResultDTO> ProcessVariablesValidateVariabileAsync (string variableName, ProcessVariablesFieldsDTO currentData, int? processId);

        /// <summary>
        /// Validate the variable data update of a specific variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="processId">The process instance id</param>
        /// <returns>Task of ApiResponse (ValidationFieldResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationFieldResultDTO>> ProcessVariablesValidateVariabileAsyncWithHttpInfo (string variableName, ProcessVariablesFieldsDTO currentData, int? processId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProcessVariablesApi : IProcessVariablesApi
    {
        private ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessVariablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessVariablesApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNext.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessVariablesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProcessVariablesApi()
        {
            this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessVariablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessVariablesApi(ACUtils.AXRepository.ArxivarNext.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNext.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNext.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>FieldValuesDTO</returns>
        public FieldValuesDTO ProcessVariablesGetFieldValuesByProcessVariable (VariablesValuesCriteriaDTO body, int? processVariableId)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = ProcessVariablesGetFieldValuesByProcessVariableWithHttpInfo(body, processVariableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        public ApiResponse< FieldValuesDTO > ProcessVariablesGetFieldValuesByProcessVariableWithHttpInfo (VariablesValuesCriteriaDTO body, int? processVariableId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ProcessVariablesGetFieldValuesByProcessVariable");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling ProcessVariablesApi->ProcessVariablesGetFieldValuesByProcessVariable");

            var localVarPath = "/api/ProcessVariables/{processVariableId}/getDatasourceValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesGetFieldValuesByProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of FieldValuesDTO</returns>
        public async System.Threading.Tasks.Task<FieldValuesDTO> ProcessVariablesGetFieldValuesByProcessVariableAsync (VariablesValuesCriteriaDTO body, int? processVariableId)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = await ProcessVariablesGetFieldValuesByProcessVariableAsyncWithHttpInfo(body, processVariableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Actual values of the process variables (for value dependant query)</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> ProcessVariablesGetFieldValuesByProcessVariableAsyncWithHttpInfo (VariablesValuesCriteriaDTO body, int? processVariableId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ProcessVariablesGetFieldValuesByProcessVariable");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling ProcessVariablesApi->ProcessVariablesGetFieldValuesByProcessVariable");

            var localVarPath = "/api/ProcessVariables/{processVariableId}/getDatasourceValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesGetFieldValuesByProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>FieldValuesDTO</returns>
        public FieldValuesDTO ProcessVariablesGetFieldValuesByProcessVariable (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = ProcessVariablesGetFieldValuesByProcessVariableWithHttpInfo(processVariablesFields, variableFilters, processVariableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>ApiResponse of FieldValuesDTO</returns>
        public ApiResponse< FieldValuesDTO > ProcessVariablesGetFieldValuesByProcessVariableWithHttpInfo (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId)
        {
            // verify the required parameter 'processVariablesFields' is set
            if (processVariablesFields == null)
                throw new ApiException(400, "Missing required parameter 'processVariablesFields' when calling ProcessVariablesApi->ProcessVariablesGetFieldValuesByProcessVariable");
            // verify the required parameter 'variableFilters' is set
            if (variableFilters == null)
                throw new ApiException(400, "Missing required parameter 'variableFilters' when calling ProcessVariablesApi->ProcessVariablesGetFieldValuesByProcessVariable");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling ProcessVariablesApi->ProcessVariablesGetFieldValuesByProcessVariable");

            var localVarPath = "/api/ProcessVariables/{processVariableId}/getDatasourceValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (processVariablesFields != null) localVarFormParams.Add("processVariablesFields", this.Configuration.ApiClient.ParameterToString(processVariablesFields)); // form parameter
            if (variableFilters != null) localVarFormParams.Add("variableFilters", this.Configuration.ApiClient.ParameterToString(variableFilters)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesGetFieldValuesByProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of FieldValuesDTO</returns>
        public async System.Threading.Tasks.Task<FieldValuesDTO> ProcessVariablesGetFieldValuesByProcessVariableAsync (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId)
        {
             ApiResponse<FieldValuesDTO> localVarResponse = await ProcessVariablesGetFieldValuesByProcessVariableAsyncWithHttpInfo(processVariablesFields, variableFilters, processVariableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the possibile values for a process variable in format list or table. 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processVariablesFields"></param>
        /// <param name="variableFilters"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of ApiResponse (FieldValuesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesDTO>> ProcessVariablesGetFieldValuesByProcessVariableAsyncWithHttpInfo (ProcessVariablesFieldsDTO processVariablesFields, VariableFiltersDTO variableFilters, int? processVariableId)
        {
            // verify the required parameter 'processVariablesFields' is set
            if (processVariablesFields == null)
                throw new ApiException(400, "Missing required parameter 'processVariablesFields' when calling ProcessVariablesApi->ProcessVariablesGetFieldValuesByProcessVariable");
            // verify the required parameter 'variableFilters' is set
            if (variableFilters == null)
                throw new ApiException(400, "Missing required parameter 'variableFilters' when calling ProcessVariablesApi->ProcessVariablesGetFieldValuesByProcessVariable");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling ProcessVariablesApi->ProcessVariablesGetFieldValuesByProcessVariable");

            var localVarPath = "/api/ProcessVariables/{processVariableId}/getDatasourceValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (processVariablesFields != null) localVarFormParams.Add("processVariablesFields", this.Configuration.ApiClient.ParameterToString(processVariablesFields)); // form parameter
            if (variableFilters != null) localVarFormParams.Add("variableFilters", this.Configuration.ApiClient.ParameterToString(variableFilters)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesGetFieldValuesByProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldValuesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesDTO)));
        }

        /// <summary>
        /// This call returns the filter field associated woth a process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable fields information</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        public FieldFilterConcreteDTO ProcessVariablesGetFiltersByProcessVariables (ProcessVariablesFieldsDTO body, int? processVariableId)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = ProcessVariablesGetFiltersByProcessVariablesWithHttpInfo(body, processVariableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the filter field associated woth a process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable fields information</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        public ApiResponse< FieldFilterConcreteDTO > ProcessVariablesGetFiltersByProcessVariablesWithHttpInfo (ProcessVariablesFieldsDTO body, int? processVariableId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");

            var localVarPath = "/api/ProcessVariables/{processVariableId}/getFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesGetFiltersByProcessVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldFilterConcreteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
        }

        /// <summary>
        /// This call returns the filter field associated woth a process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable fields information</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        public async System.Threading.Tasks.Task<FieldFilterConcreteDTO> ProcessVariablesGetFiltersByProcessVariablesAsync (ProcessVariablesFieldsDTO body, int? processVariableId)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = await ProcessVariablesGetFiltersByProcessVariablesAsyncWithHttpInfo(body, processVariableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the filter field associated woth a process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable fields information</param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> ProcessVariablesGetFiltersByProcessVariablesAsyncWithHttpInfo (ProcessVariablesFieldsDTO body, int? processVariableId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");

            var localVarPath = "/api/ProcessVariables/{processVariableId}/getFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesGetFiltersByProcessVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldFilterConcreteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
        }

        /// <summary>
        /// This call returns the filter field associated woth a process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>FieldFilterConcreteDTO</returns>
        public FieldFilterConcreteDTO ProcessVariablesGetFiltersByProcessVariables (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = ProcessVariablesGetFiltersByProcessVariablesWithHttpInfo(booleanVariables, stringVariables, comboVariables, dateTimeVariables, doubleVariables, tableVariables, processVariableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the filter field associated woth a process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>ApiResponse of FieldFilterConcreteDTO</returns>
        public ApiResponse< FieldFilterConcreteDTO > ProcessVariablesGetFiltersByProcessVariablesWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId)
        {
            // verify the required parameter 'booleanVariables' is set
            if (booleanVariables == null)
                throw new ApiException(400, "Missing required parameter 'booleanVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'stringVariables' is set
            if (stringVariables == null)
                throw new ApiException(400, "Missing required parameter 'stringVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'comboVariables' is set
            if (comboVariables == null)
                throw new ApiException(400, "Missing required parameter 'comboVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'dateTimeVariables' is set
            if (dateTimeVariables == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'doubleVariables' is set
            if (doubleVariables == null)
                throw new ApiException(400, "Missing required parameter 'doubleVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'tableVariables' is set
            if (tableVariables == null)
                throw new ApiException(400, "Missing required parameter 'tableVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");

            var localVarPath = "/api/ProcessVariables/{processVariableId}/getFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (booleanVariables != null) localVarFormParams.Add("booleanVariables", this.Configuration.ApiClient.ParameterToString(booleanVariables)); // form parameter
            if (stringVariables != null) localVarFormParams.Add("stringVariables", this.Configuration.ApiClient.ParameterToString(stringVariables)); // form parameter
            if (comboVariables != null) localVarFormParams.Add("comboVariables", this.Configuration.ApiClient.ParameterToString(comboVariables)); // form parameter
            if (dateTimeVariables != null) localVarFormParams.Add("dateTimeVariables", this.Configuration.ApiClient.ParameterToString(dateTimeVariables)); // form parameter
            if (doubleVariables != null) localVarFormParams.Add("doubleVariables", this.Configuration.ApiClient.ParameterToString(doubleVariables)); // form parameter
            if (tableVariables != null) localVarFormParams.Add("tableVariables", this.Configuration.ApiClient.ParameterToString(tableVariables)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesGetFiltersByProcessVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldFilterConcreteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
        }

        /// <summary>
        /// This call returns the filter field associated woth a process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of FieldFilterConcreteDTO</returns>
        public async System.Threading.Tasks.Task<FieldFilterConcreteDTO> ProcessVariablesGetFiltersByProcessVariablesAsync (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId)
        {
             ApiResponse<FieldFilterConcreteDTO> localVarResponse = await ProcessVariablesGetFiltersByProcessVariablesAsyncWithHttpInfo(booleanVariables, stringVariables, comboVariables, dateTimeVariables, doubleVariables, tableVariables, processVariableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the filter field associated woth a process variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processVariableId">Process variable identifier</param>
        /// <returns>Task of ApiResponse (FieldFilterConcreteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterConcreteDTO>> ProcessVariablesGetFiltersByProcessVariablesAsyncWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processVariableId)
        {
            // verify the required parameter 'booleanVariables' is set
            if (booleanVariables == null)
                throw new ApiException(400, "Missing required parameter 'booleanVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'stringVariables' is set
            if (stringVariables == null)
                throw new ApiException(400, "Missing required parameter 'stringVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'comboVariables' is set
            if (comboVariables == null)
                throw new ApiException(400, "Missing required parameter 'comboVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'dateTimeVariables' is set
            if (dateTimeVariables == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'doubleVariables' is set
            if (doubleVariables == null)
                throw new ApiException(400, "Missing required parameter 'doubleVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'tableVariables' is set
            if (tableVariables == null)
                throw new ApiException(400, "Missing required parameter 'tableVariables' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");
            // verify the required parameter 'processVariableId' is set
            if (processVariableId == null)
                throw new ApiException(400, "Missing required parameter 'processVariableId' when calling ProcessVariablesApi->ProcessVariablesGetFiltersByProcessVariables");

            var localVarPath = "/api/ProcessVariables/{processVariableId}/getFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processVariableId != null) localVarPathParams.Add("processVariableId", this.Configuration.ApiClient.ParameterToString(processVariableId)); // path parameter
            if (booleanVariables != null) localVarFormParams.Add("booleanVariables", this.Configuration.ApiClient.ParameterToString(booleanVariables)); // form parameter
            if (stringVariables != null) localVarFormParams.Add("stringVariables", this.Configuration.ApiClient.ParameterToString(stringVariables)); // form parameter
            if (comboVariables != null) localVarFormParams.Add("comboVariables", this.Configuration.ApiClient.ParameterToString(comboVariables)); // form parameter
            if (dateTimeVariables != null) localVarFormParams.Add("dateTimeVariables", this.Configuration.ApiClient.ParameterToString(dateTimeVariables)); // form parameter
            if (doubleVariables != null) localVarFormParams.Add("doubleVariables", this.Configuration.ApiClient.ParameterToString(doubleVariables)); // form parameter
            if (tableVariables != null) localVarFormParams.Add("tableVariables", this.Configuration.ApiClient.ParameterToString(tableVariables)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesGetFiltersByProcessVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterConcreteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldFilterConcreteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterConcreteDTO)));
        }

        /// <summary>
        /// This call inserts the variables associated with the process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variables information</param>
        /// <param name="processId">Process Identifier</param>
        /// <returns></returns>
        public void ProcessVariablesSetProcessVariableValue (ProcessVariablesFieldsDTO body, int? processId)
        {
             ProcessVariablesSetProcessVariableValueWithHttpInfo(body, processId);
        }

        /// <summary>
        /// This call inserts the variables associated with the process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variables information</param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProcessVariablesSetProcessVariableValueWithHttpInfo (ProcessVariablesFieldsDTO body, int? processId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");

            var localVarPath = "/api/ProcessVariables/{processId}/setValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesSetProcessVariableValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call inserts the variables associated with the process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variables information</param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProcessVariablesSetProcessVariableValueAsync (ProcessVariablesFieldsDTO body, int? processId)
        {
             await ProcessVariablesSetProcessVariableValueAsyncWithHttpInfo(body, processId);

        }

        /// <summary>
        /// This call inserts the variables associated with the process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variables information</param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProcessVariablesSetProcessVariableValueAsyncWithHttpInfo (ProcessVariablesFieldsDTO body, int? processId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");

            var localVarPath = "/api/ProcessVariables/{processId}/setValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesSetProcessVariableValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call inserts the variables associated with the process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processId">Process Identifier</param>
        /// <returns></returns>
        public void ProcessVariablesSetProcessVariableValue (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processId)
        {
             ProcessVariablesSetProcessVariableValueWithHttpInfo(booleanVariables, stringVariables, comboVariables, dateTimeVariables, doubleVariables, tableVariables, processId);
        }

        /// <summary>
        /// This call inserts the variables associated with the process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProcessVariablesSetProcessVariableValueWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processId)
        {
            // verify the required parameter 'booleanVariables' is set
            if (booleanVariables == null)
                throw new ApiException(400, "Missing required parameter 'booleanVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'stringVariables' is set
            if (stringVariables == null)
                throw new ApiException(400, "Missing required parameter 'stringVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'comboVariables' is set
            if (comboVariables == null)
                throw new ApiException(400, "Missing required parameter 'comboVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'dateTimeVariables' is set
            if (dateTimeVariables == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'doubleVariables' is set
            if (doubleVariables == null)
                throw new ApiException(400, "Missing required parameter 'doubleVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'tableVariables' is set
            if (tableVariables == null)
                throw new ApiException(400, "Missing required parameter 'tableVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");

            var localVarPath = "/api/ProcessVariables/{processId}/setValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (booleanVariables != null) localVarFormParams.Add("booleanVariables", this.Configuration.ApiClient.ParameterToString(booleanVariables)); // form parameter
            if (stringVariables != null) localVarFormParams.Add("stringVariables", this.Configuration.ApiClient.ParameterToString(stringVariables)); // form parameter
            if (comboVariables != null) localVarFormParams.Add("comboVariables", this.Configuration.ApiClient.ParameterToString(comboVariables)); // form parameter
            if (dateTimeVariables != null) localVarFormParams.Add("dateTimeVariables", this.Configuration.ApiClient.ParameterToString(dateTimeVariables)); // form parameter
            if (doubleVariables != null) localVarFormParams.Add("doubleVariables", this.Configuration.ApiClient.ParameterToString(doubleVariables)); // form parameter
            if (tableVariables != null) localVarFormParams.Add("tableVariables", this.Configuration.ApiClient.ParameterToString(tableVariables)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesSetProcessVariableValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This call inserts the variables associated with the process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProcessVariablesSetProcessVariableValueAsync (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processId)
        {
             await ProcessVariablesSetProcessVariableValueAsyncWithHttpInfo(booleanVariables, stringVariables, comboVariables, dateTimeVariables, doubleVariables, tableVariables, processId);

        }

        /// <summary>
        /// This call inserts the variables associated with the process 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="booleanVariables"></param>
        /// <param name="stringVariables"></param>
        /// <param name="comboVariables"></param>
        /// <param name="dateTimeVariables"></param>
        /// <param name="doubleVariables"></param>
        /// <param name="tableVariables"></param>
        /// <param name="processId">Process Identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProcessVariablesSetProcessVariableValueAsyncWithHttpInfo (List<AdditionalFieldBooleanDTO> booleanVariables, List<AdditionalFieldStringDTO> stringVariables, List<AdditionalFieldComboDTO> comboVariables, List<AdditionalFieldDateTimeDTO> dateTimeVariables, List<AdditionalFieldDoubleDTO> doubleVariables, List<AdditionalFieldTableDTO> tableVariables, int? processId)
        {
            // verify the required parameter 'booleanVariables' is set
            if (booleanVariables == null)
                throw new ApiException(400, "Missing required parameter 'booleanVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'stringVariables' is set
            if (stringVariables == null)
                throw new ApiException(400, "Missing required parameter 'stringVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'comboVariables' is set
            if (comboVariables == null)
                throw new ApiException(400, "Missing required parameter 'comboVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'dateTimeVariables' is set
            if (dateTimeVariables == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'doubleVariables' is set
            if (doubleVariables == null)
                throw new ApiException(400, "Missing required parameter 'doubleVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'tableVariables' is set
            if (tableVariables == null)
                throw new ApiException(400, "Missing required parameter 'tableVariables' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessVariablesApi->ProcessVariablesSetProcessVariableValue");

            var localVarPath = "/api/ProcessVariables/{processId}/setValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (booleanVariables != null) localVarFormParams.Add("booleanVariables", this.Configuration.ApiClient.ParameterToString(booleanVariables)); // form parameter
            if (stringVariables != null) localVarFormParams.Add("stringVariables", this.Configuration.ApiClient.ParameterToString(stringVariables)); // form parameter
            if (comboVariables != null) localVarFormParams.Add("comboVariables", this.Configuration.ApiClient.ParameterToString(comboVariables)); // form parameter
            if (dateTimeVariables != null) localVarFormParams.Add("dateTimeVariables", this.Configuration.ApiClient.ParameterToString(dateTimeVariables)); // form parameter
            if (doubleVariables != null) localVarFormParams.Add("doubleVariables", this.Configuration.ApiClient.ParameterToString(doubleVariables)); // form parameter
            if (tableVariables != null) localVarFormParams.Add("tableVariables", this.Configuration.ApiClient.ParameterToString(tableVariables)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesSetProcessVariableValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Validate the variable data update of a specific variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The validation data</param>
        /// <param name="processId">The process instance id</param>
        /// <returns>ValidationFieldResultDTO</returns>
        public ValidationFieldResultDTO ProcessVariablesValidateVariabile (ProcessVariableValidationDTO body, int? processId)
        {
             ApiResponse<ValidationFieldResultDTO> localVarResponse = ProcessVariablesValidateVariabileWithHttpInfo(body, processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate the variable data update of a specific variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The validation data</param>
        /// <param name="processId">The process instance id</param>
        /// <returns>ApiResponse of ValidationFieldResultDTO</returns>
        public ApiResponse< ValidationFieldResultDTO > ProcessVariablesValidateVariabileWithHttpInfo (ProcessVariableValidationDTO body, int? processId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ProcessVariablesValidateVariabile");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessVariablesApi->ProcessVariablesValidateVariabile");

            var localVarPath = "/api/ProcessVariables/process/{processId}/validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesValidateVariabile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationFieldResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidationFieldResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationFieldResultDTO)));
        }

        /// <summary>
        /// Validate the variable data update of a specific variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The validation data</param>
        /// <param name="processId">The process instance id</param>
        /// <returns>Task of ValidationFieldResultDTO</returns>
        public async System.Threading.Tasks.Task<ValidationFieldResultDTO> ProcessVariablesValidateVariabileAsync (ProcessVariableValidationDTO body, int? processId)
        {
             ApiResponse<ValidationFieldResultDTO> localVarResponse = await ProcessVariablesValidateVariabileAsyncWithHttpInfo(body, processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate the variable data update of a specific variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The validation data</param>
        /// <param name="processId">The process instance id</param>
        /// <returns>Task of ApiResponse (ValidationFieldResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationFieldResultDTO>> ProcessVariablesValidateVariabileAsyncWithHttpInfo (ProcessVariableValidationDTO body, int? processId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessVariablesApi->ProcessVariablesValidateVariabile");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessVariablesApi->ProcessVariablesValidateVariabile");

            var localVarPath = "/api/ProcessVariables/process/{processId}/validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesValidateVariabile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationFieldResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidationFieldResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationFieldResultDTO)));
        }

        /// <summary>
        /// Validate the variable data update of a specific variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="processId">The process instance id</param>
        /// <returns>ValidationFieldResultDTO</returns>
        public ValidationFieldResultDTO ProcessVariablesValidateVariabile (string variableName, ProcessVariablesFieldsDTO currentData, int? processId)
        {
             ApiResponse<ValidationFieldResultDTO> localVarResponse = ProcessVariablesValidateVariabileWithHttpInfo(variableName, currentData, processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate the variable data update of a specific variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="processId">The process instance id</param>
        /// <returns>ApiResponse of ValidationFieldResultDTO</returns>
        public ApiResponse< ValidationFieldResultDTO > ProcessVariablesValidateVariabileWithHttpInfo (string variableName, ProcessVariablesFieldsDTO currentData, int? processId)
        {
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ProcessVariablesApi->ProcessVariablesValidateVariabile");
            // verify the required parameter 'currentData' is set
            if (currentData == null)
                throw new ApiException(400, "Missing required parameter 'currentData' when calling ProcessVariablesApi->ProcessVariablesValidateVariabile");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessVariablesApi->ProcessVariablesValidateVariabile");

            var localVarPath = "/api/ProcessVariables/process/{processId}/validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (variableName != null) localVarFormParams.Add("variableName", this.Configuration.ApiClient.ParameterToString(variableName)); // form parameter
            if (currentData != null) localVarFormParams.Add("currentData", this.Configuration.ApiClient.ParameterToString(currentData)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesValidateVariabile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationFieldResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidationFieldResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationFieldResultDTO)));
        }

        /// <summary>
        /// Validate the variable data update of a specific variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="processId">The process instance id</param>
        /// <returns>Task of ValidationFieldResultDTO</returns>
        public async System.Threading.Tasks.Task<ValidationFieldResultDTO> ProcessVariablesValidateVariabileAsync (string variableName, ProcessVariablesFieldsDTO currentData, int? processId)
        {
             ApiResponse<ValidationFieldResultDTO> localVarResponse = await ProcessVariablesValidateVariabileAsyncWithHttpInfo(variableName, currentData, processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate the variable data update of a specific variable 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName"></param>
        /// <param name="currentData"></param>
        /// <param name="processId">The process instance id</param>
        /// <returns>Task of ApiResponse (ValidationFieldResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationFieldResultDTO>> ProcessVariablesValidateVariabileAsyncWithHttpInfo (string variableName, ProcessVariablesFieldsDTO currentData, int? processId)
        {
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ProcessVariablesApi->ProcessVariablesValidateVariabile");
            // verify the required parameter 'currentData' is set
            if (currentData == null)
                throw new ApiException(400, "Missing required parameter 'currentData' when calling ProcessVariablesApi->ProcessVariablesValidateVariabile");
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessVariablesApi->ProcessVariablesValidateVariabile");

            var localVarPath = "/api/ProcessVariables/process/{processId}/validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (variableName != null) localVarFormParams.Add("variableName", this.Configuration.ApiClient.ParameterToString(variableName)); // form parameter
            if (currentData != null) localVarFormParams.Add("currentData", this.Configuration.ApiClient.ParameterToString(currentData)); // form parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessVariablesValidateVariabile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationFieldResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidationFieldResultDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationFieldResultDTO)));
        }

    }
}
