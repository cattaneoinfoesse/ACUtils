/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNext.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNext.Model
{
    /// <summary>
    /// WorkflowVariableInfoDTO
    /// </summary>
    [DataContract]
    public partial class WorkflowVariableInfoDTO :  IEquatable<WorkflowVariableInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowVariableInfoDTO" /> class.
        /// </summary>
        /// <param name="id">Identiifer.</param>
        /// <param name="name">Name.</param>
        /// <param name="description">Description.</param>
        /// <param name="variableType">Possible values:  1: String  2: Numeric  3: DateTime  4: Boolean  5: ComboBox  6: Matrix  7: TextArea  8: TableBox .</param>
        public WorkflowVariableInfoDTO(int? id = default(int?), string name = default(string), string description = default(string), int? variableType = default(int?))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.VariableType = variableType;
        }
        
        /// <summary>
        /// Identiifer
        /// </summary>
        /// <value>Identiifer</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Possible values:  1: String  2: Numeric  3: DateTime  4: Boolean  5: ComboBox  6: Matrix  7: TextArea  8: TableBox 
        /// </summary>
        /// <value>Possible values:  1: String  2: Numeric  3: DateTime  4: Boolean  5: ComboBox  6: Matrix  7: TextArea  8: TableBox </value>
        [DataMember(Name="variableType", EmitDefaultValue=false)]
        public int? VariableType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowVariableInfoDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  VariableType: ").Append(VariableType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkflowVariableInfoDTO);
        }

        /// <summary>
        /// Returns true if WorkflowVariableInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkflowVariableInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowVariableInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.VariableType == input.VariableType ||
                    (this.VariableType != null &&
                    this.VariableType.Equals(input.VariableType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.VariableType != null)
                    hashCode = hashCode * 59 + this.VariableType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
