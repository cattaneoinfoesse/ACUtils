/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNext.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNext.Model
{
    /// <summary>
    /// ARXeSigN status
    /// </summary>
    [DataContract]
    public partial class ArxESignStatusResponseDto :  IEquatable<ArxESignStatusResponseDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxESignStatusResponseDto" /> class.
        /// </summary>
        /// <param name="name">Process name.</param>
        /// <param name="status">Possible values:  0: InProgress  1: Canceled  2: Rejected  3: Completed  4: Expired .</param>
        /// <param name="statusReason">Status message.</param>
        /// <param name="recipients">Recipients status.</param>
        /// <param name="startDate">Sign process start date.</param>
        /// <param name="expirationDate">Sign process expiration date.</param>
        public ArxESignStatusResponseDto(string name = default(string), int? status = default(int?), string statusReason = default(string), List<ArxESignStatusRecipientDto> recipients = default(List<ArxESignStatusRecipientDto>), DateTime? startDate = default(DateTime?), DateTime? expirationDate = default(DateTime?))
        {
            this.Name = name;
            this.Status = status;
            this.StatusReason = statusReason;
            this.Recipients = recipients;
            this.StartDate = startDate;
            this.ExpirationDate = expirationDate;
        }
        
        /// <summary>
        /// Process name
        /// </summary>
        /// <value>Process name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Possible values:  0: InProgress  1: Canceled  2: Rejected  3: Completed  4: Expired 
        /// </summary>
        /// <value>Possible values:  0: InProgress  1: Canceled  2: Rejected  3: Completed  4: Expired </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Status message
        /// </summary>
        /// <value>Status message</value>
        [DataMember(Name="statusReason", EmitDefaultValue=false)]
        public string StatusReason { get; set; }

        /// <summary>
        /// Recipients status
        /// </summary>
        /// <value>Recipients status</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<ArxESignStatusRecipientDto> Recipients { get; set; }

        /// <summary>
        /// Sign process start date
        /// </summary>
        /// <value>Sign process start date</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Sign process expiration date
        /// </summary>
        /// <value>Sign process expiration date</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxESignStatusResponseDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusReason: ").Append(StatusReason).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxESignStatusResponseDto);
        }

        /// <summary>
        /// Returns true if ArxESignStatusResponseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxESignStatusResponseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxESignStatusResponseDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusReason == input.StatusReason ||
                    (this.StatusReason != null &&
                    this.StatusReason.Equals(input.StatusReason))
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusReason != null)
                    hashCode = hashCode * 59 + this.StatusReason.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
