/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNext.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNext.Model
{
    /// <summary>
    /// Workflow Extra grante
    /// </summary>
    [DataContract]
        public partial class WorkflowExtraGrantDTO :  IEquatable<WorkflowExtraGrantDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowExtraGrantDTO" /> class.
        /// </summary>
        /// <param name="id">Identifier.</param>
        /// <param name="workflowVersion">Possible values:  0: V1  1: V2 .</param>
        /// <param name="workflowId">Workflow identifier (V1).</param>
        /// <param name="diagramId">Diagram identifier (V2).</param>
        /// <param name="userId">User identifier.</param>
        /// <param name="softwareName">Software name.</param>
        /// <param name="licenseModuleId">Possible values:  0: Generic  1: ArxivarServer  2: ArxivarOcr  3: ArxivarFax  4: ArxivarBarcode  5: ArxivarSpoolRecPro  6: ArxivarSpoolPdf  7: ArxivarSpoolConsole  8: ArxivarWeb  9: ArxivarPmArchiviazione  10: ArxivarPmRubrica  11: ArxivarPmUsersAndGroups  12: ArxivarPmAllegati  13: ArxivarUnitTest  14: ArxivarStartWorkflow  15: ArxivarMailer  16: ArxivarArxService  17: ArxivarPostalizzatore  18: ArxivarSigner  19: ArxivarSdk  20: SAPR3  21: ArxivarThumbnail  22: ArxivarSharedDocument  23: ArxivarDownloaderDocument  24: ArxivarClient  25: ArxivarAWP  26: ArxivarPmOrganizationChart  27: ArxivarMobile  28: Credemtel  29: ArxivarRelationService  30: ArxivarPmLogonProviderAssoc  31: ArxivarMassiveUpdates  32: ArxivarMobileService  33: ArxivarMobileApp  34: ArxivarFasciculationService  35: ArxivarPushNotificationsService  36: ArxivarIX  37: ArxivarPmDocumentDeleting  38: ArxivarMobileOfficeSign  39: GenericWebService  40: ArxivarIndex  41: ArxDrive  42: ArxDriveExtension  43: ArxivarSmartTaskApp  44: ArxDriveMobile  45: Unimatica  46: Eni  47: ArxivarSwapOutService  48: ArxivarSuiteClient  49: ArxivarServerWcf  50: ArxAuthService  51: ArxivarSuiteServer  52: ArxivarSetup  53: ImapPlugin  54: ArxLinkClient  55: BiometricSign  56: ArxCommand  57: ArxivarPmFlatFileTextWriter  58: ArxAssistant  59: ArxLocalSign  60: ArxNode  61: ArxOutsourcer  62: ArxWorkflowCore  63: ArxivarNextMobile  64: ArxAssistantMacOs .</param>
        public WorkflowExtraGrantDTO(int? id = default(int?), int? workflowVersion = default(int?), int? workflowId = default(int?), string diagramId = default(string), int? userId = default(int?), string softwareName = default(string), int? licenseModuleId = default(int?))
        {
            this.Id = id;
            this.WorkflowVersion = workflowVersion;
            this.WorkflowId = workflowId;
            this.DiagramId = diagramId;
            this.UserId = userId;
            this.SoftwareName = softwareName;
            this.LicenseModuleId = licenseModuleId;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Possible values:  0: V1  1: V2 
        /// </summary>
        /// <value>Possible values:  0: V1  1: V2 </value>
        [DataMember(Name="workflowVersion", EmitDefaultValue=false)]
        public int? WorkflowVersion { get; set; }

        /// <summary>
        /// Workflow identifier (V1)
        /// </summary>
        /// <value>Workflow identifier (V1)</value>
        [DataMember(Name="workflowId", EmitDefaultValue=false)]
        public int? WorkflowId { get; set; }

        /// <summary>
        /// Diagram identifier (V2)
        /// </summary>
        /// <value>Diagram identifier (V2)</value>
        [DataMember(Name="diagramId", EmitDefaultValue=false)]
        public string DiagramId { get; set; }

        /// <summary>
        /// User identifier
        /// </summary>
        /// <value>User identifier</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Software name
        /// </summary>
        /// <value>Software name</value>
        [DataMember(Name="softwareName", EmitDefaultValue=false)]
        public string SoftwareName { get; set; }

        /// <summary>
        /// Possible values:  0: Generic  1: ArxivarServer  2: ArxivarOcr  3: ArxivarFax  4: ArxivarBarcode  5: ArxivarSpoolRecPro  6: ArxivarSpoolPdf  7: ArxivarSpoolConsole  8: ArxivarWeb  9: ArxivarPmArchiviazione  10: ArxivarPmRubrica  11: ArxivarPmUsersAndGroups  12: ArxivarPmAllegati  13: ArxivarUnitTest  14: ArxivarStartWorkflow  15: ArxivarMailer  16: ArxivarArxService  17: ArxivarPostalizzatore  18: ArxivarSigner  19: ArxivarSdk  20: SAPR3  21: ArxivarThumbnail  22: ArxivarSharedDocument  23: ArxivarDownloaderDocument  24: ArxivarClient  25: ArxivarAWP  26: ArxivarPmOrganizationChart  27: ArxivarMobile  28: Credemtel  29: ArxivarRelationService  30: ArxivarPmLogonProviderAssoc  31: ArxivarMassiveUpdates  32: ArxivarMobileService  33: ArxivarMobileApp  34: ArxivarFasciculationService  35: ArxivarPushNotificationsService  36: ArxivarIX  37: ArxivarPmDocumentDeleting  38: ArxivarMobileOfficeSign  39: GenericWebService  40: ArxivarIndex  41: ArxDrive  42: ArxDriveExtension  43: ArxivarSmartTaskApp  44: ArxDriveMobile  45: Unimatica  46: Eni  47: ArxivarSwapOutService  48: ArxivarSuiteClient  49: ArxivarServerWcf  50: ArxAuthService  51: ArxivarSuiteServer  52: ArxivarSetup  53: ImapPlugin  54: ArxLinkClient  55: BiometricSign  56: ArxCommand  57: ArxivarPmFlatFileTextWriter  58: ArxAssistant  59: ArxLocalSign  60: ArxNode  61: ArxOutsourcer  62: ArxWorkflowCore  63: ArxivarNextMobile  64: ArxAssistantMacOs 
        /// </summary>
        /// <value>Possible values:  0: Generic  1: ArxivarServer  2: ArxivarOcr  3: ArxivarFax  4: ArxivarBarcode  5: ArxivarSpoolRecPro  6: ArxivarSpoolPdf  7: ArxivarSpoolConsole  8: ArxivarWeb  9: ArxivarPmArchiviazione  10: ArxivarPmRubrica  11: ArxivarPmUsersAndGroups  12: ArxivarPmAllegati  13: ArxivarUnitTest  14: ArxivarStartWorkflow  15: ArxivarMailer  16: ArxivarArxService  17: ArxivarPostalizzatore  18: ArxivarSigner  19: ArxivarSdk  20: SAPR3  21: ArxivarThumbnail  22: ArxivarSharedDocument  23: ArxivarDownloaderDocument  24: ArxivarClient  25: ArxivarAWP  26: ArxivarPmOrganizationChart  27: ArxivarMobile  28: Credemtel  29: ArxivarRelationService  30: ArxivarPmLogonProviderAssoc  31: ArxivarMassiveUpdates  32: ArxivarMobileService  33: ArxivarMobileApp  34: ArxivarFasciculationService  35: ArxivarPushNotificationsService  36: ArxivarIX  37: ArxivarPmDocumentDeleting  38: ArxivarMobileOfficeSign  39: GenericWebService  40: ArxivarIndex  41: ArxDrive  42: ArxDriveExtension  43: ArxivarSmartTaskApp  44: ArxDriveMobile  45: Unimatica  46: Eni  47: ArxivarSwapOutService  48: ArxivarSuiteClient  49: ArxivarServerWcf  50: ArxAuthService  51: ArxivarSuiteServer  52: ArxivarSetup  53: ImapPlugin  54: ArxLinkClient  55: BiometricSign  56: ArxCommand  57: ArxivarPmFlatFileTextWriter  58: ArxAssistant  59: ArxLocalSign  60: ArxNode  61: ArxOutsourcer  62: ArxWorkflowCore  63: ArxivarNextMobile  64: ArxAssistantMacOs </value>
        [DataMember(Name="licenseModuleId", EmitDefaultValue=false)]
        public int? LicenseModuleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowExtraGrantDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  WorkflowVersion: ").Append(WorkflowVersion).Append("\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  DiagramId: ").Append(DiagramId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  SoftwareName: ").Append(SoftwareName).Append("\n");
            sb.Append("  LicenseModuleId: ").Append(LicenseModuleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkflowExtraGrantDTO);
        }

        /// <summary>
        /// Returns true if WorkflowExtraGrantDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkflowExtraGrantDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowExtraGrantDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.WorkflowVersion == input.WorkflowVersion ||
                    (this.WorkflowVersion != null &&
                    this.WorkflowVersion.Equals(input.WorkflowVersion))
                ) && 
                (
                    this.WorkflowId == input.WorkflowId ||
                    (this.WorkflowId != null &&
                    this.WorkflowId.Equals(input.WorkflowId))
                ) && 
                (
                    this.DiagramId == input.DiagramId ||
                    (this.DiagramId != null &&
                    this.DiagramId.Equals(input.DiagramId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.SoftwareName == input.SoftwareName ||
                    (this.SoftwareName != null &&
                    this.SoftwareName.Equals(input.SoftwareName))
                ) && 
                (
                    this.LicenseModuleId == input.LicenseModuleId ||
                    (this.LicenseModuleId != null &&
                    this.LicenseModuleId.Equals(input.LicenseModuleId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.WorkflowVersion != null)
                    hashCode = hashCode * 59 + this.WorkflowVersion.GetHashCode();
                if (this.WorkflowId != null)
                    hashCode = hashCode * 59 + this.WorkflowId.GetHashCode();
                if (this.DiagramId != null)
                    hashCode = hashCode * 59 + this.DiagramId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.SoftwareName != null)
                    hashCode = hashCode * 59 + this.SoftwareName.GetHashCode();
                if (this.LicenseModuleId != null)
                    hashCode = hashCode * 59 + this.LicenseModuleId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
