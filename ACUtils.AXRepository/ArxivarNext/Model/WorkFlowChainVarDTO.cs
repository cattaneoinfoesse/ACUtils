/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNext.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNext.Model
{
    /// <summary>
    /// Workflow Chain Variable
    /// </summary>
    [DataContract]
    public partial class WorkFlowChainVarDTO :  IEquatable<WorkFlowChainVarDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkFlowChainVarDTO" /> class.
        /// </summary>
        /// <param name="id">Id.</param>
        /// <param name="dmVariabiliId">Dm Variabili Id.</param>
        /// <param name="diagramVarId">Diagram Var Id.</param>
        public WorkFlowChainVarDTO(string id = default(string), int? dmVariabiliId = default(int?), string diagramVarId = default(string))
        {
            this.Id = id;
            this.DmVariabiliId = dmVariabiliId;
            this.DiagramVarId = diagramVarId;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Dm Variabili Id
        /// </summary>
        /// <value>Dm Variabili Id</value>
        [DataMember(Name="dmVariabiliId", EmitDefaultValue=false)]
        public int? DmVariabiliId { get; set; }

        /// <summary>
        /// Diagram Var Id
        /// </summary>
        /// <value>Diagram Var Id</value>
        [DataMember(Name="diagramVarId", EmitDefaultValue=false)]
        public string DiagramVarId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkFlowChainVarDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DmVariabiliId: ").Append(DmVariabiliId).Append("\n");
            sb.Append("  DiagramVarId: ").Append(DiagramVarId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkFlowChainVarDTO);
        }

        /// <summary>
        /// Returns true if WorkFlowChainVarDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkFlowChainVarDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkFlowChainVarDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DmVariabiliId == input.DmVariabiliId ||
                    (this.DmVariabiliId != null &&
                    this.DmVariabiliId.Equals(input.DmVariabiliId))
                ) && 
                (
                    this.DiagramVarId == input.DiagramVarId ||
                    (this.DiagramVarId != null &&
                    this.DiagramVarId.Equals(input.DiagramVarId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DmVariabiliId != null)
                    hashCode = hashCode * 59 + this.DmVariabiliId.GetHashCode();
                if (this.DiagramVarId != null)
                    hashCode = hashCode * 59 + this.DiagramVarId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
