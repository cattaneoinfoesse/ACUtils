/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNext.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNext.Model
{
    /// <summary>
    /// ARXeSigN document
    /// </summary>
    [DataContract]
        public partial class ArxESignDocumentDto :  IEquatable<ArxESignDocumentDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxESignDocumentDto" /> class.
        /// </summary>
        /// <param name="id">Document identifier, used to track document once completed (required).</param>
        /// <param name="order">Reading order (required).</param>
        /// <param name="inputMode">Possible values:  0: Docnumber  1: Buffer  (required).</param>
        /// <param name="inputSystemId">Document identifier according to InputMode (required).</param>
        /// <param name="moduleFieldOverrideValues">Module field value to override.</param>
        public ArxESignDocumentDto(string id = default(string), int? order = default(int?), int? inputMode = default(int?), string inputSystemId = default(string), List<ArxESignModuleFieldValueDto> moduleFieldOverrideValues = default(List<ArxESignModuleFieldValueDto>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ArxESignDocumentDto and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "order" is required (not null)
            if (order == null)
            {
                throw new InvalidDataException("order is a required property for ArxESignDocumentDto and cannot be null");
            }
            else
            {
                this.Order = order;
            }
            // to ensure "inputMode" is required (not null)
            if (inputMode == null)
            {
                throw new InvalidDataException("inputMode is a required property for ArxESignDocumentDto and cannot be null");
            }
            else
            {
                this.InputMode = inputMode;
            }
            // to ensure "inputSystemId" is required (not null)
            if (inputSystemId == null)
            {
                throw new InvalidDataException("inputSystemId is a required property for ArxESignDocumentDto and cannot be null");
            }
            else
            {
                this.InputSystemId = inputSystemId;
            }
            this.ModuleFieldOverrideValues = moduleFieldOverrideValues;
        }
        
        /// <summary>
        /// Document identifier, used to track document once completed
        /// </summary>
        /// <value>Document identifier, used to track document once completed</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Reading order
        /// </summary>
        /// <value>Reading order</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int? Order { get; set; }

        /// <summary>
        /// Possible values:  0: Docnumber  1: Buffer 
        /// </summary>
        /// <value>Possible values:  0: Docnumber  1: Buffer </value>
        [DataMember(Name="inputMode", EmitDefaultValue=false)]
        public int? InputMode { get; set; }

        /// <summary>
        /// Document identifier according to InputMode
        /// </summary>
        /// <value>Document identifier according to InputMode</value>
        [DataMember(Name="inputSystemId", EmitDefaultValue=false)]
        public string InputSystemId { get; set; }

        /// <summary>
        /// Module field value to override
        /// </summary>
        /// <value>Module field value to override</value>
        [DataMember(Name="moduleFieldOverrideValues", EmitDefaultValue=false)]
        public List<ArxESignModuleFieldValueDto> ModuleFieldOverrideValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxESignDocumentDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  InputMode: ").Append(InputMode).Append("\n");
            sb.Append("  InputSystemId: ").Append(InputSystemId).Append("\n");
            sb.Append("  ModuleFieldOverrideValues: ").Append(ModuleFieldOverrideValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxESignDocumentDto);
        }

        /// <summary>
        /// Returns true if ArxESignDocumentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxESignDocumentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxESignDocumentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.InputMode == input.InputMode ||
                    (this.InputMode != null &&
                    this.InputMode.Equals(input.InputMode))
                ) && 
                (
                    this.InputSystemId == input.InputSystemId ||
                    (this.InputSystemId != null &&
                    this.InputSystemId.Equals(input.InputSystemId))
                ) && 
                (
                    this.ModuleFieldOverrideValues == input.ModuleFieldOverrideValues ||
                    this.ModuleFieldOverrideValues != null &&
                    input.ModuleFieldOverrideValues != null &&
                    this.ModuleFieldOverrideValues.SequenceEqual(input.ModuleFieldOverrideValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.InputMode != null)
                    hashCode = hashCode * 59 + this.InputMode.GetHashCode();
                if (this.InputSystemId != null)
                    hashCode = hashCode * 59 + this.InputSystemId.GetHashCode();
                if (this.ModuleFieldOverrideValues != null)
                    hashCode = hashCode * 59 + this.ModuleFieldOverrideValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
