/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNext.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNext.Model
{
    /// <summary>
    /// ARXeSigN completed document base
    /// </summary>
    [DataContract]
    public partial class ArxESignCompletedDocumentBaseDto :  IEquatable<ArxESignCompletedDocumentBaseDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxESignCompletedDocumentBaseDto" /> class.
        /// </summary>
        /// <param name="fileName">File name.</param>
        /// <param name="id">Document id specified at insert time.</param>
        /// <param name="bufferId">Buffer identifier.</param>
        public ArxESignCompletedDocumentBaseDto(string fileName = default(string), string id = default(string), string bufferId = default(string))
        {
            this.FileName = fileName;
            this.Id = id;
            this.BufferId = bufferId;
        }
        
        /// <summary>
        /// File name
        /// </summary>
        /// <value>File name</value>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Document id specified at insert time
        /// </summary>
        /// <value>Document id specified at insert time</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Buffer identifier
        /// </summary>
        /// <value>Buffer identifier</value>
        [DataMember(Name="bufferId", EmitDefaultValue=false)]
        public string BufferId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxESignCompletedDocumentBaseDto {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BufferId: ").Append(BufferId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxESignCompletedDocumentBaseDto);
        }

        /// <summary>
        /// Returns true if ArxESignCompletedDocumentBaseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxESignCompletedDocumentBaseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxESignCompletedDocumentBaseDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BufferId == input.BufferId ||
                    (this.BufferId != null &&
                    this.BufferId.Equals(input.BufferId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BufferId != null)
                    hashCode = hashCode * 59 + this.BufferId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
