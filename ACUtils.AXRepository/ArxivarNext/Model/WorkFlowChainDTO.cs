/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNext.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNext.Model
{
    /// <summary>
    /// Workflow Chain
    /// </summary>
    [DataContract]
    public partial class WorkFlowChainDTO :  IEquatable<WorkFlowChainDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkFlowChainDTO" /> class.
        /// </summary>
        /// <param name="id">Chain identifier.</param>
        /// <param name="kind">Possible values:  0: FromV1ToV2  1: FromV2ToV1 .</param>
        /// <param name="dmWorkflow">Dm WorkFlow.</param>
        /// <param name="workflowName">WorkFlow Name.</param>
        /// <param name="workflowRevision">WorkFlow Revision.</param>
        /// <param name="diagramId">Diagram Id.</param>
        /// <param name="diagramName">Diagram Name.</param>
        /// <param name="diagramRevision">Diagram Revision.</param>
        /// <param name="importPrimary">Import Primary.</param>
        /// <param name="importSecondary">Import Secondary.</param>
        /// <param name="importAttach">Import Attach.</param>
        /// <param name="wfChainVars">The list of Workflow chain vars.</param>
        public WorkFlowChainDTO(string id = default(string), int? kind = default(int?), int? dmWorkflow = default(int?), string workflowName = default(string), int? workflowRevision = default(int?), string diagramId = default(string), string diagramName = default(string), int? diagramRevision = default(int?), int? importPrimary = default(int?), int? importSecondary = default(int?), int? importAttach = default(int?), List<WorkFlowChainVarDTO> wfChainVars = default(List<WorkFlowChainVarDTO>))
        {
            this.Id = id;
            this.Kind = kind;
            this.DmWorkflow = dmWorkflow;
            this.WorkflowName = workflowName;
            this.WorkflowRevision = workflowRevision;
            this.DiagramId = diagramId;
            this.DiagramName = diagramName;
            this.DiagramRevision = diagramRevision;
            this.ImportPrimary = importPrimary;
            this.ImportSecondary = importSecondary;
            this.ImportAttach = importAttach;
            this.WfChainVars = wfChainVars;
        }
        
        /// <summary>
        /// Chain identifier
        /// </summary>
        /// <value>Chain identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Possible values:  0: FromV1ToV2  1: FromV2ToV1 
        /// </summary>
        /// <value>Possible values:  0: FromV1ToV2  1: FromV2ToV1 </value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public int? Kind { get; set; }

        /// <summary>
        /// Dm WorkFlow
        /// </summary>
        /// <value>Dm WorkFlow</value>
        [DataMember(Name="dmWorkflow", EmitDefaultValue=false)]
        public int? DmWorkflow { get; set; }

        /// <summary>
        /// WorkFlow Name
        /// </summary>
        /// <value>WorkFlow Name</value>
        [DataMember(Name="workflowName", EmitDefaultValue=false)]
        public string WorkflowName { get; set; }

        /// <summary>
        /// WorkFlow Revision
        /// </summary>
        /// <value>WorkFlow Revision</value>
        [DataMember(Name="workflowRevision", EmitDefaultValue=false)]
        public int? WorkflowRevision { get; set; }

        /// <summary>
        /// Diagram Id
        /// </summary>
        /// <value>Diagram Id</value>
        [DataMember(Name="diagramId", EmitDefaultValue=false)]
        public string DiagramId { get; set; }

        /// <summary>
        /// Diagram Name
        /// </summary>
        /// <value>Diagram Name</value>
        [DataMember(Name="diagramName", EmitDefaultValue=false)]
        public string DiagramName { get; set; }

        /// <summary>
        /// Diagram Revision
        /// </summary>
        /// <value>Diagram Revision</value>
        [DataMember(Name="diagramRevision", EmitDefaultValue=false)]
        public int? DiagramRevision { get; set; }

        /// <summary>
        /// Import Primary
        /// </summary>
        /// <value>Import Primary</value>
        [DataMember(Name="importPrimary", EmitDefaultValue=false)]
        public int? ImportPrimary { get; set; }

        /// <summary>
        /// Import Secondary
        /// </summary>
        /// <value>Import Secondary</value>
        [DataMember(Name="importSecondary", EmitDefaultValue=false)]
        public int? ImportSecondary { get; set; }

        /// <summary>
        /// Import Attach
        /// </summary>
        /// <value>Import Attach</value>
        [DataMember(Name="importAttach", EmitDefaultValue=false)]
        public int? ImportAttach { get; set; }

        /// <summary>
        /// The list of Workflow chain vars
        /// </summary>
        /// <value>The list of Workflow chain vars</value>
        [DataMember(Name="wfChainVars", EmitDefaultValue=false)]
        public List<WorkFlowChainVarDTO> WfChainVars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkFlowChainDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  DmWorkflow: ").Append(DmWorkflow).Append("\n");
            sb.Append("  WorkflowName: ").Append(WorkflowName).Append("\n");
            sb.Append("  WorkflowRevision: ").Append(WorkflowRevision).Append("\n");
            sb.Append("  DiagramId: ").Append(DiagramId).Append("\n");
            sb.Append("  DiagramName: ").Append(DiagramName).Append("\n");
            sb.Append("  DiagramRevision: ").Append(DiagramRevision).Append("\n");
            sb.Append("  ImportPrimary: ").Append(ImportPrimary).Append("\n");
            sb.Append("  ImportSecondary: ").Append(ImportSecondary).Append("\n");
            sb.Append("  ImportAttach: ").Append(ImportAttach).Append("\n");
            sb.Append("  WfChainVars: ").Append(WfChainVars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkFlowChainDTO);
        }

        /// <summary>
        /// Returns true if WorkFlowChainDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkFlowChainDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkFlowChainDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && 
                (
                    this.DmWorkflow == input.DmWorkflow ||
                    (this.DmWorkflow != null &&
                    this.DmWorkflow.Equals(input.DmWorkflow))
                ) && 
                (
                    this.WorkflowName == input.WorkflowName ||
                    (this.WorkflowName != null &&
                    this.WorkflowName.Equals(input.WorkflowName))
                ) && 
                (
                    this.WorkflowRevision == input.WorkflowRevision ||
                    (this.WorkflowRevision != null &&
                    this.WorkflowRevision.Equals(input.WorkflowRevision))
                ) && 
                (
                    this.DiagramId == input.DiagramId ||
                    (this.DiagramId != null &&
                    this.DiagramId.Equals(input.DiagramId))
                ) && 
                (
                    this.DiagramName == input.DiagramName ||
                    (this.DiagramName != null &&
                    this.DiagramName.Equals(input.DiagramName))
                ) && 
                (
                    this.DiagramRevision == input.DiagramRevision ||
                    (this.DiagramRevision != null &&
                    this.DiagramRevision.Equals(input.DiagramRevision))
                ) && 
                (
                    this.ImportPrimary == input.ImportPrimary ||
                    (this.ImportPrimary != null &&
                    this.ImportPrimary.Equals(input.ImportPrimary))
                ) && 
                (
                    this.ImportSecondary == input.ImportSecondary ||
                    (this.ImportSecondary != null &&
                    this.ImportSecondary.Equals(input.ImportSecondary))
                ) && 
                (
                    this.ImportAttach == input.ImportAttach ||
                    (this.ImportAttach != null &&
                    this.ImportAttach.Equals(input.ImportAttach))
                ) && 
                (
                    this.WfChainVars == input.WfChainVars ||
                    this.WfChainVars != null &&
                    this.WfChainVars.SequenceEqual(input.WfChainVars)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                if (this.DmWorkflow != null)
                    hashCode = hashCode * 59 + this.DmWorkflow.GetHashCode();
                if (this.WorkflowName != null)
                    hashCode = hashCode * 59 + this.WorkflowName.GetHashCode();
                if (this.WorkflowRevision != null)
                    hashCode = hashCode * 59 + this.WorkflowRevision.GetHashCode();
                if (this.DiagramId != null)
                    hashCode = hashCode * 59 + this.DiagramId.GetHashCode();
                if (this.DiagramName != null)
                    hashCode = hashCode * 59 + this.DiagramName.GetHashCode();
                if (this.DiagramRevision != null)
                    hashCode = hashCode * 59 + this.DiagramRevision.GetHashCode();
                if (this.ImportPrimary != null)
                    hashCode = hashCode * 59 + this.ImportPrimary.GetHashCode();
                if (this.ImportSecondary != null)
                    hashCode = hashCode * 59 + this.ImportSecondary.GetHashCode();
                if (this.ImportAttach != null)
                    hashCode = hashCode * 59 + this.ImportAttach.GetHashCode();
                if (this.WfChainVars != null)
                    hashCode = hashCode * 59 + this.WfChainVars.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
