/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNext.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNext.Model
{
    /// <summary>
    /// Sign reicpient status
    /// </summary>
    [DataContract]
        public partial class ArxESignStatusRecipientDto :  IEquatable<ArxESignStatusRecipientDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxESignStatusRecipientDto" /> class.
        /// </summary>
        /// <param name="status">Possible values:  0: NotSigned  1: Signed  2: Rejected .</param>
        /// <param name="signedDate">signedDate.</param>
        /// <param name="statusReason">statusReason.</param>
        /// <param name="mobilePhone">Mobile Phone.</param>
        /// <param name="email">Email (required).</param>
        /// <param name="firstName">First name (required).</param>
        /// <param name="lastName">Last name (required).</param>
        /// <param name="order">Sign flow order (required).</param>
        /// <param name="recipientKind">Possible values:  0: Signer  1: InCopy  (required).</param>
        /// <param name="recipientAuthType">Possible values:  0: None  1: Sms .</param>
        /// <param name="language">Language.</param>
        public ArxESignStatusRecipientDto(int? status = default(int?), DateTime? signedDate = default(DateTime?), string statusReason = default(string), string mobilePhone = default(string), string email = default(string), string firstName = default(string), string lastName = default(string), int? order = default(int?), int? recipientKind = default(int?), int? recipientAuthType = default(int?), string language = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for ArxESignStatusRecipientDto and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for ArxESignStatusRecipientDto and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new InvalidDataException("lastName is a required property for ArxESignStatusRecipientDto and cannot be null");
            }
            else
            {
                this.LastName = lastName;
            }
            // to ensure "order" is required (not null)
            if (order == null)
            {
                throw new InvalidDataException("order is a required property for ArxESignStatusRecipientDto and cannot be null");
            }
            else
            {
                this.Order = order;
            }
            // to ensure "recipientKind" is required (not null)
            if (recipientKind == null)
            {
                throw new InvalidDataException("recipientKind is a required property for ArxESignStatusRecipientDto and cannot be null");
            }
            else
            {
                this.RecipientKind = recipientKind;
            }
            this.Status = status;
            this.SignedDate = signedDate;
            this.StatusReason = statusReason;
            this.MobilePhone = mobilePhone;
            this.RecipientAuthType = recipientAuthType;
            this.Language = language;
        }
        
        /// <summary>
        /// Possible values:  0: NotSigned  1: Signed  2: Rejected 
        /// </summary>
        /// <value>Possible values:  0: NotSigned  1: Signed  2: Rejected </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets SignedDate
        /// </summary>
        [DataMember(Name="signedDate", EmitDefaultValue=false)]
        public DateTime? SignedDate { get; set; }

        /// <summary>
        /// Gets or Sets StatusReason
        /// </summary>
        [DataMember(Name="statusReason", EmitDefaultValue=false)]
        public string StatusReason { get; set; }

        /// <summary>
        /// Mobile Phone
        /// </summary>
        /// <value>Mobile Phone</value>
        [DataMember(Name="mobilePhone", EmitDefaultValue=false)]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// First name
        /// </summary>
        /// <value>First name</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name
        /// </summary>
        /// <value>Last name</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Sign flow order
        /// </summary>
        /// <value>Sign flow order</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int? Order { get; set; }

        /// <summary>
        /// Possible values:  0: Signer  1: InCopy 
        /// </summary>
        /// <value>Possible values:  0: Signer  1: InCopy </value>
        [DataMember(Name="recipientKind", EmitDefaultValue=false)]
        public int? RecipientKind { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: Sms 
        /// </summary>
        /// <value>Possible values:  0: None  1: Sms </value>
        [DataMember(Name="recipientAuthType", EmitDefaultValue=false)]
        public int? RecipientAuthType { get; set; }

        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxESignStatusRecipientDto {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SignedDate: ").Append(SignedDate).Append("\n");
            sb.Append("  StatusReason: ").Append(StatusReason).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  RecipientKind: ").Append(RecipientKind).Append("\n");
            sb.Append("  RecipientAuthType: ").Append(RecipientAuthType).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxESignStatusRecipientDto);
        }

        /// <summary>
        /// Returns true if ArxESignStatusRecipientDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxESignStatusRecipientDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxESignStatusRecipientDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SignedDate == input.SignedDate ||
                    (this.SignedDate != null &&
                    this.SignedDate.Equals(input.SignedDate))
                ) && 
                (
                    this.StatusReason == input.StatusReason ||
                    (this.StatusReason != null &&
                    this.StatusReason.Equals(input.StatusReason))
                ) && 
                (
                    this.MobilePhone == input.MobilePhone ||
                    (this.MobilePhone != null &&
                    this.MobilePhone.Equals(input.MobilePhone))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.RecipientKind == input.RecipientKind ||
                    (this.RecipientKind != null &&
                    this.RecipientKind.Equals(input.RecipientKind))
                ) && 
                (
                    this.RecipientAuthType == input.RecipientAuthType ||
                    (this.RecipientAuthType != null &&
                    this.RecipientAuthType.Equals(input.RecipientAuthType))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SignedDate != null)
                    hashCode = hashCode * 59 + this.SignedDate.GetHashCode();
                if (this.StatusReason != null)
                    hashCode = hashCode * 59 + this.StatusReason.GetHashCode();
                if (this.MobilePhone != null)
                    hashCode = hashCode * 59 + this.MobilePhone.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.RecipientKind != null)
                    hashCode = hashCode * 59 + this.RecipientKind.GetHashCode();
                if (this.RecipientAuthType != null)
                    hashCode = hashCode * 59 + this.RecipientAuthType.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
