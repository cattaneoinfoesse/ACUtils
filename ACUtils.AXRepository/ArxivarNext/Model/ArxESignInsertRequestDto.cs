/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNext.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNext.Model
{
    /// <summary>
    /// Insert a new ARXeSigN
    /// </summary>
    [DataContract]
    public partial class ArxESignInsertRequestDto :  IEquatable<ArxESignInsertRequestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxESignInsertRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ArxESignInsertRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxESignInsertRequestDto" /> class.
        /// </summary>
        /// <param name="name">Name of sign process (required).</param>
        /// <param name="mailSubject">Mail subject.</param>
        /// <param name="extraBodyMessage">Extra mail body.</param>
        /// <param name="expirationDays">Expiration days.</param>
        /// <param name="recipients">Recipients (required).</param>
        /// <param name="documents">Documments (required).</param>
        public ArxESignInsertRequestDto(string name = default(string), string mailSubject = default(string), string extraBodyMessage = default(string), int? expirationDays = default(int?), List<ArxESignInsertRecipientDto> recipients = default(List<ArxESignInsertRecipientDto>), List<ArxESignDocumentDto> documents = default(List<ArxESignDocumentDto>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ArxESignInsertRequestDto and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "recipients" is required (not null)
            if (recipients == null)
            {
                throw new InvalidDataException("recipients is a required property for ArxESignInsertRequestDto and cannot be null");
            }
            else
            {
                this.Recipients = recipients;
            }
            // to ensure "documents" is required (not null)
            if (documents == null)
            {
                throw new InvalidDataException("documents is a required property for ArxESignInsertRequestDto and cannot be null");
            }
            else
            {
                this.Documents = documents;
            }
            this.MailSubject = mailSubject;
            this.ExtraBodyMessage = extraBodyMessage;
            this.ExpirationDays = expirationDays;
        }
        
        /// <summary>
        /// Name of sign process
        /// </summary>
        /// <value>Name of sign process</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Mail subject
        /// </summary>
        /// <value>Mail subject</value>
        [DataMember(Name="mailSubject", EmitDefaultValue=false)]
        public string MailSubject { get; set; }

        /// <summary>
        /// Extra mail body
        /// </summary>
        /// <value>Extra mail body</value>
        [DataMember(Name="extraBodyMessage", EmitDefaultValue=false)]
        public string ExtraBodyMessage { get; set; }

        /// <summary>
        /// Expiration days
        /// </summary>
        /// <value>Expiration days</value>
        [DataMember(Name="expirationDays", EmitDefaultValue=false)]
        public int? ExpirationDays { get; set; }

        /// <summary>
        /// Recipients
        /// </summary>
        /// <value>Recipients</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<ArxESignInsertRecipientDto> Recipients { get; set; }

        /// <summary>
        /// Documments
        /// </summary>
        /// <value>Documments</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<ArxESignDocumentDto> Documents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxESignInsertRequestDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MailSubject: ").Append(MailSubject).Append("\n");
            sb.Append("  ExtraBodyMessage: ").Append(ExtraBodyMessage).Append("\n");
            sb.Append("  ExpirationDays: ").Append(ExpirationDays).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxESignInsertRequestDto);
        }

        /// <summary>
        /// Returns true if ArxESignInsertRequestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxESignInsertRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxESignInsertRequestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MailSubject == input.MailSubject ||
                    (this.MailSubject != null &&
                    this.MailSubject.Equals(input.MailSubject))
                ) && 
                (
                    this.ExtraBodyMessage == input.ExtraBodyMessage ||
                    (this.ExtraBodyMessage != null &&
                    this.ExtraBodyMessage.Equals(input.ExtraBodyMessage))
                ) && 
                (
                    this.ExpirationDays == input.ExpirationDays ||
                    (this.ExpirationDays != null &&
                    this.ExpirationDays.Equals(input.ExpirationDays))
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MailSubject != null)
                    hashCode = hashCode * 59 + this.MailSubject.GetHashCode();
                if (this.ExtraBodyMessage != null)
                    hashCode = hashCode * 59 + this.ExtraBodyMessage.GetHashCode();
                if (this.ExpirationDays != null)
                    hashCode = hashCode * 59 + this.ExpirationDays.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExpirationDays (int?) maximum
            if(this.ExpirationDays > (int?)28)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationDays, must be a value less than or equal to 28.", new [] { "ExpirationDays" });
            }

            // ExpirationDays (int?) minimum
            if(this.ExpirationDays < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationDays, must be a value greater than or equal to 1.", new [] { "ExpirationDays" });
            }

            yield break;
        }
    }

}
