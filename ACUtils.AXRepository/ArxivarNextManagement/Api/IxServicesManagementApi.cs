/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNextManagement.Client;
using ACUtils.AXRepository.ArxivarNextManagement.Model;

namespace ACUtils.AXRepository.ArxivarNextManagement.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIxServicesManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call checks IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>bool?</returns>
        bool? IxServicesManagementCheckIxCredentials (IxCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call checks IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> IxServicesManagementCheckIxCredentialsWithHttpInfo (IxCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call deletes IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns></returns>
        void IxServicesManagementDeleteIxCredentials (int? id);

        /// <summary>
        /// This call deletes IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxServicesManagementDeleteIxCredentialsWithHttpInfo (int? id);
        /// <summary>
        /// This call returns IX-CE document type details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="docTypeId">IX document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>IxDocumentTypeDetailDTO</returns>
        IxDocumentTypeDetailDTO IxServicesManagementGetDocumentTypeDetail (string businessUnitId, string docTypeId, IxCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns IX-CE document type details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="docTypeId">IX document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of IxDocumentTypeDetailDTO</returns>
        ApiResponse<IxDocumentTypeDetailDTO> IxServicesManagementGetDocumentTypeDetailWithHttpInfo (string businessUnitId, string docTypeId, IxCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns document types configured in IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="uoId">IX business unit UO identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>List&lt;IxDocumentTypeDTO&gt;</returns>
        List<IxDocumentTypeDTO> IxServicesManagementGetDocumentTypes (string businessUnitId, string uoId, IxCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns document types configured in IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="uoId">IX business unit UO identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of List&lt;IxDocumentTypeDTO&gt;</returns>
        ApiResponse<List<IxDocumentTypeDTO>> IxServicesManagementGetDocumentTypesWithHttpInfo (string businessUnitId, string uoId, IxCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns business unit UOs configured in IX
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>List&lt;IxBusinessUnitUoDTO&gt;</returns>
        List<IxBusinessUnitUoDTO> IxServicesManagementGetIxBusinessUnitUos (int? serviceType, string businessUnitId, IxCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns business unit UOs configured in IX
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of List&lt;IxBusinessUnitUoDTO&gt;</returns>
        ApiResponse<List<IxBusinessUnitUoDTO>> IxServicesManagementGetIxBusinessUnitUosWithHttpInfo (int? serviceType, string businessUnitId, IxCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns business units configured in IX
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="credentials">Credentials</param>
        /// <returns>List&lt;IxBusinessUnitDTO&gt;</returns>
        List<IxBusinessUnitDTO> IxServicesManagementGetIxBusinessUnits (int? serviceType, IxCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns business units configured in IX
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of List&lt;IxBusinessUnitDTO&gt;</returns>
        ApiResponse<List<IxBusinessUnitDTO>> IxServicesManagementGetIxBusinessUnitsWithHttpInfo (int? serviceType, IxCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns IX-CE notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxCeNotificationDTO&gt;</returns>
        List<IxCeNotificationDTO> IxServicesManagementGetIxCeNotifications ();

        /// <summary>
        /// This call returns IX-CE notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxCeNotificationDTO&gt;</returns>
        ApiResponse<List<IxCeNotificationDTO>> IxServicesManagementGetIxCeNotificationsWithHttpInfo ();
        /// <summary>
        /// This call returns IX configured credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: Rule </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="ruleId">Sending setting rule identifier (optional)</param>
        /// <returns>IxCredentialsTreeDTO</returns>
        IxCredentialsTreeDTO IxServicesManagementGetIxCredentials (int? serviceType, int? context, string businessUnitCode = null, int? ruleId = null);

        /// <summary>
        /// This call returns IX configured credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: Rule </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="ruleId">Sending setting rule identifier (optional)</param>
        /// <returns>ApiResponse of IxCredentialsTreeDTO</returns>
        ApiResponse<IxCredentialsTreeDTO> IxServicesManagementGetIxCredentialsWithHttpInfo (int? serviceType, int? context, string businessUnitCode = null, int? ruleId = null);
        /// <summary>
        /// This call returns IX-FE fields for mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: File  1: Invoice  2: NotificationSending  3: NotificationReceiving </param>
        /// <param name="notificationType">Possible values:  0: Error  1: Inserted  2: ConnectorTakeCharge  3: ConnectorError  4: IxServiceTakeCharge  5: TemplateCompleted  6: TemplateError  7: ValidationCompleted  8: ValidationError  9: Discarded  10: ConservationCompleted  11: ConservationError  12: historicizingCompleted  13: historicizingError  14: DiscardedNotManaged  15: ResendCompleted  16: ResendError  17: SignCompleted  18: SignError  19: TransmissionCompleted  20: TransmissionError  21: DeliveryReceiptNotification  22: DeliveryMissedNotification  23: DiscardedNotification  24: ResultNotification  25: ExpirationTermsNotification  26: SendAttestationNotification  27: PositiveResultNotification  28: NegativeResultNotification  29: PositiveResultWaiting  30: NegativeResultWaiting  31: DiscardedNotification_B2B  32: DeliveryReceiptNotification_B2B  33: DeliveryMissedNotification_B2B  34: SdiDeliveredNotification  35: ConservationSentNotification  (optional)</param>
        /// <returns>List&lt;IxFeFieldDTO&gt;</returns>
        List<IxFeFieldDTO> IxServicesManagementGetIxFeFields (int? context, int? notificationType = null);

        /// <summary>
        /// This call returns IX-FE fields for mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: File  1: Invoice  2: NotificationSending  3: NotificationReceiving </param>
        /// <param name="notificationType">Possible values:  0: Error  1: Inserted  2: ConnectorTakeCharge  3: ConnectorError  4: IxServiceTakeCharge  5: TemplateCompleted  6: TemplateError  7: ValidationCompleted  8: ValidationError  9: Discarded  10: ConservationCompleted  11: ConservationError  12: historicizingCompleted  13: historicizingError  14: DiscardedNotManaged  15: ResendCompleted  16: ResendError  17: SignCompleted  18: SignError  19: TransmissionCompleted  20: TransmissionError  21: DeliveryReceiptNotification  22: DeliveryMissedNotification  23: DiscardedNotification  24: ResultNotification  25: ExpirationTermsNotification  26: SendAttestationNotification  27: PositiveResultNotification  28: NegativeResultNotification  29: PositiveResultWaiting  30: NegativeResultWaiting  31: DiscardedNotification_B2B  32: DeliveryReceiptNotification_B2B  33: DeliveryMissedNotification_B2B  34: SdiDeliveredNotification  35: ConservationSentNotification  (optional)</param>
        /// <returns>ApiResponse of List&lt;IxFeFieldDTO&gt;</returns>
        ApiResponse<List<IxFeFieldDTO>> IxServicesManagementGetIxFeFieldsWithHttpInfo (int? context, int? notificationType = null);
        /// <summary>
        /// This call returns IX-FE notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxFeNotificationDTO&gt;</returns>
        List<IxFeNotificationDTO> IxServicesManagementGetIxFeNotifications ();

        /// <summary>
        /// This call returns IX-FE notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxFeNotificationDTO&gt;</returns>
        ApiResponse<List<IxFeNotificationDTO>> IxServicesManagementGetIxFeNotificationsWithHttpInfo ();
        /// <summary>
        /// This call inserts IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns></returns>
        void IxServicesManagementInsertIxCredentials (IxCredentialsDTO credentials);

        /// <summary>
        /// This call inserts IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxServicesManagementInsertIxCredentialsWithHttpInfo (IxCredentialsDTO credentials);
        /// <summary>
        /// This call updates IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns></returns>
        void IxServicesManagementUpdateIxCredentials (int? id, IxCredentialsDTO credentials);

        /// <summary>
        /// This call updates IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxServicesManagementUpdateIxCredentialsWithHttpInfo (int? id, IxCredentialsDTO credentials);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call checks IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> IxServicesManagementCheckIxCredentialsAsync (IxCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call checks IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> IxServicesManagementCheckIxCredentialsAsyncWithHttpInfo (IxCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call deletes IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxServicesManagementDeleteIxCredentialsAsync (int? id);

        /// <summary>
        /// This call deletes IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesManagementDeleteIxCredentialsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns IX-CE document type details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="docTypeId">IX document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of IxDocumentTypeDetailDTO</returns>
        System.Threading.Tasks.Task<IxDocumentTypeDetailDTO> IxServicesManagementGetDocumentTypeDetailAsync (string businessUnitId, string docTypeId, IxCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns IX-CE document type details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="docTypeId">IX document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (IxDocumentTypeDetailDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxDocumentTypeDetailDTO>> IxServicesManagementGetDocumentTypeDetailAsyncWithHttpInfo (string businessUnitId, string docTypeId, IxCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns document types configured in IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="uoId">IX business unit UO identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of List&lt;IxDocumentTypeDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxDocumentTypeDTO>> IxServicesManagementGetDocumentTypesAsync (string businessUnitId, string uoId, IxCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns document types configured in IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="uoId">IX business unit UO identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (List&lt;IxDocumentTypeDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxDocumentTypeDTO>>> IxServicesManagementGetDocumentTypesAsyncWithHttpInfo (string businessUnitId, string uoId, IxCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns business unit UOs configured in IX
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of List&lt;IxBusinessUnitUoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxBusinessUnitUoDTO>> IxServicesManagementGetIxBusinessUnitUosAsync (int? serviceType, string businessUnitId, IxCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns business unit UOs configured in IX
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (List&lt;IxBusinessUnitUoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxBusinessUnitUoDTO>>> IxServicesManagementGetIxBusinessUnitUosAsyncWithHttpInfo (int? serviceType, string businessUnitId, IxCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns business units configured in IX
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of List&lt;IxBusinessUnitDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxBusinessUnitDTO>> IxServicesManagementGetIxBusinessUnitsAsync (int? serviceType, IxCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns business units configured in IX
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (List&lt;IxBusinessUnitDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxBusinessUnitDTO>>> IxServicesManagementGetIxBusinessUnitsAsyncWithHttpInfo (int? serviceType, IxCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns IX-CE notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxCeNotificationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxCeNotificationDTO>> IxServicesManagementGetIxCeNotificationsAsync ();

        /// <summary>
        /// This call returns IX-CE notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxCeNotificationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxCeNotificationDTO>>> IxServicesManagementGetIxCeNotificationsAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns IX configured credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: Rule </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="ruleId">Sending setting rule identifier (optional)</param>
        /// <returns>Task of IxCredentialsTreeDTO</returns>
        System.Threading.Tasks.Task<IxCredentialsTreeDTO> IxServicesManagementGetIxCredentialsAsync (int? serviceType, int? context, string businessUnitCode = null, int? ruleId = null);

        /// <summary>
        /// This call returns IX configured credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: Rule </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="ruleId">Sending setting rule identifier (optional)</param>
        /// <returns>Task of ApiResponse (IxCredentialsTreeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCredentialsTreeDTO>> IxServicesManagementGetIxCredentialsAsyncWithHttpInfo (int? serviceType, int? context, string businessUnitCode = null, int? ruleId = null);
        /// <summary>
        /// This call returns IX-FE fields for mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: File  1: Invoice  2: NotificationSending  3: NotificationReceiving </param>
        /// <param name="notificationType">Possible values:  0: Error  1: Inserted  2: ConnectorTakeCharge  3: ConnectorError  4: IxServiceTakeCharge  5: TemplateCompleted  6: TemplateError  7: ValidationCompleted  8: ValidationError  9: Discarded  10: ConservationCompleted  11: ConservationError  12: historicizingCompleted  13: historicizingError  14: DiscardedNotManaged  15: ResendCompleted  16: ResendError  17: SignCompleted  18: SignError  19: TransmissionCompleted  20: TransmissionError  21: DeliveryReceiptNotification  22: DeliveryMissedNotification  23: DiscardedNotification  24: ResultNotification  25: ExpirationTermsNotification  26: SendAttestationNotification  27: PositiveResultNotification  28: NegativeResultNotification  29: PositiveResultWaiting  30: NegativeResultWaiting  31: DiscardedNotification_B2B  32: DeliveryReceiptNotification_B2B  33: DeliveryMissedNotification_B2B  34: SdiDeliveredNotification  35: ConservationSentNotification  (optional)</param>
        /// <returns>Task of List&lt;IxFeFieldDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxFeFieldDTO>> IxServicesManagementGetIxFeFieldsAsync (int? context, int? notificationType = null);

        /// <summary>
        /// This call returns IX-FE fields for mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: File  1: Invoice  2: NotificationSending  3: NotificationReceiving </param>
        /// <param name="notificationType">Possible values:  0: Error  1: Inserted  2: ConnectorTakeCharge  3: ConnectorError  4: IxServiceTakeCharge  5: TemplateCompleted  6: TemplateError  7: ValidationCompleted  8: ValidationError  9: Discarded  10: ConservationCompleted  11: ConservationError  12: historicizingCompleted  13: historicizingError  14: DiscardedNotManaged  15: ResendCompleted  16: ResendError  17: SignCompleted  18: SignError  19: TransmissionCompleted  20: TransmissionError  21: DeliveryReceiptNotification  22: DeliveryMissedNotification  23: DiscardedNotification  24: ResultNotification  25: ExpirationTermsNotification  26: SendAttestationNotification  27: PositiveResultNotification  28: NegativeResultNotification  29: PositiveResultWaiting  30: NegativeResultWaiting  31: DiscardedNotification_B2B  32: DeliveryReceiptNotification_B2B  33: DeliveryMissedNotification_B2B  34: SdiDeliveredNotification  35: ConservationSentNotification  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IxFeFieldDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxFeFieldDTO>>> IxServicesManagementGetIxFeFieldsAsyncWithHttpInfo (int? context, int? notificationType = null);
        /// <summary>
        /// This call returns IX-FE notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxFeNotificationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxFeNotificationDTO>> IxServicesManagementGetIxFeNotificationsAsync ();

        /// <summary>
        /// This call returns IX-FE notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxFeNotificationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxFeNotificationDTO>>> IxServicesManagementGetIxFeNotificationsAsyncWithHttpInfo ();
        /// <summary>
        /// This call inserts IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxServicesManagementInsertIxCredentialsAsync (IxCredentialsDTO credentials);

        /// <summary>
        /// This call inserts IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesManagementInsertIxCredentialsAsyncWithHttpInfo (IxCredentialsDTO credentials);
        /// <summary>
        /// This call updates IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxServicesManagementUpdateIxCredentialsAsync (int? id, IxCredentialsDTO credentials);

        /// <summary>
        /// This call updates IX credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesManagementUpdateIxCredentialsAsyncWithHttpInfo (int? id, IxCredentialsDTO credentials);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IxServicesManagementApi : IIxServicesManagementApi
    {
        private ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IxServicesManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IxServicesManagementApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IxServicesManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IxServicesManagementApi(ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call checks IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>bool?</returns>
        public bool? IxServicesManagementCheckIxCredentials (IxCredentialsForRequestDTO credentials)
        {
             ApiResponse<bool?> localVarResponse = IxServicesManagementCheckIxCredentialsWithHttpInfo(credentials);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call checks IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > IxServicesManagementCheckIxCredentialsWithHttpInfo (IxCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementCheckIxCredentials");

            var localVarPath = "/api/management/IxServices/Credentials/Check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementCheckIxCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> IxServicesManagementCheckIxCredentialsAsync (IxCredentialsForRequestDTO credentials)
        {
             ApiResponse<bool?> localVarResponse = await IxServicesManagementCheckIxCredentialsAsyncWithHttpInfo(credentials);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call checks IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> IxServicesManagementCheckIxCredentialsAsyncWithHttpInfo (IxCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementCheckIxCredentials");

            var localVarPath = "/api/management/IxServices/Credentials/Check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementCheckIxCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call deletes IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns></returns>
        public void IxServicesManagementDeleteIxCredentials (int? id)
        {
             IxServicesManagementDeleteIxCredentialsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxServicesManagementDeleteIxCredentialsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxServicesManagementApi->IxServicesManagementDeleteIxCredentials");

            var localVarPath = "/api/management/IxServices/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementDeleteIxCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxServicesManagementDeleteIxCredentialsAsync (int? id)
        {
             await IxServicesManagementDeleteIxCredentialsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesManagementDeleteIxCredentialsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxServicesManagementApi->IxServicesManagementDeleteIxCredentials");

            var localVarPath = "/api/management/IxServices/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementDeleteIxCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns IX-CE document type details 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="docTypeId">IX document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>IxDocumentTypeDetailDTO</returns>
        public IxDocumentTypeDetailDTO IxServicesManagementGetDocumentTypeDetail (string businessUnitId, string docTypeId, IxCredentialsForRequestDTO credentials)
        {
             ApiResponse<IxDocumentTypeDetailDTO> localVarResponse = IxServicesManagementGetDocumentTypeDetailWithHttpInfo(businessUnitId, docTypeId, credentials);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns IX-CE document type details 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="docTypeId">IX document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of IxDocumentTypeDetailDTO</returns>
        public ApiResponse< IxDocumentTypeDetailDTO > IxServicesManagementGetDocumentTypeDetailWithHttpInfo (string businessUnitId, string docTypeId, IxCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'businessUnitId' is set
            if (businessUnitId == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitId' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypeDetail");
            // verify the required parameter 'docTypeId' is set
            if (docTypeId == null)
                throw new ApiException(400, "Missing required parameter 'docTypeId' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypeDetail");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypeDetail");

            var localVarPath = "/api/management/IxServices/BusinessUnits/{businessUnitId}/DocumentTypes/{docTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitId != null) localVarPathParams.Add("businessUnitId", this.Configuration.ApiClient.ParameterToString(businessUnitId)); // path parameter
            if (docTypeId != null) localVarPathParams.Add("docTypeId", this.Configuration.ApiClient.ParameterToString(docTypeId)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetDocumentTypeDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxDocumentTypeDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxDocumentTypeDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxDocumentTypeDetailDTO)));
        }

        /// <summary>
        /// This call returns IX-CE document type details 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="docTypeId">IX document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of IxDocumentTypeDetailDTO</returns>
        public async System.Threading.Tasks.Task<IxDocumentTypeDetailDTO> IxServicesManagementGetDocumentTypeDetailAsync (string businessUnitId, string docTypeId, IxCredentialsForRequestDTO credentials)
        {
             ApiResponse<IxDocumentTypeDetailDTO> localVarResponse = await IxServicesManagementGetDocumentTypeDetailAsyncWithHttpInfo(businessUnitId, docTypeId, credentials);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns IX-CE document type details 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="docTypeId">IX document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (IxDocumentTypeDetailDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxDocumentTypeDetailDTO>> IxServicesManagementGetDocumentTypeDetailAsyncWithHttpInfo (string businessUnitId, string docTypeId, IxCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'businessUnitId' is set
            if (businessUnitId == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitId' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypeDetail");
            // verify the required parameter 'docTypeId' is set
            if (docTypeId == null)
                throw new ApiException(400, "Missing required parameter 'docTypeId' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypeDetail");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypeDetail");

            var localVarPath = "/api/management/IxServices/BusinessUnits/{businessUnitId}/DocumentTypes/{docTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitId != null) localVarPathParams.Add("businessUnitId", this.Configuration.ApiClient.ParameterToString(businessUnitId)); // path parameter
            if (docTypeId != null) localVarPathParams.Add("docTypeId", this.Configuration.ApiClient.ParameterToString(docTypeId)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetDocumentTypeDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxDocumentTypeDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxDocumentTypeDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxDocumentTypeDetailDTO)));
        }

        /// <summary>
        /// This call returns document types configured in IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="uoId">IX business unit UO identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>List&lt;IxDocumentTypeDTO&gt;</returns>
        public List<IxDocumentTypeDTO> IxServicesManagementGetDocumentTypes (string businessUnitId, string uoId, IxCredentialsForRequestDTO credentials)
        {
             ApiResponse<List<IxDocumentTypeDTO>> localVarResponse = IxServicesManagementGetDocumentTypesWithHttpInfo(businessUnitId, uoId, credentials);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns document types configured in IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="uoId">IX business unit UO identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of List&lt;IxDocumentTypeDTO&gt;</returns>
        public ApiResponse< List<IxDocumentTypeDTO> > IxServicesManagementGetDocumentTypesWithHttpInfo (string businessUnitId, string uoId, IxCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'businessUnitId' is set
            if (businessUnitId == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitId' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypes");
            // verify the required parameter 'uoId' is set
            if (uoId == null)
                throw new ApiException(400, "Missing required parameter 'uoId' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypes");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypes");

            var localVarPath = "/api/management/IxServices/BusinessUnits/{businessUnitId}/Uos/{uoId}/DocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitId != null) localVarPathParams.Add("businessUnitId", this.Configuration.ApiClient.ParameterToString(businessUnitId)); // path parameter
            if (uoId != null) localVarPathParams.Add("uoId", this.Configuration.ApiClient.ParameterToString(uoId)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetDocumentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxDocumentTypeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxDocumentTypeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxDocumentTypeDTO>)));
        }

        /// <summary>
        /// This call returns document types configured in IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="uoId">IX business unit UO identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of List&lt;IxDocumentTypeDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxDocumentTypeDTO>> IxServicesManagementGetDocumentTypesAsync (string businessUnitId, string uoId, IxCredentialsForRequestDTO credentials)
        {
             ApiResponse<List<IxDocumentTypeDTO>> localVarResponse = await IxServicesManagementGetDocumentTypesAsyncWithHttpInfo(businessUnitId, uoId, credentials);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns document types configured in IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="uoId">IX business unit UO identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (List&lt;IxDocumentTypeDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxDocumentTypeDTO>>> IxServicesManagementGetDocumentTypesAsyncWithHttpInfo (string businessUnitId, string uoId, IxCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'businessUnitId' is set
            if (businessUnitId == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitId' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypes");
            // verify the required parameter 'uoId' is set
            if (uoId == null)
                throw new ApiException(400, "Missing required parameter 'uoId' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypes");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementGetDocumentTypes");

            var localVarPath = "/api/management/IxServices/BusinessUnits/{businessUnitId}/Uos/{uoId}/DocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitId != null) localVarPathParams.Add("businessUnitId", this.Configuration.ApiClient.ParameterToString(businessUnitId)); // path parameter
            if (uoId != null) localVarPathParams.Add("uoId", this.Configuration.ApiClient.ParameterToString(uoId)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetDocumentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxDocumentTypeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxDocumentTypeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxDocumentTypeDTO>)));
        }

        /// <summary>
        /// This call returns business unit UOs configured in IX 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>List&lt;IxBusinessUnitUoDTO&gt;</returns>
        public List<IxBusinessUnitUoDTO> IxServicesManagementGetIxBusinessUnitUos (int? serviceType, string businessUnitId, IxCredentialsForRequestDTO credentials)
        {
             ApiResponse<List<IxBusinessUnitUoDTO>> localVarResponse = IxServicesManagementGetIxBusinessUnitUosWithHttpInfo(serviceType, businessUnitId, credentials);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns business unit UOs configured in IX 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of List&lt;IxBusinessUnitUoDTO&gt;</returns>
        public ApiResponse< List<IxBusinessUnitUoDTO> > IxServicesManagementGetIxBusinessUnitUosWithHttpInfo (int? serviceType, string businessUnitId, IxCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling IxServicesManagementApi->IxServicesManagementGetIxBusinessUnitUos");
            // verify the required parameter 'businessUnitId' is set
            if (businessUnitId == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitId' when calling IxServicesManagementApi->IxServicesManagementGetIxBusinessUnitUos");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementGetIxBusinessUnitUos");

            var localVarPath = "/api/management/IxServices/BusinessUnits/{serviceType}/{businessUnitId}/Uos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter
            if (businessUnitId != null) localVarPathParams.Add("businessUnitId", this.Configuration.ApiClient.ParameterToString(businessUnitId)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxBusinessUnitUos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxBusinessUnitUoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxBusinessUnitUoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxBusinessUnitUoDTO>)));
        }

        /// <summary>
        /// This call returns business unit UOs configured in IX 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of List&lt;IxBusinessUnitUoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxBusinessUnitUoDTO>> IxServicesManagementGetIxBusinessUnitUosAsync (int? serviceType, string businessUnitId, IxCredentialsForRequestDTO credentials)
        {
             ApiResponse<List<IxBusinessUnitUoDTO>> localVarResponse = await IxServicesManagementGetIxBusinessUnitUosAsyncWithHttpInfo(serviceType, businessUnitId, credentials);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns business unit UOs configured in IX 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="businessUnitId">IX business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (List&lt;IxBusinessUnitUoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxBusinessUnitUoDTO>>> IxServicesManagementGetIxBusinessUnitUosAsyncWithHttpInfo (int? serviceType, string businessUnitId, IxCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling IxServicesManagementApi->IxServicesManagementGetIxBusinessUnitUos");
            // verify the required parameter 'businessUnitId' is set
            if (businessUnitId == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitId' when calling IxServicesManagementApi->IxServicesManagementGetIxBusinessUnitUos");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementGetIxBusinessUnitUos");

            var localVarPath = "/api/management/IxServices/BusinessUnits/{serviceType}/{businessUnitId}/Uos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter
            if (businessUnitId != null) localVarPathParams.Add("businessUnitId", this.Configuration.ApiClient.ParameterToString(businessUnitId)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxBusinessUnitUos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxBusinessUnitUoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxBusinessUnitUoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxBusinessUnitUoDTO>)));
        }

        /// <summary>
        /// This call returns business units configured in IX 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="credentials">Credentials</param>
        /// <returns>List&lt;IxBusinessUnitDTO&gt;</returns>
        public List<IxBusinessUnitDTO> IxServicesManagementGetIxBusinessUnits (int? serviceType, IxCredentialsForRequestDTO credentials)
        {
             ApiResponse<List<IxBusinessUnitDTO>> localVarResponse = IxServicesManagementGetIxBusinessUnitsWithHttpInfo(serviceType, credentials);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns business units configured in IX 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of List&lt;IxBusinessUnitDTO&gt;</returns>
        public ApiResponse< List<IxBusinessUnitDTO> > IxServicesManagementGetIxBusinessUnitsWithHttpInfo (int? serviceType, IxCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling IxServicesManagementApi->IxServicesManagementGetIxBusinessUnits");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementGetIxBusinessUnits");

            var localVarPath = "/api/management/IxServices/BusinessUnits/{serviceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxBusinessUnits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxBusinessUnitDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxBusinessUnitDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxBusinessUnitDTO>)));
        }

        /// <summary>
        /// This call returns business units configured in IX 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of List&lt;IxBusinessUnitDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxBusinessUnitDTO>> IxServicesManagementGetIxBusinessUnitsAsync (int? serviceType, IxCredentialsForRequestDTO credentials)
        {
             ApiResponse<List<IxBusinessUnitDTO>> localVarResponse = await IxServicesManagementGetIxBusinessUnitsAsyncWithHttpInfo(serviceType, credentials);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns business units configured in IX 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (List&lt;IxBusinessUnitDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxBusinessUnitDTO>>> IxServicesManagementGetIxBusinessUnitsAsyncWithHttpInfo (int? serviceType, IxCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling IxServicesManagementApi->IxServicesManagementGetIxBusinessUnits");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementGetIxBusinessUnits");

            var localVarPath = "/api/management/IxServices/BusinessUnits/{serviceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxBusinessUnits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxBusinessUnitDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxBusinessUnitDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxBusinessUnitDTO>)));
        }

        /// <summary>
        /// This call returns IX-CE notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxCeNotificationDTO&gt;</returns>
        public List<IxCeNotificationDTO> IxServicesManagementGetIxCeNotifications ()
        {
             ApiResponse<List<IxCeNotificationDTO>> localVarResponse = IxServicesManagementGetIxCeNotificationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns IX-CE notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxCeNotificationDTO&gt;</returns>
        public ApiResponse< List<IxCeNotificationDTO> > IxServicesManagementGetIxCeNotificationsWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxCe/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxCeNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeNotificationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeNotificationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeNotificationDTO>)));
        }

        /// <summary>
        /// This call returns IX-CE notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxCeNotificationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxCeNotificationDTO>> IxServicesManagementGetIxCeNotificationsAsync ()
        {
             ApiResponse<List<IxCeNotificationDTO>> localVarResponse = await IxServicesManagementGetIxCeNotificationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns IX-CE notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxCeNotificationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxCeNotificationDTO>>> IxServicesManagementGetIxCeNotificationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxCe/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxCeNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeNotificationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeNotificationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeNotificationDTO>)));
        }

        /// <summary>
        /// This call returns IX configured credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: Rule </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="ruleId">Sending setting rule identifier (optional)</param>
        /// <returns>IxCredentialsTreeDTO</returns>
        public IxCredentialsTreeDTO IxServicesManagementGetIxCredentials (int? serviceType, int? context, string businessUnitCode = null, int? ruleId = null)
        {
             ApiResponse<IxCredentialsTreeDTO> localVarResponse = IxServicesManagementGetIxCredentialsWithHttpInfo(serviceType, context, businessUnitCode, ruleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns IX configured credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: Rule </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="ruleId">Sending setting rule identifier (optional)</param>
        /// <returns>ApiResponse of IxCredentialsTreeDTO</returns>
        public ApiResponse< IxCredentialsTreeDTO > IxServicesManagementGetIxCredentialsWithHttpInfo (int? serviceType, int? context, string businessUnitCode = null, int? ruleId = null)
        {
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling IxServicesManagementApi->IxServicesManagementGetIxCredentials");
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling IxServicesManagementApi->IxServicesManagementGetIxCredentials");

            var localVarPath = "/api/management/IxServices/Credentials/{serviceType}/{context}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter
            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter
            if (ruleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ruleId", ruleId)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCredentialsTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCredentialsTreeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCredentialsTreeDTO)));
        }

        /// <summary>
        /// This call returns IX configured credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: Rule </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="ruleId">Sending setting rule identifier (optional)</param>
        /// <returns>Task of IxCredentialsTreeDTO</returns>
        public async System.Threading.Tasks.Task<IxCredentialsTreeDTO> IxServicesManagementGetIxCredentialsAsync (int? serviceType, int? context, string businessUnitCode = null, int? ruleId = null)
        {
             ApiResponse<IxCredentialsTreeDTO> localVarResponse = await IxServicesManagementGetIxCredentialsAsyncWithHttpInfo(serviceType, context, businessUnitCode, ruleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns IX configured credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">Possible values:  0: IxFe  1: IxCe </param>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: Rule </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="ruleId">Sending setting rule identifier (optional)</param>
        /// <returns>Task of ApiResponse (IxCredentialsTreeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCredentialsTreeDTO>> IxServicesManagementGetIxCredentialsAsyncWithHttpInfo (int? serviceType, int? context, string businessUnitCode = null, int? ruleId = null)
        {
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling IxServicesManagementApi->IxServicesManagementGetIxCredentials");
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling IxServicesManagementApi->IxServicesManagementGetIxCredentials");

            var localVarPath = "/api/management/IxServices/Credentials/{serviceType}/{context}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceType != null) localVarPathParams.Add("serviceType", this.Configuration.ApiClient.ParameterToString(serviceType)); // path parameter
            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter
            if (ruleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ruleId", ruleId)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCredentialsTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCredentialsTreeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCredentialsTreeDTO)));
        }

        /// <summary>
        /// This call returns IX-FE fields for mapping 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: File  1: Invoice  2: NotificationSending  3: NotificationReceiving </param>
        /// <param name="notificationType">Possible values:  0: Error  1: Inserted  2: ConnectorTakeCharge  3: ConnectorError  4: IxServiceTakeCharge  5: TemplateCompleted  6: TemplateError  7: ValidationCompleted  8: ValidationError  9: Discarded  10: ConservationCompleted  11: ConservationError  12: historicizingCompleted  13: historicizingError  14: DiscardedNotManaged  15: ResendCompleted  16: ResendError  17: SignCompleted  18: SignError  19: TransmissionCompleted  20: TransmissionError  21: DeliveryReceiptNotification  22: DeliveryMissedNotification  23: DiscardedNotification  24: ResultNotification  25: ExpirationTermsNotification  26: SendAttestationNotification  27: PositiveResultNotification  28: NegativeResultNotification  29: PositiveResultWaiting  30: NegativeResultWaiting  31: DiscardedNotification_B2B  32: DeliveryReceiptNotification_B2B  33: DeliveryMissedNotification_B2B  34: SdiDeliveredNotification  35: ConservationSentNotification  (optional)</param>
        /// <returns>List&lt;IxFeFieldDTO&gt;</returns>
        public List<IxFeFieldDTO> IxServicesManagementGetIxFeFields (int? context, int? notificationType = null)
        {
             ApiResponse<List<IxFeFieldDTO>> localVarResponse = IxServicesManagementGetIxFeFieldsWithHttpInfo(context, notificationType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns IX-FE fields for mapping 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: File  1: Invoice  2: NotificationSending  3: NotificationReceiving </param>
        /// <param name="notificationType">Possible values:  0: Error  1: Inserted  2: ConnectorTakeCharge  3: ConnectorError  4: IxServiceTakeCharge  5: TemplateCompleted  6: TemplateError  7: ValidationCompleted  8: ValidationError  9: Discarded  10: ConservationCompleted  11: ConservationError  12: historicizingCompleted  13: historicizingError  14: DiscardedNotManaged  15: ResendCompleted  16: ResendError  17: SignCompleted  18: SignError  19: TransmissionCompleted  20: TransmissionError  21: DeliveryReceiptNotification  22: DeliveryMissedNotification  23: DiscardedNotification  24: ResultNotification  25: ExpirationTermsNotification  26: SendAttestationNotification  27: PositiveResultNotification  28: NegativeResultNotification  29: PositiveResultWaiting  30: NegativeResultWaiting  31: DiscardedNotification_B2B  32: DeliveryReceiptNotification_B2B  33: DeliveryMissedNotification_B2B  34: SdiDeliveredNotification  35: ConservationSentNotification  (optional)</param>
        /// <returns>ApiResponse of List&lt;IxFeFieldDTO&gt;</returns>
        public ApiResponse< List<IxFeFieldDTO> > IxServicesManagementGetIxFeFieldsWithHttpInfo (int? context, int? notificationType = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling IxServicesManagementApi->IxServicesManagementGetIxFeFields");

            var localVarPath = "/api/management/IxServices/IxFe/Fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context", context)); // query parameter
            if (notificationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notificationType", notificationType)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxFeFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeFieldDTO>)));
        }

        /// <summary>
        /// This call returns IX-FE fields for mapping 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: File  1: Invoice  2: NotificationSending  3: NotificationReceiving </param>
        /// <param name="notificationType">Possible values:  0: Error  1: Inserted  2: ConnectorTakeCharge  3: ConnectorError  4: IxServiceTakeCharge  5: TemplateCompleted  6: TemplateError  7: ValidationCompleted  8: ValidationError  9: Discarded  10: ConservationCompleted  11: ConservationError  12: historicizingCompleted  13: historicizingError  14: DiscardedNotManaged  15: ResendCompleted  16: ResendError  17: SignCompleted  18: SignError  19: TransmissionCompleted  20: TransmissionError  21: DeliveryReceiptNotification  22: DeliveryMissedNotification  23: DiscardedNotification  24: ResultNotification  25: ExpirationTermsNotification  26: SendAttestationNotification  27: PositiveResultNotification  28: NegativeResultNotification  29: PositiveResultWaiting  30: NegativeResultWaiting  31: DiscardedNotification_B2B  32: DeliveryReceiptNotification_B2B  33: DeliveryMissedNotification_B2B  34: SdiDeliveredNotification  35: ConservationSentNotification  (optional)</param>
        /// <returns>Task of List&lt;IxFeFieldDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxFeFieldDTO>> IxServicesManagementGetIxFeFieldsAsync (int? context, int? notificationType = null)
        {
             ApiResponse<List<IxFeFieldDTO>> localVarResponse = await IxServicesManagementGetIxFeFieldsAsyncWithHttpInfo(context, notificationType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns IX-FE fields for mapping 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: File  1: Invoice  2: NotificationSending  3: NotificationReceiving </param>
        /// <param name="notificationType">Possible values:  0: Error  1: Inserted  2: ConnectorTakeCharge  3: ConnectorError  4: IxServiceTakeCharge  5: TemplateCompleted  6: TemplateError  7: ValidationCompleted  8: ValidationError  9: Discarded  10: ConservationCompleted  11: ConservationError  12: historicizingCompleted  13: historicizingError  14: DiscardedNotManaged  15: ResendCompleted  16: ResendError  17: SignCompleted  18: SignError  19: TransmissionCompleted  20: TransmissionError  21: DeliveryReceiptNotification  22: DeliveryMissedNotification  23: DiscardedNotification  24: ResultNotification  25: ExpirationTermsNotification  26: SendAttestationNotification  27: PositiveResultNotification  28: NegativeResultNotification  29: PositiveResultWaiting  30: NegativeResultWaiting  31: DiscardedNotification_B2B  32: DeliveryReceiptNotification_B2B  33: DeliveryMissedNotification_B2B  34: SdiDeliveredNotification  35: ConservationSentNotification  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IxFeFieldDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxFeFieldDTO>>> IxServicesManagementGetIxFeFieldsAsyncWithHttpInfo (int? context, int? notificationType = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling IxServicesManagementApi->IxServicesManagementGetIxFeFields");

            var localVarPath = "/api/management/IxServices/IxFe/Fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context", context)); // query parameter
            if (notificationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notificationType", notificationType)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxFeFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeFieldDTO>)));
        }

        /// <summary>
        /// This call returns IX-FE notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxFeNotificationDTO&gt;</returns>
        public List<IxFeNotificationDTO> IxServicesManagementGetIxFeNotifications ()
        {
             ApiResponse<List<IxFeNotificationDTO>> localVarResponse = IxServicesManagementGetIxFeNotificationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns IX-FE notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxFeNotificationDTO&gt;</returns>
        public ApiResponse< List<IxFeNotificationDTO> > IxServicesManagementGetIxFeNotificationsWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxFeNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeNotificationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeNotificationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeNotificationDTO>)));
        }

        /// <summary>
        /// This call returns IX-FE notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxFeNotificationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxFeNotificationDTO>> IxServicesManagementGetIxFeNotificationsAsync ()
        {
             ApiResponse<List<IxFeNotificationDTO>> localVarResponse = await IxServicesManagementGetIxFeNotificationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns IX-FE notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxFeNotificationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxFeNotificationDTO>>> IxServicesManagementGetIxFeNotificationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementGetIxFeNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeNotificationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeNotificationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeNotificationDTO>)));
        }

        /// <summary>
        /// This call inserts IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns></returns>
        public void IxServicesManagementInsertIxCredentials (IxCredentialsDTO credentials)
        {
             IxServicesManagementInsertIxCredentialsWithHttpInfo(credentials);
        }

        /// <summary>
        /// This call inserts IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxServicesManagementInsertIxCredentialsWithHttpInfo (IxCredentialsDTO credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementInsertIxCredentials");

            var localVarPath = "/api/management/IxServices/Credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementInsertIxCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxServicesManagementInsertIxCredentialsAsync (IxCredentialsDTO credentials)
        {
             await IxServicesManagementInsertIxCredentialsAsyncWithHttpInfo(credentials);

        }

        /// <summary>
        /// This call inserts IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesManagementInsertIxCredentialsAsyncWithHttpInfo (IxCredentialsDTO credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementInsertIxCredentials");

            var localVarPath = "/api/management/IxServices/Credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementInsertIxCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns></returns>
        public void IxServicesManagementUpdateIxCredentials (int? id, IxCredentialsDTO credentials)
        {
             IxServicesManagementUpdateIxCredentialsWithHttpInfo(id, credentials);
        }

        /// <summary>
        /// This call updates IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxServicesManagementUpdateIxCredentialsWithHttpInfo (int? id, IxCredentialsDTO credentials)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxServicesManagementApi->IxServicesManagementUpdateIxCredentials");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementUpdateIxCredentials");

            var localVarPath = "/api/management/IxServices/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementUpdateIxCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxServicesManagementUpdateIxCredentialsAsync (int? id, IxCredentialsDTO credentials)
        {
             await IxServicesManagementUpdateIxCredentialsAsyncWithHttpInfo(id, credentials);

        }

        /// <summary>
        /// This call updates IX credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxServicesManagementUpdateIxCredentialsAsyncWithHttpInfo (int? id, IxCredentialsDTO credentials)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxServicesManagementApi->IxServicesManagementUpdateIxCredentials");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling IxServicesManagementApi->IxServicesManagementUpdateIxCredentials");

            var localVarPath = "/api/management/IxServices/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxServicesManagementUpdateIxCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
