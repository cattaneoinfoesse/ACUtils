/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNextManagement.Client;
using ACUtils.AXRepository.ArxivarNextManagement.Model;

namespace ACUtils.AXRepository.ArxivarNextManagement.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRemoteSignConfigurationManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get remote sign configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertType">Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba </param>
        /// <returns>RemoteSignConfigurationDto</returns>
        RemoteSignConfigurationDto RemoteSignConfigurationManagementGetRemoteSignConfiguration (int? signCertType);

        /// <summary>
        /// Get remote sign configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertType">Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba </param>
        /// <returns>ApiResponse of RemoteSignConfigurationDto</returns>
        ApiResponse<RemoteSignConfigurationDto> RemoteSignConfigurationManagementGetRemoteSignConfigurationWithHttpInfo (int? signCertType);
        /// <summary>
        /// Update remote sign configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignConfiguration"></param>
        /// <returns>RemoteSignConfigurationDto</returns>
        RemoteSignConfigurationDto RemoteSignConfigurationManagementUpdateRemoteSignConfiguration (RemoteSignConfigurationDto remoteSignConfiguration);

        /// <summary>
        /// Update remote sign configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignConfiguration"></param>
        /// <returns>ApiResponse of RemoteSignConfigurationDto</returns>
        ApiResponse<RemoteSignConfigurationDto> RemoteSignConfigurationManagementUpdateRemoteSignConfigurationWithHttpInfo (RemoteSignConfigurationDto remoteSignConfiguration);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get remote sign configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertType">Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba </param>
        /// <returns>Task of RemoteSignConfigurationDto</returns>
        System.Threading.Tasks.Task<RemoteSignConfigurationDto> RemoteSignConfigurationManagementGetRemoteSignConfigurationAsync (int? signCertType);

        /// <summary>
        /// Get remote sign configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertType">Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba </param>
        /// <returns>Task of ApiResponse (RemoteSignConfigurationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteSignConfigurationDto>> RemoteSignConfigurationManagementGetRemoteSignConfigurationAsyncWithHttpInfo (int? signCertType);
        /// <summary>
        /// Update remote sign configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignConfiguration"></param>
        /// <returns>Task of RemoteSignConfigurationDto</returns>
        System.Threading.Tasks.Task<RemoteSignConfigurationDto> RemoteSignConfigurationManagementUpdateRemoteSignConfigurationAsync (RemoteSignConfigurationDto remoteSignConfiguration);

        /// <summary>
        /// Update remote sign configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignConfiguration"></param>
        /// <returns>Task of ApiResponse (RemoteSignConfigurationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteSignConfigurationDto>> RemoteSignConfigurationManagementUpdateRemoteSignConfigurationAsyncWithHttpInfo (RemoteSignConfigurationDto remoteSignConfiguration);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RemoteSignConfigurationManagementApi : IRemoteSignConfigurationManagementApi
    {
        private ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteSignConfigurationManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RemoteSignConfigurationManagementApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteSignConfigurationManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RemoteSignConfigurationManagementApi(ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get remote sign configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertType">Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba </param>
        /// <returns>RemoteSignConfigurationDto</returns>
        public RemoteSignConfigurationDto RemoteSignConfigurationManagementGetRemoteSignConfiguration (int? signCertType)
        {
             ApiResponse<RemoteSignConfigurationDto> localVarResponse = RemoteSignConfigurationManagementGetRemoteSignConfigurationWithHttpInfo(signCertType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get remote sign configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertType">Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba </param>
        /// <returns>ApiResponse of RemoteSignConfigurationDto</returns>
        public ApiResponse< RemoteSignConfigurationDto > RemoteSignConfigurationManagementGetRemoteSignConfigurationWithHttpInfo (int? signCertType)
        {
            // verify the required parameter 'signCertType' is set
            if (signCertType == null)
                throw new ApiException(400, "Missing required parameter 'signCertType' when calling RemoteSignConfigurationManagementApi->RemoteSignConfigurationManagementGetRemoteSignConfiguration");

            var localVarPath = "/api/management/RemoteSignConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signCertType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signCertType", signCertType)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoteSignConfigurationManagementGetRemoteSignConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteSignConfigurationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteSignConfigurationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteSignConfigurationDto)));
        }

        /// <summary>
        /// Get remote sign configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertType">Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba </param>
        /// <returns>Task of RemoteSignConfigurationDto</returns>
        public async System.Threading.Tasks.Task<RemoteSignConfigurationDto> RemoteSignConfigurationManagementGetRemoteSignConfigurationAsync (int? signCertType)
        {
             ApiResponse<RemoteSignConfigurationDto> localVarResponse = await RemoteSignConfigurationManagementGetRemoteSignConfigurationAsyncWithHttpInfo(signCertType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get remote sign configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signCertType">Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba </param>
        /// <returns>Task of ApiResponse (RemoteSignConfigurationDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoteSignConfigurationDto>> RemoteSignConfigurationManagementGetRemoteSignConfigurationAsyncWithHttpInfo (int? signCertType)
        {
            // verify the required parameter 'signCertType' is set
            if (signCertType == null)
                throw new ApiException(400, "Missing required parameter 'signCertType' when calling RemoteSignConfigurationManagementApi->RemoteSignConfigurationManagementGetRemoteSignConfiguration");

            var localVarPath = "/api/management/RemoteSignConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signCertType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signCertType", signCertType)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoteSignConfigurationManagementGetRemoteSignConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteSignConfigurationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteSignConfigurationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteSignConfigurationDto)));
        }

        /// <summary>
        /// Update remote sign configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignConfiguration"></param>
        /// <returns>RemoteSignConfigurationDto</returns>
        public RemoteSignConfigurationDto RemoteSignConfigurationManagementUpdateRemoteSignConfiguration (RemoteSignConfigurationDto remoteSignConfiguration)
        {
             ApiResponse<RemoteSignConfigurationDto> localVarResponse = RemoteSignConfigurationManagementUpdateRemoteSignConfigurationWithHttpInfo(remoteSignConfiguration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update remote sign configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignConfiguration"></param>
        /// <returns>ApiResponse of RemoteSignConfigurationDto</returns>
        public ApiResponse< RemoteSignConfigurationDto > RemoteSignConfigurationManagementUpdateRemoteSignConfigurationWithHttpInfo (RemoteSignConfigurationDto remoteSignConfiguration)
        {
            // verify the required parameter 'remoteSignConfiguration' is set
            if (remoteSignConfiguration == null)
                throw new ApiException(400, "Missing required parameter 'remoteSignConfiguration' when calling RemoteSignConfigurationManagementApi->RemoteSignConfigurationManagementUpdateRemoteSignConfiguration");

            var localVarPath = "/api/management/RemoteSignConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (remoteSignConfiguration != null && remoteSignConfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(remoteSignConfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = remoteSignConfiguration; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoteSignConfigurationManagementUpdateRemoteSignConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteSignConfigurationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteSignConfigurationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteSignConfigurationDto)));
        }

        /// <summary>
        /// Update remote sign configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignConfiguration"></param>
        /// <returns>Task of RemoteSignConfigurationDto</returns>
        public async System.Threading.Tasks.Task<RemoteSignConfigurationDto> RemoteSignConfigurationManagementUpdateRemoteSignConfigurationAsync (RemoteSignConfigurationDto remoteSignConfiguration)
        {
             ApiResponse<RemoteSignConfigurationDto> localVarResponse = await RemoteSignConfigurationManagementUpdateRemoteSignConfigurationAsyncWithHttpInfo(remoteSignConfiguration);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update remote sign configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteSignConfiguration"></param>
        /// <returns>Task of ApiResponse (RemoteSignConfigurationDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoteSignConfigurationDto>> RemoteSignConfigurationManagementUpdateRemoteSignConfigurationAsyncWithHttpInfo (RemoteSignConfigurationDto remoteSignConfiguration)
        {
            // verify the required parameter 'remoteSignConfiguration' is set
            if (remoteSignConfiguration == null)
                throw new ApiException(400, "Missing required parameter 'remoteSignConfiguration' when calling RemoteSignConfigurationManagementApi->RemoteSignConfigurationManagementUpdateRemoteSignConfiguration");

            var localVarPath = "/api/management/RemoteSignConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (remoteSignConfiguration != null && remoteSignConfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(remoteSignConfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = remoteSignConfiguration; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoteSignConfigurationManagementUpdateRemoteSignConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteSignConfigurationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteSignConfigurationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteSignConfigurationDto)));
        }

    }
}
