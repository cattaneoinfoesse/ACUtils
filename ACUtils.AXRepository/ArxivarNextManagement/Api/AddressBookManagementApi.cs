/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNextManagement.Client;
using ACUtils.AXRepository.ArxivarNextManagement.Model;

namespace ACUtils.AXRepository.ArxivarNextManagement.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressBookManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns></returns>
        void AddressBookManagementDeleteAddressBookField (int? fieldId);

        /// <summary>
        /// This call deletes address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddressBookManagementDeleteAddressBookFieldWithHttpInfo (int? fieldId);
        /// <summary>
        /// This call removes value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <returns></returns>
        void AddressBookManagementDeleteAddressBookFieldValue (int? fieldId, int? id);

        /// <summary>
        /// This call removes value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddressBookManagementDeleteAddressBookFieldValueWithHttpInfo (int? fieldId, int? id);
        /// <summary>
        /// This call gets specific address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>AddressBookFieldDTO</returns>
        AddressBookFieldDTO AddressBookManagementGetAddressBookField (int? fieldId);

        /// <summary>
        /// This call gets specific address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>ApiResponse of AddressBookFieldDTO</returns>
        ApiResponse<AddressBookFieldDTO> AddressBookManagementGetAddressBookFieldWithHttpInfo (int? fieldId);
        /// <summary>
        /// This call returns address book additional fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AddressBookFieldDTO&gt;</returns>
        List<AddressBookFieldDTO> AddressBookManagementGetAddressBookFields ();

        /// <summary>
        /// This call returns address book additional fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AddressBookFieldDTO&gt;</returns>
        ApiResponse<List<AddressBookFieldDTO>> AddressBookManagementGetAddressBookFieldsWithHttpInfo ();
        /// <summary>
        /// This call inserts address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">Field for insert</param>
        /// <returns>AddressBookFieldDTO</returns>
        AddressBookFieldDTO AddressBookManagementInsertAddressBookField (AddressBookFieldDTO field);

        /// <summary>
        /// This call inserts address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">Field for insert</param>
        /// <returns>ApiResponse of AddressBookFieldDTO</returns>
        ApiResponse<AddressBookFieldDTO> AddressBookManagementInsertAddressBookFieldWithHttpInfo (AddressBookFieldDTO field);
        /// <summary>
        /// This call inserts value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>AddressBookFieldValueDTO</returns>
        AddressBookFieldValueDTO AddressBookManagementInsertAddressBookFieldValue (int? fieldId, AddressBookFieldValueDTO value);

        /// <summary>
        /// This call inserts value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>ApiResponse of AddressBookFieldValueDTO</returns>
        ApiResponse<AddressBookFieldValueDTO> AddressBookManagementInsertAddressBookFieldValueWithHttpInfo (int? fieldId, AddressBookFieldValueDTO value);
        /// <summary>
        /// This call updates address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <param name="field">Field for update</param>
        /// <returns>AddressBookFieldDTO</returns>
        AddressBookFieldDTO AddressBookManagementUpdateAddressBookField (int? fieldId, AddressBookFieldDTO field);

        /// <summary>
        /// This call updates address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <param name="field">Field for update</param>
        /// <returns>ApiResponse of AddressBookFieldDTO</returns>
        ApiResponse<AddressBookFieldDTO> AddressBookManagementUpdateAddressBookFieldWithHttpInfo (int? fieldId, AddressBookFieldDTO field);
        /// <summary>
        /// This call updates value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>AddressBookFieldValueDTO</returns>
        AddressBookFieldValueDTO AddressBookManagementUpdateAddressBookFieldValue (int? fieldId, int? id, AddressBookFieldValueDTO value);

        /// <summary>
        /// This call updates value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>ApiResponse of AddressBookFieldValueDTO</returns>
        ApiResponse<AddressBookFieldValueDTO> AddressBookManagementUpdateAddressBookFieldValueWithHttpInfo (int? fieldId, int? id, AddressBookFieldValueDTO value);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddressBookManagementDeleteAddressBookFieldAsync (int? fieldId);

        /// <summary>
        /// This call deletes address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookManagementDeleteAddressBookFieldAsyncWithHttpInfo (int? fieldId);
        /// <summary>
        /// This call removes value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddressBookManagementDeleteAddressBookFieldValueAsync (int? fieldId, int? id);

        /// <summary>
        /// This call removes value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookManagementDeleteAddressBookFieldValueAsyncWithHttpInfo (int? fieldId, int? id);
        /// <summary>
        /// This call gets specific address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>Task of AddressBookFieldDTO</returns>
        System.Threading.Tasks.Task<AddressBookFieldDTO> AddressBookManagementGetAddressBookFieldAsync (int? fieldId);

        /// <summary>
        /// This call gets specific address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>Task of ApiResponse (AddressBookFieldDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookFieldDTO>> AddressBookManagementGetAddressBookFieldAsyncWithHttpInfo (int? fieldId);
        /// <summary>
        /// This call returns address book additional fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AddressBookFieldDTO&gt;</returns>
        System.Threading.Tasks.Task<List<AddressBookFieldDTO>> AddressBookManagementGetAddressBookFieldsAsync ();

        /// <summary>
        /// This call returns address book additional fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AddressBookFieldDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AddressBookFieldDTO>>> AddressBookManagementGetAddressBookFieldsAsyncWithHttpInfo ();
        /// <summary>
        /// This call inserts address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">Field for insert</param>
        /// <returns>Task of AddressBookFieldDTO</returns>
        System.Threading.Tasks.Task<AddressBookFieldDTO> AddressBookManagementInsertAddressBookFieldAsync (AddressBookFieldDTO field);

        /// <summary>
        /// This call inserts address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">Field for insert</param>
        /// <returns>Task of ApiResponse (AddressBookFieldDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookFieldDTO>> AddressBookManagementInsertAddressBookFieldAsyncWithHttpInfo (AddressBookFieldDTO field);
        /// <summary>
        /// This call inserts value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>Task of AddressBookFieldValueDTO</returns>
        System.Threading.Tasks.Task<AddressBookFieldValueDTO> AddressBookManagementInsertAddressBookFieldValueAsync (int? fieldId, AddressBookFieldValueDTO value);

        /// <summary>
        /// This call inserts value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>Task of ApiResponse (AddressBookFieldValueDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookFieldValueDTO>> AddressBookManagementInsertAddressBookFieldValueAsyncWithHttpInfo (int? fieldId, AddressBookFieldValueDTO value);
        /// <summary>
        /// This call updates address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <param name="field">Field for update</param>
        /// <returns>Task of AddressBookFieldDTO</returns>
        System.Threading.Tasks.Task<AddressBookFieldDTO> AddressBookManagementUpdateAddressBookFieldAsync (int? fieldId, AddressBookFieldDTO field);

        /// <summary>
        /// This call updates address book additional field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <param name="field">Field for update</param>
        /// <returns>Task of ApiResponse (AddressBookFieldDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookFieldDTO>> AddressBookManagementUpdateAddressBookFieldAsyncWithHttpInfo (int? fieldId, AddressBookFieldDTO field);
        /// <summary>
        /// This call updates value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>Task of AddressBookFieldValueDTO</returns>
        System.Threading.Tasks.Task<AddressBookFieldValueDTO> AddressBookManagementUpdateAddressBookFieldValueAsync (int? fieldId, int? id, AddressBookFieldValueDTO value);

        /// <summary>
        /// This call updates value for combo field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>Task of ApiResponse (AddressBookFieldValueDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBookFieldValueDTO>> AddressBookManagementUpdateAddressBookFieldValueAsyncWithHttpInfo (int? fieldId, int? id, AddressBookFieldValueDTO value);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressBookManagementApi : IAddressBookManagementApi
    {
        private ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressBookManagementApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBookManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressBookManagementApi(ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns></returns>
        public void AddressBookManagementDeleteAddressBookField (int? fieldId)
        {
             AddressBookManagementDeleteAddressBookFieldWithHttpInfo(fieldId);
        }

        /// <summary>
        /// This call deletes address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddressBookManagementDeleteAddressBookFieldWithHttpInfo (int? fieldId)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementDeleteAddressBookField");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementDeleteAddressBookField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddressBookManagementDeleteAddressBookFieldAsync (int? fieldId)
        {
             await AddressBookManagementDeleteAddressBookFieldAsyncWithHttpInfo(fieldId);

        }

        /// <summary>
        /// This call deletes address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookManagementDeleteAddressBookFieldAsyncWithHttpInfo (int? fieldId)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementDeleteAddressBookField");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementDeleteAddressBookField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call removes value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <returns></returns>
        public void AddressBookManagementDeleteAddressBookFieldValue (int? fieldId, int? id)
        {
             AddressBookManagementDeleteAddressBookFieldValueWithHttpInfo(fieldId, id);
        }

        /// <summary>
        /// This call removes value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddressBookManagementDeleteAddressBookFieldValueWithHttpInfo (int? fieldId, int? id)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementDeleteAddressBookFieldValue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookManagementApi->AddressBookManagementDeleteAddressBookFieldValue");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}/values/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementDeleteAddressBookFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call removes value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddressBookManagementDeleteAddressBookFieldValueAsync (int? fieldId, int? id)
        {
             await AddressBookManagementDeleteAddressBookFieldValueAsyncWithHttpInfo(fieldId, id);

        }

        /// <summary>
        /// This call removes value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddressBookManagementDeleteAddressBookFieldValueAsyncWithHttpInfo (int? fieldId, int? id)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementDeleteAddressBookFieldValue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookManagementApi->AddressBookManagementDeleteAddressBookFieldValue");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}/values/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementDeleteAddressBookFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call gets specific address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>AddressBookFieldDTO</returns>
        public AddressBookFieldDTO AddressBookManagementGetAddressBookField (int? fieldId)
        {
             ApiResponse<AddressBookFieldDTO> localVarResponse = AddressBookManagementGetAddressBookFieldWithHttpInfo(fieldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>ApiResponse of AddressBookFieldDTO</returns>
        public ApiResponse< AddressBookFieldDTO > AddressBookManagementGetAddressBookFieldWithHttpInfo (int? fieldId)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementGetAddressBookField");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementGetAddressBookField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookFieldDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookFieldDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookFieldDTO)));
        }

        /// <summary>
        /// This call gets specific address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>Task of AddressBookFieldDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookFieldDTO> AddressBookManagementGetAddressBookFieldAsync (int? fieldId)
        {
             ApiResponse<AddressBookFieldDTO> localVarResponse = await AddressBookManagementGetAddressBookFieldAsyncWithHttpInfo(fieldId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <returns>Task of ApiResponse (AddressBookFieldDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookFieldDTO>> AddressBookManagementGetAddressBookFieldAsyncWithHttpInfo (int? fieldId)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementGetAddressBookField");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementGetAddressBookField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookFieldDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookFieldDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookFieldDTO)));
        }

        /// <summary>
        /// This call returns address book additional fields 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AddressBookFieldDTO&gt;</returns>
        public List<AddressBookFieldDTO> AddressBookManagementGetAddressBookFields ()
        {
             ApiResponse<List<AddressBookFieldDTO>> localVarResponse = AddressBookManagementGetAddressBookFieldsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns address book additional fields 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AddressBookFieldDTO&gt;</returns>
        public ApiResponse< List<AddressBookFieldDTO> > AddressBookManagementGetAddressBookFieldsWithHttpInfo ()
        {

            var localVarPath = "/api/management/AddressBook/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementGetAddressBookFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AddressBookFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AddressBookFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AddressBookFieldDTO>)));
        }

        /// <summary>
        /// This call returns address book additional fields 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AddressBookFieldDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AddressBookFieldDTO>> AddressBookManagementGetAddressBookFieldsAsync ()
        {
             ApiResponse<List<AddressBookFieldDTO>> localVarResponse = await AddressBookManagementGetAddressBookFieldsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns address book additional fields 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AddressBookFieldDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AddressBookFieldDTO>>> AddressBookManagementGetAddressBookFieldsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/AddressBook/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementGetAddressBookFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AddressBookFieldDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AddressBookFieldDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AddressBookFieldDTO>)));
        }

        /// <summary>
        /// This call inserts address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">Field for insert</param>
        /// <returns>AddressBookFieldDTO</returns>
        public AddressBookFieldDTO AddressBookManagementInsertAddressBookField (AddressBookFieldDTO field)
        {
             ApiResponse<AddressBookFieldDTO> localVarResponse = AddressBookManagementInsertAddressBookFieldWithHttpInfo(field);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">Field for insert</param>
        /// <returns>ApiResponse of AddressBookFieldDTO</returns>
        public ApiResponse< AddressBookFieldDTO > AddressBookManagementInsertAddressBookFieldWithHttpInfo (AddressBookFieldDTO field)
        {
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AddressBookManagementApi->AddressBookManagementInsertAddressBookField");

            var localVarPath = "/api/management/AddressBook/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementInsertAddressBookField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookFieldDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookFieldDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookFieldDTO)));
        }

        /// <summary>
        /// This call inserts address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">Field for insert</param>
        /// <returns>Task of AddressBookFieldDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookFieldDTO> AddressBookManagementInsertAddressBookFieldAsync (AddressBookFieldDTO field)
        {
             ApiResponse<AddressBookFieldDTO> localVarResponse = await AddressBookManagementInsertAddressBookFieldAsyncWithHttpInfo(field);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">Field for insert</param>
        /// <returns>Task of ApiResponse (AddressBookFieldDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookFieldDTO>> AddressBookManagementInsertAddressBookFieldAsyncWithHttpInfo (AddressBookFieldDTO field)
        {
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AddressBookManagementApi->AddressBookManagementInsertAddressBookField");

            var localVarPath = "/api/management/AddressBook/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementInsertAddressBookField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookFieldDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookFieldDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookFieldDTO)));
        }

        /// <summary>
        /// This call inserts value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>AddressBookFieldValueDTO</returns>
        public AddressBookFieldValueDTO AddressBookManagementInsertAddressBookFieldValue (int? fieldId, AddressBookFieldValueDTO value)
        {
             ApiResponse<AddressBookFieldValueDTO> localVarResponse = AddressBookManagementInsertAddressBookFieldValueWithHttpInfo(fieldId, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>ApiResponse of AddressBookFieldValueDTO</returns>
        public ApiResponse< AddressBookFieldValueDTO > AddressBookManagementInsertAddressBookFieldValueWithHttpInfo (int? fieldId, AddressBookFieldValueDTO value)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementInsertAddressBookFieldValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling AddressBookManagementApi->AddressBookManagementInsertAddressBookFieldValue");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementInsertAddressBookFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookFieldValueDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookFieldValueDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookFieldValueDTO)));
        }

        /// <summary>
        /// This call inserts value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>Task of AddressBookFieldValueDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookFieldValueDTO> AddressBookManagementInsertAddressBookFieldValueAsync (int? fieldId, AddressBookFieldValueDTO value)
        {
             ApiResponse<AddressBookFieldValueDTO> localVarResponse = await AddressBookManagementInsertAddressBookFieldValueAsyncWithHttpInfo(fieldId, value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>Task of ApiResponse (AddressBookFieldValueDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookFieldValueDTO>> AddressBookManagementInsertAddressBookFieldValueAsyncWithHttpInfo (int? fieldId, AddressBookFieldValueDTO value)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementInsertAddressBookFieldValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling AddressBookManagementApi->AddressBookManagementInsertAddressBookFieldValue");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementInsertAddressBookFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookFieldValueDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookFieldValueDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookFieldValueDTO)));
        }

        /// <summary>
        /// This call updates address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <param name="field">Field for update</param>
        /// <returns>AddressBookFieldDTO</returns>
        public AddressBookFieldDTO AddressBookManagementUpdateAddressBookField (int? fieldId, AddressBookFieldDTO field)
        {
             ApiResponse<AddressBookFieldDTO> localVarResponse = AddressBookManagementUpdateAddressBookFieldWithHttpInfo(fieldId, field);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <param name="field">Field for update</param>
        /// <returns>ApiResponse of AddressBookFieldDTO</returns>
        public ApiResponse< AddressBookFieldDTO > AddressBookManagementUpdateAddressBookFieldWithHttpInfo (int? fieldId, AddressBookFieldDTO field)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementUpdateAddressBookField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AddressBookManagementApi->AddressBookManagementUpdateAddressBookField");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementUpdateAddressBookField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookFieldDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookFieldDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookFieldDTO)));
        }

        /// <summary>
        /// This call updates address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <param name="field">Field for update</param>
        /// <returns>Task of AddressBookFieldDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookFieldDTO> AddressBookManagementUpdateAddressBookFieldAsync (int? fieldId, AddressBookFieldDTO field)
        {
             ApiResponse<AddressBookFieldDTO> localVarResponse = await AddressBookManagementUpdateAddressBookFieldAsyncWithHttpInfo(fieldId, field);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates address book additional field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Field identifier</param>
        /// <param name="field">Field for update</param>
        /// <returns>Task of ApiResponse (AddressBookFieldDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookFieldDTO>> AddressBookManagementUpdateAddressBookFieldAsyncWithHttpInfo (int? fieldId, AddressBookFieldDTO field)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementUpdateAddressBookField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AddressBookManagementApi->AddressBookManagementUpdateAddressBookField");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementUpdateAddressBookField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookFieldDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookFieldDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookFieldDTO)));
        }

        /// <summary>
        /// This call updates value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>AddressBookFieldValueDTO</returns>
        public AddressBookFieldValueDTO AddressBookManagementUpdateAddressBookFieldValue (int? fieldId, int? id, AddressBookFieldValueDTO value)
        {
             ApiResponse<AddressBookFieldValueDTO> localVarResponse = AddressBookManagementUpdateAddressBookFieldValueWithHttpInfo(fieldId, id, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>ApiResponse of AddressBookFieldValueDTO</returns>
        public ApiResponse< AddressBookFieldValueDTO > AddressBookManagementUpdateAddressBookFieldValueWithHttpInfo (int? fieldId, int? id, AddressBookFieldValueDTO value)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementUpdateAddressBookFieldValue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookManagementApi->AddressBookManagementUpdateAddressBookFieldValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling AddressBookManagementApi->AddressBookManagementUpdateAddressBookFieldValue");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}/values/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementUpdateAddressBookFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookFieldValueDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookFieldValueDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookFieldValueDTO)));
        }

        /// <summary>
        /// This call updates value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>Task of AddressBookFieldValueDTO</returns>
        public async System.Threading.Tasks.Task<AddressBookFieldValueDTO> AddressBookManagementUpdateAddressBookFieldValueAsync (int? fieldId, int? id, AddressBookFieldValueDTO value)
        {
             ApiResponse<AddressBookFieldValueDTO> localVarResponse = await AddressBookManagementUpdateAddressBookFieldValueAsyncWithHttpInfo(fieldId, id, value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates value for combo field 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Combo field identifier</param>
        /// <param name="id">Field value identifier</param>
        /// <param name="value">Field value</param>
        /// <returns>Task of ApiResponse (AddressBookFieldValueDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressBookFieldValueDTO>> AddressBookManagementUpdateAddressBookFieldValueAsyncWithHttpInfo (int? fieldId, int? id, AddressBookFieldValueDTO value)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling AddressBookManagementApi->AddressBookManagementUpdateAddressBookFieldValue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressBookManagementApi->AddressBookManagementUpdateAddressBookFieldValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling AddressBookManagementApi->AddressBookManagementUpdateAddressBookFieldValue");

            var localVarPath = "/api/management/AddressBook/fields/{fieldId}/values/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", this.Configuration.ApiClient.ParameterToString(fieldId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressBookManagementUpdateAddressBookFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressBookFieldValueDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressBookFieldValueDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressBookFieldValueDTO)));
        }

    }
}
