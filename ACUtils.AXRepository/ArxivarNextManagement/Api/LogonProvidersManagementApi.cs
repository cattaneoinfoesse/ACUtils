/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNextManagement.Client;
using ACUtils.AXRepository.ArxivarNextManagement.Model;

namespace ACUtils.AXRepository.ArxivarNextManagement.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILogonProvidersManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method removes user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to remove</param>
        /// <returns></returns>
        void LogonProvidersManagementDeleteLogonProviderAssociation (string id, LogonProviderAssociationDTO association);

        /// <summary>
        /// This method removes user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogonProvidersManagementDeleteLogonProviderAssociationWithHttpInfo (string id, LogonProviderAssociationDTO association);
        /// <summary>
        /// This method returns logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>LogonProviderConfigDTO</returns>
        LogonProviderConfigDTO LogonProvidersManagementGetLogonProvider (string id);

        /// <summary>
        /// This method returns logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>ApiResponse of LogonProviderConfigDTO</returns>
        ApiResponse<LogonProviderConfigDTO> LogonProvidersManagementGetLogonProviderWithHttpInfo (string id);
        /// <summary>
        /// This method returns all user associations for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>List&lt;LogonProviderAssociationDTO&gt;</returns>
        List<LogonProviderAssociationDTO> LogonProvidersManagementGetLogonProviderAssociations (string id);

        /// <summary>
        /// This method returns all user associations for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>ApiResponse of List&lt;LogonProviderAssociationDTO&gt;</returns>
        ApiResponse<List<LogonProviderAssociationDTO>> LogonProvidersManagementGetLogonProviderAssociationsWithHttpInfo (string id);
        /// <summary>
        /// This method returns all logon providers configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LogonProviderConfigDTO&gt;</returns>
        List<LogonProviderConfigDTO> LogonProvidersManagementGetLogonProviders ();

        /// <summary>
        /// This method returns all logon providers configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LogonProviderConfigDTO&gt;</returns>
        ApiResponse<List<LogonProviderConfigDTO>> LogonProvidersManagementGetLogonProvidersWithHttpInfo ();
        /// <summary>
        /// This method inserts user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to insert</param>
        /// <returns>LogonProviderAssociationDTO</returns>
        LogonProviderAssociationDTO LogonProvidersManagementInsertLogonProviderAssociation (string id, LogonProviderAssociationDTO association);

        /// <summary>
        /// This method inserts user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to insert</param>
        /// <returns>ApiResponse of LogonProviderAssociationDTO</returns>
        ApiResponse<LogonProviderAssociationDTO> LogonProvidersManagementInsertLogonProviderAssociationWithHttpInfo (string id, LogonProviderAssociationDTO association);
        /// <summary>
        /// This method updates specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="logonproviderconfig"> (optional)</param>
        /// <returns>LogonProviderConfigDTO</returns>
        LogonProviderConfigDTO LogonProvidersManagementUpdateLogonProvider (string id, LogonProviderConfigDTO logonproviderconfig = null);

        /// <summary>
        /// This method updates specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="logonproviderconfig"> (optional)</param>
        /// <returns>ApiResponse of LogonProviderConfigDTO</returns>
        ApiResponse<LogonProviderConfigDTO> LogonProvidersManagementUpdateLogonProviderWithHttpInfo (string id, LogonProviderConfigDTO logonproviderconfig = null);
        /// <summary>
        /// This method updates user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to update</param>
        /// <returns>LogonProviderAssociationDTO</returns>
        LogonProviderAssociationDTO LogonProvidersManagementUpdateLogonProviderAssociation (string id, LogonProviderAssociationDTO association);

        /// <summary>
        /// This method updates user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to update</param>
        /// <returns>ApiResponse of LogonProviderAssociationDTO</returns>
        ApiResponse<LogonProviderAssociationDTO> LogonProvidersManagementUpdateLogonProviderAssociationWithHttpInfo (string id, LogonProviderAssociationDTO association);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This method removes user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to remove</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LogonProvidersManagementDeleteLogonProviderAssociationAsync (string id, LogonProviderAssociationDTO association);

        /// <summary>
        /// This method removes user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to remove</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogonProvidersManagementDeleteLogonProviderAssociationAsyncWithHttpInfo (string id, LogonProviderAssociationDTO association);
        /// <summary>
        /// This method returns logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of LogonProviderConfigDTO</returns>
        System.Threading.Tasks.Task<LogonProviderConfigDTO> LogonProvidersManagementGetLogonProviderAsync (string id);

        /// <summary>
        /// This method returns logon provider by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of ApiResponse (LogonProviderConfigDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogonProviderConfigDTO>> LogonProvidersManagementGetLogonProviderAsyncWithHttpInfo (string id);
        /// <summary>
        /// This method returns all user associations for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of List&lt;LogonProviderAssociationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<LogonProviderAssociationDTO>> LogonProvidersManagementGetLogonProviderAssociationsAsync (string id);

        /// <summary>
        /// This method returns all user associations for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of ApiResponse (List&lt;LogonProviderAssociationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LogonProviderAssociationDTO>>> LogonProvidersManagementGetLogonProviderAssociationsAsyncWithHttpInfo (string id);
        /// <summary>
        /// This method returns all logon providers configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LogonProviderConfigDTO&gt;</returns>
        System.Threading.Tasks.Task<List<LogonProviderConfigDTO>> LogonProvidersManagementGetLogonProvidersAsync ();

        /// <summary>
        /// This method returns all logon providers configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LogonProviderConfigDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LogonProviderConfigDTO>>> LogonProvidersManagementGetLogonProvidersAsyncWithHttpInfo ();
        /// <summary>
        /// This method inserts user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to insert</param>
        /// <returns>Task of LogonProviderAssociationDTO</returns>
        System.Threading.Tasks.Task<LogonProviderAssociationDTO> LogonProvidersManagementInsertLogonProviderAssociationAsync (string id, LogonProviderAssociationDTO association);

        /// <summary>
        /// This method inserts user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to insert</param>
        /// <returns>Task of ApiResponse (LogonProviderAssociationDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogonProviderAssociationDTO>> LogonProvidersManagementInsertLogonProviderAssociationAsyncWithHttpInfo (string id, LogonProviderAssociationDTO association);
        /// <summary>
        /// This method updates specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="logonproviderconfig"> (optional)</param>
        /// <returns>Task of LogonProviderConfigDTO</returns>
        System.Threading.Tasks.Task<LogonProviderConfigDTO> LogonProvidersManagementUpdateLogonProviderAsync (string id, LogonProviderConfigDTO logonproviderconfig = null);

        /// <summary>
        /// This method updates specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="logonproviderconfig"> (optional)</param>
        /// <returns>Task of ApiResponse (LogonProviderConfigDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogonProviderConfigDTO>> LogonProvidersManagementUpdateLogonProviderAsyncWithHttpInfo (string id, LogonProviderConfigDTO logonproviderconfig = null);
        /// <summary>
        /// This method updates user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to update</param>
        /// <returns>Task of LogonProviderAssociationDTO</returns>
        System.Threading.Tasks.Task<LogonProviderAssociationDTO> LogonProvidersManagementUpdateLogonProviderAssociationAsync (string id, LogonProviderAssociationDTO association);

        /// <summary>
        /// This method updates user association for specific logon provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to update</param>
        /// <returns>Task of ApiResponse (LogonProviderAssociationDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogonProviderAssociationDTO>> LogonProvidersManagementUpdateLogonProviderAssociationAsyncWithHttpInfo (string id, LogonProviderAssociationDTO association);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LogonProvidersManagementApi : ILogonProvidersManagementApi
    {
        private ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LogonProvidersManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LogonProvidersManagementApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogonProvidersManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LogonProvidersManagementApi(ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This method removes user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to remove</param>
        /// <returns></returns>
        public void LogonProvidersManagementDeleteLogonProviderAssociation (string id, LogonProviderAssociationDTO association)
        {
             LogonProvidersManagementDeleteLogonProviderAssociationWithHttpInfo(id, association);
        }

        /// <summary>
        /// This method removes user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LogonProvidersManagementDeleteLogonProviderAssociationWithHttpInfo (string id, LogonProviderAssociationDTO association)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementDeleteLogonProviderAssociation");
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling LogonProvidersManagementApi->LogonProvidersManagementDeleteLogonProviderAssociation");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (association != null && association.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(association); // http body (model) parameter
            }
            else
            {
                localVarPostBody = association; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementDeleteLogonProviderAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method removes user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to remove</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LogonProvidersManagementDeleteLogonProviderAssociationAsync (string id, LogonProviderAssociationDTO association)
        {
             await LogonProvidersManagementDeleteLogonProviderAssociationAsyncWithHttpInfo(id, association);

        }

        /// <summary>
        /// This method removes user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to remove</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LogonProvidersManagementDeleteLogonProviderAssociationAsyncWithHttpInfo (string id, LogonProviderAssociationDTO association)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementDeleteLogonProviderAssociation");
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling LogonProvidersManagementApi->LogonProvidersManagementDeleteLogonProviderAssociation");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (association != null && association.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(association); // http body (model) parameter
            }
            else
            {
                localVarPostBody = association; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementDeleteLogonProviderAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method returns logon provider by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>LogonProviderConfigDTO</returns>
        public LogonProviderConfigDTO LogonProvidersManagementGetLogonProvider (string id)
        {
             ApiResponse<LogonProviderConfigDTO> localVarResponse = LogonProvidersManagementGetLogonProviderWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns logon provider by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>ApiResponse of LogonProviderConfigDTO</returns>
        public ApiResponse< LogonProviderConfigDTO > LogonProvidersManagementGetLogonProviderWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementGetLogonProvider");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementGetLogonProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderConfigDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogonProviderConfigDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderConfigDTO)));
        }

        /// <summary>
        /// This method returns logon provider by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of LogonProviderConfigDTO</returns>
        public async System.Threading.Tasks.Task<LogonProviderConfigDTO> LogonProvidersManagementGetLogonProviderAsync (string id)
        {
             ApiResponse<LogonProviderConfigDTO> localVarResponse = await LogonProvidersManagementGetLogonProviderAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns logon provider by id 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of ApiResponse (LogonProviderConfigDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogonProviderConfigDTO>> LogonProvidersManagementGetLogonProviderAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementGetLogonProvider");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementGetLogonProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderConfigDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogonProviderConfigDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderConfigDTO)));
        }

        /// <summary>
        /// This method returns all user associations for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>List&lt;LogonProviderAssociationDTO&gt;</returns>
        public List<LogonProviderAssociationDTO> LogonProvidersManagementGetLogonProviderAssociations (string id)
        {
             ApiResponse<List<LogonProviderAssociationDTO>> localVarResponse = LogonProvidersManagementGetLogonProviderAssociationsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns all user associations for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>ApiResponse of List&lt;LogonProviderAssociationDTO&gt;</returns>
        public ApiResponse< List<LogonProviderAssociationDTO> > LogonProvidersManagementGetLogonProviderAssociationsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementGetLogonProviderAssociations");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementGetLogonProviderAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonProviderAssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LogonProviderAssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonProviderAssociationDTO>)));
        }

        /// <summary>
        /// This method returns all user associations for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of List&lt;LogonProviderAssociationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<LogonProviderAssociationDTO>> LogonProvidersManagementGetLogonProviderAssociationsAsync (string id)
        {
             ApiResponse<List<LogonProviderAssociationDTO>> localVarResponse = await LogonProvidersManagementGetLogonProviderAssociationsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns all user associations for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <returns>Task of ApiResponse (List&lt;LogonProviderAssociationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LogonProviderAssociationDTO>>> LogonProvidersManagementGetLogonProviderAssociationsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementGetLogonProviderAssociations");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementGetLogonProviderAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonProviderAssociationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LogonProviderAssociationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonProviderAssociationDTO>)));
        }

        /// <summary>
        /// This method returns all logon providers configurations 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LogonProviderConfigDTO&gt;</returns>
        public List<LogonProviderConfigDTO> LogonProvidersManagementGetLogonProviders ()
        {
             ApiResponse<List<LogonProviderConfigDTO>> localVarResponse = LogonProvidersManagementGetLogonProvidersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns all logon providers configurations 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LogonProviderConfigDTO&gt;</returns>
        public ApiResponse< List<LogonProviderConfigDTO> > LogonProvidersManagementGetLogonProvidersWithHttpInfo ()
        {

            var localVarPath = "/api/management/Authentication/LogonProviders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementGetLogonProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonProviderConfigDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LogonProviderConfigDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonProviderConfigDTO>)));
        }

        /// <summary>
        /// This method returns all logon providers configurations 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LogonProviderConfigDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<LogonProviderConfigDTO>> LogonProvidersManagementGetLogonProvidersAsync ()
        {
             ApiResponse<List<LogonProviderConfigDTO>> localVarResponse = await LogonProvidersManagementGetLogonProvidersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns all logon providers configurations 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LogonProviderConfigDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LogonProviderConfigDTO>>> LogonProvidersManagementGetLogonProvidersAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/Authentication/LogonProviders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementGetLogonProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogonProviderConfigDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LogonProviderConfigDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogonProviderConfigDTO>)));
        }

        /// <summary>
        /// This method inserts user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to insert</param>
        /// <returns>LogonProviderAssociationDTO</returns>
        public LogonProviderAssociationDTO LogonProvidersManagementInsertLogonProviderAssociation (string id, LogonProviderAssociationDTO association)
        {
             ApiResponse<LogonProviderAssociationDTO> localVarResponse = LogonProvidersManagementInsertLogonProviderAssociationWithHttpInfo(id, association);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method inserts user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to insert</param>
        /// <returns>ApiResponse of LogonProviderAssociationDTO</returns>
        public ApiResponse< LogonProviderAssociationDTO > LogonProvidersManagementInsertLogonProviderAssociationWithHttpInfo (string id, LogonProviderAssociationDTO association)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementInsertLogonProviderAssociation");
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling LogonProvidersManagementApi->LogonProvidersManagementInsertLogonProviderAssociation");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (association != null && association.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(association); // http body (model) parameter
            }
            else
            {
                localVarPostBody = association; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementInsertLogonProviderAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderAssociationDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogonProviderAssociationDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderAssociationDTO)));
        }

        /// <summary>
        /// This method inserts user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to insert</param>
        /// <returns>Task of LogonProviderAssociationDTO</returns>
        public async System.Threading.Tasks.Task<LogonProviderAssociationDTO> LogonProvidersManagementInsertLogonProviderAssociationAsync (string id, LogonProviderAssociationDTO association)
        {
             ApiResponse<LogonProviderAssociationDTO> localVarResponse = await LogonProvidersManagementInsertLogonProviderAssociationAsyncWithHttpInfo(id, association);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method inserts user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to insert</param>
        /// <returns>Task of ApiResponse (LogonProviderAssociationDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogonProviderAssociationDTO>> LogonProvidersManagementInsertLogonProviderAssociationAsyncWithHttpInfo (string id, LogonProviderAssociationDTO association)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementInsertLogonProviderAssociation");
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling LogonProvidersManagementApi->LogonProvidersManagementInsertLogonProviderAssociation");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (association != null && association.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(association); // http body (model) parameter
            }
            else
            {
                localVarPostBody = association; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementInsertLogonProviderAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderAssociationDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogonProviderAssociationDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderAssociationDTO)));
        }

        /// <summary>
        /// This method updates specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="logonproviderconfig"> (optional)</param>
        /// <returns>LogonProviderConfigDTO</returns>
        public LogonProviderConfigDTO LogonProvidersManagementUpdateLogonProvider (string id, LogonProviderConfigDTO logonproviderconfig = null)
        {
             ApiResponse<LogonProviderConfigDTO> localVarResponse = LogonProvidersManagementUpdateLogonProviderWithHttpInfo(id, logonproviderconfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method updates specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="logonproviderconfig"> (optional)</param>
        /// <returns>ApiResponse of LogonProviderConfigDTO</returns>
        public ApiResponse< LogonProviderConfigDTO > LogonProvidersManagementUpdateLogonProviderWithHttpInfo (string id, LogonProviderConfigDTO logonproviderconfig = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementUpdateLogonProvider");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (logonproviderconfig != null && logonproviderconfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(logonproviderconfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logonproviderconfig; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementUpdateLogonProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderConfigDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogonProviderConfigDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderConfigDTO)));
        }

        /// <summary>
        /// This method updates specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="logonproviderconfig"> (optional)</param>
        /// <returns>Task of LogonProviderConfigDTO</returns>
        public async System.Threading.Tasks.Task<LogonProviderConfigDTO> LogonProvidersManagementUpdateLogonProviderAsync (string id, LogonProviderConfigDTO logonproviderconfig = null)
        {
             ApiResponse<LogonProviderConfigDTO> localVarResponse = await LogonProvidersManagementUpdateLogonProviderAsyncWithHttpInfo(id, logonproviderconfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method updates specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="logonproviderconfig"> (optional)</param>
        /// <returns>Task of ApiResponse (LogonProviderConfigDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogonProviderConfigDTO>> LogonProvidersManagementUpdateLogonProviderAsyncWithHttpInfo (string id, LogonProviderConfigDTO logonproviderconfig = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementUpdateLogonProvider");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (logonproviderconfig != null && logonproviderconfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(logonproviderconfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logonproviderconfig; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementUpdateLogonProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderConfigDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogonProviderConfigDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderConfigDTO)));
        }

        /// <summary>
        /// This method updates user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to update</param>
        /// <returns>LogonProviderAssociationDTO</returns>
        public LogonProviderAssociationDTO LogonProvidersManagementUpdateLogonProviderAssociation (string id, LogonProviderAssociationDTO association)
        {
             ApiResponse<LogonProviderAssociationDTO> localVarResponse = LogonProvidersManagementUpdateLogonProviderAssociationWithHttpInfo(id, association);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method updates user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to update</param>
        /// <returns>ApiResponse of LogonProviderAssociationDTO</returns>
        public ApiResponse< LogonProviderAssociationDTO > LogonProvidersManagementUpdateLogonProviderAssociationWithHttpInfo (string id, LogonProviderAssociationDTO association)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementUpdateLogonProviderAssociation");
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling LogonProvidersManagementApi->LogonProvidersManagementUpdateLogonProviderAssociation");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (association != null && association.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(association); // http body (model) parameter
            }
            else
            {
                localVarPostBody = association; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementUpdateLogonProviderAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderAssociationDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogonProviderAssociationDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderAssociationDTO)));
        }

        /// <summary>
        /// This method updates user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to update</param>
        /// <returns>Task of LogonProviderAssociationDTO</returns>
        public async System.Threading.Tasks.Task<LogonProviderAssociationDTO> LogonProvidersManagementUpdateLogonProviderAssociationAsync (string id, LogonProviderAssociationDTO association)
        {
             ApiResponse<LogonProviderAssociationDTO> localVarResponse = await LogonProvidersManagementUpdateLogonProviderAssociationAsyncWithHttpInfo(id, association);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method updates user association for specific logon provider 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Logon provider identifier</param>
        /// <param name="association">User association to update</param>
        /// <returns>Task of ApiResponse (LogonProviderAssociationDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogonProviderAssociationDTO>> LogonProvidersManagementUpdateLogonProviderAssociationAsyncWithHttpInfo (string id, LogonProviderAssociationDTO association)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LogonProvidersManagementApi->LogonProvidersManagementUpdateLogonProviderAssociation");
            // verify the required parameter 'association' is set
            if (association == null)
                throw new ApiException(400, "Missing required parameter 'association' when calling LogonProvidersManagementApi->LogonProvidersManagementUpdateLogonProviderAssociation");

            var localVarPath = "/api/management/Authentication/LogonProviders/{id}/Associations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (association != null && association.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(association); // http body (model) parameter
            }
            else
            {
                localVarPostBody = association; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogonProvidersManagementUpdateLogonProviderAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogonProviderAssociationDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogonProviderAssociationDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogonProviderAssociationDTO)));
        }

    }
}
