/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNextManagement.Client;
using ACUtils.AXRepository.ArxivarNextManagement.Model;

namespace ACUtils.AXRepository.ArxivarNextManagement.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIxFeServicesManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call allows to check if it is possible to generate default configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? IxFeServicesManagementCanGenerateStandardMapping ();

        /// <summary>
        /// This call allows to check if it is possible to generate default configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> IxFeServicesManagementCanGenerateStandardMappingWithHttpInfo ();
        /// <summary>
        /// This call deletes specific business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns></returns>
        void IxFeServicesManagementDeleteBusinessUnitSettings (int? id);

        /// <summary>
        /// This call deletes specific business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxFeServicesManagementDeleteBusinessUnitSettingsWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns></returns>
        void IxFeServicesManagementDeleteNotificationSettings (int? id);

        /// <summary>
        /// This call deletes specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxFeServicesManagementDeleteNotificationSettingsWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns></returns>
        void IxFeServicesManagementDeleteReceivingSettings (int? id);

        /// <summary>
        /// This call deletes specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxFeServicesManagementDeleteReceivingSettingsWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns></returns>
        void IxFeServicesManagementDeleteSendingSettings (int? id);

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxFeServicesManagementDeleteSendingSettingsWithHttpInfo (int? id);
        /// <summary>
        /// This call allows to generate default configuration mapping with IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options for mapping</param>
        /// <returns></returns>
        void IxFeServicesManagementGenerateStandardMapping (IxFeMappingOptionsDTO options);

        /// <summary>
        /// This call allows to generate default configuration mapping with IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options for mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxFeServicesManagementGenerateStandardMappingWithHttpInfo (IxFeMappingOptionsDTO options);
        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>IxFeBusinessUnitSettingsDTO</returns>
        IxFeBusinessUnitSettingsDTO IxFeServicesManagementGetBusinessUnitSettingsById (int? id);

        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of IxFeBusinessUnitSettingsDTO</returns>
        ApiResponse<IxFeBusinessUnitSettingsDTO> IxFeServicesManagementGetBusinessUnitSettingsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxFeBusinessUnitSettingsDTO&gt;</returns>
        List<IxFeBusinessUnitSettingsDTO> IxFeServicesManagementGetBusinessUnitsSettings ();

        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxFeBusinessUnitSettingsDTO&gt;</returns>
        ApiResponse<List<IxFeBusinessUnitSettingsDTO>> IxFeServicesManagementGetBusinessUnitsSettingsWithHttpInfo ();
        /// <summary>
        /// This call gets all notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxFeNotificationSettingsDTO&gt;</returns>
        List<IxFeNotificationSettingsDTO> IxFeServicesManagementGetNotificationSettings ();

        /// <summary>
        /// This call gets all notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxFeNotificationSettingsDTO&gt;</returns>
        ApiResponse<List<IxFeNotificationSettingsDTO>> IxFeServicesManagementGetNotificationSettingsWithHttpInfo ();
        /// <summary>
        /// This call gets specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>IxFeNotificationSettingsDTO</returns>
        IxFeNotificationSettingsDTO IxFeServicesManagementGetNotificationSettingsById (int? id);

        /// <summary>
        /// This call gets specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of IxFeNotificationSettingsDTO</returns>
        ApiResponse<IxFeNotificationSettingsDTO> IxFeServicesManagementGetNotificationSettingsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call gets all settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxFeReceivingSettingsDTO&gt;</returns>
        List<IxFeReceivingSettingsDTO> IxFeServicesManagementGetReceivingSettings ();

        /// <summary>
        /// This call gets all settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxFeReceivingSettingsDTO&gt;</returns>
        ApiResponse<List<IxFeReceivingSettingsDTO>> IxFeServicesManagementGetReceivingSettingsWithHttpInfo ();
        /// <summary>
        /// This call gets specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>IxFeReceivingSettingsDTO</returns>
        IxFeReceivingSettingsDTO IxFeServicesManagementGetReceivingSettingsById (int? id);

        /// <summary>
        /// This call gets specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>ApiResponse of IxFeReceivingSettingsDTO</returns>
        ApiResponse<IxFeReceivingSettingsDTO> IxFeServicesManagementGetReceivingSettingsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? IxFeServicesManagementGetSendWorkflowDocumentsOption ();

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> IxFeServicesManagementGetSendWorkflowDocumentsOptionWithHttpInfo ();
        /// <summary>
        /// This call gets all sending settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>List&lt;IxFeSendingSettingsDTO&gt;</returns>
        List<IxFeSendingSettingsDTO> IxFeServicesManagementGetSendingSettings (string businessUnitCode);

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>ApiResponse of List&lt;IxFeSendingSettingsDTO&gt;</returns>
        ApiResponse<List<IxFeSendingSettingsDTO>> IxFeServicesManagementGetSendingSettingsWithHttpInfo (string businessUnitCode);
        /// <summary>
        /// This call gets specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>IxFeSendingSettingsDTO</returns>
        IxFeSendingSettingsDTO IxFeServicesManagementGetSendingSettingsById (int? id);

        /// <summary>
        /// This call gets specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of IxFeSendingSettingsDTO</returns>
        ApiResponse<IxFeSendingSettingsDTO> IxFeServicesManagementGetSendingSettingsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>IxFeBusinessUnitSettingsDTO</returns>
        IxFeBusinessUnitSettingsDTO IxFeServicesManagementInsertBusinessUnitSettings (IxFeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>ApiResponse of IxFeBusinessUnitSettingsDTO</returns>
        ApiResponse<IxFeBusinessUnitSettingsDTO> IxFeServicesManagementInsertBusinessUnitSettingsWithHttpInfo (IxFeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call inserts specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>IxFeNotificationSettingsDTO</returns>
        IxFeNotificationSettingsDTO IxFeServicesManagementInsertNotificationSettings (IxFeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call inserts specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>ApiResponse of IxFeNotificationSettingsDTO</returns>
        ApiResponse<IxFeNotificationSettingsDTO> IxFeServicesManagementInsertNotificationSettingsWithHttpInfo (IxFeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call inserts specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receivingSettings">Receiving settings for insert</param>
        /// <returns>IxFeReceivingSettingsDTO</returns>
        IxFeReceivingSettingsDTO IxFeServicesManagementInsertReceivingSettings (IxFeReceivingSettingsDTO receivingSettings);

        /// <summary>
        /// This call inserts specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receivingSettings">Receiving settings for insert</param>
        /// <returns>ApiResponse of IxFeReceivingSettingsDTO</returns>
        ApiResponse<IxFeReceivingSettingsDTO> IxFeServicesManagementInsertReceivingSettingsWithHttpInfo (IxFeReceivingSettingsDTO receivingSettings);
        /// <summary>
        /// This call inserts specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>IxFeSendingSettingsDTO</returns>
        IxFeSendingSettingsDTO IxFeServicesManagementInsertSendingSettings (IxFeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>ApiResponse of IxFeSendingSettingsDTO</returns>
        ApiResponse<IxFeSendingSettingsDTO> IxFeServicesManagementInsertSendingSettingsWithHttpInfo (IxFeSendingSettingsDTO sendingSettings);
        /// <summary>
        /// This call allows to clone receiving settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>IxFeCloneReceivingSettingsByBusinessUnitResponseDTO</returns>
        IxFeCloneReceivingSettingsByBusinessUnitResponseDTO IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueue (IxFeReceivingCloneOptionsByBusinessUnitDTO options);

        /// <summary>
        /// This call allows to clone receiving settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ApiResponse of IxFeCloneReceivingSettingsByBusinessUnitResponseDTO</returns>
        ApiResponse<IxFeCloneReceivingSettingsByBusinessUnitResponseDTO> IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueueWithHttpInfo (IxFeReceivingCloneOptionsByBusinessUnitDTO options);
        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>IxFeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        IxFeCloneSendingSettingsByBusinessUnitResponseDTO IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueue (IxFeSendingCloneOptionsByBusinessUnitDTO options);

        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ApiResponse of IxFeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        ApiResponse<IxFeCloneSendingSettingsByBusinessUnitResponseDTO> IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueueWithHttpInfo (IxFeSendingCloneOptionsByBusinessUnitDTO options);
        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns></returns>
        void IxFeServicesManagementSetSendWorkflowDocumentsOption (bool? optionValue);

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxFeServicesManagementSetSendWorkflowDocumentsOptionWithHttpInfo (bool? optionValue);
        /// <summary>
        /// This method allows sort settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns></returns>
        void IxFeServicesManagementSortFieldGroups (List<IxSendingSettingsSortOptionsDTO> options);

        /// <summary>
        /// This method allows sort settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxFeServicesManagementSortFieldGroupsWithHttpInfo (List<IxSendingSettingsSortOptionsDTO> options);
        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>IxFeBusinessUnitSettingsDTO</returns>
        IxFeBusinessUnitSettingsDTO IxFeServicesManagementUpdateBusinessUnitSettings (int? id, IxFeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>ApiResponse of IxFeBusinessUnitSettingsDTO</returns>
        ApiResponse<IxFeBusinessUnitSettingsDTO> IxFeServicesManagementUpdateBusinessUnitSettingsWithHttpInfo (int? id, IxFeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call updates specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>IxFeNotificationSettingsDTO</returns>
        IxFeNotificationSettingsDTO IxFeServicesManagementUpdateNotificationSettings (int? id, IxFeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call updates specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>ApiResponse of IxFeNotificationSettingsDTO</returns>
        ApiResponse<IxFeNotificationSettingsDTO> IxFeServicesManagementUpdateNotificationSettingsWithHttpInfo (int? id, IxFeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call updates specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <param name="receivingSettings">Receiving settings for update</param>
        /// <returns>IxFeReceivingSettingsDTO</returns>
        IxFeReceivingSettingsDTO IxFeServicesManagementUpdateReceivingSettings (int? id, IxFeReceivingSettingsDTO receivingSettings);

        /// <summary>
        /// This call updates specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <param name="receivingSettings">Receiving settings for update</param>
        /// <returns>ApiResponse of IxFeReceivingSettingsDTO</returns>
        ApiResponse<IxFeReceivingSettingsDTO> IxFeServicesManagementUpdateReceivingSettingsWithHttpInfo (int? id, IxFeReceivingSettingsDTO receivingSettings);
        /// <summary>
        /// This call updates specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>IxFeSendingSettingsDTO</returns>
        IxFeSendingSettingsDTO IxFeServicesManagementUpdateSendingSettings (int? id, IxFeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call updates specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>ApiResponse of IxFeSendingSettingsDTO</returns>
        ApiResponse<IxFeSendingSettingsDTO> IxFeServicesManagementUpdateSendingSettingsWithHttpInfo (int? id, IxFeSendingSettingsDTO sendingSettings);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call allows to check if it is possible to generate default configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> IxFeServicesManagementCanGenerateStandardMappingAsync ();

        /// <summary>
        /// This call allows to check if it is possible to generate default configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> IxFeServicesManagementCanGenerateStandardMappingAsyncWithHttpInfo ();
        /// <summary>
        /// This call deletes specific business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxFeServicesManagementDeleteBusinessUnitSettingsAsync (int? id);

        /// <summary>
        /// This call deletes specific business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementDeleteBusinessUnitSettingsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxFeServicesManagementDeleteNotificationSettingsAsync (int? id);

        /// <summary>
        /// This call deletes specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementDeleteNotificationSettingsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxFeServicesManagementDeleteReceivingSettingsAsync (int? id);

        /// <summary>
        /// This call deletes specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementDeleteReceivingSettingsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxFeServicesManagementDeleteSendingSettingsAsync (int? id);

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementDeleteSendingSettingsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call allows to generate default configuration mapping with IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options for mapping</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxFeServicesManagementGenerateStandardMappingAsync (IxFeMappingOptionsDTO options);

        /// <summary>
        /// This call allows to generate default configuration mapping with IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options for mapping</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementGenerateStandardMappingAsyncWithHttpInfo (IxFeMappingOptionsDTO options);
        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of IxFeBusinessUnitSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeBusinessUnitSettingsDTO> IxFeServicesManagementGetBusinessUnitSettingsByIdAsync (int? id);

        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse (IxFeBusinessUnitSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeBusinessUnitSettingsDTO>> IxFeServicesManagementGetBusinessUnitSettingsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxFeBusinessUnitSettingsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxFeBusinessUnitSettingsDTO>> IxFeServicesManagementGetBusinessUnitsSettingsAsync ();

        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxFeBusinessUnitSettingsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxFeBusinessUnitSettingsDTO>>> IxFeServicesManagementGetBusinessUnitsSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets all notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxFeNotificationSettingsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxFeNotificationSettingsDTO>> IxFeServicesManagementGetNotificationSettingsAsync ();

        /// <summary>
        /// This call gets all notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxFeNotificationSettingsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxFeNotificationSettingsDTO>>> IxFeServicesManagementGetNotificationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of IxFeNotificationSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeNotificationSettingsDTO> IxFeServicesManagementGetNotificationSettingsByIdAsync (int? id);

        /// <summary>
        /// This call gets specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse (IxFeNotificationSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeNotificationSettingsDTO>> IxFeServicesManagementGetNotificationSettingsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call gets all settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxFeReceivingSettingsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxFeReceivingSettingsDTO>> IxFeServicesManagementGetReceivingSettingsAsync ();

        /// <summary>
        /// This call gets all settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxFeReceivingSettingsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxFeReceivingSettingsDTO>>> IxFeServicesManagementGetReceivingSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>Task of IxFeReceivingSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeReceivingSettingsDTO> IxFeServicesManagementGetReceivingSettingsByIdAsync (int? id);

        /// <summary>
        /// This call gets specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>Task of ApiResponse (IxFeReceivingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeReceivingSettingsDTO>> IxFeServicesManagementGetReceivingSettingsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> IxFeServicesManagementGetSendWorkflowDocumentsOptionAsync ();

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> IxFeServicesManagementGetSendWorkflowDocumentsOptionAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets all sending settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of List&lt;IxFeSendingSettingsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxFeSendingSettingsDTO>> IxFeServicesManagementGetSendingSettingsAsync (string businessUnitCode);

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of ApiResponse (List&lt;IxFeSendingSettingsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxFeSendingSettingsDTO>>> IxFeServicesManagementGetSendingSettingsAsyncWithHttpInfo (string businessUnitCode);
        /// <summary>
        /// This call gets specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of IxFeSendingSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeSendingSettingsDTO> IxFeServicesManagementGetSendingSettingsByIdAsync (int? id);

        /// <summary>
        /// This call gets specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse (IxFeSendingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeSendingSettingsDTO>> IxFeServicesManagementGetSendingSettingsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of IxFeBusinessUnitSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeBusinessUnitSettingsDTO> IxFeServicesManagementInsertBusinessUnitSettingsAsync (IxFeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of ApiResponse (IxFeBusinessUnitSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeBusinessUnitSettingsDTO>> IxFeServicesManagementInsertBusinessUnitSettingsAsyncWithHttpInfo (IxFeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call inserts specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of IxFeNotificationSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeNotificationSettingsDTO> IxFeServicesManagementInsertNotificationSettingsAsync (IxFeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call inserts specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of ApiResponse (IxFeNotificationSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeNotificationSettingsDTO>> IxFeServicesManagementInsertNotificationSettingsAsyncWithHttpInfo (IxFeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call inserts specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receivingSettings">Receiving settings for insert</param>
        /// <returns>Task of IxFeReceivingSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeReceivingSettingsDTO> IxFeServicesManagementInsertReceivingSettingsAsync (IxFeReceivingSettingsDTO receivingSettings);

        /// <summary>
        /// This call inserts specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receivingSettings">Receiving settings for insert</param>
        /// <returns>Task of ApiResponse (IxFeReceivingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeReceivingSettingsDTO>> IxFeServicesManagementInsertReceivingSettingsAsyncWithHttpInfo (IxFeReceivingSettingsDTO receivingSettings);
        /// <summary>
        /// This call inserts specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of IxFeSendingSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeSendingSettingsDTO> IxFeServicesManagementInsertSendingSettingsAsync (IxFeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of ApiResponse (IxFeSendingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeSendingSettingsDTO>> IxFeServicesManagementInsertSendingSettingsAsyncWithHttpInfo (IxFeSendingSettingsDTO sendingSettings);
        /// <summary>
        /// This call allows to clone receiving settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of IxFeCloneReceivingSettingsByBusinessUnitResponseDTO</returns>
        System.Threading.Tasks.Task<IxFeCloneReceivingSettingsByBusinessUnitResponseDTO> IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueueAsync (IxFeReceivingCloneOptionsByBusinessUnitDTO options);

        /// <summary>
        /// This call allows to clone receiving settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ApiResponse (IxFeCloneReceivingSettingsByBusinessUnitResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeCloneReceivingSettingsByBusinessUnitResponseDTO>> IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueueAsyncWithHttpInfo (IxFeReceivingCloneOptionsByBusinessUnitDTO options);
        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of IxFeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        System.Threading.Tasks.Task<IxFeCloneSendingSettingsByBusinessUnitResponseDTO> IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueueAsync (IxFeSendingCloneOptionsByBusinessUnitDTO options);

        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ApiResponse (IxFeCloneSendingSettingsByBusinessUnitResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeCloneSendingSettingsByBusinessUnitResponseDTO>> IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueueAsyncWithHttpInfo (IxFeSendingCloneOptionsByBusinessUnitDTO options);
        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxFeServicesManagementSetSendWorkflowDocumentsOptionAsync (bool? optionValue);

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementSetSendWorkflowDocumentsOptionAsyncWithHttpInfo (bool? optionValue);
        /// <summary>
        /// This method allows sort settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxFeServicesManagementSortFieldGroupsAsync (List<IxSendingSettingsSortOptionsDTO> options);

        /// <summary>
        /// This method allows sort settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementSortFieldGroupsAsyncWithHttpInfo (List<IxSendingSettingsSortOptionsDTO> options);
        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of IxFeBusinessUnitSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeBusinessUnitSettingsDTO> IxFeServicesManagementUpdateBusinessUnitSettingsAsync (int? id, IxFeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of ApiResponse (IxFeBusinessUnitSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeBusinessUnitSettingsDTO>> IxFeServicesManagementUpdateBusinessUnitSettingsAsyncWithHttpInfo (int? id, IxFeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call updates specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of IxFeNotificationSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeNotificationSettingsDTO> IxFeServicesManagementUpdateNotificationSettingsAsync (int? id, IxFeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call updates specific notification settings for IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of ApiResponse (IxFeNotificationSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeNotificationSettingsDTO>> IxFeServicesManagementUpdateNotificationSettingsAsyncWithHttpInfo (int? id, IxFeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call updates specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <param name="receivingSettings">Receiving settings for update</param>
        /// <returns>Task of IxFeReceivingSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeReceivingSettingsDTO> IxFeServicesManagementUpdateReceivingSettingsAsync (int? id, IxFeReceivingSettingsDTO receivingSettings);

        /// <summary>
        /// This call updates specific settings for receiving docs from IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <param name="receivingSettings">Receiving settings for update</param>
        /// <returns>Task of ApiResponse (IxFeReceivingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeReceivingSettingsDTO>> IxFeServicesManagementUpdateReceivingSettingsAsyncWithHttpInfo (int? id, IxFeReceivingSettingsDTO receivingSettings);
        /// <summary>
        /// This call updates specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of IxFeSendingSettingsDTO</returns>
        System.Threading.Tasks.Task<IxFeSendingSettingsDTO> IxFeServicesManagementUpdateSendingSettingsAsync (int? id, IxFeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call updates specific settings for sending docs to IX-FE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of ApiResponse (IxFeSendingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxFeSendingSettingsDTO>> IxFeServicesManagementUpdateSendingSettingsAsyncWithHttpInfo (int? id, IxFeSendingSettingsDTO sendingSettings);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IxFeServicesManagementApi : IIxFeServicesManagementApi
    {
        private ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IxFeServicesManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IxFeServicesManagementApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IxFeServicesManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IxFeServicesManagementApi(ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call allows to check if it is possible to generate default configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? IxFeServicesManagementCanGenerateStandardMapping ()
        {
             ApiResponse<bool?> localVarResponse = IxFeServicesManagementCanGenerateStandardMappingWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to check if it is possible to generate default configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > IxFeServicesManagementCanGenerateStandardMappingWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Settings/CanGenerateStandardMapping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementCanGenerateStandardMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call allows to check if it is possible to generate default configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> IxFeServicesManagementCanGenerateStandardMappingAsync ()
        {
             ApiResponse<bool?> localVarResponse = await IxFeServicesManagementCanGenerateStandardMappingAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to check if it is possible to generate default configuration 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> IxFeServicesManagementCanGenerateStandardMappingAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Settings/CanGenerateStandardMapping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementCanGenerateStandardMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call deletes specific business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns></returns>
        public void IxFeServicesManagementDeleteBusinessUnitSettings (int? id)
        {
             IxFeServicesManagementDeleteBusinessUnitSettingsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxFeServicesManagementDeleteBusinessUnitSettingsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementDeleteBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementDeleteBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxFeServicesManagementDeleteBusinessUnitSettingsAsync (int? id)
        {
             await IxFeServicesManagementDeleteBusinessUnitSettingsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementDeleteBusinessUnitSettingsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementDeleteBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementDeleteBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns></returns>
        public void IxFeServicesManagementDeleteNotificationSettings (int? id)
        {
             IxFeServicesManagementDeleteNotificationSettingsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxFeServicesManagementDeleteNotificationSettingsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementDeleteNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementDeleteNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxFeServicesManagementDeleteNotificationSettingsAsync (int? id)
        {
             await IxFeServicesManagementDeleteNotificationSettingsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementDeleteNotificationSettingsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementDeleteNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementDeleteNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns></returns>
        public void IxFeServicesManagementDeleteReceivingSettings (int? id)
        {
             IxFeServicesManagementDeleteReceivingSettingsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxFeServicesManagementDeleteReceivingSettingsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementDeleteReceivingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementDeleteReceivingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxFeServicesManagementDeleteReceivingSettingsAsync (int? id)
        {
             await IxFeServicesManagementDeleteReceivingSettingsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementDeleteReceivingSettingsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementDeleteReceivingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementDeleteReceivingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns></returns>
        public void IxFeServicesManagementDeleteSendingSettings (int? id)
        {
             IxFeServicesManagementDeleteSendingSettingsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxFeServicesManagementDeleteSendingSettingsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementDeleteSendingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementDeleteSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxFeServicesManagementDeleteSendingSettingsAsync (int? id)
        {
             await IxFeServicesManagementDeleteSendingSettingsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementDeleteSendingSettingsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementDeleteSendingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementDeleteSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows to generate default configuration mapping with IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options for mapping</param>
        /// <returns></returns>
        public void IxFeServicesManagementGenerateStandardMapping (IxFeMappingOptionsDTO options)
        {
             IxFeServicesManagementGenerateStandardMappingWithHttpInfo(options);
        }

        /// <summary>
        /// This call allows to generate default configuration mapping with IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options for mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxFeServicesManagementGenerateStandardMappingWithHttpInfo (IxFeMappingOptionsDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxFeServicesManagementApi->IxFeServicesManagementGenerateStandardMapping");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/GenerateStandardMapping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGenerateStandardMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call allows to generate default configuration mapping with IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options for mapping</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxFeServicesManagementGenerateStandardMappingAsync (IxFeMappingOptionsDTO options)
        {
             await IxFeServicesManagementGenerateStandardMappingAsyncWithHttpInfo(options);

        }

        /// <summary>
        /// This call allows to generate default configuration mapping with IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options for mapping</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementGenerateStandardMappingAsyncWithHttpInfo (IxFeMappingOptionsDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxFeServicesManagementApi->IxFeServicesManagementGenerateStandardMapping");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/GenerateStandardMapping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGenerateStandardMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>IxFeBusinessUnitSettingsDTO</returns>
        public IxFeBusinessUnitSettingsDTO IxFeServicesManagementGetBusinessUnitSettingsById (int? id)
        {
             ApiResponse<IxFeBusinessUnitSettingsDTO> localVarResponse = IxFeServicesManagementGetBusinessUnitSettingsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of IxFeBusinessUnitSettingsDTO</returns>
        public ApiResponse< IxFeBusinessUnitSettingsDTO > IxFeServicesManagementGetBusinessUnitSettingsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementGetBusinessUnitSettingsById");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetBusinessUnitSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of IxFeBusinessUnitSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeBusinessUnitSettingsDTO> IxFeServicesManagementGetBusinessUnitSettingsByIdAsync (int? id)
        {
             ApiResponse<IxFeBusinessUnitSettingsDTO> localVarResponse = await IxFeServicesManagementGetBusinessUnitSettingsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse (IxFeBusinessUnitSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeBusinessUnitSettingsDTO>> IxFeServicesManagementGetBusinessUnitSettingsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementGetBusinessUnitSettingsById");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetBusinessUnitSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxFeBusinessUnitSettingsDTO&gt;</returns>
        public List<IxFeBusinessUnitSettingsDTO> IxFeServicesManagementGetBusinessUnitsSettings ()
        {
             ApiResponse<List<IxFeBusinessUnitSettingsDTO>> localVarResponse = IxFeServicesManagementGetBusinessUnitsSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxFeBusinessUnitSettingsDTO&gt;</returns>
        public ApiResponse< List<IxFeBusinessUnitSettingsDTO> > IxFeServicesManagementGetBusinessUnitsSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetBusinessUnitsSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeBusinessUnitSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeBusinessUnitSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeBusinessUnitSettingsDTO>)));
        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxFeBusinessUnitSettingsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxFeBusinessUnitSettingsDTO>> IxFeServicesManagementGetBusinessUnitsSettingsAsync ()
        {
             ApiResponse<List<IxFeBusinessUnitSettingsDTO>> localVarResponse = await IxFeServicesManagementGetBusinessUnitsSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxFeBusinessUnitSettingsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxFeBusinessUnitSettingsDTO>>> IxFeServicesManagementGetBusinessUnitsSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetBusinessUnitsSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeBusinessUnitSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeBusinessUnitSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeBusinessUnitSettingsDTO>)));
        }

        /// <summary>
        /// This call gets all notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxFeNotificationSettingsDTO&gt;</returns>
        public List<IxFeNotificationSettingsDTO> IxFeServicesManagementGetNotificationSettings ()
        {
             ApiResponse<List<IxFeNotificationSettingsDTO>> localVarResponse = IxFeServicesManagementGetNotificationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets all notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxFeNotificationSettingsDTO&gt;</returns>
        public ApiResponse< List<IxFeNotificationSettingsDTO> > IxFeServicesManagementGetNotificationSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeNotificationSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeNotificationSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeNotificationSettingsDTO>)));
        }

        /// <summary>
        /// This call gets all notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxFeNotificationSettingsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxFeNotificationSettingsDTO>> IxFeServicesManagementGetNotificationSettingsAsync ()
        {
             ApiResponse<List<IxFeNotificationSettingsDTO>> localVarResponse = await IxFeServicesManagementGetNotificationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets all notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxFeNotificationSettingsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxFeNotificationSettingsDTO>>> IxFeServicesManagementGetNotificationSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeNotificationSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeNotificationSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeNotificationSettingsDTO>)));
        }

        /// <summary>
        /// This call gets specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>IxFeNotificationSettingsDTO</returns>
        public IxFeNotificationSettingsDTO IxFeServicesManagementGetNotificationSettingsById (int? id)
        {
             ApiResponse<IxFeNotificationSettingsDTO> localVarResponse = IxFeServicesManagementGetNotificationSettingsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of IxFeNotificationSettingsDTO</returns>
        public ApiResponse< IxFeNotificationSettingsDTO > IxFeServicesManagementGetNotificationSettingsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementGetNotificationSettingsById");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetNotificationSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of IxFeNotificationSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeNotificationSettingsDTO> IxFeServicesManagementGetNotificationSettingsByIdAsync (int? id)
        {
             ApiResponse<IxFeNotificationSettingsDTO> localVarResponse = await IxFeServicesManagementGetNotificationSettingsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse (IxFeNotificationSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeNotificationSettingsDTO>> IxFeServicesManagementGetNotificationSettingsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementGetNotificationSettingsById");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetNotificationSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call gets all settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxFeReceivingSettingsDTO&gt;</returns>
        public List<IxFeReceivingSettingsDTO> IxFeServicesManagementGetReceivingSettings ()
        {
             ApiResponse<List<IxFeReceivingSettingsDTO>> localVarResponse = IxFeServicesManagementGetReceivingSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets all settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxFeReceivingSettingsDTO&gt;</returns>
        public ApiResponse< List<IxFeReceivingSettingsDTO> > IxFeServicesManagementGetReceivingSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetReceivingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeReceivingSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeReceivingSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeReceivingSettingsDTO>)));
        }

        /// <summary>
        /// This call gets all settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxFeReceivingSettingsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxFeReceivingSettingsDTO>> IxFeServicesManagementGetReceivingSettingsAsync ()
        {
             ApiResponse<List<IxFeReceivingSettingsDTO>> localVarResponse = await IxFeServicesManagementGetReceivingSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets all settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxFeReceivingSettingsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxFeReceivingSettingsDTO>>> IxFeServicesManagementGetReceivingSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetReceivingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeReceivingSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeReceivingSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeReceivingSettingsDTO>)));
        }

        /// <summary>
        /// This call gets specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>IxFeReceivingSettingsDTO</returns>
        public IxFeReceivingSettingsDTO IxFeServicesManagementGetReceivingSettingsById (int? id)
        {
             ApiResponse<IxFeReceivingSettingsDTO> localVarResponse = IxFeServicesManagementGetReceivingSettingsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>ApiResponse of IxFeReceivingSettingsDTO</returns>
        public ApiResponse< IxFeReceivingSettingsDTO > IxFeServicesManagementGetReceivingSettingsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementGetReceivingSettingsById");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetReceivingSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeReceivingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeReceivingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeReceivingSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>Task of IxFeReceivingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeReceivingSettingsDTO> IxFeServicesManagementGetReceivingSettingsByIdAsync (int? id)
        {
             ApiResponse<IxFeReceivingSettingsDTO> localVarResponse = await IxFeServicesManagementGetReceivingSettingsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <returns>Task of ApiResponse (IxFeReceivingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeReceivingSettingsDTO>> IxFeServicesManagementGetReceivingSettingsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementGetReceivingSettingsById");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetReceivingSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeReceivingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeReceivingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeReceivingSettingsDTO)));
        }

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? IxFeServicesManagementGetSendWorkflowDocumentsOption ()
        {
             ApiResponse<bool?> localVarResponse = IxFeServicesManagementGetSendWorkflowDocumentsOptionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > IxFeServicesManagementGetSendWorkflowDocumentsOptionWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Settings/SendWorkflowDocumentsOption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetSendWorkflowDocumentsOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> IxFeServicesManagementGetSendWorkflowDocumentsOptionAsync ()
        {
             ApiResponse<bool?> localVarResponse = await IxFeServicesManagementGetSendWorkflowDocumentsOptionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> IxFeServicesManagementGetSendWorkflowDocumentsOptionAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxFe/Settings/SendWorkflowDocumentsOption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetSendWorkflowDocumentsOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>List&lt;IxFeSendingSettingsDTO&gt;</returns>
        public List<IxFeSendingSettingsDTO> IxFeServicesManagementGetSendingSettings (string businessUnitCode)
        {
             ApiResponse<List<IxFeSendingSettingsDTO>> localVarResponse = IxFeServicesManagementGetSendingSettingsWithHttpInfo(businessUnitCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>ApiResponse of List&lt;IxFeSendingSettingsDTO&gt;</returns>
        public ApiResponse< List<IxFeSendingSettingsDTO> > IxFeServicesManagementGetSendingSettingsWithHttpInfo (string businessUnitCode)
        {
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling IxFeServicesManagementApi->IxFeServicesManagementGetSendingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeSendingSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeSendingSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeSendingSettingsDTO>)));
        }

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of List&lt;IxFeSendingSettingsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxFeSendingSettingsDTO>> IxFeServicesManagementGetSendingSettingsAsync (string businessUnitCode)
        {
             ApiResponse<List<IxFeSendingSettingsDTO>> localVarResponse = await IxFeServicesManagementGetSendingSettingsAsyncWithHttpInfo(businessUnitCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of ApiResponse (List&lt;IxFeSendingSettingsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxFeSendingSettingsDTO>>> IxFeServicesManagementGetSendingSettingsAsyncWithHttpInfo (string businessUnitCode)
        {
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling IxFeServicesManagementApi->IxFeServicesManagementGetSendingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxFeSendingSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxFeSendingSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxFeSendingSettingsDTO>)));
        }

        /// <summary>
        /// This call gets specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>IxFeSendingSettingsDTO</returns>
        public IxFeSendingSettingsDTO IxFeServicesManagementGetSendingSettingsById (int? id)
        {
             ApiResponse<IxFeSendingSettingsDTO> localVarResponse = IxFeServicesManagementGetSendingSettingsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of IxFeSendingSettingsDTO</returns>
        public ApiResponse< IxFeSendingSettingsDTO > IxFeServicesManagementGetSendingSettingsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementGetSendingSettingsById");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetSendingSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of IxFeSendingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeSendingSettingsDTO> IxFeServicesManagementGetSendingSettingsByIdAsync (int? id)
        {
             ApiResponse<IxFeSendingSettingsDTO> localVarResponse = await IxFeServicesManagementGetSendingSettingsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse (IxFeSendingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeSendingSettingsDTO>> IxFeServicesManagementGetSendingSettingsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementGetSendingSettingsById");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementGetSendingSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>IxFeBusinessUnitSettingsDTO</returns>
        public IxFeBusinessUnitSettingsDTO IxFeServicesManagementInsertBusinessUnitSettings (IxFeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<IxFeBusinessUnitSettingsDTO> localVarResponse = IxFeServicesManagementInsertBusinessUnitSettingsWithHttpInfo(businessUnitSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>ApiResponse of IxFeBusinessUnitSettingsDTO</returns>
        public ApiResponse< IxFeBusinessUnitSettingsDTO > IxFeServicesManagementInsertBusinessUnitSettingsWithHttpInfo (IxFeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementInsertBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementInsertBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of IxFeBusinessUnitSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeBusinessUnitSettingsDTO> IxFeServicesManagementInsertBusinessUnitSettingsAsync (IxFeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<IxFeBusinessUnitSettingsDTO> localVarResponse = await IxFeServicesManagementInsertBusinessUnitSettingsAsyncWithHttpInfo(businessUnitSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of ApiResponse (IxFeBusinessUnitSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeBusinessUnitSettingsDTO>> IxFeServicesManagementInsertBusinessUnitSettingsAsyncWithHttpInfo (IxFeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementInsertBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementInsertBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>IxFeNotificationSettingsDTO</returns>
        public IxFeNotificationSettingsDTO IxFeServicesManagementInsertNotificationSettings (IxFeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<IxFeNotificationSettingsDTO> localVarResponse = IxFeServicesManagementInsertNotificationSettingsWithHttpInfo(notificationSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>ApiResponse of IxFeNotificationSettingsDTO</returns>
        public ApiResponse< IxFeNotificationSettingsDTO > IxFeServicesManagementInsertNotificationSettingsWithHttpInfo (IxFeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementInsertNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementInsertNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of IxFeNotificationSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeNotificationSettingsDTO> IxFeServicesManagementInsertNotificationSettingsAsync (IxFeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<IxFeNotificationSettingsDTO> localVarResponse = await IxFeServicesManagementInsertNotificationSettingsAsyncWithHttpInfo(notificationSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of ApiResponse (IxFeNotificationSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeNotificationSettingsDTO>> IxFeServicesManagementInsertNotificationSettingsAsyncWithHttpInfo (IxFeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementInsertNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementInsertNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receivingSettings">Receiving settings for insert</param>
        /// <returns>IxFeReceivingSettingsDTO</returns>
        public IxFeReceivingSettingsDTO IxFeServicesManagementInsertReceivingSettings (IxFeReceivingSettingsDTO receivingSettings)
        {
             ApiResponse<IxFeReceivingSettingsDTO> localVarResponse = IxFeServicesManagementInsertReceivingSettingsWithHttpInfo(receivingSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receivingSettings">Receiving settings for insert</param>
        /// <returns>ApiResponse of IxFeReceivingSettingsDTO</returns>
        public ApiResponse< IxFeReceivingSettingsDTO > IxFeServicesManagementInsertReceivingSettingsWithHttpInfo (IxFeReceivingSettingsDTO receivingSettings)
        {
            // verify the required parameter 'receivingSettings' is set
            if (receivingSettings == null)
                throw new ApiException(400, "Missing required parameter 'receivingSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementInsertReceivingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (receivingSettings != null && receivingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(receivingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = receivingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementInsertReceivingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeReceivingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeReceivingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeReceivingSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receivingSettings">Receiving settings for insert</param>
        /// <returns>Task of IxFeReceivingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeReceivingSettingsDTO> IxFeServicesManagementInsertReceivingSettingsAsync (IxFeReceivingSettingsDTO receivingSettings)
        {
             ApiResponse<IxFeReceivingSettingsDTO> localVarResponse = await IxFeServicesManagementInsertReceivingSettingsAsyncWithHttpInfo(receivingSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receivingSettings">Receiving settings for insert</param>
        /// <returns>Task of ApiResponse (IxFeReceivingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeReceivingSettingsDTO>> IxFeServicesManagementInsertReceivingSettingsAsyncWithHttpInfo (IxFeReceivingSettingsDTO receivingSettings)
        {
            // verify the required parameter 'receivingSettings' is set
            if (receivingSettings == null)
                throw new ApiException(400, "Missing required parameter 'receivingSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementInsertReceivingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (receivingSettings != null && receivingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(receivingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = receivingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementInsertReceivingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeReceivingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeReceivingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeReceivingSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>IxFeSendingSettingsDTO</returns>
        public IxFeSendingSettingsDTO IxFeServicesManagementInsertSendingSettings (IxFeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<IxFeSendingSettingsDTO> localVarResponse = IxFeServicesManagementInsertSendingSettingsWithHttpInfo(sendingSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>ApiResponse of IxFeSendingSettingsDTO</returns>
        public ApiResponse< IxFeSendingSettingsDTO > IxFeServicesManagementInsertSendingSettingsWithHttpInfo (IxFeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementInsertSendingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementInsertSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of IxFeSendingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeSendingSettingsDTO> IxFeServicesManagementInsertSendingSettingsAsync (IxFeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<IxFeSendingSettingsDTO> localVarResponse = await IxFeServicesManagementInsertSendingSettingsAsyncWithHttpInfo(sendingSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of ApiResponse (IxFeSendingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeSendingSettingsDTO>> IxFeServicesManagementInsertSendingSettingsAsyncWithHttpInfo (IxFeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementInsertSendingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementInsertSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call allows to clone receiving settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>IxFeCloneReceivingSettingsByBusinessUnitResponseDTO</returns>
        public IxFeCloneReceivingSettingsByBusinessUnitResponseDTO IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueue (IxFeReceivingCloneOptionsByBusinessUnitDTO options)
        {
             ApiResponse<IxFeCloneReceivingSettingsByBusinessUnitResponseDTO> localVarResponse = IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueueWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to clone receiving settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ApiResponse of IxFeCloneReceivingSettingsByBusinessUnitResponseDTO</returns>
        public ApiResponse< IxFeCloneReceivingSettingsByBusinessUnitResponseDTO > IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueueWithHttpInfo (IxFeReceivingCloneOptionsByBusinessUnitDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxFeServicesManagementApi->IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueue");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving/CloneByBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeCloneReceivingSettingsByBusinessUnitResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeCloneReceivingSettingsByBusinessUnitResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeCloneReceivingSettingsByBusinessUnitResponseDTO)));
        }

        /// <summary>
        /// This call allows to clone receiving settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of IxFeCloneReceivingSettingsByBusinessUnitResponseDTO</returns>
        public async System.Threading.Tasks.Task<IxFeCloneReceivingSettingsByBusinessUnitResponseDTO> IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueueAsync (IxFeReceivingCloneOptionsByBusinessUnitDTO options)
        {
             ApiResponse<IxFeCloneReceivingSettingsByBusinessUnitResponseDTO> localVarResponse = await IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueueAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to clone receiving settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ApiResponse (IxFeCloneReceivingSettingsByBusinessUnitResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeCloneReceivingSettingsByBusinessUnitResponseDTO>> IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueueAsyncWithHttpInfo (IxFeReceivingCloneOptionsByBusinessUnitDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxFeServicesManagementApi->IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueue");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving/CloneByBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementIxFeCloneReceivingSettingsByBusinessUnitQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeCloneReceivingSettingsByBusinessUnitResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeCloneReceivingSettingsByBusinessUnitResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeCloneReceivingSettingsByBusinessUnitResponseDTO)));
        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>IxFeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        public IxFeCloneSendingSettingsByBusinessUnitResponseDTO IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueue (IxFeSendingCloneOptionsByBusinessUnitDTO options)
        {
             ApiResponse<IxFeCloneSendingSettingsByBusinessUnitResponseDTO> localVarResponse = IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueueWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ApiResponse of IxFeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        public ApiResponse< IxFeCloneSendingSettingsByBusinessUnitResponseDTO > IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueueWithHttpInfo (IxFeSendingCloneOptionsByBusinessUnitDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxFeServicesManagementApi->IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueue");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending/CloneByBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeCloneSendingSettingsByBusinessUnitResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeCloneSendingSettingsByBusinessUnitResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeCloneSendingSettingsByBusinessUnitResponseDTO)));
        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of IxFeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        public async System.Threading.Tasks.Task<IxFeCloneSendingSettingsByBusinessUnitResponseDTO> IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueueAsync (IxFeSendingCloneOptionsByBusinessUnitDTO options)
        {
             ApiResponse<IxFeCloneSendingSettingsByBusinessUnitResponseDTO> localVarResponse = await IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueueAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ApiResponse (IxFeCloneSendingSettingsByBusinessUnitResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeCloneSendingSettingsByBusinessUnitResponseDTO>> IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueueAsyncWithHttpInfo (IxFeSendingCloneOptionsByBusinessUnitDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxFeServicesManagementApi->IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueue");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending/CloneByBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementIxFeCloneSendingSettingsByBusinessUnitQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeCloneSendingSettingsByBusinessUnitResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeCloneSendingSettingsByBusinessUnitResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeCloneSendingSettingsByBusinessUnitResponseDTO)));
        }

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns></returns>
        public void IxFeServicesManagementSetSendWorkflowDocumentsOption (bool? optionValue)
        {
             IxFeServicesManagementSetSendWorkflowDocumentsOptionWithHttpInfo(optionValue);
        }

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxFeServicesManagementSetSendWorkflowDocumentsOptionWithHttpInfo (bool? optionValue)
        {
            // verify the required parameter 'optionValue' is set
            if (optionValue == null)
                throw new ApiException(400, "Missing required parameter 'optionValue' when calling IxFeServicesManagementApi->IxFeServicesManagementSetSendWorkflowDocumentsOption");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/SendWorkflowDocumentsOption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optionValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "optionValue", optionValue)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementSetSendWorkflowDocumentsOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxFeServicesManagementSetSendWorkflowDocumentsOptionAsync (bool? optionValue)
        {
             await IxFeServicesManagementSetSendWorkflowDocumentsOptionAsyncWithHttpInfo(optionValue);

        }

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementSetSendWorkflowDocumentsOptionAsyncWithHttpInfo (bool? optionValue)
        {
            // verify the required parameter 'optionValue' is set
            if (optionValue == null)
                throw new ApiException(400, "Missing required parameter 'optionValue' when calling IxFeServicesManagementApi->IxFeServicesManagementSetSendWorkflowDocumentsOption");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/SendWorkflowDocumentsOption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optionValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "optionValue", optionValue)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementSetSendWorkflowDocumentsOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows sort settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns></returns>
        public void IxFeServicesManagementSortFieldGroups (List<IxSendingSettingsSortOptionsDTO> options)
        {
             IxFeServicesManagementSortFieldGroupsWithHttpInfo(options);
        }

        /// <summary>
        /// This method allows sort settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxFeServicesManagementSortFieldGroupsWithHttpInfo (List<IxSendingSettingsSortOptionsDTO> options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxFeServicesManagementApi->IxFeServicesManagementSortFieldGroups");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending/Sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementSortFieldGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows sort settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxFeServicesManagementSortFieldGroupsAsync (List<IxSendingSettingsSortOptionsDTO> options)
        {
             await IxFeServicesManagementSortFieldGroupsAsyncWithHttpInfo(options);

        }

        /// <summary>
        /// This method allows sort settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxFeServicesManagementSortFieldGroupsAsyncWithHttpInfo (List<IxSendingSettingsSortOptionsDTO> options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxFeServicesManagementApi->IxFeServicesManagementSortFieldGroups");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending/Sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementSortFieldGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>IxFeBusinessUnitSettingsDTO</returns>
        public IxFeBusinessUnitSettingsDTO IxFeServicesManagementUpdateBusinessUnitSettings (int? id, IxFeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<IxFeBusinessUnitSettingsDTO> localVarResponse = IxFeServicesManagementUpdateBusinessUnitSettingsWithHttpInfo(id, businessUnitSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>ApiResponse of IxFeBusinessUnitSettingsDTO</returns>
        public ApiResponse< IxFeBusinessUnitSettingsDTO > IxFeServicesManagementUpdateBusinessUnitSettingsWithHttpInfo (int? id, IxFeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateBusinessUnitSettings");
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementUpdateBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of IxFeBusinessUnitSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeBusinessUnitSettingsDTO> IxFeServicesManagementUpdateBusinessUnitSettingsAsync (int? id, IxFeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<IxFeBusinessUnitSettingsDTO> localVarResponse = await IxFeServicesManagementUpdateBusinessUnitSettingsAsyncWithHttpInfo(id, businessUnitSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of ApiResponse (IxFeBusinessUnitSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeBusinessUnitSettingsDTO>> IxFeServicesManagementUpdateBusinessUnitSettingsAsyncWithHttpInfo (int? id, IxFeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateBusinessUnitSettings");
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementUpdateBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>IxFeNotificationSettingsDTO</returns>
        public IxFeNotificationSettingsDTO IxFeServicesManagementUpdateNotificationSettings (int? id, IxFeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<IxFeNotificationSettingsDTO> localVarResponse = IxFeServicesManagementUpdateNotificationSettingsWithHttpInfo(id, notificationSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>ApiResponse of IxFeNotificationSettingsDTO</returns>
        public ApiResponse< IxFeNotificationSettingsDTO > IxFeServicesManagementUpdateNotificationSettingsWithHttpInfo (int? id, IxFeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateNotificationSettings");
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementUpdateNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of IxFeNotificationSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeNotificationSettingsDTO> IxFeServicesManagementUpdateNotificationSettingsAsync (int? id, IxFeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<IxFeNotificationSettingsDTO> localVarResponse = await IxFeServicesManagementUpdateNotificationSettingsAsyncWithHttpInfo(id, notificationSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates specific notification settings for IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of ApiResponse (IxFeNotificationSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeNotificationSettingsDTO>> IxFeServicesManagementUpdateNotificationSettingsAsyncWithHttpInfo (int? id, IxFeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateNotificationSettings");
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementUpdateNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <param name="receivingSettings">Receiving settings for update</param>
        /// <returns>IxFeReceivingSettingsDTO</returns>
        public IxFeReceivingSettingsDTO IxFeServicesManagementUpdateReceivingSettings (int? id, IxFeReceivingSettingsDTO receivingSettings)
        {
             ApiResponse<IxFeReceivingSettingsDTO> localVarResponse = IxFeServicesManagementUpdateReceivingSettingsWithHttpInfo(id, receivingSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <param name="receivingSettings">Receiving settings for update</param>
        /// <returns>ApiResponse of IxFeReceivingSettingsDTO</returns>
        public ApiResponse< IxFeReceivingSettingsDTO > IxFeServicesManagementUpdateReceivingSettingsWithHttpInfo (int? id, IxFeReceivingSettingsDTO receivingSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateReceivingSettings");
            // verify the required parameter 'receivingSettings' is set
            if (receivingSettings == null)
                throw new ApiException(400, "Missing required parameter 'receivingSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateReceivingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (receivingSettings != null && receivingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(receivingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = receivingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementUpdateReceivingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeReceivingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeReceivingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeReceivingSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <param name="receivingSettings">Receiving settings for update</param>
        /// <returns>Task of IxFeReceivingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeReceivingSettingsDTO> IxFeServicesManagementUpdateReceivingSettingsAsync (int? id, IxFeReceivingSettingsDTO receivingSettings)
        {
             ApiResponse<IxFeReceivingSettingsDTO> localVarResponse = await IxFeServicesManagementUpdateReceivingSettingsAsyncWithHttpInfo(id, receivingSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates specific settings for receiving docs from IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Receiving settings identifier</param>
        /// <param name="receivingSettings">Receiving settings for update</param>
        /// <returns>Task of ApiResponse (IxFeReceivingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeReceivingSettingsDTO>> IxFeServicesManagementUpdateReceivingSettingsAsyncWithHttpInfo (int? id, IxFeReceivingSettingsDTO receivingSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateReceivingSettings");
            // verify the required parameter 'receivingSettings' is set
            if (receivingSettings == null)
                throw new ApiException(400, "Missing required parameter 'receivingSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateReceivingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Receiving/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (receivingSettings != null && receivingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(receivingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = receivingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementUpdateReceivingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeReceivingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeReceivingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeReceivingSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>IxFeSendingSettingsDTO</returns>
        public IxFeSendingSettingsDTO IxFeServicesManagementUpdateSendingSettings (int? id, IxFeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<IxFeSendingSettingsDTO> localVarResponse = IxFeServicesManagementUpdateSendingSettingsWithHttpInfo(id, sendingSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>ApiResponse of IxFeSendingSettingsDTO</returns>
        public ApiResponse< IxFeSendingSettingsDTO > IxFeServicesManagementUpdateSendingSettingsWithHttpInfo (int? id, IxFeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateSendingSettings");
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateSendingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementUpdateSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of IxFeSendingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxFeSendingSettingsDTO> IxFeServicesManagementUpdateSendingSettingsAsync (int? id, IxFeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<IxFeSendingSettingsDTO> localVarResponse = await IxFeServicesManagementUpdateSendingSettingsAsyncWithHttpInfo(id, sendingSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates specific settings for sending docs to IX-FE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of ApiResponse (IxFeSendingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxFeSendingSettingsDTO>> IxFeServicesManagementUpdateSendingSettingsAsyncWithHttpInfo (int? id, IxFeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateSendingSettings");
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling IxFeServicesManagementApi->IxFeServicesManagementUpdateSendingSettings");

            var localVarPath = "/api/management/IxServices/IxFe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxFeServicesManagementUpdateSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxFeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxFeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxFeSendingSettingsDTO)));
        }

    }
}
