/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNextManagement.Client;
using ACUtils.AXRepository.ArxivarNextManagement.Model;

namespace ACUtils.AXRepository.ArxivarNextManagement.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIxCeServicesManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes specific business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns></returns>
        void IxCeServicesManagementDeleteBusinessUnitSettings (int? id);

        /// <summary>
        /// This call deletes specific business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxCeServicesManagementDeleteBusinessUnitSettingsWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns></returns>
        void IxCeServicesManagementDeleteNotificationSettings (int? id);

        /// <summary>
        /// This call deletes specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxCeServicesManagementDeleteNotificationSettingsWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns></returns>
        void IxCeServicesManagementDeleteSendingSettings (int? id);

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxCeServicesManagementDeleteSendingSettingsWithHttpInfo (int? id);
        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>IxCeBusinessUnitSettingsDTO</returns>
        IxCeBusinessUnitSettingsDTO IxCeServicesManagementGetBusinessUnitSettingsById (int? id);

        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of IxCeBusinessUnitSettingsDTO</returns>
        ApiResponse<IxCeBusinessUnitSettingsDTO> IxCeServicesManagementGetBusinessUnitSettingsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxCeBusinessUnitSettingsDTO&gt;</returns>
        List<IxCeBusinessUnitSettingsDTO> IxCeServicesManagementGetBusinessUnitsSettings ();

        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxCeBusinessUnitSettingsDTO&gt;</returns>
        ApiResponse<List<IxCeBusinessUnitSettingsDTO>> IxCeServicesManagementGetBusinessUnitsSettingsWithHttpInfo ();
        /// <summary>
        /// This call gets all notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxCeNotificationSettingsDTO&gt;</returns>
        List<IxCeNotificationSettingsDTO> IxCeServicesManagementGetNotificationSettings ();

        /// <summary>
        /// This call gets all notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxCeNotificationSettingsDTO&gt;</returns>
        ApiResponse<List<IxCeNotificationSettingsDTO>> IxCeServicesManagementGetNotificationSettingsWithHttpInfo ();
        /// <summary>
        /// This call gets specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>IxCeNotificationSettingsDTO</returns>
        IxCeNotificationSettingsDTO IxCeServicesManagementGetNotificationSettingsById (int? id);

        /// <summary>
        /// This call gets specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of IxCeNotificationSettingsDTO</returns>
        ApiResponse<IxCeNotificationSettingsDTO> IxCeServicesManagementGetNotificationSettingsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-CE / ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? IxCeServicesManagementGetSendWorkflowDocumentsOption ();

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-CE / ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> IxCeServicesManagementGetSendWorkflowDocumentsOptionWithHttpInfo ();
        /// <summary>
        /// This call gets all sending settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>List&lt;IxCeSendingSettingsDTO&gt;</returns>
        List<IxCeSendingSettingsDTO> IxCeServicesManagementGetSendingSettings (string businessUnitCode);

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>ApiResponse of List&lt;IxCeSendingSettingsDTO&gt;</returns>
        ApiResponse<List<IxCeSendingSettingsDTO>> IxCeServicesManagementGetSendingSettingsWithHttpInfo (string businessUnitCode);
        /// <summary>
        /// This call gets specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>IxCeSendingSettingsDTO</returns>
        IxCeSendingSettingsDTO IxCeServicesManagementGetSendingSettingsById (int? id);

        /// <summary>
        /// This call gets specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of IxCeSendingSettingsDTO</returns>
        ApiResponse<IxCeSendingSettingsDTO> IxCeServicesManagementGetSendingSettingsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call gets specific settings details for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>IxCeSendingSettingsDetailDTO</returns>
        IxCeSendingSettingsDetailDTO IxCeServicesManagementGetSendingSettingsDetails (int? id);

        /// <summary>
        /// This call gets specific settings details for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of IxCeSendingSettingsDetailDTO</returns>
        ApiResponse<IxCeSendingSettingsDetailDTO> IxCeServicesManagementGetSendingSettingsDetailsWithHttpInfo (int? id);
        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>IxCeBusinessUnitSettingsDTO</returns>
        IxCeBusinessUnitSettingsDTO IxCeServicesManagementInsertBusinessUnitSettings (IxCeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>ApiResponse of IxCeBusinessUnitSettingsDTO</returns>
        ApiResponse<IxCeBusinessUnitSettingsDTO> IxCeServicesManagementInsertBusinessUnitSettingsWithHttpInfo (IxCeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call inserts specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>IxCeNotificationSettingsDTO</returns>
        IxCeNotificationSettingsDTO IxCeServicesManagementInsertNotificationSettings (IxCeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call inserts specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>ApiResponse of IxCeNotificationSettingsDTO</returns>
        ApiResponse<IxCeNotificationSettingsDTO> IxCeServicesManagementInsertNotificationSettingsWithHttpInfo (IxCeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call inserts specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>IxCeSendingSettingsDTO</returns>
        IxCeSendingSettingsDTO IxCeServicesManagementInsertSendingSettings (IxCeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>ApiResponse of IxCeSendingSettingsDTO</returns>
        ApiResponse<IxCeSendingSettingsDTO> IxCeServicesManagementInsertSendingSettingsWithHttpInfo (IxCeSendingSettingsDTO sendingSettings);
        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>IxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        IxCeCloneSendingSettingsByBusinessUnitResponseDTO IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueue (IxCeCloneOptionsByBusinessUnitDTO options);

        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ApiResponse of IxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        ApiResponse<IxCeCloneSendingSettingsByBusinessUnitResponseDTO> IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueueWithHttpInfo (IxCeCloneOptionsByBusinessUnitDTO options);
        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-CE / ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns></returns>
        void IxCeServicesManagementSetSendWorkflowDocumentsOption (bool? optionValue);

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-CE / ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxCeServicesManagementSetSendWorkflowDocumentsOptionWithHttpInfo (bool? optionValue);
        /// <summary>
        /// This call inserts specific settings details for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns></returns>
        void IxCeServicesManagementSetSendingSettingsDetails (int? id, IxCeSendingSettingsDetailDTO sendingSettingsDetails);

        /// <summary>
        /// This call inserts specific settings details for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxCeServicesManagementSetSendingSettingsDetailsWithHttpInfo (int? id, IxCeSendingSettingsDetailDTO sendingSettingsDetails);
        /// <summary>
        /// This method allows sort settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns></returns>
        void IxCeServicesManagementSortFieldGroups (List<IxSendingSettingsSortOptionsDTO> options);

        /// <summary>
        /// This method allows sort settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IxCeServicesManagementSortFieldGroupsWithHttpInfo (List<IxSendingSettingsSortOptionsDTO> options);
        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>IxCeBusinessUnitSettingsDTO</returns>
        IxCeBusinessUnitSettingsDTO IxCeServicesManagementUpdateBusinessUnitSettings (int? id, IxCeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>ApiResponse of IxCeBusinessUnitSettingsDTO</returns>
        ApiResponse<IxCeBusinessUnitSettingsDTO> IxCeServicesManagementUpdateBusinessUnitSettingsWithHttpInfo (int? id, IxCeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call updates specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>IxCeNotificationSettingsDTO</returns>
        IxCeNotificationSettingsDTO IxCeServicesManagementUpdateNotificationSettings (int? id, IxCeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call updates specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>ApiResponse of IxCeNotificationSettingsDTO</returns>
        ApiResponse<IxCeNotificationSettingsDTO> IxCeServicesManagementUpdateNotificationSettingsWithHttpInfo (int? id, IxCeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call updates specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>IxCeSendingSettingsDTO</returns>
        IxCeSendingSettingsDTO IxCeServicesManagementUpdateSendingSettings (int? id, IxCeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call updates specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>ApiResponse of IxCeSendingSettingsDTO</returns>
        ApiResponse<IxCeSendingSettingsDTO> IxCeServicesManagementUpdateSendingSettingsWithHttpInfo (int? id, IxCeSendingSettingsDTO sendingSettings);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes specific business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxCeServicesManagementDeleteBusinessUnitSettingsAsync (int? id);

        /// <summary>
        /// This call deletes specific business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementDeleteBusinessUnitSettingsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxCeServicesManagementDeleteNotificationSettingsAsync (int? id);

        /// <summary>
        /// This call deletes specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementDeleteNotificationSettingsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxCeServicesManagementDeleteSendingSettingsAsync (int? id);

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementDeleteSendingSettingsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of IxCeBusinessUnitSettingsDTO</returns>
        System.Threading.Tasks.Task<IxCeBusinessUnitSettingsDTO> IxCeServicesManagementGetBusinessUnitSettingsByIdAsync (int? id);

        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse (IxCeBusinessUnitSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCeBusinessUnitSettingsDTO>> IxCeServicesManagementGetBusinessUnitSettingsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxCeBusinessUnitSettingsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxCeBusinessUnitSettingsDTO>> IxCeServicesManagementGetBusinessUnitsSettingsAsync ();

        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxCeBusinessUnitSettingsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxCeBusinessUnitSettingsDTO>>> IxCeServicesManagementGetBusinessUnitsSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets all notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxCeNotificationSettingsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxCeNotificationSettingsDTO>> IxCeServicesManagementGetNotificationSettingsAsync ();

        /// <summary>
        /// This call gets all notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxCeNotificationSettingsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxCeNotificationSettingsDTO>>> IxCeServicesManagementGetNotificationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of IxCeNotificationSettingsDTO</returns>
        System.Threading.Tasks.Task<IxCeNotificationSettingsDTO> IxCeServicesManagementGetNotificationSettingsByIdAsync (int? id);

        /// <summary>
        /// This call gets specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse (IxCeNotificationSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCeNotificationSettingsDTO>> IxCeServicesManagementGetNotificationSettingsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-CE / ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> IxCeServicesManagementGetSendWorkflowDocumentsOptionAsync ();

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-CE / ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> IxCeServicesManagementGetSendWorkflowDocumentsOptionAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets all sending settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of List&lt;IxCeSendingSettingsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<IxCeSendingSettingsDTO>> IxCeServicesManagementGetSendingSettingsAsync (string businessUnitCode);

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of ApiResponse (List&lt;IxCeSendingSettingsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IxCeSendingSettingsDTO>>> IxCeServicesManagementGetSendingSettingsAsyncWithHttpInfo (string businessUnitCode);
        /// <summary>
        /// This call gets specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of IxCeSendingSettingsDTO</returns>
        System.Threading.Tasks.Task<IxCeSendingSettingsDTO> IxCeServicesManagementGetSendingSettingsByIdAsync (int? id);

        /// <summary>
        /// This call gets specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse (IxCeSendingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCeSendingSettingsDTO>> IxCeServicesManagementGetSendingSettingsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call gets specific settings details for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of IxCeSendingSettingsDetailDTO</returns>
        System.Threading.Tasks.Task<IxCeSendingSettingsDetailDTO> IxCeServicesManagementGetSendingSettingsDetailsAsync (int? id);

        /// <summary>
        /// This call gets specific settings details for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse (IxCeSendingSettingsDetailDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCeSendingSettingsDetailDTO>> IxCeServicesManagementGetSendingSettingsDetailsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of IxCeBusinessUnitSettingsDTO</returns>
        System.Threading.Tasks.Task<IxCeBusinessUnitSettingsDTO> IxCeServicesManagementInsertBusinessUnitSettingsAsync (IxCeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of ApiResponse (IxCeBusinessUnitSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCeBusinessUnitSettingsDTO>> IxCeServicesManagementInsertBusinessUnitSettingsAsyncWithHttpInfo (IxCeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call inserts specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of IxCeNotificationSettingsDTO</returns>
        System.Threading.Tasks.Task<IxCeNotificationSettingsDTO> IxCeServicesManagementInsertNotificationSettingsAsync (IxCeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call inserts specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of ApiResponse (IxCeNotificationSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCeNotificationSettingsDTO>> IxCeServicesManagementInsertNotificationSettingsAsyncWithHttpInfo (IxCeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call inserts specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of IxCeSendingSettingsDTO</returns>
        System.Threading.Tasks.Task<IxCeSendingSettingsDTO> IxCeServicesManagementInsertSendingSettingsAsync (IxCeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of ApiResponse (IxCeSendingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCeSendingSettingsDTO>> IxCeServicesManagementInsertSendingSettingsAsyncWithHttpInfo (IxCeSendingSettingsDTO sendingSettings);
        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of IxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        System.Threading.Tasks.Task<IxCeCloneSendingSettingsByBusinessUnitResponseDTO> IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueueAsync (IxCeCloneOptionsByBusinessUnitDTO options);

        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ApiResponse (IxCeCloneSendingSettingsByBusinessUnitResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCeCloneSendingSettingsByBusinessUnitResponseDTO>> IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueueAsyncWithHttpInfo (IxCeCloneOptionsByBusinessUnitDTO options);
        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-CE / ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxCeServicesManagementSetSendWorkflowDocumentsOptionAsync (bool? optionValue);

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-CE / ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementSetSendWorkflowDocumentsOptionAsyncWithHttpInfo (bool? optionValue);
        /// <summary>
        /// This call inserts specific settings details for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxCeServicesManagementSetSendingSettingsDetailsAsync (int? id, IxCeSendingSettingsDetailDTO sendingSettingsDetails);

        /// <summary>
        /// This call inserts specific settings details for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementSetSendingSettingsDetailsAsyncWithHttpInfo (int? id, IxCeSendingSettingsDetailDTO sendingSettingsDetails);
        /// <summary>
        /// This method allows sort settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IxCeServicesManagementSortFieldGroupsAsync (List<IxSendingSettingsSortOptionsDTO> options);

        /// <summary>
        /// This method allows sort settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementSortFieldGroupsAsyncWithHttpInfo (List<IxSendingSettingsSortOptionsDTO> options);
        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of IxCeBusinessUnitSettingsDTO</returns>
        System.Threading.Tasks.Task<IxCeBusinessUnitSettingsDTO> IxCeServicesManagementUpdateBusinessUnitSettingsAsync (int? id, IxCeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of ApiResponse (IxCeBusinessUnitSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCeBusinessUnitSettingsDTO>> IxCeServicesManagementUpdateBusinessUnitSettingsAsyncWithHttpInfo (int? id, IxCeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call updates specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of IxCeNotificationSettingsDTO</returns>
        System.Threading.Tasks.Task<IxCeNotificationSettingsDTO> IxCeServicesManagementUpdateNotificationSettingsAsync (int? id, IxCeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call updates specific notification settings for IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of ApiResponse (IxCeNotificationSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCeNotificationSettingsDTO>> IxCeServicesManagementUpdateNotificationSettingsAsyncWithHttpInfo (int? id, IxCeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call updates specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of IxCeSendingSettingsDTO</returns>
        System.Threading.Tasks.Task<IxCeSendingSettingsDTO> IxCeServicesManagementUpdateSendingSettingsAsync (int? id, IxCeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call updates specific settings for sending docs to IX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of ApiResponse (IxCeSendingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<IxCeSendingSettingsDTO>> IxCeServicesManagementUpdateSendingSettingsAsyncWithHttpInfo (int? id, IxCeSendingSettingsDTO sendingSettings);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IxCeServicesManagementApi : IIxCeServicesManagementApi
    {
        private ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IxCeServicesManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IxCeServicesManagementApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IxCeServicesManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IxCeServicesManagementApi(ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes specific business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns></returns>
        public void IxCeServicesManagementDeleteBusinessUnitSettings (int? id)
        {
             IxCeServicesManagementDeleteBusinessUnitSettingsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxCeServicesManagementDeleteBusinessUnitSettingsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementDeleteBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementDeleteBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxCeServicesManagementDeleteBusinessUnitSettingsAsync (int? id)
        {
             await IxCeServicesManagementDeleteBusinessUnitSettingsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementDeleteBusinessUnitSettingsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementDeleteBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementDeleteBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns></returns>
        public void IxCeServicesManagementDeleteNotificationSettings (int? id)
        {
             IxCeServicesManagementDeleteNotificationSettingsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxCeServicesManagementDeleteNotificationSettingsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementDeleteNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementDeleteNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxCeServicesManagementDeleteNotificationSettingsAsync (int? id)
        {
             await IxCeServicesManagementDeleteNotificationSettingsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementDeleteNotificationSettingsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementDeleteNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementDeleteNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns></returns>
        public void IxCeServicesManagementDeleteSendingSettings (int? id)
        {
             IxCeServicesManagementDeleteSendingSettingsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxCeServicesManagementDeleteSendingSettingsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementDeleteSendingSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementDeleteSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxCeServicesManagementDeleteSendingSettingsAsync (int? id)
        {
             await IxCeServicesManagementDeleteSendingSettingsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementDeleteSendingSettingsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementDeleteSendingSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementDeleteSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>IxCeBusinessUnitSettingsDTO</returns>
        public IxCeBusinessUnitSettingsDTO IxCeServicesManagementGetBusinessUnitSettingsById (int? id)
        {
             ApiResponse<IxCeBusinessUnitSettingsDTO> localVarResponse = IxCeServicesManagementGetBusinessUnitSettingsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of IxCeBusinessUnitSettingsDTO</returns>
        public ApiResponse< IxCeBusinessUnitSettingsDTO > IxCeServicesManagementGetBusinessUnitSettingsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementGetBusinessUnitSettingsById");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetBusinessUnitSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of IxCeBusinessUnitSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxCeBusinessUnitSettingsDTO> IxCeServicesManagementGetBusinessUnitSettingsByIdAsync (int? id)
        {
             ApiResponse<IxCeBusinessUnitSettingsDTO> localVarResponse = await IxCeServicesManagementGetBusinessUnitSettingsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse (IxCeBusinessUnitSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCeBusinessUnitSettingsDTO>> IxCeServicesManagementGetBusinessUnitSettingsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementGetBusinessUnitSettingsById");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetBusinessUnitSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxCeBusinessUnitSettingsDTO&gt;</returns>
        public List<IxCeBusinessUnitSettingsDTO> IxCeServicesManagementGetBusinessUnitsSettings ()
        {
             ApiResponse<List<IxCeBusinessUnitSettingsDTO>> localVarResponse = IxCeServicesManagementGetBusinessUnitsSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxCeBusinessUnitSettingsDTO&gt;</returns>
        public ApiResponse< List<IxCeBusinessUnitSettingsDTO> > IxCeServicesManagementGetBusinessUnitsSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxCe/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetBusinessUnitsSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeBusinessUnitSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeBusinessUnitSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeBusinessUnitSettingsDTO>)));
        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxCeBusinessUnitSettingsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxCeBusinessUnitSettingsDTO>> IxCeServicesManagementGetBusinessUnitsSettingsAsync ()
        {
             ApiResponse<List<IxCeBusinessUnitSettingsDTO>> localVarResponse = await IxCeServicesManagementGetBusinessUnitsSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxCeBusinessUnitSettingsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxCeBusinessUnitSettingsDTO>>> IxCeServicesManagementGetBusinessUnitsSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxCe/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetBusinessUnitsSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeBusinessUnitSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeBusinessUnitSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeBusinessUnitSettingsDTO>)));
        }

        /// <summary>
        /// This call gets all notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IxCeNotificationSettingsDTO&gt;</returns>
        public List<IxCeNotificationSettingsDTO> IxCeServicesManagementGetNotificationSettings ()
        {
             ApiResponse<List<IxCeNotificationSettingsDTO>> localVarResponse = IxCeServicesManagementGetNotificationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets all notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IxCeNotificationSettingsDTO&gt;</returns>
        public ApiResponse< List<IxCeNotificationSettingsDTO> > IxCeServicesManagementGetNotificationSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeNotificationSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeNotificationSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeNotificationSettingsDTO>)));
        }

        /// <summary>
        /// This call gets all notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;IxCeNotificationSettingsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxCeNotificationSettingsDTO>> IxCeServicesManagementGetNotificationSettingsAsync ()
        {
             ApiResponse<List<IxCeNotificationSettingsDTO>> localVarResponse = await IxCeServicesManagementGetNotificationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets all notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;IxCeNotificationSettingsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxCeNotificationSettingsDTO>>> IxCeServicesManagementGetNotificationSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeNotificationSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeNotificationSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeNotificationSettingsDTO>)));
        }

        /// <summary>
        /// This call gets specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>IxCeNotificationSettingsDTO</returns>
        public IxCeNotificationSettingsDTO IxCeServicesManagementGetNotificationSettingsById (int? id)
        {
             ApiResponse<IxCeNotificationSettingsDTO> localVarResponse = IxCeServicesManagementGetNotificationSettingsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of IxCeNotificationSettingsDTO</returns>
        public ApiResponse< IxCeNotificationSettingsDTO > IxCeServicesManagementGetNotificationSettingsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementGetNotificationSettingsById");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetNotificationSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of IxCeNotificationSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxCeNotificationSettingsDTO> IxCeServicesManagementGetNotificationSettingsByIdAsync (int? id)
        {
             ApiResponse<IxCeNotificationSettingsDTO> localVarResponse = await IxCeServicesManagementGetNotificationSettingsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse (IxCeNotificationSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCeNotificationSettingsDTO>> IxCeServicesManagementGetNotificationSettingsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementGetNotificationSettingsById");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetNotificationSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-CE / ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? IxCeServicesManagementGetSendWorkflowDocumentsOption ()
        {
             ApiResponse<bool?> localVarResponse = IxCeServicesManagementGetSendWorkflowDocumentsOptionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-CE / ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > IxCeServicesManagementGetSendWorkflowDocumentsOptionWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxCe/Settings/SendWorkflowDocumentsOption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetSendWorkflowDocumentsOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-CE / ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> IxCeServicesManagementGetSendWorkflowDocumentsOptionAsync ()
        {
             ApiResponse<bool?> localVarResponse = await IxCeServicesManagementGetSendWorkflowDocumentsOptionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the authorization to send the documents subjected to workflow for IX-CE / ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> IxCeServicesManagementGetSendWorkflowDocumentsOptionAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/IxServices/IxCe/Settings/SendWorkflowDocumentsOption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetSendWorkflowDocumentsOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>List&lt;IxCeSendingSettingsDTO&gt;</returns>
        public List<IxCeSendingSettingsDTO> IxCeServicesManagementGetSendingSettings (string businessUnitCode)
        {
             ApiResponse<List<IxCeSendingSettingsDTO>> localVarResponse = IxCeServicesManagementGetSendingSettingsWithHttpInfo(businessUnitCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>ApiResponse of List&lt;IxCeSendingSettingsDTO&gt;</returns>
        public ApiResponse< List<IxCeSendingSettingsDTO> > IxCeServicesManagementGetSendingSettingsWithHttpInfo (string businessUnitCode)
        {
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling IxCeServicesManagementApi->IxCeServicesManagementGetSendingSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeSendingSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeSendingSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeSendingSettingsDTO>)));
        }

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of List&lt;IxCeSendingSettingsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<IxCeSendingSettingsDTO>> IxCeServicesManagementGetSendingSettingsAsync (string businessUnitCode)
        {
             ApiResponse<List<IxCeSendingSettingsDTO>> localVarResponse = await IxCeServicesManagementGetSendingSettingsAsyncWithHttpInfo(businessUnitCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets all sending settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of ApiResponse (List&lt;IxCeSendingSettingsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IxCeSendingSettingsDTO>>> IxCeServicesManagementGetSendingSettingsAsyncWithHttpInfo (string businessUnitCode)
        {
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling IxCeServicesManagementApi->IxCeServicesManagementGetSendingSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IxCeSendingSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IxCeSendingSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IxCeSendingSettingsDTO>)));
        }

        /// <summary>
        /// This call gets specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>IxCeSendingSettingsDTO</returns>
        public IxCeSendingSettingsDTO IxCeServicesManagementGetSendingSettingsById (int? id)
        {
             ApiResponse<IxCeSendingSettingsDTO> localVarResponse = IxCeServicesManagementGetSendingSettingsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of IxCeSendingSettingsDTO</returns>
        public ApiResponse< IxCeSendingSettingsDTO > IxCeServicesManagementGetSendingSettingsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementGetSendingSettingsById");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetSendingSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of IxCeSendingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxCeSendingSettingsDTO> IxCeServicesManagementGetSendingSettingsByIdAsync (int? id)
        {
             ApiResponse<IxCeSendingSettingsDTO> localVarResponse = await IxCeServicesManagementGetSendingSettingsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse (IxCeSendingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCeSendingSettingsDTO>> IxCeServicesManagementGetSendingSettingsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementGetSendingSettingsById");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetSendingSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific settings details for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>IxCeSendingSettingsDetailDTO</returns>
        public IxCeSendingSettingsDetailDTO IxCeServicesManagementGetSendingSettingsDetails (int? id)
        {
             ApiResponse<IxCeSendingSettingsDetailDTO> localVarResponse = IxCeServicesManagementGetSendingSettingsDetailsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific settings details for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of IxCeSendingSettingsDetailDTO</returns>
        public ApiResponse< IxCeSendingSettingsDetailDTO > IxCeServicesManagementGetSendingSettingsDetailsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementGetSendingSettingsDetails");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/{id}/Details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetSendingSettingsDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeSendingSettingsDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeSendingSettingsDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeSendingSettingsDetailDTO)));
        }

        /// <summary>
        /// This call gets specific settings details for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of IxCeSendingSettingsDetailDTO</returns>
        public async System.Threading.Tasks.Task<IxCeSendingSettingsDetailDTO> IxCeServicesManagementGetSendingSettingsDetailsAsync (int? id)
        {
             ApiResponse<IxCeSendingSettingsDetailDTO> localVarResponse = await IxCeServicesManagementGetSendingSettingsDetailsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific settings details for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse (IxCeSendingSettingsDetailDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCeSendingSettingsDetailDTO>> IxCeServicesManagementGetSendingSettingsDetailsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementGetSendingSettingsDetails");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/{id}/Details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementGetSendingSettingsDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeSendingSettingsDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeSendingSettingsDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeSendingSettingsDetailDTO)));
        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>IxCeBusinessUnitSettingsDTO</returns>
        public IxCeBusinessUnitSettingsDTO IxCeServicesManagementInsertBusinessUnitSettings (IxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<IxCeBusinessUnitSettingsDTO> localVarResponse = IxCeServicesManagementInsertBusinessUnitSettingsWithHttpInfo(businessUnitSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>ApiResponse of IxCeBusinessUnitSettingsDTO</returns>
        public ApiResponse< IxCeBusinessUnitSettingsDTO > IxCeServicesManagementInsertBusinessUnitSettingsWithHttpInfo (IxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementInsertBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementInsertBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of IxCeBusinessUnitSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxCeBusinessUnitSettingsDTO> IxCeServicesManagementInsertBusinessUnitSettingsAsync (IxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<IxCeBusinessUnitSettingsDTO> localVarResponse = await IxCeServicesManagementInsertBusinessUnitSettingsAsyncWithHttpInfo(businessUnitSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of ApiResponse (IxCeBusinessUnitSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCeBusinessUnitSettingsDTO>> IxCeServicesManagementInsertBusinessUnitSettingsAsyncWithHttpInfo (IxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementInsertBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementInsertBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>IxCeNotificationSettingsDTO</returns>
        public IxCeNotificationSettingsDTO IxCeServicesManagementInsertNotificationSettings (IxCeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<IxCeNotificationSettingsDTO> localVarResponse = IxCeServicesManagementInsertNotificationSettingsWithHttpInfo(notificationSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>ApiResponse of IxCeNotificationSettingsDTO</returns>
        public ApiResponse< IxCeNotificationSettingsDTO > IxCeServicesManagementInsertNotificationSettingsWithHttpInfo (IxCeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementInsertNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementInsertNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of IxCeNotificationSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxCeNotificationSettingsDTO> IxCeServicesManagementInsertNotificationSettingsAsync (IxCeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<IxCeNotificationSettingsDTO> localVarResponse = await IxCeServicesManagementInsertNotificationSettingsAsyncWithHttpInfo(notificationSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of ApiResponse (IxCeNotificationSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCeNotificationSettingsDTO>> IxCeServicesManagementInsertNotificationSettingsAsyncWithHttpInfo (IxCeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementInsertNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementInsertNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>IxCeSendingSettingsDTO</returns>
        public IxCeSendingSettingsDTO IxCeServicesManagementInsertSendingSettings (IxCeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<IxCeSendingSettingsDTO> localVarResponse = IxCeServicesManagementInsertSendingSettingsWithHttpInfo(sendingSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>ApiResponse of IxCeSendingSettingsDTO</returns>
        public ApiResponse< IxCeSendingSettingsDTO > IxCeServicesManagementInsertSendingSettingsWithHttpInfo (IxCeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementInsertSendingSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementInsertSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of IxCeSendingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxCeSendingSettingsDTO> IxCeServicesManagementInsertSendingSettingsAsync (IxCeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<IxCeSendingSettingsDTO> localVarResponse = await IxCeServicesManagementInsertSendingSettingsAsyncWithHttpInfo(sendingSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of ApiResponse (IxCeSendingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCeSendingSettingsDTO>> IxCeServicesManagementInsertSendingSettingsAsyncWithHttpInfo (IxCeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementInsertSendingSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementInsertSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>IxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        public IxCeCloneSendingSettingsByBusinessUnitResponseDTO IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueue (IxCeCloneOptionsByBusinessUnitDTO options)
        {
             ApiResponse<IxCeCloneSendingSettingsByBusinessUnitResponseDTO> localVarResponse = IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueueWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ApiResponse of IxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        public ApiResponse< IxCeCloneSendingSettingsByBusinessUnitResponseDTO > IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueueWithHttpInfo (IxCeCloneOptionsByBusinessUnitDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxCeServicesManagementApi->IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueue");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/CloneByBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeCloneSendingSettingsByBusinessUnitResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeCloneSendingSettingsByBusinessUnitResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeCloneSendingSettingsByBusinessUnitResponseDTO)));
        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of IxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        public async System.Threading.Tasks.Task<IxCeCloneSendingSettingsByBusinessUnitResponseDTO> IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueueAsync (IxCeCloneOptionsByBusinessUnitDTO options)
        {
             ApiResponse<IxCeCloneSendingSettingsByBusinessUnitResponseDTO> localVarResponse = await IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueueAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ApiResponse (IxCeCloneSendingSettingsByBusinessUnitResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCeCloneSendingSettingsByBusinessUnitResponseDTO>> IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueueAsyncWithHttpInfo (IxCeCloneOptionsByBusinessUnitDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxCeServicesManagementApi->IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueue");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/CloneByBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementIxCeCloneSendingSettingsByBusinessUnitQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeCloneSendingSettingsByBusinessUnitResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeCloneSendingSettingsByBusinessUnitResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeCloneSendingSettingsByBusinessUnitResponseDTO)));
        }

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-CE / ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns></returns>
        public void IxCeServicesManagementSetSendWorkflowDocumentsOption (bool? optionValue)
        {
             IxCeServicesManagementSetSendWorkflowDocumentsOptionWithHttpInfo(optionValue);
        }

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-CE / ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxCeServicesManagementSetSendWorkflowDocumentsOptionWithHttpInfo (bool? optionValue)
        {
            // verify the required parameter 'optionValue' is set
            if (optionValue == null)
                throw new ApiException(400, "Missing required parameter 'optionValue' when calling IxCeServicesManagementApi->IxCeServicesManagementSetSendWorkflowDocumentsOption");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/SendWorkflowDocumentsOption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optionValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "optionValue", optionValue)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementSetSendWorkflowDocumentsOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-CE / ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxCeServicesManagementSetSendWorkflowDocumentsOptionAsync (bool? optionValue)
        {
             await IxCeServicesManagementSetSendWorkflowDocumentsOptionAsyncWithHttpInfo(optionValue);

        }

        /// <summary>
        /// This call sets the authorization to send the documents subjected to workflow for IX-CE / ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionValue">Option value</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementSetSendWorkflowDocumentsOptionAsyncWithHttpInfo (bool? optionValue)
        {
            // verify the required parameter 'optionValue' is set
            if (optionValue == null)
                throw new ApiException(400, "Missing required parameter 'optionValue' when calling IxCeServicesManagementApi->IxCeServicesManagementSetSendWorkflowDocumentsOption");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/SendWorkflowDocumentsOption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optionValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "optionValue", optionValue)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementSetSendWorkflowDocumentsOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts specific settings details for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns></returns>
        public void IxCeServicesManagementSetSendingSettingsDetails (int? id, IxCeSendingSettingsDetailDTO sendingSettingsDetails)
        {
             IxCeServicesManagementSetSendingSettingsDetailsWithHttpInfo(id, sendingSettingsDetails);
        }

        /// <summary>
        /// This call inserts specific settings details for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxCeServicesManagementSetSendingSettingsDetailsWithHttpInfo (int? id, IxCeSendingSettingsDetailDTO sendingSettingsDetails)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementSetSendingSettingsDetails");
            // verify the required parameter 'sendingSettingsDetails' is set
            if (sendingSettingsDetails == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettingsDetails' when calling IxCeServicesManagementApi->IxCeServicesManagementSetSendingSettingsDetails");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/{id}/Details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendingSettingsDetails != null && sendingSettingsDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettingsDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettingsDetails; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementSetSendingSettingsDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts specific settings details for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxCeServicesManagementSetSendingSettingsDetailsAsync (int? id, IxCeSendingSettingsDetailDTO sendingSettingsDetails)
        {
             await IxCeServicesManagementSetSendingSettingsDetailsAsyncWithHttpInfo(id, sendingSettingsDetails);

        }

        /// <summary>
        /// This call inserts specific settings details for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementSetSendingSettingsDetailsAsyncWithHttpInfo (int? id, IxCeSendingSettingsDetailDTO sendingSettingsDetails)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementSetSendingSettingsDetails");
            // verify the required parameter 'sendingSettingsDetails' is set
            if (sendingSettingsDetails == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettingsDetails' when calling IxCeServicesManagementApi->IxCeServicesManagementSetSendingSettingsDetails");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/{id}/Details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendingSettingsDetails != null && sendingSettingsDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettingsDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettingsDetails; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementSetSendingSettingsDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows sort settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns></returns>
        public void IxCeServicesManagementSortFieldGroups (List<IxSendingSettingsSortOptionsDTO> options)
        {
             IxCeServicesManagementSortFieldGroupsWithHttpInfo(options);
        }

        /// <summary>
        /// This method allows sort settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IxCeServicesManagementSortFieldGroupsWithHttpInfo (List<IxSendingSettingsSortOptionsDTO> options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxCeServicesManagementApi->IxCeServicesManagementSortFieldGroups");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/Sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementSortFieldGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method allows sort settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IxCeServicesManagementSortFieldGroupsAsync (List<IxSendingSettingsSortOptionsDTO> options)
        {
             await IxCeServicesManagementSortFieldGroupsAsyncWithHttpInfo(options);

        }

        /// <summary>
        /// This method allows sort settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Field group sort options</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IxCeServicesManagementSortFieldGroupsAsyncWithHttpInfo (List<IxSendingSettingsSortOptionsDTO> options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling IxCeServicesManagementApi->IxCeServicesManagementSortFieldGroups");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/Sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementSortFieldGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>IxCeBusinessUnitSettingsDTO</returns>
        public IxCeBusinessUnitSettingsDTO IxCeServicesManagementUpdateBusinessUnitSettings (int? id, IxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<IxCeBusinessUnitSettingsDTO> localVarResponse = IxCeServicesManagementUpdateBusinessUnitSettingsWithHttpInfo(id, businessUnitSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>ApiResponse of IxCeBusinessUnitSettingsDTO</returns>
        public ApiResponse< IxCeBusinessUnitSettingsDTO > IxCeServicesManagementUpdateBusinessUnitSettingsWithHttpInfo (int? id, IxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateBusinessUnitSettings");
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementUpdateBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of IxCeBusinessUnitSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxCeBusinessUnitSettingsDTO> IxCeServicesManagementUpdateBusinessUnitSettingsAsync (int? id, IxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<IxCeBusinessUnitSettingsDTO> localVarResponse = await IxCeServicesManagementUpdateBusinessUnitSettingsAsyncWithHttpInfo(id, businessUnitSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of ApiResponse (IxCeBusinessUnitSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCeBusinessUnitSettingsDTO>> IxCeServicesManagementUpdateBusinessUnitSettingsAsyncWithHttpInfo (int? id, IxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateBusinessUnitSettings");
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateBusinessUnitSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementUpdateBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>IxCeNotificationSettingsDTO</returns>
        public IxCeNotificationSettingsDTO IxCeServicesManagementUpdateNotificationSettings (int? id, IxCeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<IxCeNotificationSettingsDTO> localVarResponse = IxCeServicesManagementUpdateNotificationSettingsWithHttpInfo(id, notificationSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>ApiResponse of IxCeNotificationSettingsDTO</returns>
        public ApiResponse< IxCeNotificationSettingsDTO > IxCeServicesManagementUpdateNotificationSettingsWithHttpInfo (int? id, IxCeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateNotificationSettings");
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementUpdateNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of IxCeNotificationSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxCeNotificationSettingsDTO> IxCeServicesManagementUpdateNotificationSettingsAsync (int? id, IxCeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<IxCeNotificationSettingsDTO> localVarResponse = await IxCeServicesManagementUpdateNotificationSettingsAsyncWithHttpInfo(id, notificationSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates specific notification settings for IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of ApiResponse (IxCeNotificationSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCeNotificationSettingsDTO>> IxCeServicesManagementUpdateNotificationSettingsAsyncWithHttpInfo (int? id, IxCeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateNotificationSettings");
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateNotificationSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementUpdateNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>IxCeSendingSettingsDTO</returns>
        public IxCeSendingSettingsDTO IxCeServicesManagementUpdateSendingSettings (int? id, IxCeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<IxCeSendingSettingsDTO> localVarResponse = IxCeServicesManagementUpdateSendingSettingsWithHttpInfo(id, sendingSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>ApiResponse of IxCeSendingSettingsDTO</returns>
        public ApiResponse< IxCeSendingSettingsDTO > IxCeServicesManagementUpdateSendingSettingsWithHttpInfo (int? id, IxCeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateSendingSettings");
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateSendingSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementUpdateSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of IxCeSendingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<IxCeSendingSettingsDTO> IxCeServicesManagementUpdateSendingSettingsAsync (int? id, IxCeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<IxCeSendingSettingsDTO> localVarResponse = await IxCeServicesManagementUpdateSendingSettingsAsyncWithHttpInfo(id, sendingSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates specific settings for sending docs to IX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of ApiResponse (IxCeSendingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IxCeSendingSettingsDTO>> IxCeServicesManagementUpdateSendingSettingsAsyncWithHttpInfo (int? id, IxCeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateSendingSettings");
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling IxCeServicesManagementApi->IxCeServicesManagementUpdateSendingSettings");

            var localVarPath = "/api/management/IxServices/IxCe/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IxCeServicesManagementUpdateSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IxCeSendingSettingsDTO)));
        }

    }
}
