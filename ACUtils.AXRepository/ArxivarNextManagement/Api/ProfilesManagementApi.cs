/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNextManagement.Client;
using ACUtils.AXRepository.ArxivarNextManagement.Model;

namespace ACUtils.AXRepository.ArxivarNextManagement.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfilesManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call returns log level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LogLevelDTO</returns>
        LogLevelDTO ProfilesManagementGetLogLevel ();

        /// <summary>
        /// This call returns log level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LogLevelDTO</returns>
        ApiResponse<LogLevelDTO> ProfilesManagementGetLogLevelWithHttpInfo ();
        /// <summary>
        /// This call returns profiling settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProfileSettingsDTO</returns>
        ProfileSettingsDTO ProfilesManagementGetSettings ();

        /// <summary>
        /// This call returns profiling settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProfileSettingsDTO</returns>
        ApiResponse<ProfileSettingsDTO> ProfilesManagementGetSettingsWithHttpInfo ();
        /// <summary>
        /// This call updates settings for writing documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settings">Document writing settings</param>
        /// <returns></returns>
        void ProfilesManagementSetDocumentsWritingSettings (DocumentsWritingSettingsDTO settings);

        /// <summary>
        /// This call updates settings for writing documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settings">Document writing settings</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesManagementSetDocumentsWritingSettingsWithHttpInfo (DocumentsWritingSettingsDTO settings);
        /// <summary>
        /// This call updates log level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevel">Log level</param>
        /// <returns></returns>
        void ProfilesManagementSetLogLevel (LogLevelDTO logLevel);

        /// <summary>
        /// This call updates log level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevel">Log level</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesManagementSetLogLevelWithHttpInfo (LogLevelDTO logLevel);
        /// <summary>
        /// This call updates list of file extensions that can be opened for reading only
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOnlyFileExtensions">List of file extensions that can be opened for reading only</param>
        /// <returns></returns>
        void ProfilesManagementSetReadOnlyFileExtensions (List<string> readOnlyFileExtensions);

        /// <summary>
        /// This call updates list of file extensions that can be opened for reading only
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOnlyFileExtensions">List of file extensions that can be opened for reading only</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProfilesManagementSetReadOnlyFileExtensionsWithHttpInfo (List<string> readOnlyFileExtensions);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call returns log level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LogLevelDTO</returns>
        System.Threading.Tasks.Task<LogLevelDTO> ProfilesManagementGetLogLevelAsync ();

        /// <summary>
        /// This call returns log level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LogLevelDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogLevelDTO>> ProfilesManagementGetLogLevelAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns profiling settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProfileSettingsDTO</returns>
        System.Threading.Tasks.Task<ProfileSettingsDTO> ProfilesManagementGetSettingsAsync ();

        /// <summary>
        /// This call returns profiling settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProfileSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileSettingsDTO>> ProfilesManagementGetSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call updates settings for writing documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settings">Document writing settings</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesManagementSetDocumentsWritingSettingsAsync (DocumentsWritingSettingsDTO settings);

        /// <summary>
        /// This call updates settings for writing documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settings">Document writing settings</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesManagementSetDocumentsWritingSettingsAsyncWithHttpInfo (DocumentsWritingSettingsDTO settings);
        /// <summary>
        /// This call updates log level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevel">Log level</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesManagementSetLogLevelAsync (LogLevelDTO logLevel);

        /// <summary>
        /// This call updates log level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevel">Log level</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesManagementSetLogLevelAsyncWithHttpInfo (LogLevelDTO logLevel);
        /// <summary>
        /// This call updates list of file extensions that can be opened for reading only
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOnlyFileExtensions">List of file extensions that can be opened for reading only</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProfilesManagementSetReadOnlyFileExtensionsAsync (List<string> readOnlyFileExtensions);

        /// <summary>
        /// This call updates list of file extensions that can be opened for reading only
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOnlyFileExtensions">List of file extensions that can be opened for reading only</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesManagementSetReadOnlyFileExtensionsAsyncWithHttpInfo (List<string> readOnlyFileExtensions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProfilesManagementApi : IProfilesManagementApi
    {
        private ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProfilesManagementApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProfilesManagementApi(ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call returns log level 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LogLevelDTO</returns>
        public LogLevelDTO ProfilesManagementGetLogLevel ()
        {
             ApiResponse<LogLevelDTO> localVarResponse = ProfilesManagementGetLogLevelWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns log level 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LogLevelDTO</returns>
        public ApiResponse< LogLevelDTO > ProfilesManagementGetLogLevelWithHttpInfo ()
        {

            var localVarPath = "/api/management/Profiles/LogLevel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesManagementGetLogLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogLevelDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogLevelDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogLevelDTO)));
        }

        /// <summary>
        /// This call returns log level 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LogLevelDTO</returns>
        public async System.Threading.Tasks.Task<LogLevelDTO> ProfilesManagementGetLogLevelAsync ()
        {
             ApiResponse<LogLevelDTO> localVarResponse = await ProfilesManagementGetLogLevelAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns log level 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LogLevelDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogLevelDTO>> ProfilesManagementGetLogLevelAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/Profiles/LogLevel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesManagementGetLogLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogLevelDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogLevelDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogLevelDTO)));
        }

        /// <summary>
        /// This call returns profiling settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProfileSettingsDTO</returns>
        public ProfileSettingsDTO ProfilesManagementGetSettings ()
        {
             ApiResponse<ProfileSettingsDTO> localVarResponse = ProfilesManagementGetSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns profiling settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProfileSettingsDTO</returns>
        public ApiResponse< ProfileSettingsDTO > ProfilesManagementGetSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/management/Profiles/Settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesManagementGetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileSettingsDTO)));
        }

        /// <summary>
        /// This call returns profiling settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProfileSettingsDTO</returns>
        public async System.Threading.Tasks.Task<ProfileSettingsDTO> ProfilesManagementGetSettingsAsync ()
        {
             ApiResponse<ProfileSettingsDTO> localVarResponse = await ProfilesManagementGetSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns profiling settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProfileSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileSettingsDTO>> ProfilesManagementGetSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/Profiles/Settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesManagementGetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfileSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileSettingsDTO)));
        }

        /// <summary>
        /// This call updates settings for writing documents 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settings">Document writing settings</param>
        /// <returns></returns>
        public void ProfilesManagementSetDocumentsWritingSettings (DocumentsWritingSettingsDTO settings)
        {
             ProfilesManagementSetDocumentsWritingSettingsWithHttpInfo(settings);
        }

        /// <summary>
        /// This call updates settings for writing documents 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settings">Document writing settings</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesManagementSetDocumentsWritingSettingsWithHttpInfo (DocumentsWritingSettingsDTO settings)
        {
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling ProfilesManagementApi->ProfilesManagementSetDocumentsWritingSettings");

            var localVarPath = "/api/management/Profiles/DocumentsWritingSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesManagementSetDocumentsWritingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates settings for writing documents 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settings">Document writing settings</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesManagementSetDocumentsWritingSettingsAsync (DocumentsWritingSettingsDTO settings)
        {
             await ProfilesManagementSetDocumentsWritingSettingsAsyncWithHttpInfo(settings);

        }

        /// <summary>
        /// This call updates settings for writing documents 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settings">Document writing settings</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesManagementSetDocumentsWritingSettingsAsyncWithHttpInfo (DocumentsWritingSettingsDTO settings)
        {
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling ProfilesManagementApi->ProfilesManagementSetDocumentsWritingSettings");

            var localVarPath = "/api/management/Profiles/DocumentsWritingSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesManagementSetDocumentsWritingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates log level 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevel">Log level</param>
        /// <returns></returns>
        public void ProfilesManagementSetLogLevel (LogLevelDTO logLevel)
        {
             ProfilesManagementSetLogLevelWithHttpInfo(logLevel);
        }

        /// <summary>
        /// This call updates log level 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevel">Log level</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesManagementSetLogLevelWithHttpInfo (LogLevelDTO logLevel)
        {
            // verify the required parameter 'logLevel' is set
            if (logLevel == null)
                throw new ApiException(400, "Missing required parameter 'logLevel' when calling ProfilesManagementApi->ProfilesManagementSetLogLevel");

            var localVarPath = "/api/management/Profiles/LogLevel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logLevel != null && logLevel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(logLevel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logLevel; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesManagementSetLogLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates log level 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevel">Log level</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesManagementSetLogLevelAsync (LogLevelDTO logLevel)
        {
             await ProfilesManagementSetLogLevelAsyncWithHttpInfo(logLevel);

        }

        /// <summary>
        /// This call updates log level 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevel">Log level</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesManagementSetLogLevelAsyncWithHttpInfo (LogLevelDTO logLevel)
        {
            // verify the required parameter 'logLevel' is set
            if (logLevel == null)
                throw new ApiException(400, "Missing required parameter 'logLevel' when calling ProfilesManagementApi->ProfilesManagementSetLogLevel");

            var localVarPath = "/api/management/Profiles/LogLevel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logLevel != null && logLevel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(logLevel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logLevel; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesManagementSetLogLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates list of file extensions that can be opened for reading only 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOnlyFileExtensions">List of file extensions that can be opened for reading only</param>
        /// <returns></returns>
        public void ProfilesManagementSetReadOnlyFileExtensions (List<string> readOnlyFileExtensions)
        {
             ProfilesManagementSetReadOnlyFileExtensionsWithHttpInfo(readOnlyFileExtensions);
        }

        /// <summary>
        /// This call updates list of file extensions that can be opened for reading only 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOnlyFileExtensions">List of file extensions that can be opened for reading only</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProfilesManagementSetReadOnlyFileExtensionsWithHttpInfo (List<string> readOnlyFileExtensions)
        {
            // verify the required parameter 'readOnlyFileExtensions' is set
            if (readOnlyFileExtensions == null)
                throw new ApiException(400, "Missing required parameter 'readOnlyFileExtensions' when calling ProfilesManagementApi->ProfilesManagementSetReadOnlyFileExtensions");

            var localVarPath = "/api/management/Profiles/ReadOnlyFileExtensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readOnlyFileExtensions != null && readOnlyFileExtensions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(readOnlyFileExtensions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readOnlyFileExtensions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesManagementSetReadOnlyFileExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates list of file extensions that can be opened for reading only 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOnlyFileExtensions">List of file extensions that can be opened for reading only</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProfilesManagementSetReadOnlyFileExtensionsAsync (List<string> readOnlyFileExtensions)
        {
             await ProfilesManagementSetReadOnlyFileExtensionsAsyncWithHttpInfo(readOnlyFileExtensions);

        }

        /// <summary>
        /// This call updates list of file extensions that can be opened for reading only 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readOnlyFileExtensions">List of file extensions that can be opened for reading only</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesManagementSetReadOnlyFileExtensionsAsyncWithHttpInfo (List<string> readOnlyFileExtensions)
        {
            // verify the required parameter 'readOnlyFileExtensions' is set
            if (readOnlyFileExtensions == null)
                throw new ApiException(400, "Missing required parameter 'readOnlyFileExtensions' when calling ProfilesManagementApi->ProfilesManagementSetReadOnlyFileExtensions");

            var localVarPath = "/api/management/Profiles/ReadOnlyFileExtensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readOnlyFileExtensions != null && readOnlyFileExtensions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(readOnlyFileExtensions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readOnlyFileExtensions; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProfilesManagementSetReadOnlyFileExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
