/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ACUtils.AXRepository.ArxivarNextManagement.Client;
using ACUtils.AXRepository.ArxivarNextManagement.Model;

namespace ACUtils.AXRepository.ArxivarNextManagement.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArxCeServicesManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call allows to check or generate business units in Arx-Ce
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options</param>
        /// <returns>ArxCeBusinessUnitGeneratorResponseDTO</returns>
        ArxCeBusinessUnitGeneratorResponseDTO ArxCeServicesManagementArxCeBusinessUnitGeneratorQueue (ArxCeBusinessUnitGeneratorOptionsDTO options);

        /// <summary>
        /// This call allows to check or generate business units in Arx-Ce
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options</param>
        /// <returns>ApiResponse of ArxCeBusinessUnitGeneratorResponseDTO</returns>
        ApiResponse<ArxCeBusinessUnitGeneratorResponseDTO> ArxCeServicesManagementArxCeBusinessUnitGeneratorQueueWithHttpInfo (ArxCeBusinessUnitGeneratorOptionsDTO options);
        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ArxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        ArxCeCloneSendingSettingsByBusinessUnitResponseDTO ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueue (ArxCeCloneOptionsByBusinessUnitDTO options);

        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ApiResponse of ArxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        ApiResponse<ArxCeCloneSendingSettingsByBusinessUnitResponseDTO> ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueueWithHttpInfo (ArxCeCloneOptionsByBusinessUnitDTO options);
        /// <summary>
        /// This call allows to clone sending settings by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ArxCeCloneSendingSettingsByDocumentTypeResponseDTO</returns>
        ArxCeCloneSendingSettingsByDocumentTypeResponseDTO ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueue (ArxCeCloneOptionsByDocumentTypeDTO options);

        /// <summary>
        /// This call allows to clone sending settings by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ApiResponse of ArxCeCloneSendingSettingsByDocumentTypeResponseDTO</returns>
        ApiResponse<ArxCeCloneSendingSettingsByDocumentTypeResponseDTO> ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueueWithHttpInfo (ArxCeCloneOptionsByDocumentTypeDTO options);
        /// <summary>
        /// This call checks ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>bool?</returns>
        bool? ArxCeServicesManagementCheckArxCeCredentials (ArxCeCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call checks ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ArxCeServicesManagementCheckArxCeCredentialsWithHttpInfo (ArxCeCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call deletes ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns></returns>
        void ArxCeServicesManagementDeleteArxCeCredentials (int? id);

        /// <summary>
        /// This call deletes ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArxCeServicesManagementDeleteArxCeCredentialsWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific ArxCe business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns></returns>
        void ArxCeServicesManagementDeleteBusinessUnitSettings (int? id);

        /// <summary>
        /// This call deletes specific ArxCe business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArxCeServicesManagementDeleteBusinessUnitSettingsWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns></returns>
        void ArxCeServicesManagementDeleteNotificationSettings (int? id);

        /// <summary>
        /// This call deletes specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArxCeServicesManagementDeleteNotificationSettingsWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns></returns>
        void ArxCeServicesManagementDeleteSendingSettings (int? id);

        /// <summary>
        /// This call deletes specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArxCeServicesManagementDeleteSendingSettingsWithHttpInfo (int? id);
        /// <summary>
        /// This call returns business units configured in ArxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials</param>
        /// <returns>List&lt;ArxCeBusinessUnitDTO&gt;</returns>
        List<ArxCeBusinessUnitDTO> ArxCeServicesManagementGetArxCeBusinessUnits (ArxCeCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns business units configured in ArxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of List&lt;ArxCeBusinessUnitDTO&gt;</returns>
        ApiResponse<List<ArxCeBusinessUnitDTO>> ArxCeServicesManagementGetArxCeBusinessUnitsWithHttpInfo (ArxCeCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns ArxCe configured credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: DocumentType </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="documentTypeId">Docuemnt type identifier (optional)</param>
        /// <returns>ArxCeCredentialsTreeDTO</returns>
        ArxCeCredentialsTreeDTO ArxCeServicesManagementGetArxCeCredentials (int? context, string businessUnitCode = null, int? documentTypeId = null);

        /// <summary>
        /// This call returns ArxCe configured credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: DocumentType </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="documentTypeId">Docuemnt type identifier (optional)</param>
        /// <returns>ApiResponse of ArxCeCredentialsTreeDTO</returns>
        ApiResponse<ArxCeCredentialsTreeDTO> ArxCeServicesManagementGetArxCeCredentialsWithHttpInfo (int? context, string businessUnitCode = null, int? documentTypeId = null);
        /// <summary>
        /// This call returns ArxCe document type details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="docTypeId">ArxCe document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ArxCeDocumentTypeDetailDTO</returns>
        ArxCeDocumentTypeDetailDTO ArxCeServicesManagementGetArxCeDocumentTypeDetails (string businessUnitId, string docTypeId, ArxCeCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns ArxCe document type details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="docTypeId">ArxCe document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of ArxCeDocumentTypeDetailDTO</returns>
        ApiResponse<ArxCeDocumentTypeDetailDTO> ArxCeServicesManagementGetArxCeDocumentTypeDetailsWithHttpInfo (string businessUnitId, string docTypeId, ArxCeCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns document types configured in ArxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>List&lt;ArxCeDocumentTypeDTO&gt;</returns>
        List<ArxCeDocumentTypeDTO> ArxCeServicesManagementGetArxCeDocumentTypes (string businessUnitId, ArxCeCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns document types configured in ArxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of List&lt;ArxCeDocumentTypeDTO&gt;</returns>
        ApiResponse<List<ArxCeDocumentTypeDTO>> ArxCeServicesManagementGetArxCeDocumentTypesWithHttpInfo (string businessUnitId, ArxCeCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns ArxCe notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ArxCeNotificationDTO&gt;</returns>
        List<ArxCeNotificationDTO> ArxCeServicesManagementGetArxCeNotifications ();

        /// <summary>
        /// This call returns ArxCe notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ArxCeNotificationDTO&gt;</returns>
        ApiResponse<List<ArxCeNotificationDTO>> ArxCeServicesManagementGetArxCeNotificationsWithHttpInfo ();
        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ArxCeBusinessUnitSettingsDTO</returns>
        ArxCeBusinessUnitSettingsDTO ArxCeServicesManagementGetBusinessUnitSettingsById (int? id);

        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of ArxCeBusinessUnitSettingsDTO</returns>
        ApiResponse<ArxCeBusinessUnitSettingsDTO> ArxCeServicesManagementGetBusinessUnitSettingsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ArxCeBusinessUnitSettingsDTO&gt;</returns>
        List<ArxCeBusinessUnitSettingsDTO> ArxCeServicesManagementGetBusinessUnitsSettings ();

        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ArxCeBusinessUnitSettingsDTO&gt;</returns>
        ApiResponse<List<ArxCeBusinessUnitSettingsDTO>> ArxCeServicesManagementGetBusinessUnitsSettingsWithHttpInfo ();
        /// <summary>
        /// This call gets all notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ArxCeNotificationSettingsDTO&gt;</returns>
        List<ArxCeNotificationSettingsDTO> ArxCeServicesManagementGetNotificationSettings ();

        /// <summary>
        /// This call gets all notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ArxCeNotificationSettingsDTO&gt;</returns>
        ApiResponse<List<ArxCeNotificationSettingsDTO>> ArxCeServicesManagementGetNotificationSettingsWithHttpInfo ();
        /// <summary>
        /// This call gets specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ArxCeNotificationSettingsDTO</returns>
        ArxCeNotificationSettingsDTO ArxCeServicesManagementGetNotificationSettingsById (int? id);

        /// <summary>
        /// This call gets specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of ArxCeNotificationSettingsDTO</returns>
        ApiResponse<ArxCeNotificationSettingsDTO> ArxCeServicesManagementGetNotificationSettingsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call gets all sending settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>List&lt;ArxCeSendingSettingsDTO&gt;</returns>
        List<ArxCeSendingSettingsDTO> ArxCeServicesManagementGetSendingSettings (string businessUnitCode);

        /// <summary>
        /// This call gets all sending settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>ApiResponse of List&lt;ArxCeSendingSettingsDTO&gt;</returns>
        ApiResponse<List<ArxCeSendingSettingsDTO>> ArxCeServicesManagementGetSendingSettingsWithHttpInfo (string businessUnitCode);
        /// <summary>
        /// This call gets specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ArxCeSendingSettingsDTO</returns>
        ArxCeSendingSettingsDTO ArxCeServicesManagementGetSendingSettingsById (int? id);

        /// <summary>
        /// This call gets specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of ArxCeSendingSettingsDTO</returns>
        ApiResponse<ArxCeSendingSettingsDTO> ArxCeServicesManagementGetSendingSettingsByIdWithHttpInfo (int? id);
        /// <summary>
        /// This call gets specific settings details for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ArxCeSendingSettingsDetailDTO</returns>
        ArxCeSendingSettingsDetailDTO ArxCeServicesManagementGetSendingSettingsDetails (int? id);

        /// <summary>
        /// This call gets specific settings details for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of ArxCeSendingSettingsDetailDTO</returns>
        ApiResponse<ArxCeSendingSettingsDetailDTO> ArxCeServicesManagementGetSendingSettingsDetailsWithHttpInfo (int? id);
        /// <summary>
        /// This call inserts ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns></returns>
        void ArxCeServicesManagementInsertArxCeCredentials (ArxCeCredentialsDTO credentials);

        /// <summary>
        /// This call inserts ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArxCeServicesManagementInsertArxCeCredentialsWithHttpInfo (ArxCeCredentialsDTO credentials);
        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>ArxCeBusinessUnitSettingsDTO</returns>
        ArxCeBusinessUnitSettingsDTO ArxCeServicesManagementInsertBusinessUnitSettings (ArxCeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>ApiResponse of ArxCeBusinessUnitSettingsDTO</returns>
        ApiResponse<ArxCeBusinessUnitSettingsDTO> ArxCeServicesManagementInsertBusinessUnitSettingsWithHttpInfo (ArxCeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call inserts specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>ArxCeNotificationSettingsDTO</returns>
        ArxCeNotificationSettingsDTO ArxCeServicesManagementInsertNotificationSettings (ArxCeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call inserts specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>ApiResponse of ArxCeNotificationSettingsDTO</returns>
        ApiResponse<ArxCeNotificationSettingsDTO> ArxCeServicesManagementInsertNotificationSettingsWithHttpInfo (ArxCeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call inserts specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>ArxCeSendingSettingsDTO</returns>
        ArxCeSendingSettingsDTO ArxCeServicesManagementInsertSendingSettings (ArxCeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call inserts specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>ApiResponse of ArxCeSendingSettingsDTO</returns>
        ApiResponse<ArxCeSendingSettingsDTO> ArxCeServicesManagementInsertSendingSettingsWithHttpInfo (ArxCeSendingSettingsDTO sendingSettings);
        /// <summary>
        /// This call inserts specific settings details for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns></returns>
        void ArxCeServicesManagementSetSendingSettingsDetails (int? id, ArxCeSendingSettingsDetailDTO sendingSettingsDetails);

        /// <summary>
        /// This call inserts specific settings details for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArxCeServicesManagementSetSendingSettingsDetailsWithHttpInfo (int? id, ArxCeSendingSettingsDetailDTO sendingSettingsDetails);
        /// <summary>
        /// This call updates ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns></returns>
        void ArxCeServicesManagementUpdateArxCeCredentials (int? id, ArxCeCredentialsDTO credentials);

        /// <summary>
        /// This call updates ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArxCeServicesManagementUpdateArxCeCredentialsWithHttpInfo (int? id, ArxCeCredentialsDTO credentials);
        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>ArxCeBusinessUnitSettingsDTO</returns>
        ArxCeBusinessUnitSettingsDTO ArxCeServicesManagementUpdateBusinessUnitSettings (int? id, ArxCeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>ApiResponse of ArxCeBusinessUnitSettingsDTO</returns>
        ApiResponse<ArxCeBusinessUnitSettingsDTO> ArxCeServicesManagementUpdateBusinessUnitSettingsWithHttpInfo (int? id, ArxCeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call updates specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>ArxCeNotificationSettingsDTO</returns>
        ArxCeNotificationSettingsDTO ArxCeServicesManagementUpdateNotificationSettings (int? id, ArxCeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call updates specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>ApiResponse of ArxCeNotificationSettingsDTO</returns>
        ApiResponse<ArxCeNotificationSettingsDTO> ArxCeServicesManagementUpdateNotificationSettingsWithHttpInfo (int? id, ArxCeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call updates specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>ArxCeSendingSettingsDTO</returns>
        ArxCeSendingSettingsDTO ArxCeServicesManagementUpdateSendingSettings (int? id, ArxCeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call updates specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>ApiResponse of ArxCeSendingSettingsDTO</returns>
        ApiResponse<ArxCeSendingSettingsDTO> ArxCeServicesManagementUpdateSendingSettingsWithHttpInfo (int? id, ArxCeSendingSettingsDTO sendingSettings);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call allows to check or generate business units in Arx-Ce
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options</param>
        /// <returns>Task of ArxCeBusinessUnitGeneratorResponseDTO</returns>
        System.Threading.Tasks.Task<ArxCeBusinessUnitGeneratorResponseDTO> ArxCeServicesManagementArxCeBusinessUnitGeneratorQueueAsync (ArxCeBusinessUnitGeneratorOptionsDTO options);

        /// <summary>
        /// This call allows to check or generate business units in Arx-Ce
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options</param>
        /// <returns>Task of ApiResponse (ArxCeBusinessUnitGeneratorResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeBusinessUnitGeneratorResponseDTO>> ArxCeServicesManagementArxCeBusinessUnitGeneratorQueueAsyncWithHttpInfo (ArxCeBusinessUnitGeneratorOptionsDTO options);
        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ArxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        System.Threading.Tasks.Task<ArxCeCloneSendingSettingsByBusinessUnitResponseDTO> ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueueAsync (ArxCeCloneOptionsByBusinessUnitDTO options);

        /// <summary>
        /// This call allows to clone sending settings by business unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ApiResponse (ArxCeCloneSendingSettingsByBusinessUnitResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeCloneSendingSettingsByBusinessUnitResponseDTO>> ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueueAsyncWithHttpInfo (ArxCeCloneOptionsByBusinessUnitDTO options);
        /// <summary>
        /// This call allows to clone sending settings by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ArxCeCloneSendingSettingsByDocumentTypeResponseDTO</returns>
        System.Threading.Tasks.Task<ArxCeCloneSendingSettingsByDocumentTypeResponseDTO> ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueueAsync (ArxCeCloneOptionsByDocumentTypeDTO options);

        /// <summary>
        /// This call allows to clone sending settings by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ApiResponse (ArxCeCloneSendingSettingsByDocumentTypeResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeCloneSendingSettingsByDocumentTypeResponseDTO>> ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueueAsyncWithHttpInfo (ArxCeCloneOptionsByDocumentTypeDTO options);
        /// <summary>
        /// This call checks ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ArxCeServicesManagementCheckArxCeCredentialsAsync (ArxCeCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call checks ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ArxCeServicesManagementCheckArxCeCredentialsAsyncWithHttpInfo (ArxCeCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call deletes ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArxCeServicesManagementDeleteArxCeCredentialsAsync (int? id);

        /// <summary>
        /// This call deletes ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementDeleteArxCeCredentialsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific ArxCe business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArxCeServicesManagementDeleteBusinessUnitSettingsAsync (int? id);

        /// <summary>
        /// This call deletes specific ArxCe business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementDeleteBusinessUnitSettingsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArxCeServicesManagementDeleteNotificationSettingsAsync (int? id);

        /// <summary>
        /// This call deletes specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementDeleteNotificationSettingsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call deletes specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArxCeServicesManagementDeleteSendingSettingsAsync (int? id);

        /// <summary>
        /// This call deletes specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementDeleteSendingSettingsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call returns business units configured in ArxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of List&lt;ArxCeBusinessUnitDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ArxCeBusinessUnitDTO>> ArxCeServicesManagementGetArxCeBusinessUnitsAsync (ArxCeCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns business units configured in ArxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (List&lt;ArxCeBusinessUnitDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArxCeBusinessUnitDTO>>> ArxCeServicesManagementGetArxCeBusinessUnitsAsyncWithHttpInfo (ArxCeCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns ArxCe configured credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: DocumentType </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="documentTypeId">Docuemnt type identifier (optional)</param>
        /// <returns>Task of ArxCeCredentialsTreeDTO</returns>
        System.Threading.Tasks.Task<ArxCeCredentialsTreeDTO> ArxCeServicesManagementGetArxCeCredentialsAsync (int? context, string businessUnitCode = null, int? documentTypeId = null);

        /// <summary>
        /// This call returns ArxCe configured credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: DocumentType </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="documentTypeId">Docuemnt type identifier (optional)</param>
        /// <returns>Task of ApiResponse (ArxCeCredentialsTreeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeCredentialsTreeDTO>> ArxCeServicesManagementGetArxCeCredentialsAsyncWithHttpInfo (int? context, string businessUnitCode = null, int? documentTypeId = null);
        /// <summary>
        /// This call returns ArxCe document type details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="docTypeId">ArxCe document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ArxCeDocumentTypeDetailDTO</returns>
        System.Threading.Tasks.Task<ArxCeDocumentTypeDetailDTO> ArxCeServicesManagementGetArxCeDocumentTypeDetailsAsync (string businessUnitId, string docTypeId, ArxCeCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns ArxCe document type details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="docTypeId">ArxCe document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (ArxCeDocumentTypeDetailDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeDocumentTypeDetailDTO>> ArxCeServicesManagementGetArxCeDocumentTypeDetailsAsyncWithHttpInfo (string businessUnitId, string docTypeId, ArxCeCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns document types configured in ArxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of List&lt;ArxCeDocumentTypeDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ArxCeDocumentTypeDTO>> ArxCeServicesManagementGetArxCeDocumentTypesAsync (string businessUnitId, ArxCeCredentialsForRequestDTO credentials);

        /// <summary>
        /// This call returns document types configured in ArxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (List&lt;ArxCeDocumentTypeDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArxCeDocumentTypeDTO>>> ArxCeServicesManagementGetArxCeDocumentTypesAsyncWithHttpInfo (string businessUnitId, ArxCeCredentialsForRequestDTO credentials);
        /// <summary>
        /// This call returns ArxCe notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ArxCeNotificationDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ArxCeNotificationDTO>> ArxCeServicesManagementGetArxCeNotificationsAsync ();

        /// <summary>
        /// This call returns ArxCe notification types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ArxCeNotificationDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArxCeNotificationDTO>>> ArxCeServicesManagementGetArxCeNotificationsAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ArxCeBusinessUnitSettingsDTO</returns>
        System.Threading.Tasks.Task<ArxCeBusinessUnitSettingsDTO> ArxCeServicesManagementGetBusinessUnitSettingsByIdAsync (int? id);

        /// <summary>
        /// This call gets specific business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse (ArxCeBusinessUnitSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeBusinessUnitSettingsDTO>> ArxCeServicesManagementGetBusinessUnitSettingsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ArxCeBusinessUnitSettingsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ArxCeBusinessUnitSettingsDTO>> ArxCeServicesManagementGetBusinessUnitsSettingsAsync ();

        /// <summary>
        /// This call gets business unit configured settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ArxCeBusinessUnitSettingsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArxCeBusinessUnitSettingsDTO>>> ArxCeServicesManagementGetBusinessUnitsSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets all notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ArxCeNotificationSettingsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ArxCeNotificationSettingsDTO>> ArxCeServicesManagementGetNotificationSettingsAsync ();

        /// <summary>
        /// This call gets all notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ArxCeNotificationSettingsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArxCeNotificationSettingsDTO>>> ArxCeServicesManagementGetNotificationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ArxCeNotificationSettingsDTO</returns>
        System.Threading.Tasks.Task<ArxCeNotificationSettingsDTO> ArxCeServicesManagementGetNotificationSettingsByIdAsync (int? id);

        /// <summary>
        /// This call gets specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse (ArxCeNotificationSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeNotificationSettingsDTO>> ArxCeServicesManagementGetNotificationSettingsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call gets all sending settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of List&lt;ArxCeSendingSettingsDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ArxCeSendingSettingsDTO>> ArxCeServicesManagementGetSendingSettingsAsync (string businessUnitCode);

        /// <summary>
        /// This call gets all sending settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of ApiResponse (List&lt;ArxCeSendingSettingsDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArxCeSendingSettingsDTO>>> ArxCeServicesManagementGetSendingSettingsAsyncWithHttpInfo (string businessUnitCode);
        /// <summary>
        /// This call gets specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ArxCeSendingSettingsDTO</returns>
        System.Threading.Tasks.Task<ArxCeSendingSettingsDTO> ArxCeServicesManagementGetSendingSettingsByIdAsync (int? id);

        /// <summary>
        /// This call gets specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse (ArxCeSendingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeSendingSettingsDTO>> ArxCeServicesManagementGetSendingSettingsByIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call gets specific settings details for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ArxCeSendingSettingsDetailDTO</returns>
        System.Threading.Tasks.Task<ArxCeSendingSettingsDetailDTO> ArxCeServicesManagementGetSendingSettingsDetailsAsync (int? id);

        /// <summary>
        /// This call gets specific settings details for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse (ArxCeSendingSettingsDetailDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeSendingSettingsDetailDTO>> ArxCeServicesManagementGetSendingSettingsDetailsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// This call inserts ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArxCeServicesManagementInsertArxCeCredentialsAsync (ArxCeCredentialsDTO credentials);

        /// <summary>
        /// This call inserts ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementInsertArxCeCredentialsAsyncWithHttpInfo (ArxCeCredentialsDTO credentials);
        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of ArxCeBusinessUnitSettingsDTO</returns>
        System.Threading.Tasks.Task<ArxCeBusinessUnitSettingsDTO> ArxCeServicesManagementInsertBusinessUnitSettingsAsync (ArxCeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call inserts business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of ApiResponse (ArxCeBusinessUnitSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeBusinessUnitSettingsDTO>> ArxCeServicesManagementInsertBusinessUnitSettingsAsyncWithHttpInfo (ArxCeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call inserts specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of ArxCeNotificationSettingsDTO</returns>
        System.Threading.Tasks.Task<ArxCeNotificationSettingsDTO> ArxCeServicesManagementInsertNotificationSettingsAsync (ArxCeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call inserts specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of ApiResponse (ArxCeNotificationSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeNotificationSettingsDTO>> ArxCeServicesManagementInsertNotificationSettingsAsyncWithHttpInfo (ArxCeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call inserts specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of ArxCeSendingSettingsDTO</returns>
        System.Threading.Tasks.Task<ArxCeSendingSettingsDTO> ArxCeServicesManagementInsertSendingSettingsAsync (ArxCeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call inserts specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of ApiResponse (ArxCeSendingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeSendingSettingsDTO>> ArxCeServicesManagementInsertSendingSettingsAsyncWithHttpInfo (ArxCeSendingSettingsDTO sendingSettings);
        /// <summary>
        /// This call inserts specific settings details for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArxCeServicesManagementSetSendingSettingsDetailsAsync (int? id, ArxCeSendingSettingsDetailDTO sendingSettingsDetails);

        /// <summary>
        /// This call inserts specific settings details for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementSetSendingSettingsDetailsAsyncWithHttpInfo (int? id, ArxCeSendingSettingsDetailDTO sendingSettingsDetails);
        /// <summary>
        /// This call updates ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArxCeServicesManagementUpdateArxCeCredentialsAsync (int? id, ArxCeCredentialsDTO credentials);

        /// <summary>
        /// This call updates ArxCe credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementUpdateArxCeCredentialsAsyncWithHttpInfo (int? id, ArxCeCredentialsDTO credentials);
        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of ArxCeBusinessUnitSettingsDTO</returns>
        System.Threading.Tasks.Task<ArxCeBusinessUnitSettingsDTO> ArxCeServicesManagementUpdateBusinessUnitSettingsAsync (int? id, ArxCeBusinessUnitSettingsDTO businessUnitSettings);

        /// <summary>
        /// This call updates business unit settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of ApiResponse (ArxCeBusinessUnitSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeBusinessUnitSettingsDTO>> ArxCeServicesManagementUpdateBusinessUnitSettingsAsyncWithHttpInfo (int? id, ArxCeBusinessUnitSettingsDTO businessUnitSettings);
        /// <summary>
        /// This call updates specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of ArxCeNotificationSettingsDTO</returns>
        System.Threading.Tasks.Task<ArxCeNotificationSettingsDTO> ArxCeServicesManagementUpdateNotificationSettingsAsync (int? id, ArxCeNotificationSettingsDTO notificationSettings);

        /// <summary>
        /// This call updates specific notification settings for ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of ApiResponse (ArxCeNotificationSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeNotificationSettingsDTO>> ArxCeServicesManagementUpdateNotificationSettingsAsyncWithHttpInfo (int? id, ArxCeNotificationSettingsDTO notificationSettings);
        /// <summary>
        /// This call updates specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of ArxCeSendingSettingsDTO</returns>
        System.Threading.Tasks.Task<ArxCeSendingSettingsDTO> ArxCeServicesManagementUpdateSendingSettingsAsync (int? id, ArxCeSendingSettingsDTO sendingSettings);

        /// <summary>
        /// This call updates specific settings for sending docs to ARX-CE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of ApiResponse (ArxCeSendingSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArxCeSendingSettingsDTO>> ArxCeServicesManagementUpdateSendingSettingsAsyncWithHttpInfo (int? id, ArxCeSendingSettingsDTO sendingSettings);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArxCeServicesManagementApi : IArxCeServicesManagementApi
    {
        private ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArxCeServicesManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArxCeServicesManagementApi(String basePath)
        {
            this.Configuration = new ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArxCeServicesManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArxCeServicesManagementApi(ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ACUtils.AXRepository.ArxivarNextManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call allows to check or generate business units in Arx-Ce 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options</param>
        /// <returns>ArxCeBusinessUnitGeneratorResponseDTO</returns>
        public ArxCeBusinessUnitGeneratorResponseDTO ArxCeServicesManagementArxCeBusinessUnitGeneratorQueue (ArxCeBusinessUnitGeneratorOptionsDTO options)
        {
             ApiResponse<ArxCeBusinessUnitGeneratorResponseDTO> localVarResponse = ArxCeServicesManagementArxCeBusinessUnitGeneratorQueueWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to check or generate business units in Arx-Ce 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options</param>
        /// <returns>ApiResponse of ArxCeBusinessUnitGeneratorResponseDTO</returns>
        public ApiResponse< ArxCeBusinessUnitGeneratorResponseDTO > ArxCeServicesManagementArxCeBusinessUnitGeneratorQueueWithHttpInfo (ArxCeBusinessUnitGeneratorOptionsDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling ArxCeServicesManagementApi->ArxCeServicesManagementArxCeBusinessUnitGeneratorQueue");

            var localVarPath = "/api/management/ArxCeServices/BusinessUnits/Generator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementArxCeBusinessUnitGeneratorQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeBusinessUnitGeneratorResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeBusinessUnitGeneratorResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeBusinessUnitGeneratorResponseDTO)));
        }

        /// <summary>
        /// This call allows to check or generate business units in Arx-Ce 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options</param>
        /// <returns>Task of ArxCeBusinessUnitGeneratorResponseDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeBusinessUnitGeneratorResponseDTO> ArxCeServicesManagementArxCeBusinessUnitGeneratorQueueAsync (ArxCeBusinessUnitGeneratorOptionsDTO options)
        {
             ApiResponse<ArxCeBusinessUnitGeneratorResponseDTO> localVarResponse = await ArxCeServicesManagementArxCeBusinessUnitGeneratorQueueAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to check or generate business units in Arx-Ce 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options</param>
        /// <returns>Task of ApiResponse (ArxCeBusinessUnitGeneratorResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeBusinessUnitGeneratorResponseDTO>> ArxCeServicesManagementArxCeBusinessUnitGeneratorQueueAsyncWithHttpInfo (ArxCeBusinessUnitGeneratorOptionsDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling ArxCeServicesManagementApi->ArxCeServicesManagementArxCeBusinessUnitGeneratorQueue");

            var localVarPath = "/api/management/ArxCeServices/BusinessUnits/Generator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementArxCeBusinessUnitGeneratorQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeBusinessUnitGeneratorResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeBusinessUnitGeneratorResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeBusinessUnitGeneratorResponseDTO)));
        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ArxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        public ArxCeCloneSendingSettingsByBusinessUnitResponseDTO ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueue (ArxCeCloneOptionsByBusinessUnitDTO options)
        {
             ApiResponse<ArxCeCloneSendingSettingsByBusinessUnitResponseDTO> localVarResponse = ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueueWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ApiResponse of ArxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        public ApiResponse< ArxCeCloneSendingSettingsByBusinessUnitResponseDTO > ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueueWithHttpInfo (ArxCeCloneOptionsByBusinessUnitDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling ArxCeServicesManagementApi->ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueue");

            var localVarPath = "/api/management/ArxCeServices/Settings/CloneByBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeCloneSendingSettingsByBusinessUnitResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeCloneSendingSettingsByBusinessUnitResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeCloneSendingSettingsByBusinessUnitResponseDTO)));
        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ArxCeCloneSendingSettingsByBusinessUnitResponseDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeCloneSendingSettingsByBusinessUnitResponseDTO> ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueueAsync (ArxCeCloneOptionsByBusinessUnitDTO options)
        {
             ApiResponse<ArxCeCloneSendingSettingsByBusinessUnitResponseDTO> localVarResponse = await ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueueAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to clone sending settings by business unit 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ApiResponse (ArxCeCloneSendingSettingsByBusinessUnitResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeCloneSendingSettingsByBusinessUnitResponseDTO>> ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueueAsyncWithHttpInfo (ArxCeCloneOptionsByBusinessUnitDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling ArxCeServicesManagementApi->ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueue");

            var localVarPath = "/api/management/ArxCeServices/Settings/CloneByBusinessUnit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementArxCeCloneSendingSettingsByBusinessUnitQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeCloneSendingSettingsByBusinessUnitResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeCloneSendingSettingsByBusinessUnitResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeCloneSendingSettingsByBusinessUnitResponseDTO)));
        }

        /// <summary>
        /// This call allows to clone sending settings by document type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ArxCeCloneSendingSettingsByDocumentTypeResponseDTO</returns>
        public ArxCeCloneSendingSettingsByDocumentTypeResponseDTO ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueue (ArxCeCloneOptionsByDocumentTypeDTO options)
        {
             ApiResponse<ArxCeCloneSendingSettingsByDocumentTypeResponseDTO> localVarResponse = ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueueWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call allows to clone sending settings by document type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>ApiResponse of ArxCeCloneSendingSettingsByDocumentTypeResponseDTO</returns>
        public ApiResponse< ArxCeCloneSendingSettingsByDocumentTypeResponseDTO > ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueueWithHttpInfo (ArxCeCloneOptionsByDocumentTypeDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling ArxCeServicesManagementApi->ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueue");

            var localVarPath = "/api/management/ArxCeServices/Settings/CloneByDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeCloneSendingSettingsByDocumentTypeResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeCloneSendingSettingsByDocumentTypeResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeCloneSendingSettingsByDocumentTypeResponseDTO)));
        }

        /// <summary>
        /// This call allows to clone sending settings by document type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ArxCeCloneSendingSettingsByDocumentTypeResponseDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeCloneSendingSettingsByDocumentTypeResponseDTO> ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueueAsync (ArxCeCloneOptionsByDocumentTypeDTO options)
        {
             ApiResponse<ArxCeCloneSendingSettingsByDocumentTypeResponseDTO> localVarResponse = await ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueueAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call allows to clone sending settings by document type 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Clone options</param>
        /// <returns>Task of ApiResponse (ArxCeCloneSendingSettingsByDocumentTypeResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeCloneSendingSettingsByDocumentTypeResponseDTO>> ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueueAsyncWithHttpInfo (ArxCeCloneOptionsByDocumentTypeDTO options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling ArxCeServicesManagementApi->ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueue");

            var localVarPath = "/api/management/ArxCeServices/Settings/CloneByDocumentType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementArxCeCloneSendingSettingsByDocumentTypeQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeCloneSendingSettingsByDocumentTypeResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeCloneSendingSettingsByDocumentTypeResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeCloneSendingSettingsByDocumentTypeResponseDTO)));
        }

        /// <summary>
        /// This call checks ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>bool?</returns>
        public bool? ArxCeServicesManagementCheckArxCeCredentials (ArxCeCredentialsForRequestDTO credentials)
        {
             ApiResponse<bool?> localVarResponse = ArxCeServicesManagementCheckArxCeCredentialsWithHttpInfo(credentials);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call checks ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ArxCeServicesManagementCheckArxCeCredentialsWithHttpInfo (ArxCeCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementCheckArxCeCredentials");

            var localVarPath = "/api/management/ArxCeServices/Credentials/Check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementCheckArxCeCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call checks ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ArxCeServicesManagementCheckArxCeCredentialsAsync (ArxCeCredentialsForRequestDTO credentials)
        {
             ApiResponse<bool?> localVarResponse = await ArxCeServicesManagementCheckArxCeCredentialsAsyncWithHttpInfo(credentials);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call checks ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for test</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ArxCeServicesManagementCheckArxCeCredentialsAsyncWithHttpInfo (ArxCeCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementCheckArxCeCredentials");

            var localVarPath = "/api/management/ArxCeServices/Credentials/Check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementCheckArxCeCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// This call deletes ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns></returns>
        public void ArxCeServicesManagementDeleteArxCeCredentials (int? id)
        {
             ArxCeServicesManagementDeleteArxCeCredentialsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArxCeServicesManagementDeleteArxCeCredentialsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementDeleteArxCeCredentials");

            var localVarPath = "/api/management/ArxCeServices/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementDeleteArxCeCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArxCeServicesManagementDeleteArxCeCredentialsAsync (int? id)
        {
             await ArxCeServicesManagementDeleteArxCeCredentialsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementDeleteArxCeCredentialsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementDeleteArxCeCredentials");

            var localVarPath = "/api/management/ArxCeServices/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementDeleteArxCeCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific ArxCe business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns></returns>
        public void ArxCeServicesManagementDeleteBusinessUnitSettings (int? id)
        {
             ArxCeServicesManagementDeleteBusinessUnitSettingsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific ArxCe business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArxCeServicesManagementDeleteBusinessUnitSettingsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementDeleteBusinessUnitSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementDeleteBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific ArxCe business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArxCeServicesManagementDeleteBusinessUnitSettingsAsync (int? id)
        {
             await ArxCeServicesManagementDeleteBusinessUnitSettingsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific ArxCe business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementDeleteBusinessUnitSettingsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementDeleteBusinessUnitSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementDeleteBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns></returns>
        public void ArxCeServicesManagementDeleteNotificationSettings (int? id)
        {
             ArxCeServicesManagementDeleteNotificationSettingsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArxCeServicesManagementDeleteNotificationSettingsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementDeleteNotificationSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementDeleteNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArxCeServicesManagementDeleteNotificationSettingsAsync (int? id)
        {
             await ArxCeServicesManagementDeleteNotificationSettingsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementDeleteNotificationSettingsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementDeleteNotificationSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementDeleteNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns></returns>
        public void ArxCeServicesManagementDeleteSendingSettings (int? id)
        {
             ArxCeServicesManagementDeleteSendingSettingsWithHttpInfo(id);
        }

        /// <summary>
        /// This call deletes specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArxCeServicesManagementDeleteSendingSettingsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementDeleteSendingSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementDeleteSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArxCeServicesManagementDeleteSendingSettingsAsync (int? id)
        {
             await ArxCeServicesManagementDeleteSendingSettingsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This call deletes specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementDeleteSendingSettingsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementDeleteSendingSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementDeleteSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns business units configured in ArxCe 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials</param>
        /// <returns>List&lt;ArxCeBusinessUnitDTO&gt;</returns>
        public List<ArxCeBusinessUnitDTO> ArxCeServicesManagementGetArxCeBusinessUnits (ArxCeCredentialsForRequestDTO credentials)
        {
             ApiResponse<List<ArxCeBusinessUnitDTO>> localVarResponse = ArxCeServicesManagementGetArxCeBusinessUnitsWithHttpInfo(credentials);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns business units configured in ArxCe 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of List&lt;ArxCeBusinessUnitDTO&gt;</returns>
        public ApiResponse< List<ArxCeBusinessUnitDTO> > ArxCeServicesManagementGetArxCeBusinessUnitsWithHttpInfo (ArxCeCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeBusinessUnits");

            var localVarPath = "/api/management/ArxCeServices/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetArxCeBusinessUnits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeBusinessUnitDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeBusinessUnitDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeBusinessUnitDTO>)));
        }

        /// <summary>
        /// This call returns business units configured in ArxCe 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of List&lt;ArxCeBusinessUnitDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArxCeBusinessUnitDTO>> ArxCeServicesManagementGetArxCeBusinessUnitsAsync (ArxCeCredentialsForRequestDTO credentials)
        {
             ApiResponse<List<ArxCeBusinessUnitDTO>> localVarResponse = await ArxCeServicesManagementGetArxCeBusinessUnitsAsyncWithHttpInfo(credentials);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns business units configured in ArxCe 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (List&lt;ArxCeBusinessUnitDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ArxCeBusinessUnitDTO>>> ArxCeServicesManagementGetArxCeBusinessUnitsAsyncWithHttpInfo (ArxCeCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeBusinessUnits");

            var localVarPath = "/api/management/ArxCeServices/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetArxCeBusinessUnits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeBusinessUnitDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeBusinessUnitDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeBusinessUnitDTO>)));
        }

        /// <summary>
        /// This call returns ArxCe configured credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: DocumentType </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="documentTypeId">Docuemnt type identifier (optional)</param>
        /// <returns>ArxCeCredentialsTreeDTO</returns>
        public ArxCeCredentialsTreeDTO ArxCeServicesManagementGetArxCeCredentials (int? context, string businessUnitCode = null, int? documentTypeId = null)
        {
             ApiResponse<ArxCeCredentialsTreeDTO> localVarResponse = ArxCeServicesManagementGetArxCeCredentialsWithHttpInfo(context, businessUnitCode, documentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns ArxCe configured credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: DocumentType </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="documentTypeId">Docuemnt type identifier (optional)</param>
        /// <returns>ApiResponse of ArxCeCredentialsTreeDTO</returns>
        public ApiResponse< ArxCeCredentialsTreeDTO > ArxCeServicesManagementGetArxCeCredentialsWithHttpInfo (int? context, string businessUnitCode = null, int? documentTypeId = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeCredentials");

            var localVarPath = "/api/management/ArxCeServices/Credentials/{context}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter
            if (documentTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetArxCeCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeCredentialsTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeCredentialsTreeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeCredentialsTreeDTO)));
        }

        /// <summary>
        /// This call returns ArxCe configured credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: DocumentType </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="documentTypeId">Docuemnt type identifier (optional)</param>
        /// <returns>Task of ArxCeCredentialsTreeDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeCredentialsTreeDTO> ArxCeServicesManagementGetArxCeCredentialsAsync (int? context, string businessUnitCode = null, int? documentTypeId = null)
        {
             ApiResponse<ArxCeCredentialsTreeDTO> localVarResponse = await ArxCeServicesManagementGetArxCeCredentialsAsyncWithHttpInfo(context, businessUnitCode, documentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns ArxCe configured credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Global  1: BusinessUnit  2: DocumentType </param>
        /// <param name="businessUnitCode">Business unit identifier (optional)</param>
        /// <param name="documentTypeId">Docuemnt type identifier (optional)</param>
        /// <returns>Task of ApiResponse (ArxCeCredentialsTreeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeCredentialsTreeDTO>> ArxCeServicesManagementGetArxCeCredentialsAsyncWithHttpInfo (int? context, string businessUnitCode = null, int? documentTypeId = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeCredentials");

            var localVarPath = "/api/management/ArxCeServices/Credentials/{context}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter
            if (documentTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetArxCeCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeCredentialsTreeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeCredentialsTreeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeCredentialsTreeDTO)));
        }

        /// <summary>
        /// This call returns ArxCe document type details 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="docTypeId">ArxCe document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ArxCeDocumentTypeDetailDTO</returns>
        public ArxCeDocumentTypeDetailDTO ArxCeServicesManagementGetArxCeDocumentTypeDetails (string businessUnitId, string docTypeId, ArxCeCredentialsForRequestDTO credentials)
        {
             ApiResponse<ArxCeDocumentTypeDetailDTO> localVarResponse = ArxCeServicesManagementGetArxCeDocumentTypeDetailsWithHttpInfo(businessUnitId, docTypeId, credentials);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns ArxCe document type details 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="docTypeId">ArxCe document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of ArxCeDocumentTypeDetailDTO</returns>
        public ApiResponse< ArxCeDocumentTypeDetailDTO > ArxCeServicesManagementGetArxCeDocumentTypeDetailsWithHttpInfo (string businessUnitId, string docTypeId, ArxCeCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'businessUnitId' is set
            if (businessUnitId == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitId' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeDocumentTypeDetails");
            // verify the required parameter 'docTypeId' is set
            if (docTypeId == null)
                throw new ApiException(400, "Missing required parameter 'docTypeId' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeDocumentTypeDetails");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeDocumentTypeDetails");

            var localVarPath = "/api/management/ArxCeServices/BusinessUnits/{businessUnitId}/DocumentTypes/{docTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitId != null) localVarPathParams.Add("businessUnitId", this.Configuration.ApiClient.ParameterToString(businessUnitId)); // path parameter
            if (docTypeId != null) localVarPathParams.Add("docTypeId", this.Configuration.ApiClient.ParameterToString(docTypeId)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetArxCeDocumentTypeDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeDocumentTypeDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeDocumentTypeDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeDocumentTypeDetailDTO)));
        }

        /// <summary>
        /// This call returns ArxCe document type details 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="docTypeId">ArxCe document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ArxCeDocumentTypeDetailDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeDocumentTypeDetailDTO> ArxCeServicesManagementGetArxCeDocumentTypeDetailsAsync (string businessUnitId, string docTypeId, ArxCeCredentialsForRequestDTO credentials)
        {
             ApiResponse<ArxCeDocumentTypeDetailDTO> localVarResponse = await ArxCeServicesManagementGetArxCeDocumentTypeDetailsAsyncWithHttpInfo(businessUnitId, docTypeId, credentials);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns ArxCe document type details 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="docTypeId">ArxCe document type identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (ArxCeDocumentTypeDetailDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeDocumentTypeDetailDTO>> ArxCeServicesManagementGetArxCeDocumentTypeDetailsAsyncWithHttpInfo (string businessUnitId, string docTypeId, ArxCeCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'businessUnitId' is set
            if (businessUnitId == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitId' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeDocumentTypeDetails");
            // verify the required parameter 'docTypeId' is set
            if (docTypeId == null)
                throw new ApiException(400, "Missing required parameter 'docTypeId' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeDocumentTypeDetails");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeDocumentTypeDetails");

            var localVarPath = "/api/management/ArxCeServices/BusinessUnits/{businessUnitId}/DocumentTypes/{docTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitId != null) localVarPathParams.Add("businessUnitId", this.Configuration.ApiClient.ParameterToString(businessUnitId)); // path parameter
            if (docTypeId != null) localVarPathParams.Add("docTypeId", this.Configuration.ApiClient.ParameterToString(docTypeId)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetArxCeDocumentTypeDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeDocumentTypeDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeDocumentTypeDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeDocumentTypeDetailDTO)));
        }

        /// <summary>
        /// This call returns document types configured in ArxCe 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>List&lt;ArxCeDocumentTypeDTO&gt;</returns>
        public List<ArxCeDocumentTypeDTO> ArxCeServicesManagementGetArxCeDocumentTypes (string businessUnitId, ArxCeCredentialsForRequestDTO credentials)
        {
             ApiResponse<List<ArxCeDocumentTypeDTO>> localVarResponse = ArxCeServicesManagementGetArxCeDocumentTypesWithHttpInfo(businessUnitId, credentials);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns document types configured in ArxCe 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>ApiResponse of List&lt;ArxCeDocumentTypeDTO&gt;</returns>
        public ApiResponse< List<ArxCeDocumentTypeDTO> > ArxCeServicesManagementGetArxCeDocumentTypesWithHttpInfo (string businessUnitId, ArxCeCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'businessUnitId' is set
            if (businessUnitId == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitId' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeDocumentTypes");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeDocumentTypes");

            var localVarPath = "/api/management/ArxCeServices/BusinessUnits/{businessUnitId}/DocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitId != null) localVarPathParams.Add("businessUnitId", this.Configuration.ApiClient.ParameterToString(businessUnitId)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetArxCeDocumentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeDocumentTypeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeDocumentTypeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeDocumentTypeDTO>)));
        }

        /// <summary>
        /// This call returns document types configured in ArxCe 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of List&lt;ArxCeDocumentTypeDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArxCeDocumentTypeDTO>> ArxCeServicesManagementGetArxCeDocumentTypesAsync (string businessUnitId, ArxCeCredentialsForRequestDTO credentials)
        {
             ApiResponse<List<ArxCeDocumentTypeDTO>> localVarResponse = await ArxCeServicesManagementGetArxCeDocumentTypesAsyncWithHttpInfo(businessUnitId, credentials);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns document types configured in ArxCe 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitId">ArxCe business unit identifier</param>
        /// <param name="credentials">Credentials</param>
        /// <returns>Task of ApiResponse (List&lt;ArxCeDocumentTypeDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ArxCeDocumentTypeDTO>>> ArxCeServicesManagementGetArxCeDocumentTypesAsyncWithHttpInfo (string businessUnitId, ArxCeCredentialsForRequestDTO credentials)
        {
            // verify the required parameter 'businessUnitId' is set
            if (businessUnitId == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitId' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeDocumentTypes");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetArxCeDocumentTypes");

            var localVarPath = "/api/management/ArxCeServices/BusinessUnits/{businessUnitId}/DocumentTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitId != null) localVarPathParams.Add("businessUnitId", this.Configuration.ApiClient.ParameterToString(businessUnitId)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetArxCeDocumentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeDocumentTypeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeDocumentTypeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeDocumentTypeDTO>)));
        }

        /// <summary>
        /// This call returns ArxCe notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ArxCeNotificationDTO&gt;</returns>
        public List<ArxCeNotificationDTO> ArxCeServicesManagementGetArxCeNotifications ()
        {
             ApiResponse<List<ArxCeNotificationDTO>> localVarResponse = ArxCeServicesManagementGetArxCeNotificationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns ArxCe notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ArxCeNotificationDTO&gt;</returns>
        public ApiResponse< List<ArxCeNotificationDTO> > ArxCeServicesManagementGetArxCeNotificationsWithHttpInfo ()
        {

            var localVarPath = "/api/management/ArxCeServices/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetArxCeNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeNotificationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeNotificationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeNotificationDTO>)));
        }

        /// <summary>
        /// This call returns ArxCe notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ArxCeNotificationDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArxCeNotificationDTO>> ArxCeServicesManagementGetArxCeNotificationsAsync ()
        {
             ApiResponse<List<ArxCeNotificationDTO>> localVarResponse = await ArxCeServicesManagementGetArxCeNotificationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns ArxCe notification types 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ArxCeNotificationDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ArxCeNotificationDTO>>> ArxCeServicesManagementGetArxCeNotificationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/ArxCeServices/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetArxCeNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeNotificationDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeNotificationDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeNotificationDTO>)));
        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ArxCeBusinessUnitSettingsDTO</returns>
        public ArxCeBusinessUnitSettingsDTO ArxCeServicesManagementGetBusinessUnitSettingsById (int? id)
        {
             ApiResponse<ArxCeBusinessUnitSettingsDTO> localVarResponse = ArxCeServicesManagementGetBusinessUnitSettingsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>ApiResponse of ArxCeBusinessUnitSettingsDTO</returns>
        public ApiResponse< ArxCeBusinessUnitSettingsDTO > ArxCeServicesManagementGetBusinessUnitSettingsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetBusinessUnitSettingsById");

            var localVarPath = "/api/management/ArxCeServices/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetBusinessUnitSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ArxCeBusinessUnitSettingsDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeBusinessUnitSettingsDTO> ArxCeServicesManagementGetBusinessUnitSettingsByIdAsync (int? id)
        {
             ApiResponse<ArxCeBusinessUnitSettingsDTO> localVarResponse = await ArxCeServicesManagementGetBusinessUnitSettingsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <returns>Task of ApiResponse (ArxCeBusinessUnitSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeBusinessUnitSettingsDTO>> ArxCeServicesManagementGetBusinessUnitSettingsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetBusinessUnitSettingsById");

            var localVarPath = "/api/management/ArxCeServices/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetBusinessUnitSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ArxCeBusinessUnitSettingsDTO&gt;</returns>
        public List<ArxCeBusinessUnitSettingsDTO> ArxCeServicesManagementGetBusinessUnitsSettings ()
        {
             ApiResponse<List<ArxCeBusinessUnitSettingsDTO>> localVarResponse = ArxCeServicesManagementGetBusinessUnitsSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ArxCeBusinessUnitSettingsDTO&gt;</returns>
        public ApiResponse< List<ArxCeBusinessUnitSettingsDTO> > ArxCeServicesManagementGetBusinessUnitsSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/management/ArxCeServices/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetBusinessUnitsSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeBusinessUnitSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeBusinessUnitSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeBusinessUnitSettingsDTO>)));
        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ArxCeBusinessUnitSettingsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArxCeBusinessUnitSettingsDTO>> ArxCeServicesManagementGetBusinessUnitsSettingsAsync ()
        {
             ApiResponse<List<ArxCeBusinessUnitSettingsDTO>> localVarResponse = await ArxCeServicesManagementGetBusinessUnitsSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets business unit configured settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ArxCeBusinessUnitSettingsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ArxCeBusinessUnitSettingsDTO>>> ArxCeServicesManagementGetBusinessUnitsSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/ArxCeServices/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetBusinessUnitsSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeBusinessUnitSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeBusinessUnitSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeBusinessUnitSettingsDTO>)));
        }

        /// <summary>
        /// This call gets all notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ArxCeNotificationSettingsDTO&gt;</returns>
        public List<ArxCeNotificationSettingsDTO> ArxCeServicesManagementGetNotificationSettings ()
        {
             ApiResponse<List<ArxCeNotificationSettingsDTO>> localVarResponse = ArxCeServicesManagementGetNotificationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets all notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ArxCeNotificationSettingsDTO&gt;</returns>
        public ApiResponse< List<ArxCeNotificationSettingsDTO> > ArxCeServicesManagementGetNotificationSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/management/ArxCeServices/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeNotificationSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeNotificationSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeNotificationSettingsDTO>)));
        }

        /// <summary>
        /// This call gets all notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ArxCeNotificationSettingsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArxCeNotificationSettingsDTO>> ArxCeServicesManagementGetNotificationSettingsAsync ()
        {
             ApiResponse<List<ArxCeNotificationSettingsDTO>> localVarResponse = await ArxCeServicesManagementGetNotificationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets all notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ArxCeNotificationSettingsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ArxCeNotificationSettingsDTO>>> ArxCeServicesManagementGetNotificationSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/management/ArxCeServices/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeNotificationSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeNotificationSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeNotificationSettingsDTO>)));
        }

        /// <summary>
        /// This call gets specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ArxCeNotificationSettingsDTO</returns>
        public ArxCeNotificationSettingsDTO ArxCeServicesManagementGetNotificationSettingsById (int? id)
        {
             ApiResponse<ArxCeNotificationSettingsDTO> localVarResponse = ArxCeServicesManagementGetNotificationSettingsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>ApiResponse of ArxCeNotificationSettingsDTO</returns>
        public ApiResponse< ArxCeNotificationSettingsDTO > ArxCeServicesManagementGetNotificationSettingsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetNotificationSettingsById");

            var localVarPath = "/api/management/ArxCeServices/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetNotificationSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ArxCeNotificationSettingsDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeNotificationSettingsDTO> ArxCeServicesManagementGetNotificationSettingsByIdAsync (int? id)
        {
             ApiResponse<ArxCeNotificationSettingsDTO> localVarResponse = await ArxCeServicesManagementGetNotificationSettingsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <returns>Task of ApiResponse (ArxCeNotificationSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeNotificationSettingsDTO>> ArxCeServicesManagementGetNotificationSettingsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetNotificationSettingsById");

            var localVarPath = "/api/management/ArxCeServices/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetNotificationSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call gets all sending settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>List&lt;ArxCeSendingSettingsDTO&gt;</returns>
        public List<ArxCeSendingSettingsDTO> ArxCeServicesManagementGetSendingSettings (string businessUnitCode)
        {
             ApiResponse<List<ArxCeSendingSettingsDTO>> localVarResponse = ArxCeServicesManagementGetSendingSettingsWithHttpInfo(businessUnitCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets all sending settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>ApiResponse of List&lt;ArxCeSendingSettingsDTO&gt;</returns>
        public ApiResponse< List<ArxCeSendingSettingsDTO> > ArxCeServicesManagementGetSendingSettingsWithHttpInfo (string businessUnitCode)
        {
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetSendingSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeSendingSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeSendingSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeSendingSettingsDTO>)));
        }

        /// <summary>
        /// This call gets all sending settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of List&lt;ArxCeSendingSettingsDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArxCeSendingSettingsDTO>> ArxCeServicesManagementGetSendingSettingsAsync (string businessUnitCode)
        {
             ApiResponse<List<ArxCeSendingSettingsDTO>> localVarResponse = await ArxCeServicesManagementGetSendingSettingsAsyncWithHttpInfo(businessUnitCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets all sending settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitCode">Business Unit code</param>
        /// <returns>Task of ApiResponse (List&lt;ArxCeSendingSettingsDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ArxCeSendingSettingsDTO>>> ArxCeServicesManagementGetSendingSettingsAsyncWithHttpInfo (string businessUnitCode)
        {
            // verify the required parameter 'businessUnitCode' is set
            if (businessUnitCode == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitCode' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetSendingSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessUnitCode", businessUnitCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArxCeSendingSettingsDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ArxCeSendingSettingsDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArxCeSendingSettingsDTO>)));
        }

        /// <summary>
        /// This call gets specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ArxCeSendingSettingsDTO</returns>
        public ArxCeSendingSettingsDTO ArxCeServicesManagementGetSendingSettingsById (int? id)
        {
             ApiResponse<ArxCeSendingSettingsDTO> localVarResponse = ArxCeServicesManagementGetSendingSettingsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of ArxCeSendingSettingsDTO</returns>
        public ApiResponse< ArxCeSendingSettingsDTO > ArxCeServicesManagementGetSendingSettingsByIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetSendingSettingsById");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetSendingSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ArxCeSendingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeSendingSettingsDTO> ArxCeServicesManagementGetSendingSettingsByIdAsync (int? id)
        {
             ApiResponse<ArxCeSendingSettingsDTO> localVarResponse = await ArxCeServicesManagementGetSendingSettingsByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse (ArxCeSendingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeSendingSettingsDTO>> ArxCeServicesManagementGetSendingSettingsByIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetSendingSettingsById");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetSendingSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call gets specific settings details for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ArxCeSendingSettingsDetailDTO</returns>
        public ArxCeSendingSettingsDetailDTO ArxCeServicesManagementGetSendingSettingsDetails (int? id)
        {
             ApiResponse<ArxCeSendingSettingsDetailDTO> localVarResponse = ArxCeServicesManagementGetSendingSettingsDetailsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets specific settings details for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>ApiResponse of ArxCeSendingSettingsDetailDTO</returns>
        public ApiResponse< ArxCeSendingSettingsDetailDTO > ArxCeServicesManagementGetSendingSettingsDetailsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetSendingSettingsDetails");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending/{id}/Details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetSendingSettingsDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeSendingSettingsDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeSendingSettingsDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeSendingSettingsDetailDTO)));
        }

        /// <summary>
        /// This call gets specific settings details for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ArxCeSendingSettingsDetailDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeSendingSettingsDetailDTO> ArxCeServicesManagementGetSendingSettingsDetailsAsync (int? id)
        {
             ApiResponse<ArxCeSendingSettingsDetailDTO> localVarResponse = await ArxCeServicesManagementGetSendingSettingsDetailsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets specific settings details for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <returns>Task of ApiResponse (ArxCeSendingSettingsDetailDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeSendingSettingsDetailDTO>> ArxCeServicesManagementGetSendingSettingsDetailsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementGetSendingSettingsDetails");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending/{id}/Details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementGetSendingSettingsDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeSendingSettingsDetailDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeSendingSettingsDetailDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeSendingSettingsDetailDTO)));
        }

        /// <summary>
        /// This call inserts ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns></returns>
        public void ArxCeServicesManagementInsertArxCeCredentials (ArxCeCredentialsDTO credentials)
        {
             ArxCeServicesManagementInsertArxCeCredentialsWithHttpInfo(credentials);
        }

        /// <summary>
        /// This call inserts ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArxCeServicesManagementInsertArxCeCredentialsWithHttpInfo (ArxCeCredentialsDTO credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementInsertArxCeCredentials");

            var localVarPath = "/api/management/ArxCeServices/Credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementInsertArxCeCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArxCeServicesManagementInsertArxCeCredentialsAsync (ArxCeCredentialsDTO credentials)
        {
             await ArxCeServicesManagementInsertArxCeCredentialsAsyncWithHttpInfo(credentials);

        }

        /// <summary>
        /// This call inserts ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Credentials for insert</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementInsertArxCeCredentialsAsyncWithHttpInfo (ArxCeCredentialsDTO credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementInsertArxCeCredentials");

            var localVarPath = "/api/management/ArxCeServices/Credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementInsertArxCeCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>ArxCeBusinessUnitSettingsDTO</returns>
        public ArxCeBusinessUnitSettingsDTO ArxCeServicesManagementInsertBusinessUnitSettings (ArxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<ArxCeBusinessUnitSettingsDTO> localVarResponse = ArxCeServicesManagementInsertBusinessUnitSettingsWithHttpInfo(businessUnitSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>ApiResponse of ArxCeBusinessUnitSettingsDTO</returns>
        public ApiResponse< ArxCeBusinessUnitSettingsDTO > ArxCeServicesManagementInsertBusinessUnitSettingsWithHttpInfo (ArxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementInsertBusinessUnitSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementInsertBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of ArxCeBusinessUnitSettingsDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeBusinessUnitSettingsDTO> ArxCeServicesManagementInsertBusinessUnitSettingsAsync (ArxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<ArxCeBusinessUnitSettingsDTO> localVarResponse = await ArxCeServicesManagementInsertBusinessUnitSettingsAsyncWithHttpInfo(businessUnitSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessUnitSettings">Business unit settings for insert</param>
        /// <returns>Task of ApiResponse (ArxCeBusinessUnitSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeBusinessUnitSettingsDTO>> ArxCeServicesManagementInsertBusinessUnitSettingsAsyncWithHttpInfo (ArxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementInsertBusinessUnitSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/BusinessUnits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementInsertBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>ArxCeNotificationSettingsDTO</returns>
        public ArxCeNotificationSettingsDTO ArxCeServicesManagementInsertNotificationSettings (ArxCeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<ArxCeNotificationSettingsDTO> localVarResponse = ArxCeServicesManagementInsertNotificationSettingsWithHttpInfo(notificationSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>ApiResponse of ArxCeNotificationSettingsDTO</returns>
        public ApiResponse< ArxCeNotificationSettingsDTO > ArxCeServicesManagementInsertNotificationSettingsWithHttpInfo (ArxCeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementInsertNotificationSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementInsertNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of ArxCeNotificationSettingsDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeNotificationSettingsDTO> ArxCeServicesManagementInsertNotificationSettingsAsync (ArxCeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<ArxCeNotificationSettingsDTO> localVarResponse = await ArxCeServicesManagementInsertNotificationSettingsAsyncWithHttpInfo(notificationSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettings">Notification settings for insert</param>
        /// <returns>Task of ApiResponse (ArxCeNotificationSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeNotificationSettingsDTO>> ArxCeServicesManagementInsertNotificationSettingsAsyncWithHttpInfo (ArxCeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementInsertNotificationSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementInsertNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>ArxCeSendingSettingsDTO</returns>
        public ArxCeSendingSettingsDTO ArxCeServicesManagementInsertSendingSettings (ArxCeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<ArxCeSendingSettingsDTO> localVarResponse = ArxCeServicesManagementInsertSendingSettingsWithHttpInfo(sendingSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>ApiResponse of ArxCeSendingSettingsDTO</returns>
        public ApiResponse< ArxCeSendingSettingsDTO > ArxCeServicesManagementInsertSendingSettingsWithHttpInfo (ArxCeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementInsertSendingSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementInsertSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of ArxCeSendingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeSendingSettingsDTO> ArxCeServicesManagementInsertSendingSettingsAsync (ArxCeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<ArxCeSendingSettingsDTO> localVarResponse = await ArxCeServicesManagementInsertSendingSettingsAsyncWithHttpInfo(sendingSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendingSettings">Sending settings for insert</param>
        /// <returns>Task of ApiResponse (ArxCeSendingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeSendingSettingsDTO>> ArxCeServicesManagementInsertSendingSettingsAsyncWithHttpInfo (ArxCeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementInsertSendingSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementInsertSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call inserts specific settings details for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns></returns>
        public void ArxCeServicesManagementSetSendingSettingsDetails (int? id, ArxCeSendingSettingsDetailDTO sendingSettingsDetails)
        {
             ArxCeServicesManagementSetSendingSettingsDetailsWithHttpInfo(id, sendingSettingsDetails);
        }

        /// <summary>
        /// This call inserts specific settings details for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArxCeServicesManagementSetSendingSettingsDetailsWithHttpInfo (int? id, ArxCeSendingSettingsDetailDTO sendingSettingsDetails)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementSetSendingSettingsDetails");
            // verify the required parameter 'sendingSettingsDetails' is set
            if (sendingSettingsDetails == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettingsDetails' when calling ArxCeServicesManagementApi->ArxCeServicesManagementSetSendingSettingsDetails");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending/{id}/Details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendingSettingsDetails != null && sendingSettingsDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettingsDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettingsDetails; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementSetSendingSettingsDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts specific settings details for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArxCeServicesManagementSetSendingSettingsDetailsAsync (int? id, ArxCeSendingSettingsDetailDTO sendingSettingsDetails)
        {
             await ArxCeServicesManagementSetSendingSettingsDetailsAsyncWithHttpInfo(id, sendingSettingsDetails);

        }

        /// <summary>
        /// This call inserts specific settings details for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettingsDetails">Sending settings details for insert or update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementSetSendingSettingsDetailsAsyncWithHttpInfo (int? id, ArxCeSendingSettingsDetailDTO sendingSettingsDetails)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementSetSendingSettingsDetails");
            // verify the required parameter 'sendingSettingsDetails' is set
            if (sendingSettingsDetails == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettingsDetails' when calling ArxCeServicesManagementApi->ArxCeServicesManagementSetSendingSettingsDetails");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending/{id}/Details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendingSettingsDetails != null && sendingSettingsDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettingsDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettingsDetails; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementSetSendingSettingsDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns></returns>
        public void ArxCeServicesManagementUpdateArxCeCredentials (int? id, ArxCeCredentialsDTO credentials)
        {
             ArxCeServicesManagementUpdateArxCeCredentialsWithHttpInfo(id, credentials);
        }

        /// <summary>
        /// This call updates ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArxCeServicesManagementUpdateArxCeCredentialsWithHttpInfo (int? id, ArxCeCredentialsDTO credentials)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateArxCeCredentials");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateArxCeCredentials");

            var localVarPath = "/api/management/ArxCeServices/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementUpdateArxCeCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArxCeServicesManagementUpdateArxCeCredentialsAsync (int? id, ArxCeCredentialsDTO credentials)
        {
             await ArxCeServicesManagementUpdateArxCeCredentialsAsyncWithHttpInfo(id, credentials);

        }

        /// <summary>
        /// This call updates ArxCe credentials 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credentials identifier</param>
        /// <param name="credentials">Credentials for update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArxCeServicesManagementUpdateArxCeCredentialsAsyncWithHttpInfo (int? id, ArxCeCredentialsDTO credentials)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateArxCeCredentials");
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateArxCeCredentials");

            var localVarPath = "/api/management/ArxCeServices/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementUpdateArxCeCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>ArxCeBusinessUnitSettingsDTO</returns>
        public ArxCeBusinessUnitSettingsDTO ArxCeServicesManagementUpdateBusinessUnitSettings (int? id, ArxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<ArxCeBusinessUnitSettingsDTO> localVarResponse = ArxCeServicesManagementUpdateBusinessUnitSettingsWithHttpInfo(id, businessUnitSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>ApiResponse of ArxCeBusinessUnitSettingsDTO</returns>
        public ApiResponse< ArxCeBusinessUnitSettingsDTO > ArxCeServicesManagementUpdateBusinessUnitSettingsWithHttpInfo (int? id, ArxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateBusinessUnitSettings");
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateBusinessUnitSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementUpdateBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of ArxCeBusinessUnitSettingsDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeBusinessUnitSettingsDTO> ArxCeServicesManagementUpdateBusinessUnitSettingsAsync (int? id, ArxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
             ApiResponse<ArxCeBusinessUnitSettingsDTO> localVarResponse = await ArxCeServicesManagementUpdateBusinessUnitSettingsAsyncWithHttpInfo(id, businessUnitSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates business unit settings 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Business unit settings identifier</param>
        /// <param name="businessUnitSettings">Business unit settings for update</param>
        /// <returns>Task of ApiResponse (ArxCeBusinessUnitSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeBusinessUnitSettingsDTO>> ArxCeServicesManagementUpdateBusinessUnitSettingsAsyncWithHttpInfo (int? id, ArxCeBusinessUnitSettingsDTO businessUnitSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateBusinessUnitSettings");
            // verify the required parameter 'businessUnitSettings' is set
            if (businessUnitSettings == null)
                throw new ApiException(400, "Missing required parameter 'businessUnitSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateBusinessUnitSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/BusinessUnits/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (businessUnitSettings != null && businessUnitSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessUnitSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessUnitSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementUpdateBusinessUnitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeBusinessUnitSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeBusinessUnitSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeBusinessUnitSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>ArxCeNotificationSettingsDTO</returns>
        public ArxCeNotificationSettingsDTO ArxCeServicesManagementUpdateNotificationSettings (int? id, ArxCeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<ArxCeNotificationSettingsDTO> localVarResponse = ArxCeServicesManagementUpdateNotificationSettingsWithHttpInfo(id, notificationSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>ApiResponse of ArxCeNotificationSettingsDTO</returns>
        public ApiResponse< ArxCeNotificationSettingsDTO > ArxCeServicesManagementUpdateNotificationSettingsWithHttpInfo (int? id, ArxCeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateNotificationSettings");
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateNotificationSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementUpdateNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of ArxCeNotificationSettingsDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeNotificationSettingsDTO> ArxCeServicesManagementUpdateNotificationSettingsAsync (int? id, ArxCeNotificationSettingsDTO notificationSettings)
        {
             ApiResponse<ArxCeNotificationSettingsDTO> localVarResponse = await ArxCeServicesManagementUpdateNotificationSettingsAsyncWithHttpInfo(id, notificationSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates specific notification settings for ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Notification settings identifier</param>
        /// <param name="notificationSettings">Notification settings for update</param>
        /// <returns>Task of ApiResponse (ArxCeNotificationSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeNotificationSettingsDTO>> ArxCeServicesManagementUpdateNotificationSettingsAsyncWithHttpInfo (int? id, ArxCeNotificationSettingsDTO notificationSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateNotificationSettings");
            // verify the required parameter 'notificationSettings' is set
            if (notificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateNotificationSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (notificationSettings != null && notificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementUpdateNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeNotificationSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeNotificationSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeNotificationSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>ArxCeSendingSettingsDTO</returns>
        public ArxCeSendingSettingsDTO ArxCeServicesManagementUpdateSendingSettings (int? id, ArxCeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<ArxCeSendingSettingsDTO> localVarResponse = ArxCeServicesManagementUpdateSendingSettingsWithHttpInfo(id, sendingSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>ApiResponse of ArxCeSendingSettingsDTO</returns>
        public ApiResponse< ArxCeSendingSettingsDTO > ArxCeServicesManagementUpdateSendingSettingsWithHttpInfo (int? id, ArxCeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateSendingSettings");
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateSendingSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementUpdateSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeSendingSettingsDTO)));
        }

        /// <summary>
        /// This call updates specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of ArxCeSendingSettingsDTO</returns>
        public async System.Threading.Tasks.Task<ArxCeSendingSettingsDTO> ArxCeServicesManagementUpdateSendingSettingsAsync (int? id, ArxCeSendingSettingsDTO sendingSettings)
        {
             ApiResponse<ArxCeSendingSettingsDTO> localVarResponse = await ArxCeServicesManagementUpdateSendingSettingsAsyncWithHttpInfo(id, sendingSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates specific settings for sending docs to ARX-CE 
        /// </summary>
        /// <exception cref="ACUtils.AXRepository.ArxivarNextManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Sending settings identifier</param>
        /// <param name="sendingSettings">Sending settings for update</param>
        /// <returns>Task of ApiResponse (ArxCeSendingSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArxCeSendingSettingsDTO>> ArxCeServicesManagementUpdateSendingSettingsAsyncWithHttpInfo (int? id, ArxCeSendingSettingsDTO sendingSettings)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateSendingSettings");
            // verify the required parameter 'sendingSettings' is set
            if (sendingSettings == null)
                throw new ApiException(400, "Missing required parameter 'sendingSettings' when calling ArxCeServicesManagementApi->ArxCeServicesManagementUpdateSendingSettings");

            var localVarPath = "/api/management/ArxCeServices/Settings/Sending/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendingSettings != null && sendingSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendingSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendingSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArxCeServicesManagementUpdateSendingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArxCeSendingSettingsDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArxCeSendingSettingsDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArxCeSendingSettingsDTO)));
        }

    }
}
