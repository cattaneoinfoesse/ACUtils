/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of clone destination options for IX-CE
    /// </summary>
    [DataContract]
    public partial class IxCeCloneDestinationOptionsDTO :  IEquatable<IxCeCloneDestinationOptionsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IxCeCloneDestinationOptionsDTO" /> class.
        /// </summary>
        /// <param name="ruleId">Document Type identifier.</param>
        /// <param name="businessUnitCode">Arxivar Business unit.</param>
        /// <param name="ixBusinessUnitUoCode">IX Business units UO.</param>
        public IxCeCloneDestinationOptionsDTO(int? ruleId = default(int?), string businessUnitCode = default(string), string ixBusinessUnitUoCode = default(string))
        {
            this.RuleId = ruleId;
            this.BusinessUnitCode = businessUnitCode;
            this.IxBusinessUnitUoCode = ixBusinessUnitUoCode;
        }
        
        /// <summary>
        /// Document Type identifier
        /// </summary>
        /// <value>Document Type identifier</value>
        [DataMember(Name="ruleId", EmitDefaultValue=false)]
        public int? RuleId { get; set; }

        /// <summary>
        /// Arxivar Business unit
        /// </summary>
        /// <value>Arxivar Business unit</value>
        [DataMember(Name="businessUnitCode", EmitDefaultValue=false)]
        public string BusinessUnitCode { get; set; }

        /// <summary>
        /// IX Business units UO
        /// </summary>
        /// <value>IX Business units UO</value>
        [DataMember(Name="ixBusinessUnitUoCode", EmitDefaultValue=false)]
        public string IxBusinessUnitUoCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IxCeCloneDestinationOptionsDTO {\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  BusinessUnitCode: ").Append(BusinessUnitCode).Append("\n");
            sb.Append("  IxBusinessUnitUoCode: ").Append(IxBusinessUnitUoCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IxCeCloneDestinationOptionsDTO);
        }

        /// <summary>
        /// Returns true if IxCeCloneDestinationOptionsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of IxCeCloneDestinationOptionsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IxCeCloneDestinationOptionsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.BusinessUnitCode == input.BusinessUnitCode ||
                    (this.BusinessUnitCode != null &&
                    this.BusinessUnitCode.Equals(input.BusinessUnitCode))
                ) && 
                (
                    this.IxBusinessUnitUoCode == input.IxBusinessUnitUoCode ||
                    (this.IxBusinessUnitUoCode != null &&
                    this.IxBusinessUnitUoCode.Equals(input.IxBusinessUnitUoCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleId != null)
                    hashCode = hashCode * 59 + this.RuleId.GetHashCode();
                if (this.BusinessUnitCode != null)
                    hashCode = hashCode * 59 + this.BusinessUnitCode.GetHashCode();
                if (this.IxBusinessUnitUoCode != null)
                    hashCode = hashCode * 59 + this.IxBusinessUnitUoCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
