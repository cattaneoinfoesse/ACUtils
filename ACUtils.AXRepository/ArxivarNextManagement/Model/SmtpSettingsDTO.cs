/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// The SMTP settings information
    /// </summary>
    [DataContract]
    public partial class SmtpSettingsDTO :  IEquatable<SmtpSettingsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmtpSettingsDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmtpSettingsDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SmtpSettingsDTO" /> class.
        /// </summary>
        /// <param name="authenticationMode">Possible values:  0: Basic  1: Microsoft  2: Google .</param>
        /// <param name="tenantId">The tenant ID.</param>
        /// <param name="clientId">The client ID.</param>
        /// <param name="clientSecret">The client Secret.</param>
        /// <param name="isClientSecretSet">Gets or sets whether the client secret is set.</param>
        /// <param name="isAuthorizationResponseSet">Gets or sets whether the authorization response is set.</param>
        /// <param name="authorizationResponse">The authorization response.</param>
        /// <param name="server">Server address (required).</param>
        /// <param name="accountName">Account name (required).</param>
        /// <param name="password">Password.</param>
        /// <param name="isPasswordSet">Whether the password is already set.</param>
        /// <param name="port">Password (required).</param>
        /// <param name="anonymousAccess">Whether the anonymous access is enabled.</param>
        /// <param name="securityProtocol">Possible values:  0: None  1: TLS  2: SSL .</param>
        /// <param name="autoConfigOnPort">Whether the AutoConfig on port is enabled.</param>
        /// <param name="downloadEmailsEvery">The number of minutes after which download emails.</param>
        /// <param name="sendEmailsEvery">The number of minutes after which send emails.</param>
        /// <param name="isFolderMonitoringEnabled">Whether the forlder monitoring is enabled.</param>
        /// <param name="checkFolderEvery">The number of seconds after which check the monitored folders.</param>
        /// <param name="checkFileGrowingEvery">The number of seconds after which check whether the files grow.</param>
        /// <param name="emlHeaderKey">The key of the EML header from which retrieve the author.</param>
        /// <param name="authorMatching">Possible values:  0: UseAdmin  1: MoveToNoAuthorFolder  -1: None .</param>
        /// <param name="monitoredFolders">The list of monitored folders configured.</param>
        /// <param name="onImportOperationDone">The action to perform on operation done.</param>
        /// <param name="mailDefaultsInfo">The Mail&#39;s defaults.</param>
        public SmtpSettingsDTO(int? authenticationMode = default(int?), string tenantId = default(string), string clientId = default(string), string clientSecret = default(string), bool? isClientSecretSet = default(bool?), bool? isAuthorizationResponseSet = default(bool?), string authorizationResponse = default(string), string server = default(string), string accountName = default(string), string password = default(string), bool? isPasswordSet = default(bool?), int? port = default(int?), bool? anonymousAccess = default(bool?), int? securityProtocol = default(int?), bool? autoConfigOnPort = default(bool?), int? downloadEmailsEvery = default(int?), int? sendEmailsEvery = default(int?), bool? isFolderMonitoringEnabled = default(bool?), int? checkFolderEvery = default(int?), int? checkFileGrowingEvery = default(int?), string emlHeaderKey = default(string), int? authorMatching = default(int?), List<SmtpSettingsMonitoredFolderDTO> monitoredFolders = default(List<SmtpSettingsMonitoredFolderDTO>), SmtpSettingsOnOperationDoneDTO onImportOperationDone = default(SmtpSettingsOnOperationDoneDTO), MailDefaultsInfoDTO mailDefaultsInfo = default(MailDefaultsInfoDTO))
        {
            // to ensure "server" is required (not null)
            if (server == null)
            {
                throw new InvalidDataException("server is a required property for SmtpSettingsDTO and cannot be null");
            }
            else
            {
                this.Server = server;
            }
            // to ensure "accountName" is required (not null)
            if (accountName == null)
            {
                throw new InvalidDataException("accountName is a required property for SmtpSettingsDTO and cannot be null");
            }
            else
            {
                this.AccountName = accountName;
            }
            // to ensure "port" is required (not null)
            if (port == null)
            {
                throw new InvalidDataException("port is a required property for SmtpSettingsDTO and cannot be null");
            }
            else
            {
                this.Port = port;
            }
            this.AuthenticationMode = authenticationMode;
            this.TenantId = tenantId;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.IsClientSecretSet = isClientSecretSet;
            this.IsAuthorizationResponseSet = isAuthorizationResponseSet;
            this.AuthorizationResponse = authorizationResponse;
            this.Password = password;
            this.IsPasswordSet = isPasswordSet;
            this.AnonymousAccess = anonymousAccess;
            this.SecurityProtocol = securityProtocol;
            this.AutoConfigOnPort = autoConfigOnPort;
            this.DownloadEmailsEvery = downloadEmailsEvery;
            this.SendEmailsEvery = sendEmailsEvery;
            this.IsFolderMonitoringEnabled = isFolderMonitoringEnabled;
            this.CheckFolderEvery = checkFolderEvery;
            this.CheckFileGrowingEvery = checkFileGrowingEvery;
            this.EmlHeaderKey = emlHeaderKey;
            this.AuthorMatching = authorMatching;
            this.MonitoredFolders = monitoredFolders;
            this.OnImportOperationDone = onImportOperationDone;
            this.MailDefaultsInfo = mailDefaultsInfo;
        }
        
        /// <summary>
        /// Possible values:  0: Basic  1: Microsoft  2: Google 
        /// </summary>
        /// <value>Possible values:  0: Basic  1: Microsoft  2: Google </value>
        [DataMember(Name="authenticationMode", EmitDefaultValue=false)]
        public int? AuthenticationMode { get; set; }

        /// <summary>
        /// The tenant ID
        /// </summary>
        /// <value>The tenant ID</value>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public string TenantId { get; set; }

        /// <summary>
        /// The client ID
        /// </summary>
        /// <value>The client ID</value>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// The client Secret
        /// </summary>
        /// <value>The client Secret</value>
        [DataMember(Name="clientSecret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Gets or sets whether the client secret is set
        /// </summary>
        /// <value>Gets or sets whether the client secret is set</value>
        [DataMember(Name="isClientSecretSet", EmitDefaultValue=false)]
        public bool? IsClientSecretSet { get; set; }

        /// <summary>
        /// Gets or sets whether the authorization response is set
        /// </summary>
        /// <value>Gets or sets whether the authorization response is set</value>
        [DataMember(Name="isAuthorizationResponseSet", EmitDefaultValue=false)]
        public bool? IsAuthorizationResponseSet { get; set; }

        /// <summary>
        /// The authorization response
        /// </summary>
        /// <value>The authorization response</value>
        [DataMember(Name="authorizationResponse", EmitDefaultValue=false)]
        public string AuthorizationResponse { get; set; }

        /// <summary>
        /// Server address
        /// </summary>
        /// <value>Server address</value>
        [DataMember(Name="server", EmitDefaultValue=false)]
        public string Server { get; set; }

        /// <summary>
        /// Account name
        /// </summary>
        /// <value>Account name</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Whether the password is already set
        /// </summary>
        /// <value>Whether the password is already set</value>
        [DataMember(Name="isPasswordSet", EmitDefaultValue=false)]
        public bool? IsPasswordSet { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// Whether the anonymous access is enabled
        /// </summary>
        /// <value>Whether the anonymous access is enabled</value>
        [DataMember(Name="anonymousAccess", EmitDefaultValue=false)]
        public bool? AnonymousAccess { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: TLS  2: SSL 
        /// </summary>
        /// <value>Possible values:  0: None  1: TLS  2: SSL </value>
        [DataMember(Name="securityProtocol", EmitDefaultValue=false)]
        public int? SecurityProtocol { get; set; }

        /// <summary>
        /// Whether the AutoConfig on port is enabled
        /// </summary>
        /// <value>Whether the AutoConfig on port is enabled</value>
        [DataMember(Name="autoConfigOnPort", EmitDefaultValue=false)]
        public bool? AutoConfigOnPort { get; set; }

        /// <summary>
        /// The number of minutes after which download emails
        /// </summary>
        /// <value>The number of minutes after which download emails</value>
        [DataMember(Name="downloadEmailsEvery", EmitDefaultValue=false)]
        public int? DownloadEmailsEvery { get; set; }

        /// <summary>
        /// The number of minutes after which send emails
        /// </summary>
        /// <value>The number of minutes after which send emails</value>
        [DataMember(Name="sendEmailsEvery", EmitDefaultValue=false)]
        public int? SendEmailsEvery { get; set; }

        /// <summary>
        /// Whether the forlder monitoring is enabled
        /// </summary>
        /// <value>Whether the forlder monitoring is enabled</value>
        [DataMember(Name="isFolderMonitoringEnabled", EmitDefaultValue=false)]
        public bool? IsFolderMonitoringEnabled { get; set; }

        /// <summary>
        /// The number of seconds after which check the monitored folders
        /// </summary>
        /// <value>The number of seconds after which check the monitored folders</value>
        [DataMember(Name="checkFolderEvery", EmitDefaultValue=false)]
        public int? CheckFolderEvery { get; set; }

        /// <summary>
        /// The number of seconds after which check whether the files grow
        /// </summary>
        /// <value>The number of seconds after which check whether the files grow</value>
        [DataMember(Name="checkFileGrowingEvery", EmitDefaultValue=false)]
        public int? CheckFileGrowingEvery { get; set; }

        /// <summary>
        /// The key of the EML header from which retrieve the author
        /// </summary>
        /// <value>The key of the EML header from which retrieve the author</value>
        [DataMember(Name="emlHeaderKey", EmitDefaultValue=false)]
        public string EmlHeaderKey { get; set; }

        /// <summary>
        /// Possible values:  0: UseAdmin  1: MoveToNoAuthorFolder  -1: None 
        /// </summary>
        /// <value>Possible values:  0: UseAdmin  1: MoveToNoAuthorFolder  -1: None </value>
        [DataMember(Name="authorMatching", EmitDefaultValue=false)]
        public int? AuthorMatching { get; set; }

        /// <summary>
        /// The list of monitored folders configured
        /// </summary>
        /// <value>The list of monitored folders configured</value>
        [DataMember(Name="monitoredFolders", EmitDefaultValue=false)]
        public List<SmtpSettingsMonitoredFolderDTO> MonitoredFolders { get; set; }

        /// <summary>
        /// The action to perform on operation done
        /// </summary>
        /// <value>The action to perform on operation done</value>
        [DataMember(Name="onImportOperationDone", EmitDefaultValue=false)]
        public SmtpSettingsOnOperationDoneDTO OnImportOperationDone { get; set; }

        /// <summary>
        /// The Mail&#39;s defaults
        /// </summary>
        /// <value>The Mail&#39;s defaults</value>
        [DataMember(Name="mailDefaultsInfo", EmitDefaultValue=false)]
        public MailDefaultsInfoDTO MailDefaultsInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmtpSettingsDTO {\n");
            sb.Append("  AuthenticationMode: ").Append(AuthenticationMode).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  IsClientSecretSet: ").Append(IsClientSecretSet).Append("\n");
            sb.Append("  IsAuthorizationResponseSet: ").Append(IsAuthorizationResponseSet).Append("\n");
            sb.Append("  AuthorizationResponse: ").Append(AuthorizationResponse).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  IsPasswordSet: ").Append(IsPasswordSet).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  AnonymousAccess: ").Append(AnonymousAccess).Append("\n");
            sb.Append("  SecurityProtocol: ").Append(SecurityProtocol).Append("\n");
            sb.Append("  AutoConfigOnPort: ").Append(AutoConfigOnPort).Append("\n");
            sb.Append("  DownloadEmailsEvery: ").Append(DownloadEmailsEvery).Append("\n");
            sb.Append("  SendEmailsEvery: ").Append(SendEmailsEvery).Append("\n");
            sb.Append("  IsFolderMonitoringEnabled: ").Append(IsFolderMonitoringEnabled).Append("\n");
            sb.Append("  CheckFolderEvery: ").Append(CheckFolderEvery).Append("\n");
            sb.Append("  CheckFileGrowingEvery: ").Append(CheckFileGrowingEvery).Append("\n");
            sb.Append("  EmlHeaderKey: ").Append(EmlHeaderKey).Append("\n");
            sb.Append("  AuthorMatching: ").Append(AuthorMatching).Append("\n");
            sb.Append("  MonitoredFolders: ").Append(MonitoredFolders).Append("\n");
            sb.Append("  OnImportOperationDone: ").Append(OnImportOperationDone).Append("\n");
            sb.Append("  MailDefaultsInfo: ").Append(MailDefaultsInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmtpSettingsDTO);
        }

        /// <summary>
        /// Returns true if SmtpSettingsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SmtpSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmtpSettingsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthenticationMode == input.AuthenticationMode ||
                    (this.AuthenticationMode != null &&
                    this.AuthenticationMode.Equals(input.AuthenticationMode))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.IsClientSecretSet == input.IsClientSecretSet ||
                    (this.IsClientSecretSet != null &&
                    this.IsClientSecretSet.Equals(input.IsClientSecretSet))
                ) && 
                (
                    this.IsAuthorizationResponseSet == input.IsAuthorizationResponseSet ||
                    (this.IsAuthorizationResponseSet != null &&
                    this.IsAuthorizationResponseSet.Equals(input.IsAuthorizationResponseSet))
                ) && 
                (
                    this.AuthorizationResponse == input.AuthorizationResponse ||
                    (this.AuthorizationResponse != null &&
                    this.AuthorizationResponse.Equals(input.AuthorizationResponse))
                ) && 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.IsPasswordSet == input.IsPasswordSet ||
                    (this.IsPasswordSet != null &&
                    this.IsPasswordSet.Equals(input.IsPasswordSet))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.AnonymousAccess == input.AnonymousAccess ||
                    (this.AnonymousAccess != null &&
                    this.AnonymousAccess.Equals(input.AnonymousAccess))
                ) && 
                (
                    this.SecurityProtocol == input.SecurityProtocol ||
                    (this.SecurityProtocol != null &&
                    this.SecurityProtocol.Equals(input.SecurityProtocol))
                ) && 
                (
                    this.AutoConfigOnPort == input.AutoConfigOnPort ||
                    (this.AutoConfigOnPort != null &&
                    this.AutoConfigOnPort.Equals(input.AutoConfigOnPort))
                ) && 
                (
                    this.DownloadEmailsEvery == input.DownloadEmailsEvery ||
                    (this.DownloadEmailsEvery != null &&
                    this.DownloadEmailsEvery.Equals(input.DownloadEmailsEvery))
                ) && 
                (
                    this.SendEmailsEvery == input.SendEmailsEvery ||
                    (this.SendEmailsEvery != null &&
                    this.SendEmailsEvery.Equals(input.SendEmailsEvery))
                ) && 
                (
                    this.IsFolderMonitoringEnabled == input.IsFolderMonitoringEnabled ||
                    (this.IsFolderMonitoringEnabled != null &&
                    this.IsFolderMonitoringEnabled.Equals(input.IsFolderMonitoringEnabled))
                ) && 
                (
                    this.CheckFolderEvery == input.CheckFolderEvery ||
                    (this.CheckFolderEvery != null &&
                    this.CheckFolderEvery.Equals(input.CheckFolderEvery))
                ) && 
                (
                    this.CheckFileGrowingEvery == input.CheckFileGrowingEvery ||
                    (this.CheckFileGrowingEvery != null &&
                    this.CheckFileGrowingEvery.Equals(input.CheckFileGrowingEvery))
                ) && 
                (
                    this.EmlHeaderKey == input.EmlHeaderKey ||
                    (this.EmlHeaderKey != null &&
                    this.EmlHeaderKey.Equals(input.EmlHeaderKey))
                ) && 
                (
                    this.AuthorMatching == input.AuthorMatching ||
                    (this.AuthorMatching != null &&
                    this.AuthorMatching.Equals(input.AuthorMatching))
                ) && 
                (
                    this.MonitoredFolders == input.MonitoredFolders ||
                    this.MonitoredFolders != null &&
                    this.MonitoredFolders.SequenceEqual(input.MonitoredFolders)
                ) && 
                (
                    this.OnImportOperationDone == input.OnImportOperationDone ||
                    (this.OnImportOperationDone != null &&
                    this.OnImportOperationDone.Equals(input.OnImportOperationDone))
                ) && 
                (
                    this.MailDefaultsInfo == input.MailDefaultsInfo ||
                    (this.MailDefaultsInfo != null &&
                    this.MailDefaultsInfo.Equals(input.MailDefaultsInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthenticationMode != null)
                    hashCode = hashCode * 59 + this.AuthenticationMode.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                if (this.IsClientSecretSet != null)
                    hashCode = hashCode * 59 + this.IsClientSecretSet.GetHashCode();
                if (this.IsAuthorizationResponseSet != null)
                    hashCode = hashCode * 59 + this.IsAuthorizationResponseSet.GetHashCode();
                if (this.AuthorizationResponse != null)
                    hashCode = hashCode * 59 + this.AuthorizationResponse.GetHashCode();
                if (this.Server != null)
                    hashCode = hashCode * 59 + this.Server.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.IsPasswordSet != null)
                    hashCode = hashCode * 59 + this.IsPasswordSet.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.AnonymousAccess != null)
                    hashCode = hashCode * 59 + this.AnonymousAccess.GetHashCode();
                if (this.SecurityProtocol != null)
                    hashCode = hashCode * 59 + this.SecurityProtocol.GetHashCode();
                if (this.AutoConfigOnPort != null)
                    hashCode = hashCode * 59 + this.AutoConfigOnPort.GetHashCode();
                if (this.DownloadEmailsEvery != null)
                    hashCode = hashCode * 59 + this.DownloadEmailsEvery.GetHashCode();
                if (this.SendEmailsEvery != null)
                    hashCode = hashCode * 59 + this.SendEmailsEvery.GetHashCode();
                if (this.IsFolderMonitoringEnabled != null)
                    hashCode = hashCode * 59 + this.IsFolderMonitoringEnabled.GetHashCode();
                if (this.CheckFolderEvery != null)
                    hashCode = hashCode * 59 + this.CheckFolderEvery.GetHashCode();
                if (this.CheckFileGrowingEvery != null)
                    hashCode = hashCode * 59 + this.CheckFileGrowingEvery.GetHashCode();
                if (this.EmlHeaderKey != null)
                    hashCode = hashCode * 59 + this.EmlHeaderKey.GetHashCode();
                if (this.AuthorMatching != null)
                    hashCode = hashCode * 59 + this.AuthorMatching.GetHashCode();
                if (this.MonitoredFolders != null)
                    hashCode = hashCode * 59 + this.MonitoredFolders.GetHashCode();
                if (this.OnImportOperationDone != null)
                    hashCode = hashCode * 59 + this.OnImportOperationDone.GetHashCode();
                if (this.MailDefaultsInfo != null)
                    hashCode = hashCode * 59 + this.MailDefaultsInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
