/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of the user password recovery criteria
    /// </summary>
    [DataContract]
    public partial class UserPasswordRecoveryCriteriaDTO :  IEquatable<UserPasswordRecoveryCriteriaDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPasswordRecoveryCriteriaDTO" /> class.
        /// </summary>
        /// <param name="recoveryMode">Possible values:  0: USERNAME  1: EMAIL  2: USERNAMEOREMAIL .</param>
        /// <param name="allowAlphabeticCharacters">Allow use of alphabetic characters.</param>
        /// <param name="allowNumberCharacters">Allow use of numeric characters.</param>
        /// <param name="allowSpecialCharacters">Allow use of special characters.</param>
        /// <param name="specialCharacters">Special characters.</param>
        /// <param name="minPasswordLength">Minimum length for password.</param>
        /// <param name="maxPasswordLength">Maximum length for password.</param>
        /// <param name="forcePasswordChange">Force password change.</param>
        /// <param name="showEmail">Show the user the email address to which the email was sent to.</param>
        public UserPasswordRecoveryCriteriaDTO(int? recoveryMode = default(int?), bool? allowAlphabeticCharacters = default(bool?), bool? allowNumberCharacters = default(bool?), bool? allowSpecialCharacters = default(bool?), string specialCharacters = default(string), int? minPasswordLength = default(int?), int? maxPasswordLength = default(int?), bool? forcePasswordChange = default(bool?), bool? showEmail = default(bool?))
        {
            this.RecoveryMode = recoveryMode;
            this.AllowAlphabeticCharacters = allowAlphabeticCharacters;
            this.AllowNumberCharacters = allowNumberCharacters;
            this.AllowSpecialCharacters = allowSpecialCharacters;
            this.SpecialCharacters = specialCharacters;
            this.MinPasswordLength = minPasswordLength;
            this.MaxPasswordLength = maxPasswordLength;
            this.ForcePasswordChange = forcePasswordChange;
            this.ShowEmail = showEmail;
        }
        
        /// <summary>
        /// Possible values:  0: USERNAME  1: EMAIL  2: USERNAMEOREMAIL 
        /// </summary>
        /// <value>Possible values:  0: USERNAME  1: EMAIL  2: USERNAMEOREMAIL </value>
        [DataMember(Name="recoveryMode", EmitDefaultValue=false)]
        public int? RecoveryMode { get; set; }

        /// <summary>
        /// Allow use of alphabetic characters
        /// </summary>
        /// <value>Allow use of alphabetic characters</value>
        [DataMember(Name="allowAlphabeticCharacters", EmitDefaultValue=false)]
        public bool? AllowAlphabeticCharacters { get; set; }

        /// <summary>
        /// Allow use of numeric characters
        /// </summary>
        /// <value>Allow use of numeric characters</value>
        [DataMember(Name="allowNumberCharacters", EmitDefaultValue=false)]
        public bool? AllowNumberCharacters { get; set; }

        /// <summary>
        /// Allow use of special characters
        /// </summary>
        /// <value>Allow use of special characters</value>
        [DataMember(Name="allowSpecialCharacters", EmitDefaultValue=false)]
        public bool? AllowSpecialCharacters { get; set; }

        /// <summary>
        /// Special characters
        /// </summary>
        /// <value>Special characters</value>
        [DataMember(Name="specialCharacters", EmitDefaultValue=false)]
        public string SpecialCharacters { get; set; }

        /// <summary>
        /// Minimum length for password
        /// </summary>
        /// <value>Minimum length for password</value>
        [DataMember(Name="minPasswordLength", EmitDefaultValue=false)]
        public int? MinPasswordLength { get; set; }

        /// <summary>
        /// Maximum length for password
        /// </summary>
        /// <value>Maximum length for password</value>
        [DataMember(Name="maxPasswordLength", EmitDefaultValue=false)]
        public int? MaxPasswordLength { get; set; }

        /// <summary>
        /// Force password change
        /// </summary>
        /// <value>Force password change</value>
        [DataMember(Name="forcePasswordChange", EmitDefaultValue=false)]
        public bool? ForcePasswordChange { get; set; }

        /// <summary>
        /// Show the user the email address to which the email was sent to
        /// </summary>
        /// <value>Show the user the email address to which the email was sent to</value>
        [DataMember(Name="showEmail", EmitDefaultValue=false)]
        public bool? ShowEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPasswordRecoveryCriteriaDTO {\n");
            sb.Append("  RecoveryMode: ").Append(RecoveryMode).Append("\n");
            sb.Append("  AllowAlphabeticCharacters: ").Append(AllowAlphabeticCharacters).Append("\n");
            sb.Append("  AllowNumberCharacters: ").Append(AllowNumberCharacters).Append("\n");
            sb.Append("  AllowSpecialCharacters: ").Append(AllowSpecialCharacters).Append("\n");
            sb.Append("  SpecialCharacters: ").Append(SpecialCharacters).Append("\n");
            sb.Append("  MinPasswordLength: ").Append(MinPasswordLength).Append("\n");
            sb.Append("  MaxPasswordLength: ").Append(MaxPasswordLength).Append("\n");
            sb.Append("  ForcePasswordChange: ").Append(ForcePasswordChange).Append("\n");
            sb.Append("  ShowEmail: ").Append(ShowEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPasswordRecoveryCriteriaDTO);
        }

        /// <summary>
        /// Returns true if UserPasswordRecoveryCriteriaDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPasswordRecoveryCriteriaDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPasswordRecoveryCriteriaDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecoveryMode == input.RecoveryMode ||
                    (this.RecoveryMode != null &&
                    this.RecoveryMode.Equals(input.RecoveryMode))
                ) && 
                (
                    this.AllowAlphabeticCharacters == input.AllowAlphabeticCharacters ||
                    (this.AllowAlphabeticCharacters != null &&
                    this.AllowAlphabeticCharacters.Equals(input.AllowAlphabeticCharacters))
                ) && 
                (
                    this.AllowNumberCharacters == input.AllowNumberCharacters ||
                    (this.AllowNumberCharacters != null &&
                    this.AllowNumberCharacters.Equals(input.AllowNumberCharacters))
                ) && 
                (
                    this.AllowSpecialCharacters == input.AllowSpecialCharacters ||
                    (this.AllowSpecialCharacters != null &&
                    this.AllowSpecialCharacters.Equals(input.AllowSpecialCharacters))
                ) && 
                (
                    this.SpecialCharacters == input.SpecialCharacters ||
                    (this.SpecialCharacters != null &&
                    this.SpecialCharacters.Equals(input.SpecialCharacters))
                ) && 
                (
                    this.MinPasswordLength == input.MinPasswordLength ||
                    (this.MinPasswordLength != null &&
                    this.MinPasswordLength.Equals(input.MinPasswordLength))
                ) && 
                (
                    this.MaxPasswordLength == input.MaxPasswordLength ||
                    (this.MaxPasswordLength != null &&
                    this.MaxPasswordLength.Equals(input.MaxPasswordLength))
                ) && 
                (
                    this.ForcePasswordChange == input.ForcePasswordChange ||
                    (this.ForcePasswordChange != null &&
                    this.ForcePasswordChange.Equals(input.ForcePasswordChange))
                ) && 
                (
                    this.ShowEmail == input.ShowEmail ||
                    (this.ShowEmail != null &&
                    this.ShowEmail.Equals(input.ShowEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecoveryMode != null)
                    hashCode = hashCode * 59 + this.RecoveryMode.GetHashCode();
                if (this.AllowAlphabeticCharacters != null)
                    hashCode = hashCode * 59 + this.AllowAlphabeticCharacters.GetHashCode();
                if (this.AllowNumberCharacters != null)
                    hashCode = hashCode * 59 + this.AllowNumberCharacters.GetHashCode();
                if (this.AllowSpecialCharacters != null)
                    hashCode = hashCode * 59 + this.AllowSpecialCharacters.GetHashCode();
                if (this.SpecialCharacters != null)
                    hashCode = hashCode * 59 + this.SpecialCharacters.GetHashCode();
                if (this.MinPasswordLength != null)
                    hashCode = hashCode * 59 + this.MinPasswordLength.GetHashCode();
                if (this.MaxPasswordLength != null)
                    hashCode = hashCode * 59 + this.MaxPasswordLength.GetHashCode();
                if (this.ForcePasswordChange != null)
                    hashCode = hashCode * 59 + this.ForcePasswordChange.GetHashCode();
                if (this.ShowEmail != null)
                    hashCode = hashCode * 59 + this.ShowEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
