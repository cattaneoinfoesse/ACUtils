/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Remote sign configuration
    /// </summary>
    [DataContract]
    public partial class RemoteSignConfigurationDto :  IEquatable<RemoteSignConfigurationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteSignConfigurationDto" /> class.
        /// </summary>
        /// <param name="signCertType">Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba .</param>
        /// <param name="description">Remote sign provider description.</param>
        /// <param name="configurationOptions">List of configuration options.</param>
        public RemoteSignConfigurationDto(int? signCertType = default(int?), string description = default(string), List<RemoteSignConfigurationOptionDto> configurationOptions = default(List<RemoteSignConfigurationOptionDto>))
        {
            this.SignCertType = signCertType;
            this.Description = description;
            this.ConfigurationOptions = configurationOptions;
        }
        
        /// <summary>
        /// Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba 
        /// </summary>
        /// <value>Possible values:  0: Static  1: CoSign  2: RemoteTelecom  3: RemoteAruba </value>
        [DataMember(Name="signCertType", EmitDefaultValue=false)]
        public int? SignCertType { get; set; }

        /// <summary>
        /// Remote sign provider description
        /// </summary>
        /// <value>Remote sign provider description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// List of configuration options
        /// </summary>
        /// <value>List of configuration options</value>
        [DataMember(Name="configurationOptions", EmitDefaultValue=false)]
        public List<RemoteSignConfigurationOptionDto> ConfigurationOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSignConfigurationDto {\n");
            sb.Append("  SignCertType: ").Append(SignCertType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ConfigurationOptions: ").Append(ConfigurationOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoteSignConfigurationDto);
        }

        /// <summary>
        /// Returns true if RemoteSignConfigurationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoteSignConfigurationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSignConfigurationDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SignCertType == input.SignCertType ||
                    (this.SignCertType != null &&
                    this.SignCertType.Equals(input.SignCertType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ConfigurationOptions == input.ConfigurationOptions ||
                    this.ConfigurationOptions != null &&
                    this.ConfigurationOptions.SequenceEqual(input.ConfigurationOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignCertType != null)
                    hashCode = hashCode * 59 + this.SignCertType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ConfigurationOptions != null)
                    hashCode = hashCode * 59 + this.ConfigurationOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
