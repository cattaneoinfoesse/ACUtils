/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// DocumentZipProtectionSettingsDTO
    /// </summary>
    [DataContract]
    public partial class DocumentZipProtectionSettingsDTO :  IEquatable<DocumentZipProtectionSettingsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentZipProtectionSettingsDTO" /> class.
        /// </summary>
        /// <param name="zipProtectionMode">Possible values:  0: None  1: PasswordLegacy  2: EncryptionAes256 .</param>
        /// <param name="password">password.</param>
        /// <param name="hasPassword">hasPassword.</param>
        public DocumentZipProtectionSettingsDTO(int? zipProtectionMode = default(int?), string password = default(string), bool? hasPassword = default(bool?))
        {
            this.ZipProtectionMode = zipProtectionMode;
            this.Password = password;
            this.HasPassword = hasPassword;
        }
        
        /// <summary>
        /// Possible values:  0: None  1: PasswordLegacy  2: EncryptionAes256 
        /// </summary>
        /// <value>Possible values:  0: None  1: PasswordLegacy  2: EncryptionAes256 </value>
        [DataMember(Name="zipProtectionMode", EmitDefaultValue=false)]
        public int? ZipProtectionMode { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets HasPassword
        /// </summary>
        [DataMember(Name="hasPassword", EmitDefaultValue=false)]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentZipProtectionSettingsDTO {\n");
            sb.Append("  ZipProtectionMode: ").Append(ZipProtectionMode).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentZipProtectionSettingsDTO);
        }

        /// <summary>
        /// Returns true if DocumentZipProtectionSettingsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentZipProtectionSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentZipProtectionSettingsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ZipProtectionMode == input.ZipProtectionMode ||
                    (this.ZipProtectionMode != null &&
                    this.ZipProtectionMode.Equals(input.ZipProtectionMode))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.HasPassword == input.HasPassword ||
                    (this.HasPassword != null &&
                    this.HasPassword.Equals(input.HasPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ZipProtectionMode != null)
                    hashCode = hashCode * 59 + this.ZipProtectionMode.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.HasPassword != null)
                    hashCode = hashCode * 59 + this.HasPassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
