/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class with all license configuration data
    /// </summary>
    [DataContract]
    public partial class LicenseInfoDTO :  IEquatable<LicenseInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseInfoDTO" /> class.
        /// </summary>
        /// <param name="id">Identifier.</param>
        /// <param name="state">Possible values:  0: Active  1: Disabled  2: Revoked .</param>
        /// <param name="userModules">User modules.</param>
        /// <param name="userModuleAssociations">User module associations.</param>
        /// <param name="software">Software.</param>
        /// <param name="softwareAssociations">Software associations.</param>
        public LicenseInfoDTO(int? id = default(int?), int? state = default(int?), List<LicenseInfoModuleDTO> userModules = default(List<LicenseInfoModuleDTO>), List<LicenseInfoUserModuleAssociationDTO> userModuleAssociations = default(List<LicenseInfoUserModuleAssociationDTO>), List<LicenseInfoSoftwareDTO> software = default(List<LicenseInfoSoftwareDTO>), List<LicenseInfoInstalledSoftwareDTO> softwareAssociations = default(List<LicenseInfoInstalledSoftwareDTO>))
        {
            this.Id = id;
            this.State = state;
            this.UserModules = userModules;
            this.UserModuleAssociations = userModuleAssociations;
            this.Software = software;
            this.SoftwareAssociations = softwareAssociations;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Possible values:  0: Active  1: Disabled  2: Revoked 
        /// </summary>
        /// <value>Possible values:  0: Active  1: Disabled  2: Revoked </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int? State { get; set; }

        /// <summary>
        /// User modules
        /// </summary>
        /// <value>User modules</value>
        [DataMember(Name="userModules", EmitDefaultValue=false)]
        public List<LicenseInfoModuleDTO> UserModules { get; set; }

        /// <summary>
        /// User module associations
        /// </summary>
        /// <value>User module associations</value>
        [DataMember(Name="userModuleAssociations", EmitDefaultValue=false)]
        public List<LicenseInfoUserModuleAssociationDTO> UserModuleAssociations { get; set; }

        /// <summary>
        /// Software
        /// </summary>
        /// <value>Software</value>
        [DataMember(Name="software", EmitDefaultValue=false)]
        public List<LicenseInfoSoftwareDTO> Software { get; set; }

        /// <summary>
        /// Software associations
        /// </summary>
        /// <value>Software associations</value>
        [DataMember(Name="softwareAssociations", EmitDefaultValue=false)]
        public List<LicenseInfoInstalledSoftwareDTO> SoftwareAssociations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseInfoDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  UserModules: ").Append(UserModules).Append("\n");
            sb.Append("  UserModuleAssociations: ").Append(UserModuleAssociations).Append("\n");
            sb.Append("  Software: ").Append(Software).Append("\n");
            sb.Append("  SoftwareAssociations: ").Append(SoftwareAssociations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenseInfoDTO);
        }

        /// <summary>
        /// Returns true if LicenseInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.UserModules == input.UserModules ||
                    this.UserModules != null &&
                    this.UserModules.SequenceEqual(input.UserModules)
                ) && 
                (
                    this.UserModuleAssociations == input.UserModuleAssociations ||
                    this.UserModuleAssociations != null &&
                    this.UserModuleAssociations.SequenceEqual(input.UserModuleAssociations)
                ) && 
                (
                    this.Software == input.Software ||
                    this.Software != null &&
                    this.Software.SequenceEqual(input.Software)
                ) && 
                (
                    this.SoftwareAssociations == input.SoftwareAssociations ||
                    this.SoftwareAssociations != null &&
                    this.SoftwareAssociations.SequenceEqual(input.SoftwareAssociations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.UserModules != null)
                    hashCode = hashCode * 59 + this.UserModules.GetHashCode();
                if (this.UserModuleAssociations != null)
                    hashCode = hashCode * 59 + this.UserModuleAssociations.GetHashCode();
                if (this.Software != null)
                    hashCode = hashCode * 59 + this.Software.GetHashCode();
                if (this.SoftwareAssociations != null)
                    hashCode = hashCode * 59 + this.SoftwareAssociations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
