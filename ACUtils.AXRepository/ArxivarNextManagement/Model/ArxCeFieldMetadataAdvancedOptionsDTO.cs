/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of ArxCe metadata field advanced options
    /// </summary>
    [DataContract]
    public partial class ArxCeFieldMetadataAdvancedOptionsDTO :  IEquatable<ArxCeFieldMetadataAdvancedOptionsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxCeFieldMetadataAdvancedOptionsDTO" /> class.
        /// </summary>
        /// <param name="defaultValueType">Possible values:  0: Nessuno  1: ValoreFisso  2: AltroCampo  3: DataRegDocumento  4: IdentificativoDoc  5: AooPiva  6: AooCf  7: AooRagioneSociale  8: ClientePiva  9: ClienteCf  10: ClienteRagioneSociale .</param>
        /// <param name="defaultValue">Field default value.</param>
        /// <param name="formulaAdvancedOptionsType">Possible values:  0: None  1: Regex .</param>
        /// <param name="formula">Formula field.</param>
        /// <param name="referenceFieldCode">CodiceCampo reference field.</param>
        public ArxCeFieldMetadataAdvancedOptionsDTO(int? defaultValueType = default(int?), string defaultValue = default(string), int? formulaAdvancedOptionsType = default(int?), string formula = default(string), string referenceFieldCode = default(string))
        {
            this.DefaultValueType = defaultValueType;
            this.DefaultValue = defaultValue;
            this.FormulaAdvancedOptionsType = formulaAdvancedOptionsType;
            this.Formula = formula;
            this.ReferenceFieldCode = referenceFieldCode;
        }
        
        /// <summary>
        /// Possible values:  0: Nessuno  1: ValoreFisso  2: AltroCampo  3: DataRegDocumento  4: IdentificativoDoc  5: AooPiva  6: AooCf  7: AooRagioneSociale  8: ClientePiva  9: ClienteCf  10: ClienteRagioneSociale 
        /// </summary>
        /// <value>Possible values:  0: Nessuno  1: ValoreFisso  2: AltroCampo  3: DataRegDocumento  4: IdentificativoDoc  5: AooPiva  6: AooCf  7: AooRagioneSociale  8: ClientePiva  9: ClienteCf  10: ClienteRagioneSociale </value>
        [DataMember(Name="defaultValueType", EmitDefaultValue=false)]
        public int? DefaultValueType { get; set; }

        /// <summary>
        /// Field default value
        /// </summary>
        /// <value>Field default value</value>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: Regex 
        /// </summary>
        /// <value>Possible values:  0: None  1: Regex </value>
        [DataMember(Name="formulaAdvancedOptionsType", EmitDefaultValue=false)]
        public int? FormulaAdvancedOptionsType { get; set; }

        /// <summary>
        /// Formula field
        /// </summary>
        /// <value>Formula field</value>
        [DataMember(Name="formula", EmitDefaultValue=false)]
        public string Formula { get; set; }

        /// <summary>
        /// CodiceCampo reference field
        /// </summary>
        /// <value>CodiceCampo reference field</value>
        [DataMember(Name="referenceFieldCode", EmitDefaultValue=false)]
        public string ReferenceFieldCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxCeFieldMetadataAdvancedOptionsDTO {\n");
            sb.Append("  DefaultValueType: ").Append(DefaultValueType).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  FormulaAdvancedOptionsType: ").Append(FormulaAdvancedOptionsType).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  ReferenceFieldCode: ").Append(ReferenceFieldCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxCeFieldMetadataAdvancedOptionsDTO);
        }

        /// <summary>
        /// Returns true if ArxCeFieldMetadataAdvancedOptionsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxCeFieldMetadataAdvancedOptionsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxCeFieldMetadataAdvancedOptionsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultValueType == input.DefaultValueType ||
                    (this.DefaultValueType != null &&
                    this.DefaultValueType.Equals(input.DefaultValueType))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.FormulaAdvancedOptionsType == input.FormulaAdvancedOptionsType ||
                    (this.FormulaAdvancedOptionsType != null &&
                    this.FormulaAdvancedOptionsType.Equals(input.FormulaAdvancedOptionsType))
                ) && 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                ) && 
                (
                    this.ReferenceFieldCode == input.ReferenceFieldCode ||
                    (this.ReferenceFieldCode != null &&
                    this.ReferenceFieldCode.Equals(input.ReferenceFieldCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultValueType != null)
                    hashCode = hashCode * 59 + this.DefaultValueType.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.FormulaAdvancedOptionsType != null)
                    hashCode = hashCode * 59 + this.FormulaAdvancedOptionsType.GetHashCode();
                if (this.Formula != null)
                    hashCode = hashCode * 59 + this.Formula.GetHashCode();
                if (this.ReferenceFieldCode != null)
                    hashCode = hashCode * 59 + this.ReferenceFieldCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
