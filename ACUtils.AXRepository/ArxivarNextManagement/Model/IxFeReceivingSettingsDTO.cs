/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of IX-FE receiving settings
    /// </summary>
    [DataContract]
    public partial class IxFeReceivingSettingsDTO :  IEquatable<IxFeReceivingSettingsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IxFeReceivingSettingsDTO" /> class.
        /// </summary>
        /// <param name="id">Identifier.</param>
        /// <param name="ixBusinessUnit">IX Business unit.</param>
        /// <param name="businessUnitCode">Arxivar Business unit code.</param>
        /// <param name="predefinedProfileForFile">Predefined profile for file.</param>
        /// <param name="predefinedProfileForInvoice">Predefined profile for invoice.</param>
        /// <param name="fileBehavior">Possible values:  0: Pdf  1: OriginalFile  2: None  3: XmlProfile .</param>
        /// <param name="importAttachments">Import attachments.</param>
        /// <param name="idVersamentoIxCeField">Arxivar field for IdVersamento IX CE mapping.</param>
        /// <param name="idDocumentoIxCeField">Arxivar field for IdDocumento IX CE code mapping.</param>
        /// <param name="enabled">Boolean which is true if the configuration is active.</param>
        /// <param name="mapping">Mapping.</param>
        public IxFeReceivingSettingsDTO(int? id = default(int?), IxBusinessUnitSimpleDTO ixBusinessUnit = default(IxBusinessUnitSimpleDTO), string businessUnitCode = default(string), PredefinedProfileSimpleDTO predefinedProfileForFile = default(PredefinedProfileSimpleDTO), PredefinedProfileSimpleDTO predefinedProfileForInvoice = default(PredefinedProfileSimpleDTO), int? fileBehavior = default(int?), bool? importAttachments = default(bool?), FieldManagementDTO idVersamentoIxCeField = default(FieldManagementDTO), FieldManagementDTO idDocumentoIxCeField = default(FieldManagementDTO), bool? enabled = default(bool?), List<IxFeReceivingMappingDTO> mapping = default(List<IxFeReceivingMappingDTO>))
        {
            this.Id = id;
            this.IxBusinessUnit = ixBusinessUnit;
            this.BusinessUnitCode = businessUnitCode;
            this.PredefinedProfileForFile = predefinedProfileForFile;
            this.PredefinedProfileForInvoice = predefinedProfileForInvoice;
            this.FileBehavior = fileBehavior;
            this.ImportAttachments = importAttachments;
            this.IdVersamentoIxCeField = idVersamentoIxCeField;
            this.IdDocumentoIxCeField = idDocumentoIxCeField;
            this.Enabled = enabled;
            this.Mapping = mapping;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// IX Business unit
        /// </summary>
        /// <value>IX Business unit</value>
        [DataMember(Name="ixBusinessUnit", EmitDefaultValue=false)]
        public IxBusinessUnitSimpleDTO IxBusinessUnit { get; set; }

        /// <summary>
        /// Arxivar Business unit code
        /// </summary>
        /// <value>Arxivar Business unit code</value>
        [DataMember(Name="businessUnitCode", EmitDefaultValue=false)]
        public string BusinessUnitCode { get; set; }

        /// <summary>
        /// Predefined profile for file
        /// </summary>
        /// <value>Predefined profile for file</value>
        [DataMember(Name="predefinedProfileForFile", EmitDefaultValue=false)]
        public PredefinedProfileSimpleDTO PredefinedProfileForFile { get; set; }

        /// <summary>
        /// Predefined profile for invoice
        /// </summary>
        /// <value>Predefined profile for invoice</value>
        [DataMember(Name="predefinedProfileForInvoice", EmitDefaultValue=false)]
        public PredefinedProfileSimpleDTO PredefinedProfileForInvoice { get; set; }

        /// <summary>
        /// Possible values:  0: Pdf  1: OriginalFile  2: None  3: XmlProfile 
        /// </summary>
        /// <value>Possible values:  0: Pdf  1: OriginalFile  2: None  3: XmlProfile </value>
        [DataMember(Name="fileBehavior", EmitDefaultValue=false)]
        public int? FileBehavior { get; set; }

        /// <summary>
        /// Import attachments
        /// </summary>
        /// <value>Import attachments</value>
        [DataMember(Name="importAttachments", EmitDefaultValue=false)]
        public bool? ImportAttachments { get; set; }

        /// <summary>
        /// Arxivar field for IdVersamento IX CE mapping
        /// </summary>
        /// <value>Arxivar field for IdVersamento IX CE mapping</value>
        [DataMember(Name="idVersamentoIxCeField", EmitDefaultValue=false)]
        public FieldManagementDTO IdVersamentoIxCeField { get; set; }

        /// <summary>
        /// Arxivar field for IdDocumento IX CE code mapping
        /// </summary>
        /// <value>Arxivar field for IdDocumento IX CE code mapping</value>
        [DataMember(Name="idDocumentoIxCeField", EmitDefaultValue=false)]
        public FieldManagementDTO IdDocumentoIxCeField { get; set; }

        /// <summary>
        /// Boolean which is true if the configuration is active
        /// </summary>
        /// <value>Boolean which is true if the configuration is active</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Mapping
        /// </summary>
        /// <value>Mapping</value>
        [DataMember(Name="mapping", EmitDefaultValue=false)]
        public List<IxFeReceivingMappingDTO> Mapping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IxFeReceivingSettingsDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IxBusinessUnit: ").Append(IxBusinessUnit).Append("\n");
            sb.Append("  BusinessUnitCode: ").Append(BusinessUnitCode).Append("\n");
            sb.Append("  PredefinedProfileForFile: ").Append(PredefinedProfileForFile).Append("\n");
            sb.Append("  PredefinedProfileForInvoice: ").Append(PredefinedProfileForInvoice).Append("\n");
            sb.Append("  FileBehavior: ").Append(FileBehavior).Append("\n");
            sb.Append("  ImportAttachments: ").Append(ImportAttachments).Append("\n");
            sb.Append("  IdVersamentoIxCeField: ").Append(IdVersamentoIxCeField).Append("\n");
            sb.Append("  IdDocumentoIxCeField: ").Append(IdDocumentoIxCeField).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Mapping: ").Append(Mapping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IxFeReceivingSettingsDTO);
        }

        /// <summary>
        /// Returns true if IxFeReceivingSettingsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of IxFeReceivingSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IxFeReceivingSettingsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IxBusinessUnit == input.IxBusinessUnit ||
                    (this.IxBusinessUnit != null &&
                    this.IxBusinessUnit.Equals(input.IxBusinessUnit))
                ) && 
                (
                    this.BusinessUnitCode == input.BusinessUnitCode ||
                    (this.BusinessUnitCode != null &&
                    this.BusinessUnitCode.Equals(input.BusinessUnitCode))
                ) && 
                (
                    this.PredefinedProfileForFile == input.PredefinedProfileForFile ||
                    (this.PredefinedProfileForFile != null &&
                    this.PredefinedProfileForFile.Equals(input.PredefinedProfileForFile))
                ) && 
                (
                    this.PredefinedProfileForInvoice == input.PredefinedProfileForInvoice ||
                    (this.PredefinedProfileForInvoice != null &&
                    this.PredefinedProfileForInvoice.Equals(input.PredefinedProfileForInvoice))
                ) && 
                (
                    this.FileBehavior == input.FileBehavior ||
                    (this.FileBehavior != null &&
                    this.FileBehavior.Equals(input.FileBehavior))
                ) && 
                (
                    this.ImportAttachments == input.ImportAttachments ||
                    (this.ImportAttachments != null &&
                    this.ImportAttachments.Equals(input.ImportAttachments))
                ) && 
                (
                    this.IdVersamentoIxCeField == input.IdVersamentoIxCeField ||
                    (this.IdVersamentoIxCeField != null &&
                    this.IdVersamentoIxCeField.Equals(input.IdVersamentoIxCeField))
                ) && 
                (
                    this.IdDocumentoIxCeField == input.IdDocumentoIxCeField ||
                    (this.IdDocumentoIxCeField != null &&
                    this.IdDocumentoIxCeField.Equals(input.IdDocumentoIxCeField))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Mapping == input.Mapping ||
                    this.Mapping != null &&
                    this.Mapping.SequenceEqual(input.Mapping)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IxBusinessUnit != null)
                    hashCode = hashCode * 59 + this.IxBusinessUnit.GetHashCode();
                if (this.BusinessUnitCode != null)
                    hashCode = hashCode * 59 + this.BusinessUnitCode.GetHashCode();
                if (this.PredefinedProfileForFile != null)
                    hashCode = hashCode * 59 + this.PredefinedProfileForFile.GetHashCode();
                if (this.PredefinedProfileForInvoice != null)
                    hashCode = hashCode * 59 + this.PredefinedProfileForInvoice.GetHashCode();
                if (this.FileBehavior != null)
                    hashCode = hashCode * 59 + this.FileBehavior.GetHashCode();
                if (this.ImportAttachments != null)
                    hashCode = hashCode * 59 + this.ImportAttachments.GetHashCode();
                if (this.IdVersamentoIxCeField != null)
                    hashCode = hashCode * 59 + this.IdVersamentoIxCeField.GetHashCode();
                if (this.IdDocumentoIxCeField != null)
                    hashCode = hashCode * 59 + this.IdDocumentoIxCeField.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Mapping != null)
                    hashCode = hashCode * 59 + this.Mapping.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
