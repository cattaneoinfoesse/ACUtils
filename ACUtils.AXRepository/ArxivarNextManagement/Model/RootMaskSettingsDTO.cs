/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of root mask settings
    /// </summary>
    [DataContract]
    public partial class RootMaskSettingsDTO :  IEquatable<RootMaskSettingsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RootMaskSettingsDTO" /> class.
        /// </summary>
        /// <param name="enableFileSelection">Allow the recovery of file from folder.</param>
        /// <param name="enableScannerSelection">Allow the recovery of file from scanner.</param>
        /// <param name="enableAttachments">Allow to manage attachments.</param>
        /// <param name="enableNotes">Allow notes management.</param>
        /// <param name="preventSwitch">Prevent Switch.</param>
        /// <param name="enableAttachToActiveTask">Allow to attach the profile to an active task.</param>
        /// <param name="enableStartWorkflow">Allow to start workflow.</param>
        /// <param name="enableInsertAssociation">Allow insertion into link.</param>
        /// <param name="enableInsertFolder">Allow insertion into folder.</param>
        /// <param name="enableInsertRelation">Allow manual insertion into connection.</param>
        /// <param name="enableSendFax">Allow sending by fax.</param>
        /// <param name="enableSendMail">Allow sending by email.</param>
        /// <param name="enableSecurity">Allow privacy settings.</param>
        /// <param name="enableAttachMemo">Allow to attach profile to memo.</param>
        /// <param name="enableDistribution">Allow distribution.</param>
        /// <param name="enableScanner">Allow to scan a document.</param>
        /// <param name="enableBarcode">Allow using Barcode field.</param>
        /// <param name="disableSendingInternalDocs">Do not allow delivery of internal documents by email/fax.</param>
        /// <param name="disableOutlookProfilationCancellation">Do not allow the deletion of email profiling from Outlook.</param>
        /// <param name="enableDocInPreview">Allow to show the original document when the preview is not available.</param>
        /// <param name="enableAttachmentsRevisions">Enable reviews on attachments.</param>
        /// <param name="bindersLabel">Binders default label.</param>
        /// <param name="bindersTranslations">Binders label translations.</param>
        /// <param name="sendersLabel">Senders default label.</param>
        /// <param name="sendersTranslations">Senders label translations.</param>
        public RootMaskSettingsDTO(bool? enableFileSelection = default(bool?), bool? enableScannerSelection = default(bool?), bool? enableAttachments = default(bool?), bool? enableNotes = default(bool?), bool? preventSwitch = default(bool?), bool? enableAttachToActiveTask = default(bool?), bool? enableStartWorkflow = default(bool?), bool? enableInsertAssociation = default(bool?), bool? enableInsertFolder = default(bool?), bool? enableInsertRelation = default(bool?), bool? enableSendFax = default(bool?), bool? enableSendMail = default(bool?), bool? enableSecurity = default(bool?), bool? enableAttachMemo = default(bool?), bool? enableDistribution = default(bool?), bool? enableScanner = default(bool?), bool? enableBarcode = default(bool?), bool? disableSendingInternalDocs = default(bool?), bool? disableOutlookProfilationCancellation = default(bool?), bool? enableDocInPreview = default(bool?), bool? enableAttachmentsRevisions = default(bool?), string bindersLabel = default(string), List<RootMaskLabelTranslationDTO> bindersTranslations = default(List<RootMaskLabelTranslationDTO>), string sendersLabel = default(string), List<RootMaskLabelTranslationDTO> sendersTranslations = default(List<RootMaskLabelTranslationDTO>))
        {
            this.EnableFileSelection = enableFileSelection;
            this.EnableScannerSelection = enableScannerSelection;
            this.EnableAttachments = enableAttachments;
            this.EnableNotes = enableNotes;
            this.PreventSwitch = preventSwitch;
            this.EnableAttachToActiveTask = enableAttachToActiveTask;
            this.EnableStartWorkflow = enableStartWorkflow;
            this.EnableInsertAssociation = enableInsertAssociation;
            this.EnableInsertFolder = enableInsertFolder;
            this.EnableInsertRelation = enableInsertRelation;
            this.EnableSendFax = enableSendFax;
            this.EnableSendMail = enableSendMail;
            this.EnableSecurity = enableSecurity;
            this.EnableAttachMemo = enableAttachMemo;
            this.EnableDistribution = enableDistribution;
            this.EnableScanner = enableScanner;
            this.EnableBarcode = enableBarcode;
            this.DisableSendingInternalDocs = disableSendingInternalDocs;
            this.DisableOutlookProfilationCancellation = disableOutlookProfilationCancellation;
            this.EnableDocInPreview = enableDocInPreview;
            this.EnableAttachmentsRevisions = enableAttachmentsRevisions;
            this.BindersLabel = bindersLabel;
            this.BindersTranslations = bindersTranslations;
            this.SendersLabel = sendersLabel;
            this.SendersTranslations = sendersTranslations;
        }
        
        /// <summary>
        /// Allow the recovery of file from folder
        /// </summary>
        /// <value>Allow the recovery of file from folder</value>
        [DataMember(Name="enableFileSelection", EmitDefaultValue=false)]
        public bool? EnableFileSelection { get; set; }

        /// <summary>
        /// Allow the recovery of file from scanner
        /// </summary>
        /// <value>Allow the recovery of file from scanner</value>
        [DataMember(Name="enableScannerSelection", EmitDefaultValue=false)]
        public bool? EnableScannerSelection { get; set; }

        /// <summary>
        /// Allow to manage attachments
        /// </summary>
        /// <value>Allow to manage attachments</value>
        [DataMember(Name="enableAttachments", EmitDefaultValue=false)]
        public bool? EnableAttachments { get; set; }

        /// <summary>
        /// Allow notes management
        /// </summary>
        /// <value>Allow notes management</value>
        [DataMember(Name="enableNotes", EmitDefaultValue=false)]
        public bool? EnableNotes { get; set; }

        /// <summary>
        /// Prevent Switch
        /// </summary>
        /// <value>Prevent Switch</value>
        [DataMember(Name="preventSwitch", EmitDefaultValue=false)]
        public bool? PreventSwitch { get; set; }

        /// <summary>
        /// Allow to attach the profile to an active task
        /// </summary>
        /// <value>Allow to attach the profile to an active task</value>
        [DataMember(Name="enableAttachToActiveTask", EmitDefaultValue=false)]
        public bool? EnableAttachToActiveTask { get; set; }

        /// <summary>
        /// Allow to start workflow
        /// </summary>
        /// <value>Allow to start workflow</value>
        [DataMember(Name="enableStartWorkflow", EmitDefaultValue=false)]
        public bool? EnableStartWorkflow { get; set; }

        /// <summary>
        /// Allow insertion into link
        /// </summary>
        /// <value>Allow insertion into link</value>
        [DataMember(Name="enableInsertAssociation", EmitDefaultValue=false)]
        public bool? EnableInsertAssociation { get; set; }

        /// <summary>
        /// Allow insertion into folder
        /// </summary>
        /// <value>Allow insertion into folder</value>
        [DataMember(Name="enableInsertFolder", EmitDefaultValue=false)]
        public bool? EnableInsertFolder { get; set; }

        /// <summary>
        /// Allow manual insertion into connection
        /// </summary>
        /// <value>Allow manual insertion into connection</value>
        [DataMember(Name="enableInsertRelation", EmitDefaultValue=false)]
        public bool? EnableInsertRelation { get; set; }

        /// <summary>
        /// Allow sending by fax
        /// </summary>
        /// <value>Allow sending by fax</value>
        [DataMember(Name="enableSendFax", EmitDefaultValue=false)]
        public bool? EnableSendFax { get; set; }

        /// <summary>
        /// Allow sending by email
        /// </summary>
        /// <value>Allow sending by email</value>
        [DataMember(Name="enableSendMail", EmitDefaultValue=false)]
        public bool? EnableSendMail { get; set; }

        /// <summary>
        /// Allow privacy settings
        /// </summary>
        /// <value>Allow privacy settings</value>
        [DataMember(Name="enableSecurity", EmitDefaultValue=false)]
        public bool? EnableSecurity { get; set; }

        /// <summary>
        /// Allow to attach profile to memo
        /// </summary>
        /// <value>Allow to attach profile to memo</value>
        [DataMember(Name="enableAttachMemo", EmitDefaultValue=false)]
        public bool? EnableAttachMemo { get; set; }

        /// <summary>
        /// Allow distribution
        /// </summary>
        /// <value>Allow distribution</value>
        [DataMember(Name="enableDistribution", EmitDefaultValue=false)]
        public bool? EnableDistribution { get; set; }

        /// <summary>
        /// Allow to scan a document
        /// </summary>
        /// <value>Allow to scan a document</value>
        [DataMember(Name="enableScanner", EmitDefaultValue=false)]
        public bool? EnableScanner { get; set; }

        /// <summary>
        /// Allow using Barcode field
        /// </summary>
        /// <value>Allow using Barcode field</value>
        [DataMember(Name="enableBarcode", EmitDefaultValue=false)]
        public bool? EnableBarcode { get; set; }

        /// <summary>
        /// Do not allow delivery of internal documents by email/fax
        /// </summary>
        /// <value>Do not allow delivery of internal documents by email/fax</value>
        [DataMember(Name="disableSendingInternalDocs", EmitDefaultValue=false)]
        public bool? DisableSendingInternalDocs { get; set; }

        /// <summary>
        /// Do not allow the deletion of email profiling from Outlook
        /// </summary>
        /// <value>Do not allow the deletion of email profiling from Outlook</value>
        [DataMember(Name="disableOutlookProfilationCancellation", EmitDefaultValue=false)]
        public bool? DisableOutlookProfilationCancellation { get; set; }

        /// <summary>
        /// Allow to show the original document when the preview is not available
        /// </summary>
        /// <value>Allow to show the original document when the preview is not available</value>
        [DataMember(Name="enableDocInPreview", EmitDefaultValue=false)]
        public bool? EnableDocInPreview { get; set; }

        /// <summary>
        /// Enable reviews on attachments
        /// </summary>
        /// <value>Enable reviews on attachments</value>
        [DataMember(Name="enableAttachmentsRevisions", EmitDefaultValue=false)]
        public bool? EnableAttachmentsRevisions { get; set; }

        /// <summary>
        /// Binders default label
        /// </summary>
        /// <value>Binders default label</value>
        [DataMember(Name="bindersLabel", EmitDefaultValue=false)]
        public string BindersLabel { get; set; }

        /// <summary>
        /// Binders label translations
        /// </summary>
        /// <value>Binders label translations</value>
        [DataMember(Name="bindersTranslations", EmitDefaultValue=false)]
        public List<RootMaskLabelTranslationDTO> BindersTranslations { get; set; }

        /// <summary>
        /// Senders default label
        /// </summary>
        /// <value>Senders default label</value>
        [DataMember(Name="sendersLabel", EmitDefaultValue=false)]
        public string SendersLabel { get; set; }

        /// <summary>
        /// Senders label translations
        /// </summary>
        /// <value>Senders label translations</value>
        [DataMember(Name="sendersTranslations", EmitDefaultValue=false)]
        public List<RootMaskLabelTranslationDTO> SendersTranslations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RootMaskSettingsDTO {\n");
            sb.Append("  EnableFileSelection: ").Append(EnableFileSelection).Append("\n");
            sb.Append("  EnableScannerSelection: ").Append(EnableScannerSelection).Append("\n");
            sb.Append("  EnableAttachments: ").Append(EnableAttachments).Append("\n");
            sb.Append("  EnableNotes: ").Append(EnableNotes).Append("\n");
            sb.Append("  PreventSwitch: ").Append(PreventSwitch).Append("\n");
            sb.Append("  EnableAttachToActiveTask: ").Append(EnableAttachToActiveTask).Append("\n");
            sb.Append("  EnableStartWorkflow: ").Append(EnableStartWorkflow).Append("\n");
            sb.Append("  EnableInsertAssociation: ").Append(EnableInsertAssociation).Append("\n");
            sb.Append("  EnableInsertFolder: ").Append(EnableInsertFolder).Append("\n");
            sb.Append("  EnableInsertRelation: ").Append(EnableInsertRelation).Append("\n");
            sb.Append("  EnableSendFax: ").Append(EnableSendFax).Append("\n");
            sb.Append("  EnableSendMail: ").Append(EnableSendMail).Append("\n");
            sb.Append("  EnableSecurity: ").Append(EnableSecurity).Append("\n");
            sb.Append("  EnableAttachMemo: ").Append(EnableAttachMemo).Append("\n");
            sb.Append("  EnableDistribution: ").Append(EnableDistribution).Append("\n");
            sb.Append("  EnableScanner: ").Append(EnableScanner).Append("\n");
            sb.Append("  EnableBarcode: ").Append(EnableBarcode).Append("\n");
            sb.Append("  DisableSendingInternalDocs: ").Append(DisableSendingInternalDocs).Append("\n");
            sb.Append("  DisableOutlookProfilationCancellation: ").Append(DisableOutlookProfilationCancellation).Append("\n");
            sb.Append("  EnableDocInPreview: ").Append(EnableDocInPreview).Append("\n");
            sb.Append("  EnableAttachmentsRevisions: ").Append(EnableAttachmentsRevisions).Append("\n");
            sb.Append("  BindersLabel: ").Append(BindersLabel).Append("\n");
            sb.Append("  BindersTranslations: ").Append(BindersTranslations).Append("\n");
            sb.Append("  SendersLabel: ").Append(SendersLabel).Append("\n");
            sb.Append("  SendersTranslations: ").Append(SendersTranslations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RootMaskSettingsDTO);
        }

        /// <summary>
        /// Returns true if RootMaskSettingsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of RootMaskSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RootMaskSettingsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableFileSelection == input.EnableFileSelection ||
                    (this.EnableFileSelection != null &&
                    this.EnableFileSelection.Equals(input.EnableFileSelection))
                ) && 
                (
                    this.EnableScannerSelection == input.EnableScannerSelection ||
                    (this.EnableScannerSelection != null &&
                    this.EnableScannerSelection.Equals(input.EnableScannerSelection))
                ) && 
                (
                    this.EnableAttachments == input.EnableAttachments ||
                    (this.EnableAttachments != null &&
                    this.EnableAttachments.Equals(input.EnableAttachments))
                ) && 
                (
                    this.EnableNotes == input.EnableNotes ||
                    (this.EnableNotes != null &&
                    this.EnableNotes.Equals(input.EnableNotes))
                ) && 
                (
                    this.PreventSwitch == input.PreventSwitch ||
                    (this.PreventSwitch != null &&
                    this.PreventSwitch.Equals(input.PreventSwitch))
                ) && 
                (
                    this.EnableAttachToActiveTask == input.EnableAttachToActiveTask ||
                    (this.EnableAttachToActiveTask != null &&
                    this.EnableAttachToActiveTask.Equals(input.EnableAttachToActiveTask))
                ) && 
                (
                    this.EnableStartWorkflow == input.EnableStartWorkflow ||
                    (this.EnableStartWorkflow != null &&
                    this.EnableStartWorkflow.Equals(input.EnableStartWorkflow))
                ) && 
                (
                    this.EnableInsertAssociation == input.EnableInsertAssociation ||
                    (this.EnableInsertAssociation != null &&
                    this.EnableInsertAssociation.Equals(input.EnableInsertAssociation))
                ) && 
                (
                    this.EnableInsertFolder == input.EnableInsertFolder ||
                    (this.EnableInsertFolder != null &&
                    this.EnableInsertFolder.Equals(input.EnableInsertFolder))
                ) && 
                (
                    this.EnableInsertRelation == input.EnableInsertRelation ||
                    (this.EnableInsertRelation != null &&
                    this.EnableInsertRelation.Equals(input.EnableInsertRelation))
                ) && 
                (
                    this.EnableSendFax == input.EnableSendFax ||
                    (this.EnableSendFax != null &&
                    this.EnableSendFax.Equals(input.EnableSendFax))
                ) && 
                (
                    this.EnableSendMail == input.EnableSendMail ||
                    (this.EnableSendMail != null &&
                    this.EnableSendMail.Equals(input.EnableSendMail))
                ) && 
                (
                    this.EnableSecurity == input.EnableSecurity ||
                    (this.EnableSecurity != null &&
                    this.EnableSecurity.Equals(input.EnableSecurity))
                ) && 
                (
                    this.EnableAttachMemo == input.EnableAttachMemo ||
                    (this.EnableAttachMemo != null &&
                    this.EnableAttachMemo.Equals(input.EnableAttachMemo))
                ) && 
                (
                    this.EnableDistribution == input.EnableDistribution ||
                    (this.EnableDistribution != null &&
                    this.EnableDistribution.Equals(input.EnableDistribution))
                ) && 
                (
                    this.EnableScanner == input.EnableScanner ||
                    (this.EnableScanner != null &&
                    this.EnableScanner.Equals(input.EnableScanner))
                ) && 
                (
                    this.EnableBarcode == input.EnableBarcode ||
                    (this.EnableBarcode != null &&
                    this.EnableBarcode.Equals(input.EnableBarcode))
                ) && 
                (
                    this.DisableSendingInternalDocs == input.DisableSendingInternalDocs ||
                    (this.DisableSendingInternalDocs != null &&
                    this.DisableSendingInternalDocs.Equals(input.DisableSendingInternalDocs))
                ) && 
                (
                    this.DisableOutlookProfilationCancellation == input.DisableOutlookProfilationCancellation ||
                    (this.DisableOutlookProfilationCancellation != null &&
                    this.DisableOutlookProfilationCancellation.Equals(input.DisableOutlookProfilationCancellation))
                ) && 
                (
                    this.EnableDocInPreview == input.EnableDocInPreview ||
                    (this.EnableDocInPreview != null &&
                    this.EnableDocInPreview.Equals(input.EnableDocInPreview))
                ) && 
                (
                    this.EnableAttachmentsRevisions == input.EnableAttachmentsRevisions ||
                    (this.EnableAttachmentsRevisions != null &&
                    this.EnableAttachmentsRevisions.Equals(input.EnableAttachmentsRevisions))
                ) && 
                (
                    this.BindersLabel == input.BindersLabel ||
                    (this.BindersLabel != null &&
                    this.BindersLabel.Equals(input.BindersLabel))
                ) && 
                (
                    this.BindersTranslations == input.BindersTranslations ||
                    this.BindersTranslations != null &&
                    this.BindersTranslations.SequenceEqual(input.BindersTranslations)
                ) && 
                (
                    this.SendersLabel == input.SendersLabel ||
                    (this.SendersLabel != null &&
                    this.SendersLabel.Equals(input.SendersLabel))
                ) && 
                (
                    this.SendersTranslations == input.SendersTranslations ||
                    this.SendersTranslations != null &&
                    this.SendersTranslations.SequenceEqual(input.SendersTranslations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableFileSelection != null)
                    hashCode = hashCode * 59 + this.EnableFileSelection.GetHashCode();
                if (this.EnableScannerSelection != null)
                    hashCode = hashCode * 59 + this.EnableScannerSelection.GetHashCode();
                if (this.EnableAttachments != null)
                    hashCode = hashCode * 59 + this.EnableAttachments.GetHashCode();
                if (this.EnableNotes != null)
                    hashCode = hashCode * 59 + this.EnableNotes.GetHashCode();
                if (this.PreventSwitch != null)
                    hashCode = hashCode * 59 + this.PreventSwitch.GetHashCode();
                if (this.EnableAttachToActiveTask != null)
                    hashCode = hashCode * 59 + this.EnableAttachToActiveTask.GetHashCode();
                if (this.EnableStartWorkflow != null)
                    hashCode = hashCode * 59 + this.EnableStartWorkflow.GetHashCode();
                if (this.EnableInsertAssociation != null)
                    hashCode = hashCode * 59 + this.EnableInsertAssociation.GetHashCode();
                if (this.EnableInsertFolder != null)
                    hashCode = hashCode * 59 + this.EnableInsertFolder.GetHashCode();
                if (this.EnableInsertRelation != null)
                    hashCode = hashCode * 59 + this.EnableInsertRelation.GetHashCode();
                if (this.EnableSendFax != null)
                    hashCode = hashCode * 59 + this.EnableSendFax.GetHashCode();
                if (this.EnableSendMail != null)
                    hashCode = hashCode * 59 + this.EnableSendMail.GetHashCode();
                if (this.EnableSecurity != null)
                    hashCode = hashCode * 59 + this.EnableSecurity.GetHashCode();
                if (this.EnableAttachMemo != null)
                    hashCode = hashCode * 59 + this.EnableAttachMemo.GetHashCode();
                if (this.EnableDistribution != null)
                    hashCode = hashCode * 59 + this.EnableDistribution.GetHashCode();
                if (this.EnableScanner != null)
                    hashCode = hashCode * 59 + this.EnableScanner.GetHashCode();
                if (this.EnableBarcode != null)
                    hashCode = hashCode * 59 + this.EnableBarcode.GetHashCode();
                if (this.DisableSendingInternalDocs != null)
                    hashCode = hashCode * 59 + this.DisableSendingInternalDocs.GetHashCode();
                if (this.DisableOutlookProfilationCancellation != null)
                    hashCode = hashCode * 59 + this.DisableOutlookProfilationCancellation.GetHashCode();
                if (this.EnableDocInPreview != null)
                    hashCode = hashCode * 59 + this.EnableDocInPreview.GetHashCode();
                if (this.EnableAttachmentsRevisions != null)
                    hashCode = hashCode * 59 + this.EnableAttachmentsRevisions.GetHashCode();
                if (this.BindersLabel != null)
                    hashCode = hashCode * 59 + this.BindersLabel.GetHashCode();
                if (this.BindersTranslations != null)
                    hashCode = hashCode * 59 + this.BindersTranslations.GetHashCode();
                if (this.SendersLabel != null)
                    hashCode = hashCode * 59 + this.SendersLabel.GetHashCode();
                if (this.SendersTranslations != null)
                    hashCode = hashCode * 59 + this.SendersTranslations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
