/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Remote sign configuration option
    /// </summary>
    [DataContract]
    public partial class RemoteSignConfigurationOptionDto :  IEquatable<RemoteSignConfigurationOptionDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteSignConfigurationOptionDto" /> class.
        /// </summary>
        /// <param name="name">Parameter name.</param>
        /// <param name="description">Parameter description to show.</param>
        /// <param name="value">Parameter value.</param>
        /// <param name="valueIsSet">If ProtectedValue is true this parameter tells if the value has already been set.</param>
        /// <param name="protectedValue">Value is protected and is not provided. ValueIsSet tells if the value has been set.</param>
        /// <param name="isAdvanced">The value is advanced.</param>
        public RemoteSignConfigurationOptionDto(string name = default(string), string description = default(string), string value = default(string), bool? valueIsSet = default(bool?), bool? protectedValue = default(bool?), bool? isAdvanced = default(bool?))
        {
            this.Name = name;
            this.Description = description;
            this.Value = value;
            this.ValueIsSet = valueIsSet;
            this.ProtectedValue = protectedValue;
            this.IsAdvanced = isAdvanced;
        }
        
        /// <summary>
        /// Parameter name
        /// </summary>
        /// <value>Parameter name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Parameter description to show
        /// </summary>
        /// <value>Parameter description to show</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Parameter value
        /// </summary>
        /// <value>Parameter value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// If ProtectedValue is true this parameter tells if the value has already been set
        /// </summary>
        /// <value>If ProtectedValue is true this parameter tells if the value has already been set</value>
        [DataMember(Name="valueIsSet", EmitDefaultValue=false)]
        public bool? ValueIsSet { get; set; }

        /// <summary>
        /// Value is protected and is not provided. ValueIsSet tells if the value has been set
        /// </summary>
        /// <value>Value is protected and is not provided. ValueIsSet tells if the value has been set</value>
        [DataMember(Name="protectedValue", EmitDefaultValue=false)]
        public bool? ProtectedValue { get; set; }

        /// <summary>
        /// The value is advanced
        /// </summary>
        /// <value>The value is advanced</value>
        [DataMember(Name="isAdvanced", EmitDefaultValue=false)]
        public bool? IsAdvanced { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSignConfigurationOptionDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueIsSet: ").Append(ValueIsSet).Append("\n");
            sb.Append("  ProtectedValue: ").Append(ProtectedValue).Append("\n");
            sb.Append("  IsAdvanced: ").Append(IsAdvanced).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoteSignConfigurationOptionDto);
        }

        /// <summary>
        /// Returns true if RemoteSignConfigurationOptionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoteSignConfigurationOptionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSignConfigurationOptionDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ValueIsSet == input.ValueIsSet ||
                    (this.ValueIsSet != null &&
                    this.ValueIsSet.Equals(input.ValueIsSet))
                ) && 
                (
                    this.ProtectedValue == input.ProtectedValue ||
                    (this.ProtectedValue != null &&
                    this.ProtectedValue.Equals(input.ProtectedValue))
                ) && 
                (
                    this.IsAdvanced == input.IsAdvanced ||
                    (this.IsAdvanced != null &&
                    this.IsAdvanced.Equals(input.IsAdvanced))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ValueIsSet != null)
                    hashCode = hashCode * 59 + this.ValueIsSet.GetHashCode();
                if (this.ProtectedValue != null)
                    hashCode = hashCode * 59 + this.ProtectedValue.GetHashCode();
                if (this.IsAdvanced != null)
                    hashCode = hashCode * 59 + this.IsAdvanced.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
