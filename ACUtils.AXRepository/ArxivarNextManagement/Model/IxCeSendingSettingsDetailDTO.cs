/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of IX-CE sending settings details
    /// </summary>
    [DataContract]
    public partial class IxCeSendingSettingsDetailDTO :  IEquatable<IxCeSendingSettingsDetailDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IxCeSendingSettingsDetailDTO" /> class.
        /// </summary>
        /// <param name="ixBusinessUnitUo">IX Business unit UO.</param>
        /// <param name="ixDocumentType">IX Document type.</param>
        /// <param name="mapping">Fields mapping.</param>
        /// <param name="credentials">Credentials for sending rule.</param>
        public IxCeSendingSettingsDetailDTO(IxBusinessUnitUoSimpleDTO ixBusinessUnitUo = default(IxBusinessUnitUoSimpleDTO), IxDocumentTypeSimpleDTO ixDocumentType = default(IxDocumentTypeSimpleDTO), List<IxCeSendingSettingsMappingDTO> mapping = default(List<IxCeSendingSettingsMappingDTO>), IxCredentialsDTO credentials = default(IxCredentialsDTO))
        {
            this.IxBusinessUnitUo = ixBusinessUnitUo;
            this.IxDocumentType = ixDocumentType;
            this.Mapping = mapping;
            this.Credentials = credentials;
        }
        
        /// <summary>
        /// IX Business unit UO
        /// </summary>
        /// <value>IX Business unit UO</value>
        [DataMember(Name="ixBusinessUnitUo", EmitDefaultValue=false)]
        public IxBusinessUnitUoSimpleDTO IxBusinessUnitUo { get; set; }

        /// <summary>
        /// IX Document type
        /// </summary>
        /// <value>IX Document type</value>
        [DataMember(Name="ixDocumentType", EmitDefaultValue=false)]
        public IxDocumentTypeSimpleDTO IxDocumentType { get; set; }

        /// <summary>
        /// Fields mapping
        /// </summary>
        /// <value>Fields mapping</value>
        [DataMember(Name="mapping", EmitDefaultValue=false)]
        public List<IxCeSendingSettingsMappingDTO> Mapping { get; set; }

        /// <summary>
        /// Credentials for sending rule
        /// </summary>
        /// <value>Credentials for sending rule</value>
        [DataMember(Name="credentials", EmitDefaultValue=false)]
        public IxCredentialsDTO Credentials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IxCeSendingSettingsDetailDTO {\n");
            sb.Append("  IxBusinessUnitUo: ").Append(IxBusinessUnitUo).Append("\n");
            sb.Append("  IxDocumentType: ").Append(IxDocumentType).Append("\n");
            sb.Append("  Mapping: ").Append(Mapping).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IxCeSendingSettingsDetailDTO);
        }

        /// <summary>
        /// Returns true if IxCeSendingSettingsDetailDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of IxCeSendingSettingsDetailDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IxCeSendingSettingsDetailDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IxBusinessUnitUo == input.IxBusinessUnitUo ||
                    (this.IxBusinessUnitUo != null &&
                    this.IxBusinessUnitUo.Equals(input.IxBusinessUnitUo))
                ) && 
                (
                    this.IxDocumentType == input.IxDocumentType ||
                    (this.IxDocumentType != null &&
                    this.IxDocumentType.Equals(input.IxDocumentType))
                ) && 
                (
                    this.Mapping == input.Mapping ||
                    this.Mapping != null &&
                    this.Mapping.SequenceEqual(input.Mapping)
                ) && 
                (
                    this.Credentials == input.Credentials ||
                    (this.Credentials != null &&
                    this.Credentials.Equals(input.Credentials))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IxBusinessUnitUo != null)
                    hashCode = hashCode * 59 + this.IxBusinessUnitUo.GetHashCode();
                if (this.IxDocumentType != null)
                    hashCode = hashCode * 59 + this.IxDocumentType.GetHashCode();
                if (this.Mapping != null)
                    hashCode = hashCode * 59 + this.Mapping.GetHashCode();
                if (this.Credentials != null)
                    hashCode = hashCode * 59 + this.Credentials.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
