/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class for users massive import request
    /// </summary>
    [DataContract]
    public partial class UsersMassiveImportRequestDTO :  IEquatable<UsersMassiveImportRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersMassiveImportRequestDTO" /> class.
        /// </summary>
        /// <param name="usersData">Users data to import.</param>
        /// <param name="restoreDeleted">Restore users if they are deleted.</param>
        /// <param name="userModel">Common users data.</param>
        /// <param name="mailSettings">Common users mail settings.</param>
        /// <param name="states">Common users states.</param>
        /// <param name="impersonate">Common users impersonate.</param>
        public UsersMassiveImportRequestDTO(List<UsersMassiveImportUserDataDTO> usersData = default(List<UsersMassiveImportUserDataDTO>), bool? restoreDeleted = default(bool?), UserInsertDTO userModel = default(UserInsertDTO), MailAccountSettingsDTO mailSettings = default(MailAccountSettingsDTO), List<UserSecurityStateDTO> states = default(List<UserSecurityStateDTO>), ImpersonateDTO impersonate = default(ImpersonateDTO))
        {
            this.UsersData = usersData;
            this.RestoreDeleted = restoreDeleted;
            this.UserModel = userModel;
            this.MailSettings = mailSettings;
            this.States = states;
            this.Impersonate = impersonate;
        }
        
        /// <summary>
        /// Users data to import
        /// </summary>
        /// <value>Users data to import</value>
        [DataMember(Name="usersData", EmitDefaultValue=false)]
        public List<UsersMassiveImportUserDataDTO> UsersData { get; set; }

        /// <summary>
        /// Restore users if they are deleted
        /// </summary>
        /// <value>Restore users if they are deleted</value>
        [DataMember(Name="restoreDeleted", EmitDefaultValue=false)]
        public bool? RestoreDeleted { get; set; }

        /// <summary>
        /// Common users data
        /// </summary>
        /// <value>Common users data</value>
        [DataMember(Name="userModel", EmitDefaultValue=false)]
        public UserInsertDTO UserModel { get; set; }

        /// <summary>
        /// Common users mail settings
        /// </summary>
        /// <value>Common users mail settings</value>
        [DataMember(Name="mailSettings", EmitDefaultValue=false)]
        public MailAccountSettingsDTO MailSettings { get; set; }

        /// <summary>
        /// Common users states
        /// </summary>
        /// <value>Common users states</value>
        [DataMember(Name="states", EmitDefaultValue=false)]
        public List<UserSecurityStateDTO> States { get; set; }

        /// <summary>
        /// Common users impersonate
        /// </summary>
        /// <value>Common users impersonate</value>
        [DataMember(Name="impersonate", EmitDefaultValue=false)]
        public ImpersonateDTO Impersonate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsersMassiveImportRequestDTO {\n");
            sb.Append("  UsersData: ").Append(UsersData).Append("\n");
            sb.Append("  RestoreDeleted: ").Append(RestoreDeleted).Append("\n");
            sb.Append("  UserModel: ").Append(UserModel).Append("\n");
            sb.Append("  MailSettings: ").Append(MailSettings).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  Impersonate: ").Append(Impersonate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsersMassiveImportRequestDTO);
        }

        /// <summary>
        /// Returns true if UsersMassiveImportRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UsersMassiveImportRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsersMassiveImportRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UsersData == input.UsersData ||
                    this.UsersData != null &&
                    this.UsersData.SequenceEqual(input.UsersData)
                ) && 
                (
                    this.RestoreDeleted == input.RestoreDeleted ||
                    (this.RestoreDeleted != null &&
                    this.RestoreDeleted.Equals(input.RestoreDeleted))
                ) && 
                (
                    this.UserModel == input.UserModel ||
                    (this.UserModel != null &&
                    this.UserModel.Equals(input.UserModel))
                ) && 
                (
                    this.MailSettings == input.MailSettings ||
                    (this.MailSettings != null &&
                    this.MailSettings.Equals(input.MailSettings))
                ) && 
                (
                    this.States == input.States ||
                    this.States != null &&
                    this.States.SequenceEqual(input.States)
                ) && 
                (
                    this.Impersonate == input.Impersonate ||
                    (this.Impersonate != null &&
                    this.Impersonate.Equals(input.Impersonate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UsersData != null)
                    hashCode = hashCode * 59 + this.UsersData.GetHashCode();
                if (this.RestoreDeleted != null)
                    hashCode = hashCode * 59 + this.RestoreDeleted.GetHashCode();
                if (this.UserModel != null)
                    hashCode = hashCode * 59 + this.UserModel.GetHashCode();
                if (this.MailSettings != null)
                    hashCode = hashCode * 59 + this.MailSettings.GetHashCode();
                if (this.States != null)
                    hashCode = hashCode * 59 + this.States.GetHashCode();
                if (this.Impersonate != null)
                    hashCode = hashCode * 59 + this.Impersonate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
