/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of Ix Document type detail
    /// </summary>
    [DataContract]
    public partial class IxDocumentTypeDetailDTO :  IEquatable<IxDocumentTypeDetailDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IxDocumentTypeDetailDTO" /> class.
        /// </summary>
        /// <param name="id">Unique identifier.</param>
        /// <param name="description">Description.</param>
        /// <param name="identifier">Identifier.</param>
        /// <param name="retentionCronExpression">Retention cron expression.</param>
        /// <param name="retentionDateTime">Retention date time.</param>
        /// <param name="conservationCronExpression">Conservation cron expression.</param>
        /// <param name="conservationDateTime">Conservation date time.</param>
        /// <param name="excludeAttachments">Exclude attachments.</param>
        /// <param name="fields">Fields.</param>
        /// <param name="groupByDocType">Group by document type.</param>
        /// <param name="closingTime">Closing time.</param>
        /// <param name="file">Possible values:  0: Required  1: Optional .</param>
        /// <param name="sign">Possible values:  0: None  1: CheckSign  2: CheckSignDoSystemSign  3: CheckSignDoProducerSign  4: ValidateSign  5: ValidateSignDoSystemSign  6: ValidateSignDoProducerSign  7: DoSystemSign  8: DoProducerSign  9: ValidateSignForceSystemSign  10: ValidateSignForceProducerSign .</param>
        /// <param name="timestamp">Possible values:  0: None  1: ValidateTimestamp  2: ValidateTimestampDoTimestamp .</param>
        /// <param name="privacy">Possible values:  0: Generic  1: Individual  2: Sensitive  3: Judicial .</param>
        /// <param name="protection">Possible values:  0: None .</param>
        /// <param name="category">Possible values:  0: Document  1: AdministrativeDocument  2: Folder .</param>
        /// <param name="closingType">Possible values:  0: Static  1: Dynamic .</param>
        public IxDocumentTypeDetailDTO(long? id = default(long?), string description = default(string), string identifier = default(string), string retentionCronExpression = default(string), DateTime? retentionDateTime = default(DateTime?), string conservationCronExpression = default(string), DateTime? conservationDateTime = default(DateTime?), bool? excludeAttachments = default(bool?), List<IxDocumentTypeFieldDTO> fields = default(List<IxDocumentTypeFieldDTO>), bool? groupByDocType = default(bool?), string closingTime = default(string), int? file = default(int?), int? sign = default(int?), int? timestamp = default(int?), int? privacy = default(int?), int? protection = default(int?), int? category = default(int?), int? closingType = default(int?))
        {
            this.Id = id;
            this.Description = description;
            this.Identifier = identifier;
            this.RetentionCronExpression = retentionCronExpression;
            this.RetentionDateTime = retentionDateTime;
            this.ConservationCronExpression = conservationCronExpression;
            this.ConservationDateTime = conservationDateTime;
            this.ExcludeAttachments = excludeAttachments;
            this.Fields = fields;
            this.GroupByDocType = groupByDocType;
            this.ClosingTime = closingTime;
            this.File = file;
            this.Sign = sign;
            this.Timestamp = timestamp;
            this.Privacy = privacy;
            this.Protection = protection;
            this.Category = category;
            this.ClosingType = closingType;
        }
        
        /// <summary>
        /// Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Retention cron expression
        /// </summary>
        /// <value>Retention cron expression</value>
        [DataMember(Name="retentionCronExpression", EmitDefaultValue=false)]
        public string RetentionCronExpression { get; set; }

        /// <summary>
        /// Retention date time
        /// </summary>
        /// <value>Retention date time</value>
        [DataMember(Name="retentionDateTime", EmitDefaultValue=false)]
        public DateTime? RetentionDateTime { get; set; }

        /// <summary>
        /// Conservation cron expression
        /// </summary>
        /// <value>Conservation cron expression</value>
        [DataMember(Name="conservationCronExpression", EmitDefaultValue=false)]
        public string ConservationCronExpression { get; set; }

        /// <summary>
        /// Conservation date time
        /// </summary>
        /// <value>Conservation date time</value>
        [DataMember(Name="conservationDateTime", EmitDefaultValue=false)]
        public DateTime? ConservationDateTime { get; set; }

        /// <summary>
        /// Exclude attachments
        /// </summary>
        /// <value>Exclude attachments</value>
        [DataMember(Name="excludeAttachments", EmitDefaultValue=false)]
        public bool? ExcludeAttachments { get; set; }

        /// <summary>
        /// Fields
        /// </summary>
        /// <value>Fields</value>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<IxDocumentTypeFieldDTO> Fields { get; set; }

        /// <summary>
        /// Group by document type
        /// </summary>
        /// <value>Group by document type</value>
        [DataMember(Name="groupByDocType", EmitDefaultValue=false)]
        public bool? GroupByDocType { get; set; }

        /// <summary>
        /// Closing time
        /// </summary>
        /// <value>Closing time</value>
        [DataMember(Name="closingTime", EmitDefaultValue=false)]
        public string ClosingTime { get; set; }

        /// <summary>
        /// Possible values:  0: Required  1: Optional 
        /// </summary>
        /// <value>Possible values:  0: Required  1: Optional </value>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public int? File { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: CheckSign  2: CheckSignDoSystemSign  3: CheckSignDoProducerSign  4: ValidateSign  5: ValidateSignDoSystemSign  6: ValidateSignDoProducerSign  7: DoSystemSign  8: DoProducerSign  9: ValidateSignForceSystemSign  10: ValidateSignForceProducerSign 
        /// </summary>
        /// <value>Possible values:  0: None  1: CheckSign  2: CheckSignDoSystemSign  3: CheckSignDoProducerSign  4: ValidateSign  5: ValidateSignDoSystemSign  6: ValidateSignDoProducerSign  7: DoSystemSign  8: DoProducerSign  9: ValidateSignForceSystemSign  10: ValidateSignForceProducerSign </value>
        [DataMember(Name="sign", EmitDefaultValue=false)]
        public int? Sign { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: ValidateTimestamp  2: ValidateTimestampDoTimestamp 
        /// </summary>
        /// <value>Possible values:  0: None  1: ValidateTimestamp  2: ValidateTimestampDoTimestamp </value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int? Timestamp { get; set; }

        /// <summary>
        /// Possible values:  0: Generic  1: Individual  2: Sensitive  3: Judicial 
        /// </summary>
        /// <value>Possible values:  0: Generic  1: Individual  2: Sensitive  3: Judicial </value>
        [DataMember(Name="privacy", EmitDefaultValue=false)]
        public int? Privacy { get; set; }

        /// <summary>
        /// Possible values:  0: None 
        /// </summary>
        /// <value>Possible values:  0: None </value>
        [DataMember(Name="protection", EmitDefaultValue=false)]
        public int? Protection { get; set; }

        /// <summary>
        /// Possible values:  0: Document  1: AdministrativeDocument  2: Folder 
        /// </summary>
        /// <value>Possible values:  0: Document  1: AdministrativeDocument  2: Folder </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public int? Category { get; set; }

        /// <summary>
        /// Possible values:  0: Static  1: Dynamic 
        /// </summary>
        /// <value>Possible values:  0: Static  1: Dynamic </value>
        [DataMember(Name="closingType", EmitDefaultValue=false)]
        public int? ClosingType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IxDocumentTypeDetailDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  RetentionCronExpression: ").Append(RetentionCronExpression).Append("\n");
            sb.Append("  RetentionDateTime: ").Append(RetentionDateTime).Append("\n");
            sb.Append("  ConservationCronExpression: ").Append(ConservationCronExpression).Append("\n");
            sb.Append("  ConservationDateTime: ").Append(ConservationDateTime).Append("\n");
            sb.Append("  ExcludeAttachments: ").Append(ExcludeAttachments).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  GroupByDocType: ").Append(GroupByDocType).Append("\n");
            sb.Append("  ClosingTime: ").Append(ClosingTime).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("  Protection: ").Append(Protection).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ClosingType: ").Append(ClosingType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IxDocumentTypeDetailDTO);
        }

        /// <summary>
        /// Returns true if IxDocumentTypeDetailDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of IxDocumentTypeDetailDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IxDocumentTypeDetailDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.RetentionCronExpression == input.RetentionCronExpression ||
                    (this.RetentionCronExpression != null &&
                    this.RetentionCronExpression.Equals(input.RetentionCronExpression))
                ) && 
                (
                    this.RetentionDateTime == input.RetentionDateTime ||
                    (this.RetentionDateTime != null &&
                    this.RetentionDateTime.Equals(input.RetentionDateTime))
                ) && 
                (
                    this.ConservationCronExpression == input.ConservationCronExpression ||
                    (this.ConservationCronExpression != null &&
                    this.ConservationCronExpression.Equals(input.ConservationCronExpression))
                ) && 
                (
                    this.ConservationDateTime == input.ConservationDateTime ||
                    (this.ConservationDateTime != null &&
                    this.ConservationDateTime.Equals(input.ConservationDateTime))
                ) && 
                (
                    this.ExcludeAttachments == input.ExcludeAttachments ||
                    (this.ExcludeAttachments != null &&
                    this.ExcludeAttachments.Equals(input.ExcludeAttachments))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.GroupByDocType == input.GroupByDocType ||
                    (this.GroupByDocType != null &&
                    this.GroupByDocType.Equals(input.GroupByDocType))
                ) && 
                (
                    this.ClosingTime == input.ClosingTime ||
                    (this.ClosingTime != null &&
                    this.ClosingTime.Equals(input.ClosingTime))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.Sign == input.Sign ||
                    (this.Sign != null &&
                    this.Sign.Equals(input.Sign))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Privacy == input.Privacy ||
                    (this.Privacy != null &&
                    this.Privacy.Equals(input.Privacy))
                ) && 
                (
                    this.Protection == input.Protection ||
                    (this.Protection != null &&
                    this.Protection.Equals(input.Protection))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.ClosingType == input.ClosingType ||
                    (this.ClosingType != null &&
                    this.ClosingType.Equals(input.ClosingType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.RetentionCronExpression != null)
                    hashCode = hashCode * 59 + this.RetentionCronExpression.GetHashCode();
                if (this.RetentionDateTime != null)
                    hashCode = hashCode * 59 + this.RetentionDateTime.GetHashCode();
                if (this.ConservationCronExpression != null)
                    hashCode = hashCode * 59 + this.ConservationCronExpression.GetHashCode();
                if (this.ConservationDateTime != null)
                    hashCode = hashCode * 59 + this.ConservationDateTime.GetHashCode();
                if (this.ExcludeAttachments != null)
                    hashCode = hashCode * 59 + this.ExcludeAttachments.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.GroupByDocType != null)
                    hashCode = hashCode * 59 + this.GroupByDocType.GetHashCode();
                if (this.ClosingTime != null)
                    hashCode = hashCode * 59 + this.ClosingTime.GetHashCode();
                if (this.File != null)
                    hashCode = hashCode * 59 + this.File.GetHashCode();
                if (this.Sign != null)
                    hashCode = hashCode * 59 + this.Sign.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Privacy != null)
                    hashCode = hashCode * 59 + this.Privacy.GetHashCode();
                if (this.Protection != null)
                    hashCode = hashCode * 59 + this.Protection.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.ClosingType != null)
                    hashCode = hashCode * 59 + this.ClosingType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
