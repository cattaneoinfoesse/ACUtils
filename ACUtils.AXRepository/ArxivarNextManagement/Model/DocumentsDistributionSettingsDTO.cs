/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class for document distribution settings
    /// </summary>
    [DataContract]
    public partial class DocumentsDistributionSettingsDTO :  IEquatable<DocumentsDistributionSettingsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsDistributionSettingsDTO" /> class.
        /// </summary>
        /// <param name="enableDistribution">Enable document distribution.</param>
        /// <param name="enableCancelDistribution">Enable cancel distribution.</param>
        /// <param name="distributionFormula">Title of distribution (formula).</param>
        public DocumentsDistributionSettingsDTO(bool? enableDistribution = default(bool?), bool? enableCancelDistribution = default(bool?), string distributionFormula = default(string))
        {
            this.EnableDistribution = enableDistribution;
            this.EnableCancelDistribution = enableCancelDistribution;
            this.DistributionFormula = distributionFormula;
        }
        
        /// <summary>
        /// Enable document distribution
        /// </summary>
        /// <value>Enable document distribution</value>
        [DataMember(Name="enableDistribution", EmitDefaultValue=false)]
        public bool? EnableDistribution { get; set; }

        /// <summary>
        /// Enable cancel distribution
        /// </summary>
        /// <value>Enable cancel distribution</value>
        [DataMember(Name="enableCancelDistribution", EmitDefaultValue=false)]
        public bool? EnableCancelDistribution { get; set; }

        /// <summary>
        /// Title of distribution (formula)
        /// </summary>
        /// <value>Title of distribution (formula)</value>
        [DataMember(Name="distributionFormula", EmitDefaultValue=false)]
        public string DistributionFormula { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentsDistributionSettingsDTO {\n");
            sb.Append("  EnableDistribution: ").Append(EnableDistribution).Append("\n");
            sb.Append("  EnableCancelDistribution: ").Append(EnableCancelDistribution).Append("\n");
            sb.Append("  DistributionFormula: ").Append(DistributionFormula).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentsDistributionSettingsDTO);
        }

        /// <summary>
        /// Returns true if DocumentsDistributionSettingsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentsDistributionSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentsDistributionSettingsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableDistribution == input.EnableDistribution ||
                    (this.EnableDistribution != null &&
                    this.EnableDistribution.Equals(input.EnableDistribution))
                ) && 
                (
                    this.EnableCancelDistribution == input.EnableCancelDistribution ||
                    (this.EnableCancelDistribution != null &&
                    this.EnableCancelDistribution.Equals(input.EnableCancelDistribution))
                ) && 
                (
                    this.DistributionFormula == input.DistributionFormula ||
                    (this.DistributionFormula != null &&
                    this.DistributionFormula.Equals(input.DistributionFormula))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableDistribution != null)
                    hashCode = hashCode * 59 + this.EnableDistribution.GetHashCode();
                if (this.EnableCancelDistribution != null)
                    hashCode = hashCode * 59 + this.EnableCancelDistribution.GetHashCode();
                if (this.DistributionFormula != null)
                    hashCode = hashCode * 59 + this.DistributionFormula.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
