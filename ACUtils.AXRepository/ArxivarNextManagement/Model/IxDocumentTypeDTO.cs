/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of Ix Document type
    /// </summary>
    [DataContract]
    public partial class IxDocumentTypeDTO :  IEquatable<IxDocumentTypeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IxDocumentTypeDTO" /> class.
        /// </summary>
        /// <param name="id">Identifier.</param>
        /// <param name="description">Description.</param>
        /// <param name="extraInfo">Extra info.</param>
        /// <param name="retentionCronExpression">Retention cron expression.</param>
        /// <param name="conservationCronExpression">Conservation cron expression.</param>
        /// <param name="isInUse">Is in use.</param>
        /// <param name="acts">Acts.</param>
        /// <param name="isSystem">Is system.</param>
        /// <param name="isConfigured">Is configured.</param>
        /// <param name="modelTypes">Model types.</param>
        /// <param name="isNumerationControlEnabled">Is numeration control enabled.</param>
        /// <param name="category">Possible values:  0: Document  1: AdministrativeDocument  2: Folder .</param>
        public IxDocumentTypeDTO(string id = default(string), string description = default(string), string extraInfo = default(string), string retentionCronExpression = default(string), string conservationCronExpression = default(string), bool? isInUse = default(bool?), List<string> acts = default(List<string>), bool? isSystem = default(bool?), bool? isConfigured = default(bool?), List<IxDocumentTypeModelDTO> modelTypes = default(List<IxDocumentTypeModelDTO>), bool? isNumerationControlEnabled = default(bool?), int? category = default(int?))
        {
            this.Id = id;
            this.Description = description;
            this.ExtraInfo = extraInfo;
            this.RetentionCronExpression = retentionCronExpression;
            this.ConservationCronExpression = conservationCronExpression;
            this.IsInUse = isInUse;
            this.Acts = acts;
            this.IsSystem = isSystem;
            this.IsConfigured = isConfigured;
            this.ModelTypes = modelTypes;
            this.IsNumerationControlEnabled = isNumerationControlEnabled;
            this.Category = category;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Extra info
        /// </summary>
        /// <value>Extra info</value>
        [DataMember(Name="extraInfo", EmitDefaultValue=false)]
        public string ExtraInfo { get; set; }

        /// <summary>
        /// Retention cron expression
        /// </summary>
        /// <value>Retention cron expression</value>
        [DataMember(Name="retentionCronExpression", EmitDefaultValue=false)]
        public string RetentionCronExpression { get; set; }

        /// <summary>
        /// Conservation cron expression
        /// </summary>
        /// <value>Conservation cron expression</value>
        [DataMember(Name="conservationCronExpression", EmitDefaultValue=false)]
        public string ConservationCronExpression { get; set; }

        /// <summary>
        /// Is in use
        /// </summary>
        /// <value>Is in use</value>
        [DataMember(Name="isInUse", EmitDefaultValue=false)]
        public bool? IsInUse { get; set; }

        /// <summary>
        /// Acts
        /// </summary>
        /// <value>Acts</value>
        [DataMember(Name="acts", EmitDefaultValue=false)]
        public List<string> Acts { get; set; }

        /// <summary>
        /// Is system
        /// </summary>
        /// <value>Is system</value>
        [DataMember(Name="isSystem", EmitDefaultValue=false)]
        public bool? IsSystem { get; set; }

        /// <summary>
        /// Is configured
        /// </summary>
        /// <value>Is configured</value>
        [DataMember(Name="isConfigured", EmitDefaultValue=false)]
        public bool? IsConfigured { get; set; }

        /// <summary>
        /// Model types
        /// </summary>
        /// <value>Model types</value>
        [DataMember(Name="modelTypes", EmitDefaultValue=false)]
        public List<IxDocumentTypeModelDTO> ModelTypes { get; set; }

        /// <summary>
        /// Is numeration control enabled
        /// </summary>
        /// <value>Is numeration control enabled</value>
        [DataMember(Name="isNumerationControlEnabled", EmitDefaultValue=false)]
        public bool? IsNumerationControlEnabled { get; set; }

        /// <summary>
        /// Possible values:  0: Document  1: AdministrativeDocument  2: Folder 
        /// </summary>
        /// <value>Possible values:  0: Document  1: AdministrativeDocument  2: Folder </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public int? Category { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IxDocumentTypeDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExtraInfo: ").Append(ExtraInfo).Append("\n");
            sb.Append("  RetentionCronExpression: ").Append(RetentionCronExpression).Append("\n");
            sb.Append("  ConservationCronExpression: ").Append(ConservationCronExpression).Append("\n");
            sb.Append("  IsInUse: ").Append(IsInUse).Append("\n");
            sb.Append("  Acts: ").Append(Acts).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  IsConfigured: ").Append(IsConfigured).Append("\n");
            sb.Append("  ModelTypes: ").Append(ModelTypes).Append("\n");
            sb.Append("  IsNumerationControlEnabled: ").Append(IsNumerationControlEnabled).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IxDocumentTypeDTO);
        }

        /// <summary>
        /// Returns true if IxDocumentTypeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of IxDocumentTypeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IxDocumentTypeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExtraInfo == input.ExtraInfo ||
                    (this.ExtraInfo != null &&
                    this.ExtraInfo.Equals(input.ExtraInfo))
                ) && 
                (
                    this.RetentionCronExpression == input.RetentionCronExpression ||
                    (this.RetentionCronExpression != null &&
                    this.RetentionCronExpression.Equals(input.RetentionCronExpression))
                ) && 
                (
                    this.ConservationCronExpression == input.ConservationCronExpression ||
                    (this.ConservationCronExpression != null &&
                    this.ConservationCronExpression.Equals(input.ConservationCronExpression))
                ) && 
                (
                    this.IsInUse == input.IsInUse ||
                    (this.IsInUse != null &&
                    this.IsInUse.Equals(input.IsInUse))
                ) && 
                (
                    this.Acts == input.Acts ||
                    this.Acts != null &&
                    this.Acts.SequenceEqual(input.Acts)
                ) && 
                (
                    this.IsSystem == input.IsSystem ||
                    (this.IsSystem != null &&
                    this.IsSystem.Equals(input.IsSystem))
                ) && 
                (
                    this.IsConfigured == input.IsConfigured ||
                    (this.IsConfigured != null &&
                    this.IsConfigured.Equals(input.IsConfigured))
                ) && 
                (
                    this.ModelTypes == input.ModelTypes ||
                    this.ModelTypes != null &&
                    this.ModelTypes.SequenceEqual(input.ModelTypes)
                ) && 
                (
                    this.IsNumerationControlEnabled == input.IsNumerationControlEnabled ||
                    (this.IsNumerationControlEnabled != null &&
                    this.IsNumerationControlEnabled.Equals(input.IsNumerationControlEnabled))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExtraInfo != null)
                    hashCode = hashCode * 59 + this.ExtraInfo.GetHashCode();
                if (this.RetentionCronExpression != null)
                    hashCode = hashCode * 59 + this.RetentionCronExpression.GetHashCode();
                if (this.ConservationCronExpression != null)
                    hashCode = hashCode * 59 + this.ConservationCronExpression.GetHashCode();
                if (this.IsInUse != null)
                    hashCode = hashCode * 59 + this.IsInUse.GetHashCode();
                if (this.Acts != null)
                    hashCode = hashCode * 59 + this.Acts.GetHashCode();
                if (this.IsSystem != null)
                    hashCode = hashCode * 59 + this.IsSystem.GetHashCode();
                if (this.IsConfigured != null)
                    hashCode = hashCode * 59 + this.IsConfigured.GetHashCode();
                if (this.ModelTypes != null)
                    hashCode = hashCode * 59 + this.ModelTypes.GetHashCode();
                if (this.IsNumerationControlEnabled != null)
                    hashCode = hashCode * 59 + this.IsNumerationControlEnabled.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
