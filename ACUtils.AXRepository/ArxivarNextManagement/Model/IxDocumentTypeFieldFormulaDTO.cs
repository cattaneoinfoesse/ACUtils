/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of Ix document type field formula
    /// </summary>
    [DataContract]
    public partial class IxDocumentTypeFieldFormulaDTO :  IEquatable<IxDocumentTypeFieldFormulaDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IxDocumentTypeFieldFormulaDTO" /> class.
        /// </summary>
        /// <param name="type">Possible values:  0: YearFromDate  1: DatePart  2: Regex  3: Replace .</param>
        /// <param name="sourceFieldName">Source field name.</param>
        /// <param name="formulaExpr">Formula expression.</param>
        public IxDocumentTypeFieldFormulaDTO(int? type = default(int?), string sourceFieldName = default(string), string formulaExpr = default(string))
        {
            this.Type = type;
            this.SourceFieldName = sourceFieldName;
            this.FormulaExpr = formulaExpr;
        }
        
        /// <summary>
        /// Possible values:  0: YearFromDate  1: DatePart  2: Regex  3: Replace 
        /// </summary>
        /// <value>Possible values:  0: YearFromDate  1: DatePart  2: Regex  3: Replace </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Source field name
        /// </summary>
        /// <value>Source field name</value>
        [DataMember(Name="sourceFieldName", EmitDefaultValue=false)]
        public string SourceFieldName { get; set; }

        /// <summary>
        /// Formula expression
        /// </summary>
        /// <value>Formula expression</value>
        [DataMember(Name="formulaExpr", EmitDefaultValue=false)]
        public string FormulaExpr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IxDocumentTypeFieldFormulaDTO {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SourceFieldName: ").Append(SourceFieldName).Append("\n");
            sb.Append("  FormulaExpr: ").Append(FormulaExpr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IxDocumentTypeFieldFormulaDTO);
        }

        /// <summary>
        /// Returns true if IxDocumentTypeFieldFormulaDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of IxDocumentTypeFieldFormulaDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IxDocumentTypeFieldFormulaDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SourceFieldName == input.SourceFieldName ||
                    (this.SourceFieldName != null &&
                    this.SourceFieldName.Equals(input.SourceFieldName))
                ) && 
                (
                    this.FormulaExpr == input.FormulaExpr ||
                    (this.FormulaExpr != null &&
                    this.FormulaExpr.Equals(input.FormulaExpr))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SourceFieldName != null)
                    hashCode = hashCode * 59 + this.SourceFieldName.GetHashCode();
                if (this.FormulaExpr != null)
                    hashCode = hashCode * 59 + this.FormulaExpr.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
