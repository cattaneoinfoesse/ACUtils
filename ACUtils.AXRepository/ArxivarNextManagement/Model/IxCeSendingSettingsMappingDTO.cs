/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of field mapping for IX-CE sending settings
    /// </summary>
    [DataContract]
    public partial class IxCeSendingSettingsMappingDTO :  IEquatable<IxCeSendingSettingsMappingDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IxCeSendingSettingsMappingDTO" /> class.
        /// </summary>
        /// <param name="name">IX field name.</param>
        /// <param name="description">IX field description.</param>
        /// <param name="arxField">Arxivar field.</param>
        /// <param name="required">Boolean which is true if the configuration is required (Ignored in update).</param>
        /// <param name="readOnly">Boolean which is true if the configuration is not editable (Ignored in update).</param>
        /// <param name="fieldType">Possible values:  0: String  1: Int16  2: Int32  3: Int64  4: Datetime  5: Boolean  6: Double  7: Date .</param>
        /// <param name="useDefault">Boolean which is true if field has default value.</param>
        /// <param name="defaultStringValue">Default string value.</param>
        /// <param name="defaultDateTimeValue">Default datetime value.</param>
        /// <param name="defaultBooleanValue">Default boolean value.</param>
        /// <param name="defaultDoubleValue">Default double value.</param>
        /// <param name="multivalue">Metadata is a multivalue (Ignored in update).</param>
        public IxCeSendingSettingsMappingDTO(string name = default(string), string description = default(string), FieldManagementDTO arxField = default(FieldManagementDTO), bool? required = default(bool?), bool? readOnly = default(bool?), int? fieldType = default(int?), bool? useDefault = default(bool?), string defaultStringValue = default(string), DateTime? defaultDateTimeValue = default(DateTime?), bool? defaultBooleanValue = default(bool?), double? defaultDoubleValue = default(double?), bool? multivalue = default(bool?))
        {
            this.Name = name;
            this.Description = description;
            this.ArxField = arxField;
            this.Required = required;
            this.ReadOnly = readOnly;
            this.FieldType = fieldType;
            this.UseDefault = useDefault;
            this.DefaultStringValue = defaultStringValue;
            this.DefaultDateTimeValue = defaultDateTimeValue;
            this.DefaultBooleanValue = defaultBooleanValue;
            this.DefaultDoubleValue = defaultDoubleValue;
            this.Multivalue = multivalue;
        }
        
        /// <summary>
        /// IX field name
        /// </summary>
        /// <value>IX field name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// IX field description
        /// </summary>
        /// <value>IX field description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Arxivar field
        /// </summary>
        /// <value>Arxivar field</value>
        [DataMember(Name="arxField", EmitDefaultValue=false)]
        public FieldManagementDTO ArxField { get; set; }

        /// <summary>
        /// Boolean which is true if the configuration is required (Ignored in update)
        /// </summary>
        /// <value>Boolean which is true if the configuration is required (Ignored in update)</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Boolean which is true if the configuration is not editable (Ignored in update)
        /// </summary>
        /// <value>Boolean which is true if the configuration is not editable (Ignored in update)</value>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? ReadOnly { get; set; }

        /// <summary>
        /// Possible values:  0: String  1: Int16  2: Int32  3: Int64  4: Datetime  5: Boolean  6: Double  7: Date 
        /// </summary>
        /// <value>Possible values:  0: String  1: Int16  2: Int32  3: Int64  4: Datetime  5: Boolean  6: Double  7: Date </value>
        [DataMember(Name="fieldType", EmitDefaultValue=false)]
        public int? FieldType { get; set; }

        /// <summary>
        /// Boolean which is true if field has default value
        /// </summary>
        /// <value>Boolean which is true if field has default value</value>
        [DataMember(Name="useDefault", EmitDefaultValue=false)]
        public bool? UseDefault { get; set; }

        /// <summary>
        /// Default string value
        /// </summary>
        /// <value>Default string value</value>
        [DataMember(Name="defaultStringValue", EmitDefaultValue=false)]
        public string DefaultStringValue { get; set; }

        /// <summary>
        /// Default datetime value
        /// </summary>
        /// <value>Default datetime value</value>
        [DataMember(Name="defaultDateTimeValue", EmitDefaultValue=false)]
        public DateTime? DefaultDateTimeValue { get; set; }

        /// <summary>
        /// Default boolean value
        /// </summary>
        /// <value>Default boolean value</value>
        [DataMember(Name="defaultBooleanValue", EmitDefaultValue=false)]
        public bool? DefaultBooleanValue { get; set; }

        /// <summary>
        /// Default double value
        /// </summary>
        /// <value>Default double value</value>
        [DataMember(Name="defaultDoubleValue", EmitDefaultValue=false)]
        public double? DefaultDoubleValue { get; set; }

        /// <summary>
        /// Metadata is a multivalue (Ignored in update)
        /// </summary>
        /// <value>Metadata is a multivalue (Ignored in update)</value>
        [DataMember(Name="multivalue", EmitDefaultValue=false)]
        public bool? Multivalue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IxCeSendingSettingsMappingDTO {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ArxField: ").Append(ArxField).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  UseDefault: ").Append(UseDefault).Append("\n");
            sb.Append("  DefaultStringValue: ").Append(DefaultStringValue).Append("\n");
            sb.Append("  DefaultDateTimeValue: ").Append(DefaultDateTimeValue).Append("\n");
            sb.Append("  DefaultBooleanValue: ").Append(DefaultBooleanValue).Append("\n");
            sb.Append("  DefaultDoubleValue: ").Append(DefaultDoubleValue).Append("\n");
            sb.Append("  Multivalue: ").Append(Multivalue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IxCeSendingSettingsMappingDTO);
        }

        /// <summary>
        /// Returns true if IxCeSendingSettingsMappingDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of IxCeSendingSettingsMappingDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IxCeSendingSettingsMappingDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ArxField == input.ArxField ||
                    (this.ArxField != null &&
                    this.ArxField.Equals(input.ArxField))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    (this.ReadOnly != null &&
                    this.ReadOnly.Equals(input.ReadOnly))
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.UseDefault == input.UseDefault ||
                    (this.UseDefault != null &&
                    this.UseDefault.Equals(input.UseDefault))
                ) && 
                (
                    this.DefaultStringValue == input.DefaultStringValue ||
                    (this.DefaultStringValue != null &&
                    this.DefaultStringValue.Equals(input.DefaultStringValue))
                ) && 
                (
                    this.DefaultDateTimeValue == input.DefaultDateTimeValue ||
                    (this.DefaultDateTimeValue != null &&
                    this.DefaultDateTimeValue.Equals(input.DefaultDateTimeValue))
                ) && 
                (
                    this.DefaultBooleanValue == input.DefaultBooleanValue ||
                    (this.DefaultBooleanValue != null &&
                    this.DefaultBooleanValue.Equals(input.DefaultBooleanValue))
                ) && 
                (
                    this.DefaultDoubleValue == input.DefaultDoubleValue ||
                    (this.DefaultDoubleValue != null &&
                    this.DefaultDoubleValue.Equals(input.DefaultDoubleValue))
                ) && 
                (
                    this.Multivalue == input.Multivalue ||
                    (this.Multivalue != null &&
                    this.Multivalue.Equals(input.Multivalue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ArxField != null)
                    hashCode = hashCode * 59 + this.ArxField.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.ReadOnly != null)
                    hashCode = hashCode * 59 + this.ReadOnly.GetHashCode();
                if (this.FieldType != null)
                    hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.UseDefault != null)
                    hashCode = hashCode * 59 + this.UseDefault.GetHashCode();
                if (this.DefaultStringValue != null)
                    hashCode = hashCode * 59 + this.DefaultStringValue.GetHashCode();
                if (this.DefaultDateTimeValue != null)
                    hashCode = hashCode * 59 + this.DefaultDateTimeValue.GetHashCode();
                if (this.DefaultBooleanValue != null)
                    hashCode = hashCode * 59 + this.DefaultBooleanValue.GetHashCode();
                if (this.DefaultDoubleValue != null)
                    hashCode = hashCode * 59 + this.DefaultDoubleValue.GetHashCode();
                if (this.Multivalue != null)
                    hashCode = hashCode * 59 + this.Multivalue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
