/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class for active directory user
    /// </summary>
    [DataContract]
    public partial class ActiveDirectoryUserDTO :  IEquatable<ActiveDirectoryUserDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveDirectoryUserDTO" /> class.
        /// </summary>
        /// <param name="samAccountName">Sam Account Name.</param>
        /// <param name="userPrincipalName">User Principal Name.</param>
        /// <param name="givenName">Given Name.</param>
        /// <param name="cn">Cn.</param>
        /// <param name="fullName">FullName.</param>
        /// <param name="mail">Mail.</param>
        /// <param name="telephoneNumber">Telephone Number.</param>
        /// <param name="username">Username.</param>
        /// <param name="sn">Sn.</param>
        /// <param name="displayName">Display Name.</param>
        /// <param name="uid">Uid.</param>
        /// <param name="userid">User id.</param>
        public ActiveDirectoryUserDTO(string samAccountName = default(string), string userPrincipalName = default(string), string givenName = default(string), string cn = default(string), string fullName = default(string), string mail = default(string), string telephoneNumber = default(string), string username = default(string), string sn = default(string), string displayName = default(string), string uid = default(string), string userid = default(string))
        {
            this.SamAccountName = samAccountName;
            this.UserPrincipalName = userPrincipalName;
            this.GivenName = givenName;
            this.Cn = cn;
            this.FullName = fullName;
            this.Mail = mail;
            this.TelephoneNumber = telephoneNumber;
            this.Username = username;
            this.Sn = sn;
            this.DisplayName = displayName;
            this.Uid = uid;
            this.Userid = userid;
        }
        
        /// <summary>
        /// Sam Account Name
        /// </summary>
        /// <value>Sam Account Name</value>
        [DataMember(Name="samAccountName", EmitDefaultValue=false)]
        public string SamAccountName { get; set; }

        /// <summary>
        /// User Principal Name
        /// </summary>
        /// <value>User Principal Name</value>
        [DataMember(Name="userPrincipalName", EmitDefaultValue=false)]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// Given Name
        /// </summary>
        /// <value>Given Name</value>
        [DataMember(Name="givenName", EmitDefaultValue=false)]
        public string GivenName { get; set; }

        /// <summary>
        /// Cn
        /// </summary>
        /// <value>Cn</value>
        [DataMember(Name="cn", EmitDefaultValue=false)]
        public string Cn { get; set; }

        /// <summary>
        /// FullName
        /// </summary>
        /// <value>FullName</value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Mail
        /// </summary>
        /// <value>Mail</value>
        [DataMember(Name="mail", EmitDefaultValue=false)]
        public string Mail { get; set; }

        /// <summary>
        /// Telephone Number
        /// </summary>
        /// <value>Telephone Number</value>
        [DataMember(Name="telephoneNumber", EmitDefaultValue=false)]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// Username
        /// </summary>
        /// <value>Username</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Sn
        /// </summary>
        /// <value>Sn</value>
        [DataMember(Name="sn", EmitDefaultValue=false)]
        public string Sn { get; set; }

        /// <summary>
        /// Display Name
        /// </summary>
        /// <value>Display Name</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Uid
        /// </summary>
        /// <value>Uid</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// User id
        /// </summary>
        /// <value>User id</value>
        [DataMember(Name="userid", EmitDefaultValue=false)]
        public string Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiveDirectoryUserDTO {\n");
            sb.Append("  SamAccountName: ").Append(SamAccountName).Append("\n");
            sb.Append("  UserPrincipalName: ").Append(UserPrincipalName).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  Cn: ").Append(Cn).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Mail: ").Append(Mail).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Sn: ").Append(Sn).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActiveDirectoryUserDTO);
        }

        /// <summary>
        /// Returns true if ActiveDirectoryUserDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ActiveDirectoryUserDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiveDirectoryUserDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SamAccountName == input.SamAccountName ||
                    (this.SamAccountName != null &&
                    this.SamAccountName.Equals(input.SamAccountName))
                ) && 
                (
                    this.UserPrincipalName == input.UserPrincipalName ||
                    (this.UserPrincipalName != null &&
                    this.UserPrincipalName.Equals(input.UserPrincipalName))
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.Cn == input.Cn ||
                    (this.Cn != null &&
                    this.Cn.Equals(input.Cn))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Mail == input.Mail ||
                    (this.Mail != null &&
                    this.Mail.Equals(input.Mail))
                ) && 
                (
                    this.TelephoneNumber == input.TelephoneNumber ||
                    (this.TelephoneNumber != null &&
                    this.TelephoneNumber.Equals(input.TelephoneNumber))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Sn == input.Sn ||
                    (this.Sn != null &&
                    this.Sn.Equals(input.Sn))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.Userid == input.Userid ||
                    (this.Userid != null &&
                    this.Userid.Equals(input.Userid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SamAccountName != null)
                    hashCode = hashCode * 59 + this.SamAccountName.GetHashCode();
                if (this.UserPrincipalName != null)
                    hashCode = hashCode * 59 + this.UserPrincipalName.GetHashCode();
                if (this.GivenName != null)
                    hashCode = hashCode * 59 + this.GivenName.GetHashCode();
                if (this.Cn != null)
                    hashCode = hashCode * 59 + this.Cn.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Mail != null)
                    hashCode = hashCode * 59 + this.Mail.GetHashCode();
                if (this.TelephoneNumber != null)
                    hashCode = hashCode * 59 + this.TelephoneNumber.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Sn != null)
                    hashCode = hashCode * 59 + this.Sn.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Userid != null)
                    hashCode = hashCode * 59 + this.Userid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
