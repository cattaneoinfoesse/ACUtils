/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of the user password advanced criteria
    /// </summary>
    [DataContract]
    public partial class UserPasswordAdvancedCriteriaDTO :  IEquatable<UserPasswordAdvancedCriteriaDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPasswordAdvancedCriteriaDTO" /> class.
        /// </summary>
        /// <param name="expireDays">Days left to password expiration.</param>
        /// <param name="enableReusedPasswordCheck">Enable reused password chech.</param>
        /// <param name="notReusablePasswordTimes">Number of times after which the same password can be reused.</param>
        /// <param name="maxErrors">Maximum number of errors when typing the password.</param>
        /// <param name="lockDuration">Duration of login block.</param>
        public UserPasswordAdvancedCriteriaDTO(int? expireDays = default(int?), bool? enableReusedPasswordCheck = default(bool?), int? notReusablePasswordTimes = default(int?), int? maxErrors = default(int?), int? lockDuration = default(int?))
        {
            this.ExpireDays = expireDays;
            this.EnableReusedPasswordCheck = enableReusedPasswordCheck;
            this.NotReusablePasswordTimes = notReusablePasswordTimes;
            this.MaxErrors = maxErrors;
            this.LockDuration = lockDuration;
        }
        
        /// <summary>
        /// Days left to password expiration
        /// </summary>
        /// <value>Days left to password expiration</value>
        [DataMember(Name="expireDays", EmitDefaultValue=false)]
        public int? ExpireDays { get; set; }

        /// <summary>
        /// Enable reused password chech
        /// </summary>
        /// <value>Enable reused password chech</value>
        [DataMember(Name="enableReusedPasswordCheck", EmitDefaultValue=false)]
        public bool? EnableReusedPasswordCheck { get; set; }

        /// <summary>
        /// Number of times after which the same password can be reused
        /// </summary>
        /// <value>Number of times after which the same password can be reused</value>
        [DataMember(Name="notReusablePasswordTimes", EmitDefaultValue=false)]
        public int? NotReusablePasswordTimes { get; set; }

        /// <summary>
        /// Maximum number of errors when typing the password
        /// </summary>
        /// <value>Maximum number of errors when typing the password</value>
        [DataMember(Name="maxErrors", EmitDefaultValue=false)]
        public int? MaxErrors { get; set; }

        /// <summary>
        /// Duration of login block
        /// </summary>
        /// <value>Duration of login block</value>
        [DataMember(Name="lockDuration", EmitDefaultValue=false)]
        public int? LockDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPasswordAdvancedCriteriaDTO {\n");
            sb.Append("  ExpireDays: ").Append(ExpireDays).Append("\n");
            sb.Append("  EnableReusedPasswordCheck: ").Append(EnableReusedPasswordCheck).Append("\n");
            sb.Append("  NotReusablePasswordTimes: ").Append(NotReusablePasswordTimes).Append("\n");
            sb.Append("  MaxErrors: ").Append(MaxErrors).Append("\n");
            sb.Append("  LockDuration: ").Append(LockDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPasswordAdvancedCriteriaDTO);
        }

        /// <summary>
        /// Returns true if UserPasswordAdvancedCriteriaDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPasswordAdvancedCriteriaDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPasswordAdvancedCriteriaDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpireDays == input.ExpireDays ||
                    (this.ExpireDays != null &&
                    this.ExpireDays.Equals(input.ExpireDays))
                ) && 
                (
                    this.EnableReusedPasswordCheck == input.EnableReusedPasswordCheck ||
                    (this.EnableReusedPasswordCheck != null &&
                    this.EnableReusedPasswordCheck.Equals(input.EnableReusedPasswordCheck))
                ) && 
                (
                    this.NotReusablePasswordTimes == input.NotReusablePasswordTimes ||
                    (this.NotReusablePasswordTimes != null &&
                    this.NotReusablePasswordTimes.Equals(input.NotReusablePasswordTimes))
                ) && 
                (
                    this.MaxErrors == input.MaxErrors ||
                    (this.MaxErrors != null &&
                    this.MaxErrors.Equals(input.MaxErrors))
                ) && 
                (
                    this.LockDuration == input.LockDuration ||
                    (this.LockDuration != null &&
                    this.LockDuration.Equals(input.LockDuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpireDays != null)
                    hashCode = hashCode * 59 + this.ExpireDays.GetHashCode();
                if (this.EnableReusedPasswordCheck != null)
                    hashCode = hashCode * 59 + this.EnableReusedPasswordCheck.GetHashCode();
                if (this.NotReusablePasswordTimes != null)
                    hashCode = hashCode * 59 + this.NotReusablePasswordTimes.GetHashCode();
                if (this.MaxErrors != null)
                    hashCode = hashCode * 59 + this.MaxErrors.GetHashCode();
                if (this.LockDuration != null)
                    hashCode = hashCode * 59 + this.LockDuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
