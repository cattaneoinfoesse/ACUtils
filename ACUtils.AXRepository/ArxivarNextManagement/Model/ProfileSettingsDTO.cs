/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of the profile settings
    /// </summary>
    [DataContract]
    public partial class ProfileSettingsDTO :  IEquatable<ProfileSettingsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileSettingsDTO" /> class.
        /// </summary>
        /// <param name="defaultReadOnlyFileExtensions">List of file extensions that need be opened for reading only as default.</param>
        /// <param name="readOnlyFileExtensions">List of file extensions that can be opened for reading only.</param>
        /// <param name="documentsWritingSettings">Documents writing settings.</param>
        public ProfileSettingsDTO(List<string> defaultReadOnlyFileExtensions = default(List<string>), List<string> readOnlyFileExtensions = default(List<string>), DocumentsWritingSettingsDTO documentsWritingSettings = default(DocumentsWritingSettingsDTO))
        {
            this.DefaultReadOnlyFileExtensions = defaultReadOnlyFileExtensions;
            this.ReadOnlyFileExtensions = readOnlyFileExtensions;
            this.DocumentsWritingSettings = documentsWritingSettings;
        }
        
        /// <summary>
        /// List of file extensions that need be opened for reading only as default
        /// </summary>
        /// <value>List of file extensions that need be opened for reading only as default</value>
        [DataMember(Name="defaultReadOnlyFileExtensions", EmitDefaultValue=false)]
        public List<string> DefaultReadOnlyFileExtensions { get; set; }

        /// <summary>
        /// List of file extensions that can be opened for reading only
        /// </summary>
        /// <value>List of file extensions that can be opened for reading only</value>
        [DataMember(Name="readOnlyFileExtensions", EmitDefaultValue=false)]
        public List<string> ReadOnlyFileExtensions { get; set; }

        /// <summary>
        /// Documents writing settings
        /// </summary>
        /// <value>Documents writing settings</value>
        [DataMember(Name="documentsWritingSettings", EmitDefaultValue=false)]
        public DocumentsWritingSettingsDTO DocumentsWritingSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfileSettingsDTO {\n");
            sb.Append("  DefaultReadOnlyFileExtensions: ").Append(DefaultReadOnlyFileExtensions).Append("\n");
            sb.Append("  ReadOnlyFileExtensions: ").Append(ReadOnlyFileExtensions).Append("\n");
            sb.Append("  DocumentsWritingSettings: ").Append(DocumentsWritingSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileSettingsDTO);
        }

        /// <summary>
        /// Returns true if ProfileSettingsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileSettingsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultReadOnlyFileExtensions == input.DefaultReadOnlyFileExtensions ||
                    this.DefaultReadOnlyFileExtensions != null &&
                    this.DefaultReadOnlyFileExtensions.SequenceEqual(input.DefaultReadOnlyFileExtensions)
                ) && 
                (
                    this.ReadOnlyFileExtensions == input.ReadOnlyFileExtensions ||
                    this.ReadOnlyFileExtensions != null &&
                    this.ReadOnlyFileExtensions.SequenceEqual(input.ReadOnlyFileExtensions)
                ) && 
                (
                    this.DocumentsWritingSettings == input.DocumentsWritingSettings ||
                    (this.DocumentsWritingSettings != null &&
                    this.DocumentsWritingSettings.Equals(input.DocumentsWritingSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultReadOnlyFileExtensions != null)
                    hashCode = hashCode * 59 + this.DefaultReadOnlyFileExtensions.GetHashCode();
                if (this.ReadOnlyFileExtensions != null)
                    hashCode = hashCode * 59 + this.ReadOnlyFileExtensions.GetHashCode();
                if (this.DocumentsWritingSettings != null)
                    hashCode = hashCode * 59 + this.DocumentsWritingSettings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
