/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of logon provider configuration
    /// </summary>
    [DataContract]
    public partial class LogonProviderConfigDTO :  IEquatable<LogonProviderConfigDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogonProviderConfigDTO" /> class.
        /// </summary>
        /// <param name="id">Identifier.</param>
        /// <param name="description">Description.</param>
        /// <param name="iconB64">Icon in Base64.</param>
        /// <param name="isDefault">Is default provider.</param>
        /// <param name="visible">Is visible.</param>
        /// <param name="disabled">Is disabled.</param>
        /// <param name="implicitFlow">Implicit flow.</param>
        /// <param name="details">Configuration details.</param>
        public LogonProviderConfigDTO(string id = default(string), string description = default(string), string iconB64 = default(string), bool? isDefault = default(bool?), bool? visible = default(bool?), bool? disabled = default(bool?), bool? implicitFlow = default(bool?), List<LogonProviderConfigDetailBaseDTO> details = default(List<LogonProviderConfigDetailBaseDTO>))
        {
            this.Id = id;
            this.Description = description;
            this.IconB64 = iconB64;
            this.IsDefault = isDefault;
            this.Visible = visible;
            this.Disabled = disabled;
            this.ImplicitFlow = implicitFlow;
            this.Details = details;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Icon in Base64
        /// </summary>
        /// <value>Icon in Base64</value>
        [DataMember(Name="iconB64", EmitDefaultValue=false)]
        public string IconB64 { get; set; }

        /// <summary>
        /// Is default provider
        /// </summary>
        /// <value>Is default provider</value>
        [DataMember(Name="isDefault", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Is visible
        /// </summary>
        /// <value>Is visible</value>
        [DataMember(Name="visible", EmitDefaultValue=false)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Is disabled
        /// </summary>
        /// <value>Is disabled</value>
        [DataMember(Name="disabled", EmitDefaultValue=false)]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Implicit flow
        /// </summary>
        /// <value>Implicit flow</value>
        [DataMember(Name="implicitFlow", EmitDefaultValue=false)]
        public bool? ImplicitFlow { get; set; }

        /// <summary>
        /// Configuration details
        /// </summary>
        /// <value>Configuration details</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public List<LogonProviderConfigDetailBaseDTO> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogonProviderConfigDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IconB64: ").Append(IconB64).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  ImplicitFlow: ").Append(ImplicitFlow).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogonProviderConfigDTO);
        }

        /// <summary>
        /// Returns true if LogonProviderConfigDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of LogonProviderConfigDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogonProviderConfigDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IconB64 == input.IconB64 ||
                    (this.IconB64 != null &&
                    this.IconB64.Equals(input.IconB64))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    (this.IsDefault != null &&
                    this.IsDefault.Equals(input.IsDefault))
                ) && 
                (
                    this.Visible == input.Visible ||
                    (this.Visible != null &&
                    this.Visible.Equals(input.Visible))
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    (this.Disabled != null &&
                    this.Disabled.Equals(input.Disabled))
                ) && 
                (
                    this.ImplicitFlow == input.ImplicitFlow ||
                    (this.ImplicitFlow != null &&
                    this.ImplicitFlow.Equals(input.ImplicitFlow))
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IconB64 != null)
                    hashCode = hashCode * 59 + this.IconB64.GetHashCode();
                if (this.IsDefault != null)
                    hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                if (this.Visible != null)
                    hashCode = hashCode * 59 + this.Visible.GetHashCode();
                if (this.Disabled != null)
                    hashCode = hashCode * 59 + this.Disabled.GetHashCode();
                if (this.ImplicitFlow != null)
                    hashCode = hashCode * 59 + this.ImplicitFlow.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
