/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of Ix Business Unit
    /// </summary>
    [DataContract]
    public partial class IxBusinessUnitDTO :  IEquatable<IxBusinessUnitDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IxBusinessUnitDTO" /> class.
        /// </summary>
        /// <param name="id">Identifier.</param>
        /// <param name="name">Name.</param>
        /// <param name="description">Description.</param>
        /// <param name="isActive">Active.</param>
        /// <param name="activeFrom">Start date.</param>
        /// <param name="activeTo">End date.</param>
        /// <param name="type">Possible values:  0: Company  1: Individual  2: Association  3: Office  4: Freelance .</param>
        /// <param name="identifiers">Identifiers.</param>
        public IxBusinessUnitDTO(string id = default(string), string name = default(string), string description = default(string), bool? isActive = default(bool?), DateTime? activeFrom = default(DateTime?), DateTime? activeTo = default(DateTime?), int? type = default(int?), List<IxBusinessUnitIdentifierDTO> identifiers = default(List<IxBusinessUnitIdentifierDTO>))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.IsActive = isActive;
            this.ActiveFrom = activeFrom;
            this.ActiveTo = activeTo;
            this.Type = type;
            this.Identifiers = identifiers;
        }
        
        /// <summary>
        /// Identifier
        /// </summary>
        /// <value>Identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Active
        /// </summary>
        /// <value>Active</value>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        /// <value>Start date</value>
        [DataMember(Name="activeFrom", EmitDefaultValue=false)]
        public DateTime? ActiveFrom { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        /// <value>End date</value>
        [DataMember(Name="activeTo", EmitDefaultValue=false)]
        public DateTime? ActiveTo { get; set; }

        /// <summary>
        /// Possible values:  0: Company  1: Individual  2: Association  3: Office  4: Freelance 
        /// </summary>
        /// <value>Possible values:  0: Company  1: Individual  2: Association  3: Office  4: Freelance </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Identifiers
        /// </summary>
        /// <value>Identifiers</value>
        [DataMember(Name="identifiers", EmitDefaultValue=false)]
        public List<IxBusinessUnitIdentifierDTO> Identifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IxBusinessUnitDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  ActiveFrom: ").Append(ActiveFrom).Append("\n");
            sb.Append("  ActiveTo: ").Append(ActiveTo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IxBusinessUnitDTO);
        }

        /// <summary>
        /// Returns true if IxBusinessUnitDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of IxBusinessUnitDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IxBusinessUnitDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.ActiveFrom == input.ActiveFrom ||
                    (this.ActiveFrom != null &&
                    this.ActiveFrom.Equals(input.ActiveFrom))
                ) && 
                (
                    this.ActiveTo == input.ActiveTo ||
                    (this.ActiveTo != null &&
                    this.ActiveTo.Equals(input.ActiveTo))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.ActiveFrom != null)
                    hashCode = hashCode * 59 + this.ActiveFrom.GetHashCode();
                if (this.ActiveTo != null)
                    hashCode = hashCode * 59 + this.ActiveTo.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Identifiers != null)
                    hashCode = hashCode * 59 + this.Identifiers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
