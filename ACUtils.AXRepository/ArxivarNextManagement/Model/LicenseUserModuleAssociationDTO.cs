/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class for license user-module association update
    /// </summary>
    [DataContract]
    public partial class LicenseUserModuleAssociationDTO :  IEquatable<LicenseUserModuleAssociationDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseUserModuleAssociationDTO" /> class.
        /// </summary>
        /// <param name="module">Module.</param>
        /// <param name="userId">User identifier.</param>
        /// <param name="enabled">Boolean that represents is user is enabled for specified modules.</param>
        public LicenseUserModuleAssociationDTO(string module = default(string), int? userId = default(int?), bool? enabled = default(bool?))
        {
            this.Module = module;
            this.UserId = userId;
            this.Enabled = enabled;
        }
        
        /// <summary>
        /// Module
        /// </summary>
        /// <value>Module</value>
        [DataMember(Name="module", EmitDefaultValue=false)]
        public string Module { get; set; }

        /// <summary>
        /// User identifier
        /// </summary>
        /// <value>User identifier</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Boolean that represents is user is enabled for specified modules
        /// </summary>
        /// <value>Boolean that represents is user is enabled for specified modules</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseUserModuleAssociationDTO {\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenseUserModuleAssociationDTO);
        }

        /// <summary>
        /// Returns true if LicenseUserModuleAssociationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseUserModuleAssociationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseUserModuleAssociationDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Module == input.Module ||
                    (this.Module != null &&
                    this.Module.Equals(input.Module))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Module != null)
                    hashCode = hashCode * 59 + this.Module.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
