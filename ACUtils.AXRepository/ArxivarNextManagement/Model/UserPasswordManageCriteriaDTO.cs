/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of the user password manage criteria
    /// </summary>
    [DataContract]
    public partial class UserPasswordManageCriteriaDTO :  IEquatable<UserPasswordManageCriteriaDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPasswordManageCriteriaDTO" /> class.
        /// </summary>
        /// <param name="minPasswordLength">Minimum password length.</param>
        /// <param name="maxPasswordLength">Maximum password length.</param>
        /// <param name="minSpecialCharactersNumber">Minimum number of non alphanumeric characters.</param>
        public UserPasswordManageCriteriaDTO(int? minPasswordLength = default(int?), int? maxPasswordLength = default(int?), int? minSpecialCharactersNumber = default(int?))
        {
            this.MinPasswordLength = minPasswordLength;
            this.MaxPasswordLength = maxPasswordLength;
            this.MinSpecialCharactersNumber = minSpecialCharactersNumber;
        }
        
        /// <summary>
        /// Minimum password length
        /// </summary>
        /// <value>Minimum password length</value>
        [DataMember(Name="minPasswordLength", EmitDefaultValue=false)]
        public int? MinPasswordLength { get; set; }

        /// <summary>
        /// Maximum password length
        /// </summary>
        /// <value>Maximum password length</value>
        [DataMember(Name="maxPasswordLength", EmitDefaultValue=false)]
        public int? MaxPasswordLength { get; set; }

        /// <summary>
        /// Minimum number of non alphanumeric characters
        /// </summary>
        /// <value>Minimum number of non alphanumeric characters</value>
        [DataMember(Name="minSpecialCharactersNumber", EmitDefaultValue=false)]
        public int? MinSpecialCharactersNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPasswordManageCriteriaDTO {\n");
            sb.Append("  MinPasswordLength: ").Append(MinPasswordLength).Append("\n");
            sb.Append("  MaxPasswordLength: ").Append(MaxPasswordLength).Append("\n");
            sb.Append("  MinSpecialCharactersNumber: ").Append(MinSpecialCharactersNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPasswordManageCriteriaDTO);
        }

        /// <summary>
        /// Returns true if UserPasswordManageCriteriaDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPasswordManageCriteriaDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPasswordManageCriteriaDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MinPasswordLength == input.MinPasswordLength ||
                    (this.MinPasswordLength != null &&
                    this.MinPasswordLength.Equals(input.MinPasswordLength))
                ) && 
                (
                    this.MaxPasswordLength == input.MaxPasswordLength ||
                    (this.MaxPasswordLength != null &&
                    this.MaxPasswordLength.Equals(input.MaxPasswordLength))
                ) && 
                (
                    this.MinSpecialCharactersNumber == input.MinSpecialCharactersNumber ||
                    (this.MinSpecialCharactersNumber != null &&
                    this.MinSpecialCharactersNumber.Equals(input.MinSpecialCharactersNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MinPasswordLength != null)
                    hashCode = hashCode * 59 + this.MinPasswordLength.GetHashCode();
                if (this.MaxPasswordLength != null)
                    hashCode = hashCode * 59 + this.MaxPasswordLength.GetHashCode();
                if (this.MinSpecialCharactersNumber != null)
                    hashCode = hashCode * 59 + this.MinSpecialCharactersNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
