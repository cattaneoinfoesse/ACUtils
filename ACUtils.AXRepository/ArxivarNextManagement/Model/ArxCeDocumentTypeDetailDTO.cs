/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of ArxCe document type detail
    /// </summary>
    [DataContract]
    public partial class ArxCeDocumentTypeDetailDTO :  IEquatable<ArxCeDocumentTypeDetailDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxCeDocumentTypeDetailDTO" /> class.
        /// </summary>
        /// <param name="fields">Fields.</param>
        /// <param name="breakingFields">Breaking fields.</param>
        /// <param name="numerationField">Numeration field.</param>
        /// <param name="numerationFieldExtraInfo">Numeration field additional info.</param>
        /// <param name="numerationFieldAlgorithm">Possible values:  0: None  1: RegularExpression .</param>
        /// <param name="signatureRequired">Signature required.</param>
        /// <param name="markingRequired">Marking required.</param>
        /// <param name="notes">Notes.</param>
        /// <param name="timeControl">Time control.</param>
        /// <param name="systemFields">System fields.</param>
        /// <param name="markingSettings">Possible values:  0: ErrorIfNotMarked  1: MarkIfNotMarked  2: None .</param>
        /// <param name="signatureSettings">Possible values:  0: ErrorIfNotSigned  1: SignIfNotSigned  2: SignIfBadSigned  3: None .</param>
        public ArxCeDocumentTypeDetailDTO(List<ArxCeFieldDTO> fields = default(List<ArxCeFieldDTO>), List<string> breakingFields = default(List<string>), string numerationField = default(string), string numerationFieldExtraInfo = default(string), int? numerationFieldAlgorithm = default(int?), bool? signatureRequired = default(bool?), bool? markingRequired = default(bool?), string notes = default(string), ArxCeTimeControlDTO timeControl = default(ArxCeTimeControlDTO), List<ArxCeFieldDTO> systemFields = default(List<ArxCeFieldDTO>), int? markingSettings = default(int?), int? signatureSettings = default(int?))
        {
            this.Fields = fields;
            this.BreakingFields = breakingFields;
            this.NumerationField = numerationField;
            this.NumerationFieldExtraInfo = numerationFieldExtraInfo;
            this.NumerationFieldAlgorithm = numerationFieldAlgorithm;
            this.SignatureRequired = signatureRequired;
            this.MarkingRequired = markingRequired;
            this.Notes = notes;
            this.TimeControl = timeControl;
            this.SystemFields = systemFields;
            this.MarkingSettings = markingSettings;
            this.SignatureSettings = signatureSettings;
        }
        
        /// <summary>
        /// Fields
        /// </summary>
        /// <value>Fields</value>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<ArxCeFieldDTO> Fields { get; set; }

        /// <summary>
        /// Breaking fields
        /// </summary>
        /// <value>Breaking fields</value>
        [DataMember(Name="breakingFields", EmitDefaultValue=false)]
        public List<string> BreakingFields { get; set; }

        /// <summary>
        /// Numeration field
        /// </summary>
        /// <value>Numeration field</value>
        [DataMember(Name="numerationField", EmitDefaultValue=false)]
        public string NumerationField { get; set; }

        /// <summary>
        /// Numeration field additional info
        /// </summary>
        /// <value>Numeration field additional info</value>
        [DataMember(Name="numerationFieldExtraInfo", EmitDefaultValue=false)]
        public string NumerationFieldExtraInfo { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: RegularExpression 
        /// </summary>
        /// <value>Possible values:  0: None  1: RegularExpression </value>
        [DataMember(Name="numerationFieldAlgorithm", EmitDefaultValue=false)]
        public int? NumerationFieldAlgorithm { get; set; }

        /// <summary>
        /// Signature required
        /// </summary>
        /// <value>Signature required</value>
        [DataMember(Name="signatureRequired", EmitDefaultValue=false)]
        public bool? SignatureRequired { get; set; }

        /// <summary>
        /// Marking required
        /// </summary>
        /// <value>Marking required</value>
        [DataMember(Name="markingRequired", EmitDefaultValue=false)]
        public bool? MarkingRequired { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        /// <value>Notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Time control
        /// </summary>
        /// <value>Time control</value>
        [DataMember(Name="timeControl", EmitDefaultValue=false)]
        public ArxCeTimeControlDTO TimeControl { get; set; }

        /// <summary>
        /// System fields
        /// </summary>
        /// <value>System fields</value>
        [DataMember(Name="systemFields", EmitDefaultValue=false)]
        public List<ArxCeFieldDTO> SystemFields { get; set; }

        /// <summary>
        /// Possible values:  0: ErrorIfNotMarked  1: MarkIfNotMarked  2: None 
        /// </summary>
        /// <value>Possible values:  0: ErrorIfNotMarked  1: MarkIfNotMarked  2: None </value>
        [DataMember(Name="markingSettings", EmitDefaultValue=false)]
        public int? MarkingSettings { get; set; }

        /// <summary>
        /// Possible values:  0: ErrorIfNotSigned  1: SignIfNotSigned  2: SignIfBadSigned  3: None 
        /// </summary>
        /// <value>Possible values:  0: ErrorIfNotSigned  1: SignIfNotSigned  2: SignIfBadSigned  3: None </value>
        [DataMember(Name="signatureSettings", EmitDefaultValue=false)]
        public int? SignatureSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxCeDocumentTypeDetailDTO {\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  BreakingFields: ").Append(BreakingFields).Append("\n");
            sb.Append("  NumerationField: ").Append(NumerationField).Append("\n");
            sb.Append("  NumerationFieldExtraInfo: ").Append(NumerationFieldExtraInfo).Append("\n");
            sb.Append("  NumerationFieldAlgorithm: ").Append(NumerationFieldAlgorithm).Append("\n");
            sb.Append("  SignatureRequired: ").Append(SignatureRequired).Append("\n");
            sb.Append("  MarkingRequired: ").Append(MarkingRequired).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  TimeControl: ").Append(TimeControl).Append("\n");
            sb.Append("  SystemFields: ").Append(SystemFields).Append("\n");
            sb.Append("  MarkingSettings: ").Append(MarkingSettings).Append("\n");
            sb.Append("  SignatureSettings: ").Append(SignatureSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxCeDocumentTypeDetailDTO);
        }

        /// <summary>
        /// Returns true if ArxCeDocumentTypeDetailDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxCeDocumentTypeDetailDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxCeDocumentTypeDetailDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.BreakingFields == input.BreakingFields ||
                    this.BreakingFields != null &&
                    this.BreakingFields.SequenceEqual(input.BreakingFields)
                ) && 
                (
                    this.NumerationField == input.NumerationField ||
                    (this.NumerationField != null &&
                    this.NumerationField.Equals(input.NumerationField))
                ) && 
                (
                    this.NumerationFieldExtraInfo == input.NumerationFieldExtraInfo ||
                    (this.NumerationFieldExtraInfo != null &&
                    this.NumerationFieldExtraInfo.Equals(input.NumerationFieldExtraInfo))
                ) && 
                (
                    this.NumerationFieldAlgorithm == input.NumerationFieldAlgorithm ||
                    (this.NumerationFieldAlgorithm != null &&
                    this.NumerationFieldAlgorithm.Equals(input.NumerationFieldAlgorithm))
                ) && 
                (
                    this.SignatureRequired == input.SignatureRequired ||
                    (this.SignatureRequired != null &&
                    this.SignatureRequired.Equals(input.SignatureRequired))
                ) && 
                (
                    this.MarkingRequired == input.MarkingRequired ||
                    (this.MarkingRequired != null &&
                    this.MarkingRequired.Equals(input.MarkingRequired))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.TimeControl == input.TimeControl ||
                    (this.TimeControl != null &&
                    this.TimeControl.Equals(input.TimeControl))
                ) && 
                (
                    this.SystemFields == input.SystemFields ||
                    this.SystemFields != null &&
                    this.SystemFields.SequenceEqual(input.SystemFields)
                ) && 
                (
                    this.MarkingSettings == input.MarkingSettings ||
                    (this.MarkingSettings != null &&
                    this.MarkingSettings.Equals(input.MarkingSettings))
                ) && 
                (
                    this.SignatureSettings == input.SignatureSettings ||
                    (this.SignatureSettings != null &&
                    this.SignatureSettings.Equals(input.SignatureSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.BreakingFields != null)
                    hashCode = hashCode * 59 + this.BreakingFields.GetHashCode();
                if (this.NumerationField != null)
                    hashCode = hashCode * 59 + this.NumerationField.GetHashCode();
                if (this.NumerationFieldExtraInfo != null)
                    hashCode = hashCode * 59 + this.NumerationFieldExtraInfo.GetHashCode();
                if (this.NumerationFieldAlgorithm != null)
                    hashCode = hashCode * 59 + this.NumerationFieldAlgorithm.GetHashCode();
                if (this.SignatureRequired != null)
                    hashCode = hashCode * 59 + this.SignatureRequired.GetHashCode();
                if (this.MarkingRequired != null)
                    hashCode = hashCode * 59 + this.MarkingRequired.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.TimeControl != null)
                    hashCode = hashCode * 59 + this.TimeControl.GetHashCode();
                if (this.SystemFields != null)
                    hashCode = hashCode * 59 + this.SystemFields.GetHashCode();
                if (this.MarkingSettings != null)
                    hashCode = hashCode * 59 + this.MarkingSettings.GetHashCode();
                if (this.SignatureSettings != null)
                    hashCode = hashCode * 59 + this.SignatureSettings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
