/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of ArxCe sending settings details
    /// </summary>
    [DataContract]
    public partial class ArxCeSendingSettingsDetailDTO :  IEquatable<ArxCeSendingSettingsDetailDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxCeSendingSettingsDetailDTO" /> class.
        /// </summary>
        /// <param name="arxCeDocumentType">ArxCe Document type.</param>
        /// <param name="numerationField">Search.</param>
        /// <param name="breakingFields">Search.</param>
        /// <param name="signatureRequired">Search.</param>
        /// <param name="markingRequired">Required marking.</param>
        /// <param name="markingOption">Possible values:  0: ErrorIfNotMarked  1: MarkIfNotMarked  2: None .</param>
        /// <param name="signatureOption">Possible values:  0: ErrorIfNotSigned  1: SignIfNotSigned  2: SignIfBadSigned  3: None .</param>
        /// <param name="mapping">Search.</param>
        /// <param name="credentials">Credentials for document type.</param>
        public ArxCeSendingSettingsDetailDTO(ArxCeDocumentTypeDTO arxCeDocumentType = default(ArxCeDocumentTypeDTO), string numerationField = default(string), List<string> breakingFields = default(List<string>), bool? signatureRequired = default(bool?), bool? markingRequired = default(bool?), int? markingOption = default(int?), int? signatureOption = default(int?), List<ArxCeSendingSettingsMappingDTO> mapping = default(List<ArxCeSendingSettingsMappingDTO>), ArxCeCredentialsDTO credentials = default(ArxCeCredentialsDTO))
        {
            this.ArxCeDocumentType = arxCeDocumentType;
            this.NumerationField = numerationField;
            this.BreakingFields = breakingFields;
            this.SignatureRequired = signatureRequired;
            this.MarkingRequired = markingRequired;
            this.MarkingOption = markingOption;
            this.SignatureOption = signatureOption;
            this.Mapping = mapping;
            this.Credentials = credentials;
        }
        
        /// <summary>
        /// ArxCe Document type
        /// </summary>
        /// <value>ArxCe Document type</value>
        [DataMember(Name="arxCeDocumentType", EmitDefaultValue=false)]
        public ArxCeDocumentTypeDTO ArxCeDocumentType { get; set; }

        /// <summary>
        /// Search
        /// </summary>
        /// <value>Search</value>
        [DataMember(Name="numerationField", EmitDefaultValue=false)]
        public string NumerationField { get; set; }

        /// <summary>
        /// Search
        /// </summary>
        /// <value>Search</value>
        [DataMember(Name="breakingFields", EmitDefaultValue=false)]
        public List<string> BreakingFields { get; set; }

        /// <summary>
        /// Search
        /// </summary>
        /// <value>Search</value>
        [DataMember(Name="signatureRequired", EmitDefaultValue=false)]
        public bool? SignatureRequired { get; set; }

        /// <summary>
        /// Required marking
        /// </summary>
        /// <value>Required marking</value>
        [DataMember(Name="markingRequired", EmitDefaultValue=false)]
        public bool? MarkingRequired { get; set; }

        /// <summary>
        /// Possible values:  0: ErrorIfNotMarked  1: MarkIfNotMarked  2: None 
        /// </summary>
        /// <value>Possible values:  0: ErrorIfNotMarked  1: MarkIfNotMarked  2: None </value>
        [DataMember(Name="markingOption", EmitDefaultValue=false)]
        public int? MarkingOption { get; set; }

        /// <summary>
        /// Possible values:  0: ErrorIfNotSigned  1: SignIfNotSigned  2: SignIfBadSigned  3: None 
        /// </summary>
        /// <value>Possible values:  0: ErrorIfNotSigned  1: SignIfNotSigned  2: SignIfBadSigned  3: None </value>
        [DataMember(Name="signatureOption", EmitDefaultValue=false)]
        public int? SignatureOption { get; set; }

        /// <summary>
        /// Search
        /// </summary>
        /// <value>Search</value>
        [DataMember(Name="mapping", EmitDefaultValue=false)]
        public List<ArxCeSendingSettingsMappingDTO> Mapping { get; set; }

        /// <summary>
        /// Credentials for document type
        /// </summary>
        /// <value>Credentials for document type</value>
        [DataMember(Name="credentials", EmitDefaultValue=false)]
        public ArxCeCredentialsDTO Credentials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxCeSendingSettingsDetailDTO {\n");
            sb.Append("  ArxCeDocumentType: ").Append(ArxCeDocumentType).Append("\n");
            sb.Append("  NumerationField: ").Append(NumerationField).Append("\n");
            sb.Append("  BreakingFields: ").Append(BreakingFields).Append("\n");
            sb.Append("  SignatureRequired: ").Append(SignatureRequired).Append("\n");
            sb.Append("  MarkingRequired: ").Append(MarkingRequired).Append("\n");
            sb.Append("  MarkingOption: ").Append(MarkingOption).Append("\n");
            sb.Append("  SignatureOption: ").Append(SignatureOption).Append("\n");
            sb.Append("  Mapping: ").Append(Mapping).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxCeSendingSettingsDetailDTO);
        }

        /// <summary>
        /// Returns true if ArxCeSendingSettingsDetailDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxCeSendingSettingsDetailDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxCeSendingSettingsDetailDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArxCeDocumentType == input.ArxCeDocumentType ||
                    (this.ArxCeDocumentType != null &&
                    this.ArxCeDocumentType.Equals(input.ArxCeDocumentType))
                ) && 
                (
                    this.NumerationField == input.NumerationField ||
                    (this.NumerationField != null &&
                    this.NumerationField.Equals(input.NumerationField))
                ) && 
                (
                    this.BreakingFields == input.BreakingFields ||
                    this.BreakingFields != null &&
                    this.BreakingFields.SequenceEqual(input.BreakingFields)
                ) && 
                (
                    this.SignatureRequired == input.SignatureRequired ||
                    (this.SignatureRequired != null &&
                    this.SignatureRequired.Equals(input.SignatureRequired))
                ) && 
                (
                    this.MarkingRequired == input.MarkingRequired ||
                    (this.MarkingRequired != null &&
                    this.MarkingRequired.Equals(input.MarkingRequired))
                ) && 
                (
                    this.MarkingOption == input.MarkingOption ||
                    (this.MarkingOption != null &&
                    this.MarkingOption.Equals(input.MarkingOption))
                ) && 
                (
                    this.SignatureOption == input.SignatureOption ||
                    (this.SignatureOption != null &&
                    this.SignatureOption.Equals(input.SignatureOption))
                ) && 
                (
                    this.Mapping == input.Mapping ||
                    this.Mapping != null &&
                    this.Mapping.SequenceEqual(input.Mapping)
                ) && 
                (
                    this.Credentials == input.Credentials ||
                    (this.Credentials != null &&
                    this.Credentials.Equals(input.Credentials))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArxCeDocumentType != null)
                    hashCode = hashCode * 59 + this.ArxCeDocumentType.GetHashCode();
                if (this.NumerationField != null)
                    hashCode = hashCode * 59 + this.NumerationField.GetHashCode();
                if (this.BreakingFields != null)
                    hashCode = hashCode * 59 + this.BreakingFields.GetHashCode();
                if (this.SignatureRequired != null)
                    hashCode = hashCode * 59 + this.SignatureRequired.GetHashCode();
                if (this.MarkingRequired != null)
                    hashCode = hashCode * 59 + this.MarkingRequired.GetHashCode();
                if (this.MarkingOption != null)
                    hashCode = hashCode * 59 + this.MarkingOption.GetHashCode();
                if (this.SignatureOption != null)
                    hashCode = hashCode * 59 + this.SignatureOption.GetHashCode();
                if (this.Mapping != null)
                    hashCode = hashCode * 59 + this.Mapping.GetHashCode();
                if (this.Credentials != null)
                    hashCode = hashCode * 59 + this.Credentials.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
