/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Class of IX-FE receiving settings mapping
    /// </summary>
    [DataContract]
    public partial class IxFeReceivingMappingDTO :  IEquatable<IxFeReceivingMappingDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IxFeReceivingMappingDTO" /> class.
        /// </summary>
        /// <param name="context">Possible values:  0: File  1: Invoice  2: NotificationSending  3: NotificationReceiving .</param>
        /// <param name="arxField">Arxivar field.</param>
        /// <param name="ixField">IX-FE field.</param>
        public IxFeReceivingMappingDTO(int? context = default(int?), FieldManagementDTO arxField = default(FieldManagementDTO), IxFeFieldDTO ixField = default(IxFeFieldDTO))
        {
            this.Context = context;
            this.ArxField = arxField;
            this.IxField = ixField;
        }
        
        /// <summary>
        /// Possible values:  0: File  1: Invoice  2: NotificationSending  3: NotificationReceiving 
        /// </summary>
        /// <value>Possible values:  0: File  1: Invoice  2: NotificationSending  3: NotificationReceiving </value>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public int? Context { get; set; }

        /// <summary>
        /// Arxivar field
        /// </summary>
        /// <value>Arxivar field</value>
        [DataMember(Name="arxField", EmitDefaultValue=false)]
        public FieldManagementDTO ArxField { get; set; }

        /// <summary>
        /// IX-FE field
        /// </summary>
        /// <value>IX-FE field</value>
        [DataMember(Name="ixField", EmitDefaultValue=false)]
        public IxFeFieldDTO IxField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IxFeReceivingMappingDTO {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  ArxField: ").Append(ArxField).Append("\n");
            sb.Append("  IxField: ").Append(IxField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IxFeReceivingMappingDTO);
        }

        /// <summary>
        /// Returns true if IxFeReceivingMappingDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of IxFeReceivingMappingDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IxFeReceivingMappingDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.ArxField == input.ArxField ||
                    (this.ArxField != null &&
                    this.ArxField.Equals(input.ArxField))
                ) && 
                (
                    this.IxField == input.IxField ||
                    (this.IxField != null &&
                    this.IxField.Equals(input.IxField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.ArxField != null)
                    hashCode = hashCode * 59 + this.ArxField.GetHashCode();
                if (this.IxField != null)
                    hashCode = hashCode * 59 + this.IxField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
