/* 
 * WebAPI - Area Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: management
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ACUtils.AXRepository.ArxivarNextManagement.Client.SwaggerDateConverter;

namespace ACUtils.AXRepository.ArxivarNextManagement.Model
{
    /// <summary>
    /// Sign Flow configuration status
    /// </summary>
    [DataContract]
    public partial class ArxESignConfigurationStatusDto :  IEquatable<ArxESignConfigurationStatusDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArxESignConfigurationStatusDto" /> class.
        /// </summary>
        /// <param name="licenseConfiguration">Exists a configuration record for Sign Flow and ApiBaseUrlLicense/ApiTokenLicense are set.</param>
        /// <param name="licenseModule">The license contains the SIGNFLOW module.</param>
        /// <param name="secureStorageConfigured">Secure storage is configured.</param>
        public ArxESignConfigurationStatusDto(bool? licenseConfiguration = default(bool?), bool? licenseModule = default(bool?), bool? secureStorageConfigured = default(bool?))
        {
            this.LicenseConfiguration = licenseConfiguration;
            this.LicenseModule = licenseModule;
            this.SecureStorageConfigured = secureStorageConfigured;
        }
        
        /// <summary>
        /// Exists a configuration record for Sign Flow and ApiBaseUrlLicense/ApiTokenLicense are set
        /// </summary>
        /// <value>Exists a configuration record for Sign Flow and ApiBaseUrlLicense/ApiTokenLicense are set</value>
        [DataMember(Name="licenseConfiguration", EmitDefaultValue=false)]
        public bool? LicenseConfiguration { get; set; }

        /// <summary>
        /// The license contains the SIGNFLOW module
        /// </summary>
        /// <value>The license contains the SIGNFLOW module</value>
        [DataMember(Name="licenseModule", EmitDefaultValue=false)]
        public bool? LicenseModule { get; set; }

        /// <summary>
        /// Secure storage is configured
        /// </summary>
        /// <value>Secure storage is configured</value>
        [DataMember(Name="secureStorageConfigured", EmitDefaultValue=false)]
        public bool? SecureStorageConfigured { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArxESignConfigurationStatusDto {\n");
            sb.Append("  LicenseConfiguration: ").Append(LicenseConfiguration).Append("\n");
            sb.Append("  LicenseModule: ").Append(LicenseModule).Append("\n");
            sb.Append("  SecureStorageConfigured: ").Append(SecureStorageConfigured).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArxESignConfigurationStatusDto);
        }

        /// <summary>
        /// Returns true if ArxESignConfigurationStatusDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ArxESignConfigurationStatusDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArxESignConfigurationStatusDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LicenseConfiguration == input.LicenseConfiguration ||
                    (this.LicenseConfiguration != null &&
                    this.LicenseConfiguration.Equals(input.LicenseConfiguration))
                ) && 
                (
                    this.LicenseModule == input.LicenseModule ||
                    (this.LicenseModule != null &&
                    this.LicenseModule.Equals(input.LicenseModule))
                ) && 
                (
                    this.SecureStorageConfigured == input.SecureStorageConfigured ||
                    (this.SecureStorageConfigured != null &&
                    this.SecureStorageConfigured.Equals(input.SecureStorageConfigured))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LicenseConfiguration != null)
                    hashCode = hashCode * 59 + this.LicenseConfiguration.GetHashCode();
                if (this.LicenseModule != null)
                    hashCode = hashCode * 59 + this.LicenseModule.GetHashCode();
                if (this.SecureStorageConfigured != null)
                    hashCode = hashCode * 59 + this.SecureStorageConfigured.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
